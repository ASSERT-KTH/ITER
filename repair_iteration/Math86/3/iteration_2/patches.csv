bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  LTData[i]  =  Math.sqrt(lTData[i].getMaxDelta(),  lJ[i]);  [CE]  cannot  find  symbol  LTData  [FE]                AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  LTData[i]  =  Math.sqrt(lTData[i].getMaxDelta(),  lJ[i]);  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	LTData[i]  =  Math.sqrt(lTData[i].getMaxDelta(),  lJ[i]);	  lTData[i]    =    Math.sqrt(lTData[i].getMaxDelta(),    lJ[i]);    	non-compiled	[CE]  cannot  find  symbol  LTData	12	None	replace
2	[BUG]  [BUGGY]  LJI[i]  =  Math.sqrt(lJ[i]  -  1);  [CE]  cannot  find  symbol  LJI  [FE]              AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  LJI[i]  =  Math.sqrt(lJ[i]  -  1);  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	LJI[i]  =  Math.sqrt(lJ[i]  -  1);	  LJI[i]    =    Math.sqrt(lJ[i]);    	non-compiled	[CE]  cannot  find  symbol  LJI	45	None	replace
3	[BUG]  [BUGGY]  LJI[i]  =  Math.sqrt(lJ[i]  +  1);  [CE]  cannot  find  symbol  LJI  [FE]                AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  LJI[i]  =  Math.sqrt(lJ[i]  +  1);  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	LJI[i]  =  Math.sqrt(lJ[i]  +  1);	  LJI[i]    =    Math.sqrt(lJ[i]);    	non-compiled	[CE]  cannot  find  symbol  LJI	45	None	replace
4	[BUG]  [BUGGY]  lJ[i]  =  Math.sqrt(lJ[i]);  [CE]  cannot  find  symbol  lJ  [FE]                  AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  lJ[i]  =  Math.sqrt(lJ[i]);  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	lJ[i]  =  Math.sqrt(lJ[i]);	  LJI[i]    =    Math.sqrt(lJ[i]);    	non-compiled	[CE]  cannot  find  symbol  lJ	45	None	replace
5	[BUG]  [BUGGY]  lTData[i]  =  Math.sqrt(lTData[i].getMaxDelta(),  order);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  lTData[i]  =  Math.sqrt(lTData[i].getMaxDelta(),  order);  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	lTData[i]  =  Math.sqrt(lTData[i].getMaxDelta(),  order);	  lTData[i]    =    Math.sqrt(lTData[i].getMaxDelta(),    maxDelta);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
6	[BUG]  [BUGGY]  LTData[i]  =  Math.sqrt(lTData[i].getMaxDelta(),  maxDelta);  [CE]  cannot  find  symbol  LTData  [FE]                AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  LTData[i]  =  Math.sqrt(lTData[i].getMaxDelta(),  maxDelta);  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	LTData[i]  =  Math.sqrt(lTData[i].getMaxDelta(),  maxDelta);	  lTData[i]    =    Math.sqrt(lTData[i].getMaxDelta(),    maxDelta);    	non-compiled	[CE]  cannot  find  symbol  LTData	11	None	replace
7	[BUG]  [BUGGY]  lTData[i]  =  Math.sqrt(lTData[i],  lJ.getMaxDelta());  [CE]  cannot  find  symbol  lJ  [FE]              AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  lTData[i]  =  Math.sqrt(lTData[i],  lJ.getMaxDelta());  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	lTData[i]  =  Math.sqrt(lTData[i],  lJ.getMaxDelta());	  lTData[i]    =    Math.sqrt(lTData[i],    lJI.getMaxDelta());    	non-compiled	[CE]  cannot  find  symbol  lJ	37	None	replace
8	[BUG]  [BUGGY]  LTData[i]  =  Math.sqrt(lTData[i],  lJ.getMaxDelta());  [CE]  cannot  find  symbol  LTData  [FE]                AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  LTData[i]  =  Math.sqrt(lTData[i],  lJ.getMaxDelta());  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	LTData[i]  =  Math.sqrt(lTData[i],  lJ.getMaxDelta());	  lTData[i]    =    Math.sqrt(lTData[i],    lJI.getMaxDelta());    	non-compiled	[CE]  cannot  find  symbol  LTData	37	None	replace
9	[BUG]  [BUGGY]  final  double[]  ltI  =  lJ[i]  +  1;  [CE]  cannot  find  symbol  lJ  [FE]                AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  ltI  =  lJ[i]  +  1;  [BUGGY]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[]  ltI  =  lJ[i]  +  1;	  final    double[]    ltI    =    ltData[i]    +    1;    	non-compiled	[CE]  cannot  find  symbol  lJ	42	None	replace
10	[BUG]  [BUGGY]  final  double[]  ltI  =  ltData[i]  *  1;  [CE]  cannot  find  symbol  ltData  [FE]                  AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  ltI  =  ltData[i]  *  1;  [BUGGY]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[]  ltI  =  ltData[i]  *  1;	  final    double[]    ltI    =    ltData[i]    +    1;    	non-compiled	[CE]  cannot  find  symbol  ltData	42	None	replace
11	[BUG]  [BUGGY]  final  double[][]  lTData  =  matrix.sqrt(lTData[i],  relativeSymmetryThreshold);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[][]  lTData  =  matrix.sqrt(lTData[i],  relativeSymmetryThreshold);  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[][]  lTData  =  matrix.sqrt(lTData[i],  relativeSymmetryThreshold);	  final    double[][]    lTData    =    matrix.sqrt(lTData[i],    computeSymmetryThreshold);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
12	[BUG]  [BUGGY]  final  double[][]  lTData  =  matrix.sqrt(lTData[i],  absolutePositivityThreshold);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[][]  lTData  =  matrix.sqrt(lTData[i],  absolutePositivityThreshold);  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[][]  lTData  =  matrix.sqrt(lTData[i],  absolutePositivityThreshold);	  final    double[][]    lTData    =    matrix.sqrt(lTData[i],    computeSymmetryThreshold);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
13	[BUG]  [BUGGY]  lTData[i]  =  Math.sqrt(lTData[i],  lJ[i].doubleValue());  [CE]  cannot  find  symbol  lJ  [FE]                AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  lTData[i]  =  Math.sqrt(lTData[i],  lJ[i].doubleValue());  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	lTData[i]  =  Math.sqrt(lTData[i],  lJ[i].doubleValue());	  lTData[i]    =    Math.sqrt(lTData[i],    lJI[i].doubleValue());    	non-compiled	[CE]  cannot  find  symbol  lJ	40	None	replace
14	[BUG]  [BUGGY]  LTData[i]  =  Math.sqrt(lTData[i],  lJ[i].doubleValue());  [CE]  cannot  find  symbol  LTData  [FE]                  AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  LTData[i]  =  Math.sqrt(lTData[i],  lJ[i].doubleValue());  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	LTData[i]  =  Math.sqrt(lTData[i],  lJ[i].doubleValue());	  lTData[i]    =    Math.sqrt(lTData[i],    lJI[i].doubleValue());    	non-compiled	[CE]  cannot  find  symbol  LTData	40	None	replace
15	[BUG]  [BUGGY]  LJ[i]  =  Math.sqrt(lTData[i],  lJ[i].doubleValue());  [CE]  cannot  find  symbol  LJ  [FE]                    AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  LJ[i]  =  Math.sqrt(lTData[i],  lJ[i].doubleValue());  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	LJ[i]  =  Math.sqrt(lTData[i],  lJ[i].doubleValue());	  lTData[i]    =    Math.sqrt(lTData[i],    lJI[i].doubleValue());    	non-compiled	[CE]  cannot  find  symbol  LJ	40	None	replace
16	[BUG]  [BUGGY]  final  double[][]  lTData  =  ltData[i].symbol();  [CE]  cannot  find  symbol  ltData  [FE]                      AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[][]  lTData  =  ltData[i].symbol();  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[][]  lTData  =  ltData[i].symbol();	  final    double[][]    lTData    =    lTData[i].symbol();    	non-compiled	[CE]  cannot  find  symbol  ltData	36	None	replace
17	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i],  matrix.symbol();  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[][]  lTData  =  lTData[i],  matrix.symbol();  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[][]  lTData  =  lTData[i],  matrix.symbol();	  final    double[][]    lTData    =    lTData[i].symbol();    	non-compiled	[CE]  ';'  expected	36	None	replace
18	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i].computeSymbol();  [CE]  cannot  find  symbol  [FE]                          AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[][]  lTData  =  lTData[i].computeSymbol();  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[][]  lTData  =  lTData[i].computeSymbol();	  final    double[][]    lTData    =    lTData[i].symbol();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
19	[BUG]  [BUGGY]  final  double[][]  lTData  =  cachedL.sqrt(lTData[i],  lJ[i]);  [CE]  cannot  find  symbol  lJ  [FE]                AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[][]  lTData  =  cachedL.sqrt(lTData[i],  lJ[i]);  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[][]  lTData  =  cachedL.sqrt(lTData[i],  lJ[i]);	  final    double[][]    lTData    =    cachedL.sqrt(lTData[i]);    	non-compiled	[CE]  cannot  find  symbol  lJ	4	None	replace
20	[BUG]  [BUGGY]  LJ[i]  =  Math.sqrt(lJ[i],  lTData[i]);  [CE]  cannot  find  symbol  LJ  [FE]                  AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  LJ[i]  =  Math.sqrt(lJ[i],  lTData[i]);  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	LJ[i]  =  Math.sqrt(lJ[i],  lTData[i]);	  LJ[i]    =    Math.sqrt(lTData[i],    lJ[i]);    	non-compiled	[CE]  cannot  find  symbol  LJ	21	None	replace
21	[BUG]  [BUGGY]  LJ[]  =  Math.sqrt(lJ[i],  lTData[i]);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  LJ[]  =  Math.sqrt(lJ[i],  lTData[i]);  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	LJ[]  =  Math.sqrt(lJ[i],  lTData[i]);	  LJ[i]    =    Math.sqrt(lTData[i],    lJ[i]);    	non-compiled	[CE]  not  a  statement	21	None	replace
22	[BUG]  [BUGGY]  lJ[i]  =  Math.sqrt(lTData[i],  lJ[i]);  [CE]  cannot  find  symbol  lJ  [FE]                      AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  lJ[i]  =  Math.sqrt(lTData[i],  lJ[i]);  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	lJ[i]  =  Math.sqrt(lTData[i],  lJ[i]);	  LJ[i]    =    Math.sqrt(lTData[i],    lJ[i]);    	non-compiled	[CE]  cannot  find  symbol  lJ	21	None	replace
23	[BUG]  [BUGGY]  final  double[]  ltI  =  ltI[i]  *  lJI;  [CE]  cannot  find  symbol  lJI  [FE]            AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  ltI  =  ltI[i]  *  lJI;  [BUGGY]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[]  ltI  =  ltI[i]  *  lJI;	  final    double[]    ltI    =    ltI[i];    	non-compiled	[CE]  cannot  find  symbol  lJI	41	None	replace
24	[BUG]  [BUGGY]  final  double[]  ltI  =  ltI[i]  +  1;  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  ltI  =  ltI[i]  +  1;  [BUGGY]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[]  ltI  =  ltI[i]  +  1;	  final    double[]    ltI    =    ltI[i];    	non-compiled	[CE]  incompatible  types	41	None	replace
25	[BUG]  [BUGGY]  final  double[]  ltI  =  ltI[i].symmetry;  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  ltI  =  ltI[i].symmetry;  [BUGGY]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[]  ltI  =  ltI[i].symmetry;	  final    double[]    ltI    =    ltI[i];    	non-compiled	[CE]  double  cannot  be  dereferenced	41	None	replace
26	[BUG]  [BUGGY]  final  double[]  ltI  =  lTData[i]  *  2;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  ltI  =  lTData[i]  *  2;  [BUGGY]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[]  ltI  =  lTData[i]  *  2;	  final    double[]    ltI    =    lTData[i]    *    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	15	None	replace
27	[BUG]  [BUGGY]  final  double[]  ltI  =  lTData[i]  *  4;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  ltI  =  lTData[i]  *  4;  [BUGGY]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[]  ltI  =  lTData[i]  *  4;	  final    double[]    ltI    =    lTData[i]    *    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	15	None	replace
28	[BUG]  [BUGGY]  final  double[]  ltI  =  lTData[i]  *  3;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                    AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  ltI  =  lTData[i]  *  3;  [BUGGY]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[]  ltI  =  lTData[i]  *  3;	  final    double[]    ltI    =    lTData[i]    *    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	15	None	replace
29	[BUG]  [BUGGY]  final  double[]  ltI  =  lTData[i]  *  1L;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                      AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  ltI  =  lTData[i]  *  1L;  [BUGGY]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[]  ltI  =  lTData[i]  *  1L;	  final    double[]    ltI    =    lTData[i]    *    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	15	None	replace
30	[BUG]  [BUGGY]  final  double[][]  lTData  =  Matrix.sqrt(lTData[i]);  [CE]  cannot  find  symbol  Matrix  [FE]            AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[][]  lTData  =  Matrix.sqrt(lTData[i]);  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[][]  lTData  =  Matrix.sqrt(lTData[i]);	  final    double[][]    lTData    =    lTData.sqrt(matrix[i]);    	non-compiled	[CE]  cannot  find  symbol  Matrix	2	None	replace
31	[BUG]  [BUGGY]  final  double[][]  lTData  =  cachedLT.sqrt(matrix[i]);  [CE]  array  required,  but  RealMatrix  found  [FE]              AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[][]  lTData  =  cachedLT.sqrt(matrix[i]);  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[][]  lTData  =  cachedLT.sqrt(matrix[i]);	  final    double[][]    lTData    =    lTData.sqrt(matrix[i]);    	non-compiled	[CE]  array  required,  but  RealMatrix  found	2	None	replace
32	[BUG]  [BUGGY]  LtI[i]  =  Math.sqrt(ltI[i].getMaxDelta()  +  1);  [CE]  cannot  find  symbol  LtI  [FE]            AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  LtI[i]  =  Math.sqrt(ltI[i].getMaxDelta()  +  1);  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	LtI[i]  =  Math.sqrt(ltI[i].getMaxDelta()  +  1);	  LtI[i]    =    Math.sqrt(ltI[i].getMaxDelta());    	non-compiled	[CE]  cannot  find  symbol  LtI	32	None	replace
33	[BUG]  [BUGGY]  LtI[i]  =  Math.sqrt(lTData[i].getMaxDelta());  [CE]  cannot  find  symbol  LtI  [FE]              AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  LtI[i]  =  Math.sqrt(lTData[i].getMaxDelta());  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	LtI[i]  =  Math.sqrt(lTData[i].getMaxDelta());	  LtI[i]    =    Math.sqrt(ltI[i].getMaxDelta());    	non-compiled	[CE]  cannot  find  symbol  LtI	32	None	replace
34	[BUG]  [BUGGY]  LtI[i]  =  Math.sqrt(ltI[i].getMaxDelta(),  maxDelta);  [CE]  cannot  find  symbol  LtI  [FE]                AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  LtI[i]  =  Math.sqrt(ltI[i].getMaxDelta(),  maxDelta);  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	LtI[i]  =  Math.sqrt(ltI[i].getMaxDelta(),  maxDelta);	  LtI[i]    =    Math.sqrt(ltI[i].getMaxDelta());    	non-compiled	[CE]  cannot  find  symbol  LtI	32	None	replace
35	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i]  *  1;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                        AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[][]  lTData  =  lTData[i]  *  1;  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[][]  lTData  =  lTData[i]  *  1;	  final    double[][]    lTData    =    lTData[i]    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	7	None	replace
36	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i]  +  2;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                          AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[][]  lTData  =  lTData[i]  +  2;  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[][]  lTData  =  lTData[i]  +  2;	  final    double[][]    lTData    =    lTData[i]    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	7	None	replace
37	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i]  +  1L;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                            AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[][]  lTData  =  lTData[i]  +  1L;  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[][]  lTData  =  lTData[i]  +  1L;	  final    double[][]    lTData    =    lTData[i]    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	7	None	replace
38	[BUG]  [BUGGY]  LTData[i]  =  Math.sqrt(lTData[i].getMaxDelta(),  lJI);  [CE]  cannot  find  symbol  LTData  [FE]                AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  LTData[i]  =  Math.sqrt(lTData[i].getMaxDelta(),  lJI);  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	LTData[i]  =  Math.sqrt(lTData[i].getMaxDelta(),  lJI);	  lTData[i]    =    Math.sqrt(lTData[i].getMaxDelta(),    lJI);    	non-compiled	[CE]  cannot  find  symbol  LTData	38	None	replace
39	[BUG]  [BUGGY]  final  double[]  ltI  =  lTData[i]  *  MAXIMUM_SYMMETRY_THRESHOLD;  [CE]  cannot  find  symbol  MAXIMUM_SYMMETRY_THRESHOLD  [FE]                  AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  ltI  =  lTData[i]  *  MAXIMUM_SYMMETRY_THRESHOLD;  [BUGGY]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[]  ltI  =  lTData[i]  *  MAXIMUM_SYMMETRY_THRESHOLD;	  final    double[]    ltI    =    lTData[i]    *    lJ;    	non-compiled	[CE]  cannot  find  symbol  MAXIMUM_SYMMETRY_THRESHOLD	24	None	replace
40	[BUG]  [BUGGY]  lTData[i]  =  Math.sqrt(lTData[i],  lJ[i],  order);  [CE]  cannot  find  symbol  lJ  [FE]            AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  lTData[i]  =  Math.sqrt(lTData[i],  lJ[i],  order);  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	lTData[i]  =  Math.sqrt(lTData[i],  lJ[i],  order);	  lTData[i]    =    Math.sqrt(lTData[i],    order);    	non-compiled	[CE]  cannot  find  symbol  lJ	43	None	replace
41	[BUG]  [BUGGY]  lTData[i]  =  Math.sqrt(lTData[i],  order,  lJ[i]);  [CE]  cannot  find  symbol  lJ  [FE]              AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  lTData[i]  =  Math.sqrt(lTData[i],  order,  lJ[i]);  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	lTData[i]  =  Math.sqrt(lTData[i],  order,  lJ[i]);	  lTData[i]    =    Math.sqrt(lTData[i],    order);    	non-compiled	[CE]  cannot  find  symbol  lJ	43	None	replace
42	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i].data;  [CE]  cannot  find  symbol  data  [FE]                    AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[][]  lTData  =  lTData[i].data;  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[][]  lTData  =  lTData[i].data;	  final    double[][]    lTData    =    lTData[i].symmetry;    	non-compiled	[CE]  cannot  find  symbol  data	5	None	replace
43	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i].relativeSymmetryThreshold;  [CE]  cannot  find  symbol  relativeSymmetryThreshold  [FE]                      AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[][]  lTData  =  lTData[i].relativeSymmetryThreshold;  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[][]  lTData  =  lTData[i].relativeSymmetryThreshold;	  final    double[][]    lTData    =    lTData[i].symmetry;    	non-compiled	[CE]  cannot  find  symbol  relativeSymmetryThreshold	5	None	replace
44	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i].value;  [CE]  cannot  find  symbol  value  [FE]                        AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[][]  lTData  =  lTData[i].value;  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[][]  lTData  =  lTData[i].value;	  final    double[][]    lTData    =    lTData[i].symmetry;    	non-compiled	[CE]  cannot  find  symbol  value	5	None	replace
45	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(lTData[i].getMaxDelta()  -  1);  [CE]  cannot  find  symbol  ltI  [FE]            AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ltI[i]  =  Math.sqrt(lTData[i].getMaxDelta()  -  1);  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	ltI[i]  =  Math.sqrt(lTData[i].getMaxDelta()  -  1);	  ltI[i]    =    Math.sqrt(lTData[i].getMaxDelta());    	non-compiled	[CE]  cannot  find  symbol  ltI	1	None	replace
46	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(lTData[i].getMaxDelta()  +  1);  [CE]  cannot  find  symbol  ltI  [FE]              AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ltI[i]  =  Math.sqrt(lTData[i].getMaxDelta()  +  1);  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	ltI[i]  =  Math.sqrt(lTData[i].getMaxDelta()  +  1);	  ltI[i]    =    Math.sqrt(lTData[i].getMaxDelta());    	non-compiled	[CE]  cannot  find  symbol  ltI	1	None	replace
47	[BUG]  [BUGGY]  final  double[]  ltI  =  ltData[i];  [CE]  cannot  find  symbol  ltData  [FE]              AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  ltI  =  ltData[i];  [BUGGY]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[]  ltI  =  ltData[i];	  final    double[]    ltI    =    lj[i];    	non-compiled	[CE]  cannot  find  symbol  ltData	14	None	replace
48	[BUG]  [BUGGY]  final  double[]  ltI  =  cachedL[i];  [CE]  array  required,  but  RealMatrix  found  [FE]            AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  ltI  =  cachedL[i];  [BUGGY]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[]  ltI  =  cachedL[i];	  final    double[]    ltI    =    cachedLT[i];    	non-compiled	[CE]  array  required,  but  RealMatrix  found	18	None	replace
49	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(lTData[i].getMinDelta());  [CE]  cannot  find  symbol  ltI  [FE]            AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ltI[i]  =  Math.sqrt(lTData[i].getMinDelta());  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	ltI[i]  =  Math.sqrt(lTData[i].getMinDelta());	  ltI[i]    =    Math.sqrt(ltI[i].getMinDelta());    	non-compiled	[CE]  cannot  find  symbol  ltI	46	None	replace
50	[BUG]  [BUGGY]  lTData[i]  =  Math.sqrt(lTData[i].doubleValue());  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  lTData[i]  =  Math.sqrt(lTData[i].doubleValue());  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	lTData[i]  =  Math.sqrt(lTData[i].doubleValue());	  ltI[i]    =    Math.sqrt(lTData[i].doubleValue());    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
51	[BUG]  [BUGGY]  LtI[i]  =  Math.sqrt(lTData[i].doubleValue());  [CE]  cannot  find  symbol  LtI  [FE]                AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  LtI[i]  =  Math.sqrt(lTData[i].doubleValue());  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	LtI[i]  =  Math.sqrt(lTData[i].doubleValue());	  ltI[i]    =    Math.sqrt(lTData[i].doubleValue());    	non-compiled	[CE]  cannot  find  symbol  LtI	33	None	replace
52	[BUG]  [BUGGY]  final  double[][]  ltData  =  ltData[i];  [CE]  incompatible  types  [FE]                      AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[][]  ltData  =  ltData[i];  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[][]  ltData  =  ltData[i];	  final    double[][]    lTData    =    ltData[i];    	non-compiled	[CE]  incompatible  types	6	None	replace
53	[BUG]  [BUGGY]  final  double[][]  ltData  =  lTData[i];  [CE]  incompatible  types  [FE]                        AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[][]  ltData  =  lTData[i];  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[][]  ltData  =  lTData[i];	  final    double[][]    lTData    =    ltData[i];    	non-compiled	[CE]  incompatible  types	6	None	replace
54	[BUG]  [BUGGY]  final  double[]  ltI  =  ljData[i];  [CE]  cannot  find  symbol  ljData  [FE]            AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  ltI  =  ljData[i];  [BUGGY]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[]  ltI  =  ljData[i];	  final    double[]    ltI    =    lJData[i];    	non-compiled	[CE]  cannot  find  symbol  ljData	28	None	replace
55	[BUG]  [BUGGY]  final  double[]  ltI  =  lTData[i]  /  order;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  ltI  =  lTData[i]  /  order;  [BUGGY]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[]  ltI  =  lTData[i]  /  order;	  final    double[]    ltI    =    lTData[i]    *    order;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	23	None	replace
56	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i],  maxDelta);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[][]  lTData  =  lTData[i],  maxDelta);  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[][]  lTData  =  lTData[i],  maxDelta);	  final    double[][]    lTData    =    lTData[i],    lJI);    	non-compiled	[CE]  ';'  expected	39	None	replace
57	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i],  lJI  +  1);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[][]  lTData  =  lTData[i],  lJI  +  1);  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[][]  lTData  =  lTData[i],  lJI  +  1);	  final    double[][]    lTData    =    lTData[i],    lJI);    	non-compiled	[CE]  ';'  expected	39	None	replace
58	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i],  lJI[i]);  [CE]  ']'  expected  [FE]                        AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[][]  lTData  =  lTData[i],  lJI[i]);  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[][]  lTData  =  lTData[i],  lJI[i]);	  final    double[][]    lTData    =    lTData[i],    lJI);    	non-compiled	[CE]  ']'  expected	39	None	replace
59	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i],  lJI,  maxDelta);  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[][]  lTData  =  lTData[i],  lJI,  maxDelta);  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[][]  lTData  =  lTData[i],  lJI,  maxDelta);	  final    double[][]    lTData    =    lTData[i],    lJI);    	non-compiled	[CE]  ';'  expected	39	None	replace
60	[BUG]  [BUGGY]  final  double[][]  lTData  =  ltData[i].doubleValue();  [CE]  cannot  find  symbol  ltData  [FE]                    AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[][]  lTData  =  ltData[i].doubleValue();  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[][]  lTData  =  ltData[i].doubleValue();	  final    double[][]    lTData    =    lTData[i].doubleValue();    	non-compiled	[CE]  cannot  find  symbol  ltData	35	None	replace
61	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i].doubleValue().doubleValue();  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[][]  lTData  =  lTData[i].doubleValue().doubleValue();  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[][]  lTData  =  lTData[i].doubleValue().doubleValue();	  final    double[][]    lTData    =    lTData[i].doubleValue();    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
62	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i].doubleValue()  +  1;  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[][]  lTData  =  lTData[i].doubleValue()  +  1;  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[][]  lTData  =  lTData[i].doubleValue()  +  1;	  final    double[][]    lTData    =    lTData[i].doubleValue();    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
63	[BUG]  [BUGGY]  final  double[]  lJI  =  lJ[i]  *  maxDelta;  [CE]  cannot  find  symbol  lJ  [FE]            AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lJI  =  lJ[i]  *  maxDelta;  [BUGGY]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[]  lJI  =  lJ[i]  *  maxDelta;	  final    double[]    lJI    =    lJ[i];    	non-compiled	[CE]  cannot  find  symbol  lJ	13	None	replace
64	[BUG]  [BUGGY]  final  double[]  lJI  =  lJ[i]  +  1;  [CE]  cannot  find  symbol  lJ  [FE]              AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lJI  =  lJ[i]  +  1;  [BUGGY]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[]  lJI  =  lJ[i]  +  1;	  final    double[]    lJI    =    lJ[i];    	non-compiled	[CE]  cannot  find  symbol  lJ	13	None	replace
65	[BUG]  [BUGGY]  final  double[]  lJI  =  lj[i];  [CE]  cannot  find  symbol  lj  [FE]                AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lJI  =  lj[i];  [BUGGY]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[]  lJI  =  lj[i];	  final    double[]    lJI    =    lJ[i];    	non-compiled	[CE]  cannot  find  symbol  lj	13	None	replace
66	[BUG]  [BUGGY]  final  double[][]  lTData  =  cachedLT.sqrt(lTData[i],  lJ[i]);  [CE]  cannot  find  symbol  lJ  [FE]              AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[][]  lTData  =  cachedLT.sqrt(lTData[i],  lJ[i]);  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[][]  lTData  =  cachedLT.sqrt(lTData[i],  lJ[i]);	  final    double[][]    lTData    =    cachedLT.sqrt(lTData[i]);    	non-compiled	[CE]  cannot  find  symbol  lJ	3	None	replace
67	[BUG]  [BUGGY]  final  double[]  ltI  =  lTData[i]  +  10.0;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                    AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  ltI  =  lTData[i]  +  10.0;  [BUGGY]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[]  ltI  =  lTData[i]  +  10.0;	  final    double[]    ltI    =    lTData[i]    +    1L;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	17	None	replace
68	[BUG]  [BUGGY]  LJI[i]  =  Math.sqrt(lJ[i]  +  i);  [CE]  cannot  find  symbol  LJI  [FE]              AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  LJI[i]  =  Math.sqrt(lJ[i]  +  i);  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	LJI[i]  =  Math.sqrt(lJ[i]  +  i);	  LJI[i]    =    Math.sqrt(lJ[i]);    	non-compiled	[CE]  cannot  find  symbol  LJI	45	None	replace
69	[BUG]  [BUGGY]  LTData[i]  =  Math.sqrt(lJ[i],  lTData[i]);  [CE]  cannot  find  symbol  LTData  [FE]                AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  LTData[i]  =  Math.sqrt(lJ[i],  lTData[i]);  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	LTData[i]  =  Math.sqrt(lJ[i],  lTData[i]);	  LTData[i]    =    Math.sqrt(lTData[i],    lJ[i]);    	non-compiled	[CE]  cannot  find  symbol  LTData	20	None	replace
70	[BUG]  [BUGGY]  LTData[i]  =  Math.sqrt(lTData[i],  lJ[i]  +  1);  [CE]  cannot  find  symbol  LTData  [FE]                  AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  LTData[i]  =  Math.sqrt(lTData[i],  lJ[i]  +  1);  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	LTData[i]  =  Math.sqrt(lTData[i],  lJ[i]  +  1);	  LTData[i]    =    Math.sqrt(lTData[i],    lJ[i]);    	non-compiled	[CE]  cannot  find  symbol  LTData	20	None	replace
71	[BUG]  [BUGGY]  Ltdata[i]  =  Math.sqrt(lTData[i],  lJ[i]);  [CE]  cannot  find  symbol  Ltdata  [FE]                    AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  Ltdata[i]  =  Math.sqrt(lTData[i],  lJ[i]);  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	Ltdata[i]  =  Math.sqrt(lTData[i],  lJ[i]);	  LTData[i]    =    Math.sqrt(lTData[i],    lJ[i]);    	non-compiled	[CE]  cannot  find  symbol  Ltdata	20	None	replace
72	[BUG]  [BUGGY]  final  double[]  ltI  =  lTData[i]  +  1.0;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                    AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  ltI  =  lTData[i]  +  1.0;  [BUGGY]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[]  ltI  =  lTData[i]  +  1.0;	  final    double[]    ltI    =    lTData[i]    +    1L;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	17	None	replace
73	[BUG]  [BUGGY]  LTData[i]  =  Math.sqrt(lTData[i],  lJI.getMaxDelta());  [CE]  cannot  find  symbol  LTData  [FE]              AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  LTData[i]  =  Math.sqrt(lTData[i],  lJI.getMaxDelta());  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	LTData[i]  =  Math.sqrt(lTData[i],  lJI.getMaxDelta());	  lTData[i]    =    Math.sqrt(lTData[i],    lJI.getMaxDelta());    	non-compiled	[CE]  cannot  find  symbol  LTData	37	None	replace
74	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i].symbol;  [CE]  cannot  find  symbol  symbol  [FE]                    AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[][]  lTData  =  lTData[i].symbol;  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[][]  lTData  =  lTData[i].symbol;	  final    double[][]    lTData    =    lTData[i].symmetry;    	non-compiled	[CE]  cannot  find  symbol  symbol	5	None	replace
75	[BUG]  [BUGGY]  final  double[]  ltI  =  lJData[i]  +  1;  [CE]  cannot  find  symbol  lJData  [FE]                AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  ltI  =  lJData[i]  +  1;  [BUGGY]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[]  ltI  =  lJData[i]  +  1;	  final    double[]    ltI    =    ltData[i]    +    1;    	non-compiled	[CE]  cannot  find  symbol  lJData	42	None	replace
76	[BUG]  [BUGGY]  final  double[]  ltI  =  ltData[i]  +  2;  [CE]  cannot  find  symbol  ltData  [FE]                  AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  ltI  =  ltData[i]  +  2;  [BUGGY]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[]  ltI  =  ltData[i]  +  2;	  final    double[]    ltI    =    ltData[i]    +    1;    	non-compiled	[CE]  cannot  find  symbol  ltData	42	None	replace
77	[BUG]  [BUGGY]  LtI[i]  =  Math.sqrt(ltI[i].getMaxDelta()  -  1);  [CE]  cannot  find  symbol  LtI  [FE]            AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  LtI[i]  =  Math.sqrt(ltI[i].getMaxDelta()  -  1);  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	LtI[i]  =  Math.sqrt(ltI[i].getMaxDelta()  -  1);	  LtI[i]    =    Math.sqrt(ltI[i].getMaxDelta());    	non-compiled	[CE]  cannot  find  symbol  LtI	32	None	replace
78	[BUG]  [BUGGY]  final  double[][]  lTData  =  cachedL.sqrt(lTData[i],  matrix);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[][]  lTData  =  cachedL.sqrt(lTData[i],  matrix);  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[][]  lTData  =  cachedL.sqrt(lTData[i],  matrix);	  final    double[][]    lTData    =    cachedL.sqrt(lTData[i]);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
79	[BUG]  [BUGGY]  final  double[][]  lTData  =  tData[i].doubleValue();  [CE]  cannot  find  symbol  tData  [FE]                    AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[][]  lTData  =  tData[i].doubleValue();  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[][]  lTData  =  tData[i].doubleValue();	  final    double[][]    lTData    =    lTData[i].doubleValue();    	non-compiled	[CE]  cannot  find  symbol  tData	35	None	replace
80	[BUG]  [BUGGY]  final  double[][]  lTData  =  data[i].doubleValue();  [CE]  cannot  find  symbol  data  [FE]                      AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[][]  lTData  =  data[i].doubleValue();  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[][]  lTData  =  data[i].doubleValue();	  final    double[][]    lTData    =    lTData[i].doubleValue();    	non-compiled	[CE]  cannot  find  symbol  data	35	None	replace
81	[BUG]  [BUGGY]  final  double[][]  lTData  =  cachedLT.sqrt(lTData[i],  matrix);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[][]  lTData  =  cachedLT.sqrt(lTData[i],  matrix);  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[][]  lTData  =  cachedLT.sqrt(lTData[i],  matrix);	  final    double[][]    lTData    =    cachedLT.sqrt(lTData[i]);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
82	[BUG]  [BUGGY]  final  double[][]  lTData  =  matrix.sqrt(lTData[i],  absoluteSymmetryThreshold,  relativeSymmetryThreshold);  [CE]  cannot  find  symbol  absoluteSymmetryThreshold  [FE]            AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[][]  lTData  =  matrix.sqrt(lTData[i],  absoluteSymmetryThreshold,  relativeSymmetryThreshold);  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[][]  lTData  =  matrix.sqrt(lTData[i],  absoluteSymmetryThreshold,  relativeSymmetryThreshold);	  final    double[][]    lTData    =    matrix.sqrt(lTData[i],    absoluteSymmetryThreshold);    	non-compiled	[CE]  cannot  find  symbol  absoluteSymmetryThreshold	26	None	replace
83	[BUG]  [BUGGY]  final  double[]  ltI  =  lT[i];  [CE]  cannot  find  symbol  lT  [FE]            AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  ltI  =  lT[i];  [BUGGY]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[]  ltI  =  lT[i];	  final    double[]    ltI    =    lJT[i];    	non-compiled	[CE]  cannot  find  symbol  lT	44	None	replace
84	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i],  lJI,  absoluteSymmetryThreshold);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[][]  lTData  =  lTData[i],  lJI,  absoluteSymmetryThreshold);  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[][]  lTData  =  lTData[i],  lJI,  absoluteSymmetryThreshold);	  final    double[][]    lTData    =    lTData[i],    lJI);    	non-compiled	[CE]  ';'  expected	39	None	replace
85	[BUG]  [BUGGY]  final  double[]  lJI  =  lTData[i];  [CE]  cannot  find  symbol  ltI  [FE]            AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lJI  =  lTData[i];  [BUGGY]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[]  lJI  =  lTData[i];	  final    double[]    lJI    =    lJ[i];    	non-compiled	[CE]  cannot  find  symbol  ltI	13	None	replace
86	[BUG]  [BUGGY]  final  double[]  lJI  =  lJData[i];  [CE]  cannot  find  symbol  lJData  [FE]              AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lJI  =  lJData[i];  [BUGGY]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[]  lJI  =  lJData[i];	  final    double[]    lJI    =    lJ[i];    	non-compiled	[CE]  cannot  find  symbol  lJData	13	None	replace
87	[BUG]  [BUGGY]  final  double[]  ltI  =  lTData[i]  *  ljI;  [CE]  cannot  find  symbol  ljI  [FE]                  AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  ltI  =  lTData[i]  *  ljI;  [BUGGY]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[]  ltI  =  lTData[i]  *  ljI;	  final    double[]    ltI    =    lTData[i]    *    lJ;    	non-compiled	[CE]  cannot  find  symbol  ljI	24	None	replace
88	[BUG]  [BUGGY]  final  double[]  ltI  =  ltI[i].doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  ltI  =  ltI[i].doubleValue();  [BUGGY]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[]  ltI  =  ltI[i].doubleValue();	  final    double[]    ltI    =    ltI[i];    	non-compiled	[CE]  double  cannot  be  dereferenced	41	None	replace
89	[BUG]  [BUGGY]  final  double[]  ltI  =  ltI[i]  *  maxDelta;  [CE]  cannot  find  symbol  maxDelta  [FE]              AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  ltI  =  ltI[i]  *  maxDelta;  [BUGGY]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[]  ltI  =  ltI[i]  *  maxDelta;	  final    double[]    ltI    =    ltI[i];    	non-compiled	[CE]  cannot  find  symbol  maxDelta	41	None	replace
90	[BUG]  [BUGGY]  LJ[i]  =  Math.sqrt(lTData[i],  lJ[i]  +  1);  [CE]  cannot  find  symbol  LJ  [FE]                  AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  LJ[i]  =  Math.sqrt(lTData[i],  lJ[i]  +  1);  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	LJ[i]  =  Math.sqrt(lTData[i],  lJ[i]  +  1);	  LJ[i]    =    Math.sqrt(lTData[i],    lJ[i]);    	non-compiled	[CE]  cannot  find  symbol  LJ	21	None	replace
91	[BUG]  [BUGGY]  lTData[i]  =  Math.sqrt(lTData[i],  lJI,  order);  [CE]  cannot  find  symbol  lJI  [FE]            AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  lTData[i]  =  Math.sqrt(lTData[i],  lJI,  order);  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	lTData[i]  =  Math.sqrt(lTData[i],  lJI,  order);	  lTData[i]    =    Math.sqrt(lTData[i],    order);    	non-compiled	[CE]  cannot  find  symbol  lJI	43	None	replace
92	[BUG]  [BUGGY]  lTData[i]  =  Math.sqrt(lTData[i],  order,  lJI);  [CE]  cannot  find  symbol  lJI  [FE]              AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  lTData[i]  =  Math.sqrt(lTData[i],  order,  lJI);  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	lTData[i]  =  Math.sqrt(lTData[i],  order,  lJI);	  lTData[i]    =    Math.sqrt(lTData[i],    order);    	non-compiled	[CE]  cannot  find  symbol  lJI	43	None	replace
93	[BUG]  [BUGGY]  final  double[][]  lTData  =  cachedLT.sqrt(lTData[i],  lJI);  [CE]  cannot  find  symbol  lJI  [FE]              AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[][]  lTData  =  cachedLT.sqrt(lTData[i],  lJI);  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[][]  lTData  =  cachedLT.sqrt(lTData[i],  lJI);	  final    double[][]    lTData    =    cachedLT.sqrt(lTData[i]);    	non-compiled	[CE]  cannot  find  symbol  lJI	3	None	replace
94	[BUG]  [BUGGY]  final  double[][]  lTData  =  cachedL.sqrt(lTData[i],  lJI);  [CE]  cannot  find  symbol  lJI  [FE]                AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[][]  lTData  =  cachedL.sqrt(lTData[i],  lJI);  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[][]  lTData  =  cachedL.sqrt(lTData[i],  lJI);	  final    double[][]    lTData    =    cachedL.sqrt(lTData[i]);    	non-compiled	[CE]  cannot  find  symbol  lJI	4	None	replace
95	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i],  lJI[i];  [CE]  ']'  expected  [FE]                    AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[][]  lTData  =  lTData[i],  lJI[i];  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[][]  lTData  =  lTData[i],  lJI[i];	  final    double[][]    lTData    =    lTData[i],    lJI);    	non-compiled	[CE]  ']'  expected	39	None	replace
96	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i],  order);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[][]  lTData  =  lTData[i],  order);  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[][]  lTData  =  lTData[i],  order);	  final    double[][]    lTData    =    lTData[i],    lJI);    	non-compiled	[CE]  ';'  expected	39	None	replace
97	[BUG]  [BUGGY]  LtI[i]  =  Math.sqrt(ltI[i].getMaxDelta(),  lJI);  [CE]  cannot  find  symbol  LtI  [FE]            AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  LtI[i]  =  Math.sqrt(ltI[i].getMaxDelta(),  lJI);  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	LtI[i]  =  Math.sqrt(ltI[i].getMaxDelta(),  lJI);	  LtI[i]    =    Math.sqrt(ltI[i].getMaxDelta());    	non-compiled	[CE]  cannot  find  symbol  LtI	32	None	replace
98	[BUG]  [BUGGY]  LtI[i]  =  Math.sqrt(ltI[i].getMinDelta());  [CE]  cannot  find  symbol  LtI  [FE]              AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  LtI[i]  =  Math.sqrt(ltI[i].getMinDelta());  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	LtI[i]  =  Math.sqrt(ltI[i].getMinDelta());	  LtI[i]    =    Math.sqrt(ltI[i].getMaxDelta());    	non-compiled	[CE]  cannot  find  symbol  LtI	32	None	replace
99	[BUG]  [BUGGY]  final  double[]  ltI  =  ltData[i]  *  lJI;  [CE]  cannot  find  symbol  ltData  [FE]                AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  ltI  =  ltData[i]  *  lJI;  [BUGGY]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[]  ltI  =  ltData[i]  *  lJI;	  final    double[]    ltI    =    lTData[i]    *    order;    	non-compiled	[CE]  cannot  find  symbol  ltData	23	None	replace
100	[BUG]  [BUGGY]  final  double[]  ltI  =  lTData[i]  +  2L;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                    AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  ltI  =  lTData[i]  +  2L;  [BUGGY]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[]  ltI  =  lTData[i]  +  2L;	  final    double[]    ltI    =    lTData[i]    +    1L;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	17	None	replace
101	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltData[i].doubleValue());  [CE]  cannot  find  symbol  ltI  [FE]              AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ltI[i]  =  Math.sqrt(ltData[i].doubleValue());  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	ltI[i]  =  Math.sqrt(ltData[i].doubleValue());	  ltI[i]    =    Math.sqrt(lTData[i].doubleValue());    	non-compiled	[CE]  cannot  find  symbol  ltI	33	None	replace
102	[BUG]  [BUGGY]  final  double[]  lJI  =  ltI[i];  [CE]  cannot  find  symbol  ltI  [FE]            AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lJI  =  ltI[i];  [BUGGY]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[]  lJI  =  ltI[i];	  final    double[]    lJI    =    lJ[i];    	non-compiled	[CE]  cannot  find  symbol  ltI	13	None	replace
103	[BUG]  [BUGGY]  final  double[]  lJI  =  ltJ[i];  [CE]  cannot  find  symbol  ltJ  [FE]              AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lJI  =  ltJ[i];  [BUGGY]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[]  lJI  =  ltJ[i];	  final    double[]    lJI    =    lJ[i];    	non-compiled	[CE]  cannot  find  symbol  ltJ	13	None	replace
104	[BUG]  [BUGGY]  LIVE_SYMMETRY_THRESHOLD  =  Math.sqrt(lTData[i],  lJ[i]);  [CE]  cannot  find  symbol  LIVE_SYMMETRY_THRESHOLD  [FE]                AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  LIVE_SYMMETRY_THRESHOLD  =  Math.sqrt(lTData[i],  lJ[i]);  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	LIVE_SYMMETRY_THRESHOLD  =  Math.sqrt(lTData[i],  lJ[i]);	  LTData[i]    =    Math.sqrt(lTData[i],    lJ[i]);    	non-compiled	[CE]  cannot  find  symbol  LIVE_SYMMETRY_THRESHOLD	20	None	replace
105	[BUG]  [BUGGY]  final  double[]  ltI  =  ltData[i]  *  2;  [CE]  cannot  find  symbol  ltData  [FE]                AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  ltI  =  ltData[i]  *  2;  [BUGGY]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[]  ltI  =  ltData[i]  *  2;	  final    double[]    ltI    =    lTData[i]    *    1;    	non-compiled	[CE]  cannot  find  symbol  ltData	15	None	replace
106	[BUG]  [BUGGY]  final  double[]  ltI  =  lTData[i]  *  Math.sqrt(ltI[i]);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  ltI  =  lTData[i]  *  Math.sqrt(ltI[i]);  [BUGGY]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[]  ltI  =  lTData[i]  *  Math.sqrt(ltI[i]);	  final    double[]    ltI    =    lTData[i]    *    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	15	None	replace
107	[BUG]  [BUGGY]  final  double[]  ltI  =  lTData[i]  /  2;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                  AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  ltI  =  lTData[i]  /  2;  [BUGGY]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[]  ltI  =  lTData[i]  /  2;	  final    double[]    ltI    =    lTData[i]    +    2;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	16	None	replace
108	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltData[i].getMaxDelta());  [CE]  cannot  find  symbol  ltI  [FE]            AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ltI[i]  =  Math.sqrt(ltData[i].getMaxDelta());  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	ltI[i]  =  Math.sqrt(ltData[i].getMaxDelta());	  ltI[i]    =    Math.sqrt(lTData[i].getMaxDelta());    	non-compiled	[CE]  cannot  find  symbol  ltI	1	None	replace
109	[BUG]  [BUGGY]  final  double[]  ltI  =  ltJ[i];  [CE]  cannot  find  symbol  ltJ  [FE]              AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  ltI  =  ltJ[i];  [BUGGY]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[]  ltI  =  ltJ[i];	  final    double[]    ltI    =    lj[i];    	non-compiled	[CE]  cannot  find  symbol  ltJ	14	None	replace
110	[BUG]  [BUGGY]  final  double[]  ltI  =  ltI[i].symbol();  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  ltI  =  ltI[i].symbol();  [BUGGY]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[]  ltI  =  ltI[i].symbol();	  final    double[]    ltI    =    ltI[i];    	non-compiled	[CE]  double  cannot  be  dereferenced	41	None	replace
111	[BUG]  [BUGGY]  final  double[]  ltI  =  ltI[i].relativeSymmetryThreshold;  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  ltI  =  ltI[i].relativeSymmetryThreshold;  [BUGGY]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[]  ltI  =  ltI[i].relativeSymmetryThreshold;	  final    double[]    ltI    =    ltI[i];    	non-compiled	[CE]  double  cannot  be  dereferenced	41	None	replace
112	[BUG]  [BUGGY]  LJI[i]  =  Math.sqrt(lJI[i]);  [CE]  cannot  find  symbol  LJI  [FE]              AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  LJI[i]  =  Math.sqrt(lJI[i]);  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	LJI[i]  =  Math.sqrt(lJI[i]);	  LJI[i]    =    Math.sqrt(lJ[i]);    	non-compiled	[CE]  cannot  find  symbol  LJI	45	None	replace
113	[BUG]  [BUGGY]  LJ[i]  =  Math.sqrt(lJ[i]);  [CE]  cannot  find  symbol  LJ  [FE]                AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  LJ[i]  =  Math.sqrt(lJ[i]);  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	LJ[i]  =  Math.sqrt(lJ[i]);	  LJI[i]    =    Math.sqrt(lJ[i]);    	non-compiled	[CE]  cannot  find  symbol  LJ	45	None	replace
114	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i],  matrix.doubleValue();  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[][]  lTData  =  lTData[i],  matrix.doubleValue();  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[][]  lTData  =  lTData[i],  matrix.doubleValue();	  final    double[][]    lTData    =    lTData[i].doubleValue();    	non-compiled	[CE]  ';'  expected	35	None	replace
115	[BUG]  [BUGGY]  final  double[]  ltI  =  lTData[i]  *  JIJ;  [CE]  cannot  find  symbol  JIJ  [FE]              AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  ltI  =  lTData[i]  *  JIJ;  [BUGGY]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[]  ltI  =  lTData[i]  *  JIJ;	  final    double[]    ltI    =    lTData[i]    *    JI;    	non-compiled	[CE]  cannot  find  symbol  JIJ	34	None	replace
116	[BUG]  [BUGGY]  final  double[]  ltI  =  lTData[i]  *  MAX_SYMMETRY_THRESHOLD;  [CE]  cannot  find  symbol  MAX_SYMMETRY_THRESHOLD  [FE]                AssertionError      [CONTEXT]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  ltI  =  lTData[i]  *  MAX_SYMMETRY_THRESHOLD;  [BUGGY]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	134	134	2	replace	final  double[]  ltI  =  lTData[i]  *  MAX_SYMMETRY_THRESHOLD;	  final    double[]    ltI    =    lTData[i]    *    JI;    	non-compiled	[CE]  cannot  find  symbol  MAX_SYMMETRY_THRESHOLD	34	None	replace
