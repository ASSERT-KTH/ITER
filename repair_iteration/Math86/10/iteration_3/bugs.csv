bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  LtQ[p]  -=  ltQ[q]  *  ltI[p];  [CE]  cannot  find  symbol  LtQ  [FE]          AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  LtQ[p]  -=  ltQ[q]  *  ltI[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	LtQ[p]  -=  ltQ[q]  *  ltI[p];	          ltQ[p]    -=    ltQ[q]    *    ltI[p];    LtQ[p]    -=    ltQ[q]    *    ltI[p];    	non-compiled	[CE]  cannot  find  symbol  LtQ	35	None	replace
2	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[p]  +  1);  ltI[p]  =  Math.sqrt(ltQ[p]  +  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltI[p]    =    Math.sqrt(ltQ[p]    +    1);    ltI[p]  =  Math.sqrt(ltQ[p]  +  1);	  	compilable	  [FE]  AssertionError  	21	5	add
3	[BUG]  [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[p]  +  1);  ltI[p]  =  Math.sqrt(ltQ[p]  +  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[p]  +  1);  ltI[p]  =  Math.sqrt(ltQ[p]  +  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]    =    Math.sqrt(ltQ[p]    +    1);    ltI[p]  =  Math.sqrt(ltQ[p]  +  1);	  	compilable	  [FE]  AssertionError  	21	5	add
4	[BUG]  [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[p]  +  1);  LtI[p]  =  Math.sqrt(ltQ[p]  +  1);  [CE]  cannot  find  symbol  LtI  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[p]  +  1);  LtI[p]  =  Math.sqrt(ltQ[p]  +  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]    =    Math.sqrt(ltQ[p]    +    1);    LtI[p]  =  Math.sqrt(ltQ[p]  +  1);	  	non-compiled	[CE]  cannot  find  symbol  LtI	21	None	add
5	[BUG]  [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[p]  +  1);  ltI[p]  =  Math.sqrt(ltQu[p]  +  1);  [CE]  cannot  find  symbol  ltQu  [FE]        AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[p]  +  1);  ltI[p]  =  Math.sqrt(ltQu[p]  +  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]    =    Math.sqrt(ltQ[p]    +    1);    ltI[p]  =  Math.sqrt(ltQu[p]  +  1);	  	non-compiled	[CE]  cannot  find  symbol  ltQu	21	None	add
6	[BUG]  [BUGGY]  ltQ[p]  -=  ltQ[i]  *  ltQ[p].doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]        AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[i]  *  ltQ[p].doubleValue();  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  -=  ltQ[i]  *  ltQ[p].doubleValue();	  ltQ[p]    -=    ltQ[p]    *    ltQ[i].doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	104	None	replace
7	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[p]  *  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]  =  Math.sqrt(ltQ[p]  *  1);	  ltQ[p]    =    Math.sqrt(ltQ[p]    +    1);    	compilable	  [FE]  AssertionError  	40	4	replace
8	[BUG]  [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[p]  *  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[p]  *  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  =  Math.sqrt(ltQ[p]  *  1);	  ltQ[p]    =    Math.sqrt(ltQ[p]    +    1);    	compilable	  [FE]  AssertionError  	40	4	replace
9	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[i]  *  ltI[p];  ltQ[p]  -=  ltQ[i]  *  ltI[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]    -=    ltQ[i]    *    ltI[p];    ltQ[p]  -=  ltQ[i]  *  ltI[p];	  	compilable	  [FE]  AssertionError  	78	2	add
10	[BUG]  [BUGGY]  ltQ[p]  -=  ltQ[i]  *  ltI[p];  ltQ[p]  -=  ltQ[i]  *  ltI[p];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[i]  *  ltI[p];  ltQ[p]  -=  ltQ[i]  *  ltI[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]    -=    ltQ[i]    *    ltI[p];    ltQ[p]  -=  ltQ[i]  *  ltI[p];	  	compilable	  [FE]  AssertionError  	78	2	add
11	[BUG]  [BUGGY]  ltQ[p]  -=  ltQ[i]  *  ltI[p];  ltQ[p]  -=  ltQu[i]  *  ltI[p];  [CE]  cannot  find  symbol  ltQu  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[i]  *  ltI[p];  ltQ[p]  -=  ltQu[i]  *  ltI[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]    -=    ltQ[i]    *    ltI[p];    ltQ[p]  -=  ltQu[i]  *  ltI[p];	  	non-compiled	[CE]  cannot  find  symbol  ltQu	78	None	add
12	[BUG]  [BUGGY]  ltQ[p]  -=  ltQ[i]  *  ltI[p];  LtQ[p]  -=  ltQ[i]  *  ltI[p];  [CE]  cannot  find  symbol  LtQ  [FE]        AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[i]  *  ltI[p];  LtQ[p]  -=  ltQ[i]  *  ltI[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]    -=    ltQ[i]    *    ltI[p];    LtQ[p]  -=  ltQ[i]  *  ltI[p];	  	non-compiled	[CE]  cannot  find  symbol  LtQ	78	None	add
13	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]    -=    ltQ[i]    *    ltQ[p];    ltQ[p]  -=  ltQ[i]  *  ltQ[p];  ltQ[p]  -=  ltQ[i]  *  ltQ[p];  ltQ[p]  -=  ltQ[i]  *  ltQ[p];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]        -=        ltQ[i]        *        ltQ[p];        ltQ[p]    -=    ltQ[i]    *    ltQ[p];    ltQ[p]  -=  ltQ[i]  *  ltQ[p];  ltQ[p]  -=  ltQ[i]  *  ltQ[p];	  	compilable	  [FE]  AssertionError  	3	2	add
14	[BUG]  [BUGGY]  ltQ[p]    -=    ltQ[i]    *    ltQ[p];    ltQ[p]  -=  ltQ[i]  *  ltQ[p];  ltQ[p]  -=  ltQ[i]  *  ltQ[p];  ltQ[p]  -=  ltQ[i]  *  ltQ[p];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]    -=    ltQ[i]    *    ltQ[p];    ltQ[p]  -=  ltQ[i]  *  ltQ[p];  ltQ[p]  -=  ltQ[i]  *  ltQ[p];  ltQ[p]  -=  ltQ[i]  *  ltQ[p];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]        -=        ltQ[i]        *        ltQ[p];        ltQ[p]    -=    ltQ[i]    *    ltQ[p];    ltQ[p]  -=  ltQ[i]  *  ltQ[p];  ltQ[p]  -=  ltQ[i]  *  ltQ[p];	  	compilable	  [FE]  AssertionError  	3	2	add
15	[BUG]  [BUGGY]  ltQ[p]    -=    ltQ[i]    *    ltQ[p];    ltQ[p]  -=  ltQ[i]  *  ltQ[p];  LtQ[p]  -=  ltQ[i]  *  ltQ[p];  ltQ[p]  -=  ltQ[i]  *  ltQ[p];  [CE]  cannot  find  symbol  LtQ  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]    -=    ltQ[i]    *    ltQ[p];    ltQ[p]  -=  ltQ[i]  *  ltQ[p];  LtQ[p]  -=  ltQ[i]  *  ltQ[p];  ltQ[p]  -=  ltQ[i]  *  ltQ[p];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]        -=        ltQ[i]        *        ltQ[p];        ltQ[p]    -=    ltQ[i]    *    ltQ[p];    LtQ[p]  -=  ltQ[i]  *  ltQ[p];  ltQ[p]  -=  ltQ[i]  *  ltQ[p];	  	non-compiled	[CE]  cannot  find  symbol  LtQ	3	None	add
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]    -=    ltQ[q]    *    ltQ[p];    ltQ[p]  -=  ltQ[q]  *  ltQ[p];  ltQ[p]  -=  ltQ[q]  *  ltQ[p];  ltQ[p]  -=  ltQ[q]  *  ltQ[p];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]        -=        ltQ[q]        *        ltQ[p];        ltQ[p]    -=    ltQ[q]    *    ltQ[p];    ltQ[p]  -=  ltQ[q]  *  ltQ[p];  ltQ[p]  -=  ltQ[q]  *  ltQ[p];	  	compilable	  [FE]  AssertionError  	43	5	add
17	[BUG]  [BUGGY]  ltQ[p]    -=    ltQ[q]    *    ltQ[p];    ltQ[p]  -=  ltQ[q]  *  ltQ[p];  ltQ[p]  -=  ltQ[q]  *  ltQ[p];  ltQ[p]  -=  ltQ[q]  *  ltQ[p];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]    -=    ltQ[q]    *    ltQ[p];    ltQ[p]  -=  ltQ[q]  *  ltQ[p];  ltQ[p]  -=  ltQ[q]  *  ltQ[p];  ltQ[p]  -=  ltQ[q]  *  ltQ[p];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]        -=        ltQ[q]        *        ltQ[p];        ltQ[p]    -=    ltQ[q]    *    ltQ[p];    ltQ[p]  -=  ltQ[q]  *  ltQ[p];  ltQ[p]  -=  ltQ[q]  *  ltQ[p];	  	compilable	  [FE]  AssertionError  	43	5	add
18	[BUG]  [BUGGY]  ltQ[p]    -=    ltQ[q]    *    ltQ[p];    ltQ[p]  -=  ltQ[q]  *  ltQ[p];  LtQ[p]  -=  ltQ[q]  *  ltQ[p];  ltQ[p]  -=  ltQ[q]  *  ltQ[p];  [CE]  cannot  find  symbol  LtQ  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]    -=    ltQ[q]    *    ltQ[p];    ltQ[p]  -=  ltQ[q]  *  ltQ[p];  LtQ[p]  -=  ltQ[q]  *  ltQ[p];  ltQ[p]  -=  ltQ[q]  *  ltQ[p];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]        -=        ltQ[q]        *        ltQ[p];        ltQ[p]    -=    ltQ[q]    *    ltQ[p];    LtQ[p]  -=  ltQ[q]  *  ltQ[p];  ltQ[p]  -=  ltQ[q]  *  ltQ[p];	  	non-compiled	[CE]  cannot  find  symbol  LtQ	43	None	add
19	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  Math.sqrt(ltQ[p]  *  ltI[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltI[p]  -=  Math.sqrt(ltQ[p]  *  ltI[p]);	  ltI[p]    -=    Math.sqrt(ltQ[p]);    	compilable	  [FE]  AssertionError  	20	5	replace
20	[BUG]  [BUGGY]  ltI[p]  -=  Math.sqrt(ltQ[p]  *  ltI[p]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  Math.sqrt(ltQ[p]  *  ltI[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]  -=  Math.sqrt(ltQ[p]  *  ltI[p]);	  ltI[p]    -=    Math.sqrt(ltQ[p]);    	compilable	  [FE]  AssertionError  	20	5	replace
21	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  Math.log(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltI[p]  -=  Math.log(ltQ[p]);	  ltI[p]    -=    Math.sqrt(ltQ[p]);    	compilable	  [FE]  AssertionError  	20	4	replace
22	[BUG]  [BUGGY]  ltI[p]  -=  Math.log(ltQ[p]);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  Math.log(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]  -=  Math.log(ltQ[p]);	  ltI[p]    -=    Math.sqrt(ltQ[p]);    	compilable	  [FE]  AssertionError  	20	4	replace
23	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  Math.sqrt(ltQ[p]  *  ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltI[p]  -=  Math.sqrt(ltQ[p]  *  ltQ[p]);	  ltI[p]    -=    Math.sqrt(ltQ[p]);    	compilable	  [FE]  AssertionError  	20	4	replace
24	[BUG]  [BUGGY]  ltI[p]  -=  Math.sqrt(ltQ[p]  *  ltQ[p]);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  Math.sqrt(ltQ[p]  *  ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]  -=  Math.sqrt(ltQ[p]  *  ltQ[p]);	  ltI[p]    -=    Math.sqrt(ltQ[p]);    	compilable	  [FE]  AssertionError  	20	4	replace
25	[BUG]  [BUGGY]  ltI[p]  -=  Math.sqrt(ltQ[p]  *  ltJI[p]);  [CE]  cannot  find  symbol  ltJI  [FE]          AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  Math.sqrt(ltQ[p]  *  ltJI[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]  -=  Math.sqrt(ltQ[p]  *  ltJI[p]);	  ltI[p]    -=    Math.sqrt(ltQ[p]);    	non-compiled	[CE]  cannot  find  symbol  ltJI	20	None	replace
26	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[0]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltI[p]  =  Math.sqrt(ltQ[0]);	  ltI[p]    =    Math.sqrt(ltQ[i]);    	compilable	  [FE]  AssertionError  	77	4	replace
27	[BUG]  [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[0]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[0]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]  =  Math.sqrt(ltQ[0]);	  ltI[p]    =    Math.sqrt(ltQ[i]);    	compilable	  [FE]  AssertionError  	77	4	replace
28	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]  =  Math.log(ltQ[p]);  ltQ[p]  =  Math.sqrt(ltQ[p]);  ltQ[p]  =  Math.log(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	                ltQ[p]        =        Math.sqrt(ltQ[p]);        ltQ[p]    =    Math.log(ltQ[p]);    ltQ[p]  =  Math.sqrt(ltQ[p]);  ltQ[p]  =  Math.log(ltQ[p]);	  	compilable	  [FE]  AssertionError  	67	5	add
29	[BUG]  [BUGGY]          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]  =  Math.log(ltQ[p]);  ltQ[p]  =  Math.sqrt(ltQ[p]);  ltQ[p]  =  Math.log(ltQ[p]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]  =  Math.log(ltQ[p]);  ltQ[p]  =  Math.sqrt(ltQ[p]);  ltQ[p]  =  Math.log(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	                ltQ[p]        =        Math.sqrt(ltQ[p]);        ltQ[p]    =    Math.log(ltQ[p]);    ltQ[p]  =  Math.sqrt(ltQ[p]);  ltQ[p]  =  Math.log(ltQ[p]);	  	compilable	  [FE]  AssertionError  	67	5	add
30	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]  =  Math.log(ltQ[p]);  ltQ[p]  =  Math.log(ltQ[p]);  ltQ[p]  =  Math.log(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	                ltQ[p]        =        Math.sqrt(ltQ[p]);        ltQ[p]    =    Math.log(ltQ[p]);    ltQ[p]  =  Math.log(ltQ[p]);  ltQ[p]  =  Math.log(ltQ[p]);	  	compilable	  [FE]  AssertionError  	67	5	add
31	[BUG]  [BUGGY]          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]  =  Math.log(ltQ[p]);  ltQ[p]  =  Math.log(ltQ[p]);  ltQ[p]  =  Math.log(ltQ[p]);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]  =  Math.log(ltQ[p]);  ltQ[p]  =  Math.log(ltQ[p]);  ltQ[p]  =  Math.log(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	                ltQ[p]        =        Math.sqrt(ltQ[p]);        ltQ[p]    =    Math.log(ltQ[p]);    ltQ[p]  =  Math.log(ltQ[p]);  ltQ[p]  =  Math.log(ltQ[p]);	  	compilable	  [FE]  AssertionError  	67	5	add
32	[BUG]  [BUGGY]          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]  =  Math.log(ltQ[p]);  LtQ[p]  =  Math.sqrt(ltQ[p]);  ltQ[p]  =  Math.log(ltQ[p]);  [CE]  cannot  find  symbol  LtQ  [FE]        AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]  =  Math.log(ltQ[p]);  LtQ[p]  =  Math.sqrt(ltQ[p]);  ltQ[p]  =  Math.log(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	                ltQ[p]        =        Math.sqrt(ltQ[p]);        ltQ[p]    =    Math.log(ltQ[p]);    LtQ[p]  =  Math.sqrt(ltQ[p]);  ltQ[p]  =  Math.log(ltQ[p]);	  	non-compiled	[CE]  cannot  find  symbol  LtQ	67	None	add
33	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[p]  *  ltQ[p]  +  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltI[p]  =  Math.sqrt(ltQ[p]  *  ltQ[p]  +  1);	          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]    =    Math.sqrt(ltQ[p]    +    1);    	compilable	  [FE]  AssertionError  	59	4	replace
34	[BUG]  [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[p]  *  ltQ[p]  +  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[p]  *  ltQ[p]  +  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]  =  Math.sqrt(ltQ[p]  *  ltQ[p]  +  1);	          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]    =    Math.sqrt(ltQ[p]    +    1);    	compilable	  [FE]  AssertionError  	59	4	replace
35	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltI[p]  *  ltQ[i];  ltI[p]  -=  ltI[p]  *  ltQ[i];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltI[p]    -=    ltI[p]    *    ltQ[i];    ltI[p]  -=  ltI[p]  *  ltQ[i];	  	compilable	  [FE]  AssertionError  	101	2	add
36	[BUG]  [BUGGY]  ltI[p]  -=  ltI[p]  *  ltQ[i];  ltI[p]  -=  ltI[p]  *  ltQ[i];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltI[p]  *  ltQ[i];  ltI[p]  -=  ltI[p]  *  ltQ[i];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]    -=    ltI[p]    *    ltQ[i];    ltI[p]  -=  ltI[p]  *  ltQ[i];	  	compilable	  [FE]  AssertionError  	101	2	add
37	[BUG]  [BUGGY]  ltI[p]  -=  ltI[p]  *  ltQ[i];  LtI[p]  -=  ltI[p]  *  ltQ[i];  [CE]  cannot  find  symbol  LtI  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltI[p]  *  ltQ[i];  LtI[p]  -=  ltI[p]  *  ltQ[i];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]    -=    ltI[p]    *    ltQ[i];    LtI[p]  -=  ltI[p]  *  ltQ[i];	  	non-compiled	[CE]  cannot  find  symbol  LtI	101	None	add
38	[BUG]  [BUGGY]  ltI[p]  -=  ltI[p]  *  ltQ[i];  ltI[p]  -=  ltI[p]  *  ltQu[i];  [CE]  cannot  find  symbol  ltQu  [FE]        AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltI[p]  *  ltQ[i];  ltI[p]  -=  ltI[p]  *  ltQu[i];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]    -=    ltI[p]    *    ltQ[i];    ltI[p]  -=  ltI[p]  *  ltQu[i];	  	non-compiled	[CE]  cannot  find  symbol  ltQu	101	None	add
39	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.min(ltQ[p],  p);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]  =  Math.min(ltQ[p],  p);	          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]    =    Math.min(ltQ[p]);    	compilable	  [FE]  AssertionError  	106	4	replace
40	[BUG]  [BUGGY]  ltQ[p]  =  Math.min(ltQ[p],  p);  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.min(ltQ[p],  p);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  =  Math.min(ltQ[p],  p);	          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]    =    Math.min(ltQ[p]);    	compilable	  [FE]  AssertionError  	106	4	replace
41	[BUG]  [BUGGY]  LtQ[p]  =  Math.min(ltQ[p],  p);  [CE]  cannot  find  symbol  LtQ  [FE]          AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  LtQ[p]  =  Math.min(ltQ[p],  p);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	LtQ[p]  =  Math.min(ltQ[p],  p);	          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]    =    Math.min(ltQ[p]);    	non-compiled	[CE]  cannot  find  symbol  LtQ	106	None	replace
42	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.min(ltQ[p],  inverse);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]  =  Math.min(ltQ[p],  inverse);	          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]    =    Math.min(ltQ[p]);    	compilable	  [FE]  AssertionError  	106	4	replace
43	[BUG]  [BUGGY]  ltQ[p]  =  Math.min(ltQ[p],  inverse);  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.min(ltQ[p],  inverse);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  =  Math.min(ltQ[p],  inverse);	          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]    =    Math.min(ltQ[p]);    	compilable	  [FE]  AssertionError  	106	4	replace
44	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i],  p,  p);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i],  p,  p);  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[i]  =  Math.sqrt(ltQ[i],  p,  p);	          ltI[i]    =    Math.sqrt(ltQ[i],    p);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	109	None	replace
45	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i],  p,  inverse);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i],  p,  inverse);  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[i]  =  Math.sqrt(ltQ[i],  p,  inverse);	          ltI[i]    =    Math.sqrt(ltQ[i],    p);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	109	None	replace
46	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i],  p,  j);  [CE]  cannot  find  symbol  j  [FE]            AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i],  p,  j);  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[i]  =  Math.sqrt(ltQ[i],  p,  j);	          ltI[i]    =    Math.sqrt(ltQ[i],    p);    	non-compiled	[CE]  cannot  find  symbol  j	109	None	replace
47	[BUG]  [BUGGY]  ltI[p]  -=  ltI[Q]  *  ltI[p];  [CE]  cannot  find  symbol  Q  [FE]            AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltI[Q]  *  ltI[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]  -=  ltI[Q]  *  ltI[p];	          ltI[p]    -=    ltI[q]    *    ltI[p];    ltI[p]    -=    ltI[Q]    *    ltI[p];    	non-compiled	[CE]  cannot  find  symbol  Q	32	None	replace
48	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[p]  *  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltI[p]  =  Math.sqrt(ltQ[p]  *  1);	  ltI[p]    =    Math.sqrt(ltQ[p]    -    1);    	compilable	  [FE]  AssertionError  	24	4	replace
49	[BUG]  [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[p]  *  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[p]  *  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]  =  Math.sqrt(ltQ[p]  *  1);	  ltI[p]    =    Math.sqrt(ltQ[p]    -    1);    	compilable	  [FE]  AssertionError  	24	4	replace
50	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltI[p]  *  ltQ[p];  ltI[p]  -=  ltI[p]  *  ltQ[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltI[p]    -=    ltI[p]    *    ltQ[p];    ltI[p]  -=  ltI[p]  *  ltQ[p];	  	compilable	  [FE]  AssertionError  	11	5	add
51	[BUG]  [BUGGY]  ltI[p]  -=  ltI[p]  *  ltQ[p];  ltI[p]  -=  ltI[p]  *  ltQ[p];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltI[p]  *  ltQ[p];  ltI[p]  -=  ltI[p]  *  ltQ[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]    -=    ltI[p]    *    ltQ[p];    ltI[p]  -=  ltI[p]  *  ltQ[p];	  	compilable	  [FE]  AssertionError  	11	5	add
52	[BUG]  [BUGGY]  ltI[p]  -=  ltI[p]  *  ltQ[p];  LtI[p]  -=  ltI[p]  *  ltQ[p];  [CE]  cannot  find  symbol  LtI  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltI[p]  *  ltQ[p];  LtI[p]  -=  ltI[p]  *  ltQ[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]    -=    ltI[p]    *    ltQ[p];    LtI[p]  -=  ltI[p]  *  ltQ[p];	  	non-compiled	[CE]  cannot  find  symbol  LtI	11	None	add
53	[BUG]  [BUGGY]  ltI[p]  -=  ltI[p]  *  ltQ[p];  ltI[p]  -=  ltI[p]  *  ltQu[p];  [CE]  cannot  find  symbol  ltQu  [FE]        AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltI[p]  *  ltQ[p];  ltI[p]  -=  ltI[p]  *  ltQu[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]    -=    ltI[p]    *    ltQ[p];    ltI[p]  -=  ltI[p]  *  ltQu[p];	  	non-compiled	[CE]  cannot  find  symbol  ltQu	11	None	add
54	[BUG]  [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltQ[q].doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltQ[q].doubleValue();  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  -=  ltQ[p]  *  ltQ[q].doubleValue();	  ltQ[p]    -=    ltQ[p]    *    ltQ[q];    	non-compiled	[CE]  double  cannot  be  dereferenced	81	None	replace
55	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.log(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltI[p]  =  Math.log(ltQ[p]);	          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]    =    Math.log(ltQ[p]);    	compilable	  [FE]  AssertionError  	56	4	replace
56	[BUG]  [BUGGY]  ltI[p]  =  Math.log(ltQ[p]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.log(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]  =  Math.log(ltQ[p]);	          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]    =    Math.log(ltQ[p]);    	compilable	  [FE]  AssertionError  	56	4	replace
57	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.ceil(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltI[p]  =  Math.ceil(ltQ[p]);	          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]    =    Math.log(ltQ[p]);    	compilable	  [FE]  AssertionError  	56	4	replace
58	[BUG]  [BUGGY]  ltI[p]  =  Math.ceil(ltQ[p]);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.ceil(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]  =  Math.ceil(ltQ[p]);	          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]    =    Math.log(ltQ[p]);    	compilable	  [FE]  AssertionError  	56	4	replace
59	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  Math.sqrt(ltQ[p]  *  ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]  -=  Math.sqrt(ltQ[p]  *  ltQ[p]);	  ltQ[p]    -=    Math.sqrt(ltQ[p]);    	compilable	  [FE]  AssertionError  	38	5	replace
60	[BUG]  [BUGGY]  ltQ[p]  -=  Math.sqrt(ltQ[p]  *  ltQ[p]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  Math.sqrt(ltQ[p]  *  ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  -=  Math.sqrt(ltQ[p]  *  ltQ[p]);	  ltQ[p]    -=    Math.sqrt(ltQ[p]);    	compilable	  [FE]  AssertionError  	38	5	replace
61	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  Math.log(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]  -=  Math.log(ltQ[p]);	  ltQ[p]    -=    Math.sqrt(ltQ[p]);    	compilable	  [FE]  AssertionError  	38	4	replace
62	[BUG]  [BUGGY]  ltQ[p]  -=  Math.log(ltQ[p]);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  Math.log(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  -=  Math.log(ltQ[p]);	  ltQ[p]    -=    Math.sqrt(ltQ[p]);    	compilable	  [FE]  AssertionError  	38	4	replace
63	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  Math.sqrt(ltQ[p]  *  ltI[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]  -=  Math.sqrt(ltQ[p]  *  ltI[p]);	  ltQ[p]    -=    Math.sqrt(ltQ[p]);    	compilable	  [FE]  AssertionError  	38	4	replace
64	[BUG]  [BUGGY]  ltQ[p]  -=  Math.sqrt(ltQ[p]  *  ltI[p]);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  Math.sqrt(ltQ[p]  *  ltI[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  -=  Math.sqrt(ltQ[p]  *  ltI[p]);	  ltQ[p]    -=    Math.sqrt(ltQ[p]);    	compilable	  [FE]  AssertionError  	38	4	replace
65	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.log(ltQ[p]  *  ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]  =  Math.log(ltQ[p]  *  ltQ[p]);	  ltQ[p]    =    Math.log(ltQ[p]);    	compilable	  [FE]  AssertionError  	42	4	replace
66	[BUG]  [BUGGY]  ltQ[p]  =  Math.log(ltQ[p]  *  ltQ[p]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.log(ltQ[p]  *  ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  =  Math.log(ltQ[p]  *  ltQ[p]);	  ltQ[p]    =    Math.log(ltQ[p]);    	compilable	  [FE]  AssertionError  	42	4	replace
67	[BUG]  [BUGGY]  ltQ[p]  =  Math.log(ltQ[p],  inverse);  [CE]  method  log  in  class  Math  cannot  be  applied  to  given  types;  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.log(ltQ[p],  inverse);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  =  Math.log(ltQ[p],  inverse);	  ltQ[p]    =    Math.log(ltQ[p]);    	non-compiled	[CE]  method  log  in  class  Math  cannot  be  applied  to  given  types;	42	None	replace
68	[BUG]  [BUGGY]  ltQ[p]  =  Math.log(ltQ[p],  ltQ[i]);  [CE]  method  log  in  class  Math  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.log(ltQ[p],  ltQ[i]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  =  Math.log(ltQ[p],  ltQ[i]);	  ltQ[p]    =    Math.log(ltQ[p]);    	non-compiled	[CE]  method  log  in  class  Math  cannot  be  applied  to  given  types;	42	None	replace
69	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[p]  -  1);  ltI[p]  =  Math.sqrt(ltQ[p]  -  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltI[p]    =    Math.sqrt(ltQ[p]    -    1);    ltI[p]  =  Math.sqrt(ltQ[p]  -  1);	  	compilable	  [FE]  AssertionError  	23	5	add
70	[BUG]  [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[p]  -  1);  ltI[p]  =  Math.sqrt(ltQ[p]  -  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[p]  -  1);  ltI[p]  =  Math.sqrt(ltQ[p]  -  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]    =    Math.sqrt(ltQ[p]    -    1);    ltI[p]  =  Math.sqrt(ltQ[p]  -  1);	  	compilable	  [FE]  AssertionError  	23	5	add
71	[BUG]  [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[p]  -  1);  LtI[p]  =  Math.sqrt(ltQ[p]  -  1);  [CE]  cannot  find  symbol  LtI  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[p]  -  1);  LtI[p]  =  Math.sqrt(ltQ[p]  -  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]    =    Math.sqrt(ltQ[p]    -    1);    LtI[p]  =  Math.sqrt(ltQ[p]  -  1);	  	non-compiled	[CE]  cannot  find  symbol  LtI	23	None	add
72	[BUG]  [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[p]  -  1);  ltI[p]  =  Math.sqrt(ltQ[p]  -  1));  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[p]  -  1);  ltI[p]  =  Math.sqrt(ltQ[p]  -  1));  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]    =    Math.sqrt(ltQ[p]    -    1);    ltI[p]  =  Math.sqrt(ltQ[p]  -  1));	  	non-compiled	[CE]  ';'  expected	23	None	add
73	[BUG]  [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[p]  -  1);  ltI[p]  =  Math.sqrt(ltQu[p]  -  1);  [CE]  cannot  find  symbol  ltQu  [FE]          AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[p]  -  1);  ltI[p]  =  Math.sqrt(ltQu[p]  -  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]    =    Math.sqrt(ltQ[p]    -    1);    ltI[p]  =  Math.sqrt(ltQu[p]  -  1);	  	non-compiled	[CE]  cannot  find  symbol  ltQu	23	None	add
74	[BUG]  [BUGGY]  LtQ[p]  -=  ltQ[p]  *  ltQ[p];  [CE]  cannot  find  symbol  LtQ  [FE]          AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  LtQ[p]  -=  ltQ[p]  *  ltQ[p];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	LtQ[p]  -=  ltQ[p]  *  ltQ[p];	  ltQ[p]    -=    ltQ[p]    *    ltQ[p];    LtQ[p]    -=    ltQ[p]    *    ltQ[p];    	non-compiled	[CE]  cannot  find  symbol  LtQ	62	None	replace
75	[BUG]  [BUGGY]  double  ltQ[p]  -=  ltQ[p]  *  ltQ[p];  [CE]  ']'  expected  [FE]        AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  double  ltQ[p]  -=  ltQ[p]  *  ltQ[p];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	double  ltQ[p]  -=  ltQ[p]  *  ltQ[p];	  ltQ[p]    -=    ltQ[p]    *    ltQ[p];    double    ltQ[p]    -=    ltQ[p]    *    ltQ[p];    	non-compiled	[CE]  ']'  expected	75	None	replace
76	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltI[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]  -=  ltQ[p]  *  ltI[p];	          ltQ[p]    -=    ltQ[q]    *    ltI[p];    ltQ[p]    -=    ltQ[q]    *    ltI[p];    	compilable	  [FE]  AssertionError  	34	5	replace
77	[BUG]  [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltI[p];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltI[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  -=  ltQ[p]  *  ltI[p];	          ltQ[p]    -=    ltQ[q]    *    ltI[p];    ltQ[p]    -=    ltQ[q]    *    ltI[p];    	compilable	  [FE]  AssertionError  	34	5	replace
78	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltQ[i]  +  1;  ltQ[p]  -=  ltQ[p]  *  ltQ[i]  +  1;  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]    -=    ltQ[p]    *    ltQ[i]    +    1;    ltQ[p]  -=  ltQ[p]  *  ltQ[i]  +  1;	  	compilable	  [FE]  AssertionError  	51	4	add
79	[BUG]  [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltQ[i]  +  1;  ltQ[p]  -=  ltQ[p]  *  ltQ[i]  +  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltQ[i]  +  1;  ltQ[p]  -=  ltQ[p]  *  ltQ[i]  +  1;  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]    -=    ltQ[p]    *    ltQ[i]    +    1;    ltQ[p]  -=  ltQ[p]  *  ltQ[i]  +  1;	  	compilable	  [FE]  AssertionError  	51	4	add
80	[BUG]  [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltQ[i]  +  1;  LtQ[p]  -=  ltQ[p]  *  ltQ[i]  +  1;  [CE]  cannot  find  symbol  LtQ  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltQ[i]  +  1;  LtQ[p]  -=  ltQ[p]  *  ltQ[i]  +  1;  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]    -=    ltQ[p]    *    ltQ[i]    +    1;    LtQ[p]  -=  ltQ[p]  *  ltQ[i]  +  1;	  	non-compiled	[CE]  cannot  find  symbol  LtQ	51	None	add
81	[BUG]  [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltQ[i]  +  1;  ltQ[p]  -=  ltQ[p]  *  ltQ[i]  +  1;  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltQ[i]  +  1;  ltQ[p]  -=  ltQ[p]  *  ltQ[i]  +  1;  }  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]    -=    ltQ[p]    *    ltQ[i]    +    1;    ltQ[p]  -=  ltQ[p]  *  ltQ[i]  +  1;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	add
82	[BUG]  [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltQ[p].;  [CE]  <identifier>  expected  [FE]        AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltQ[p].;  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  -=  ltQ[p]  *  ltQ[p].;	  ltQ[p]    -=    ltQ[p]    *    ltQ[p];    ltQ[p]    -=    ltQ[p]    *    ltQ[p].;    	non-compiled	[CE]  <identifier>  expected	110	None	replace
83	[BUG]  [BUGGY]  LtQ[p]  -=  ltQ[p]  *  ltQ[p].;  [CE]  <identifier>  expected  [FE]          AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  LtQ[p]  -=  ltQ[p]  *  ltQ[p].;  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	LtQ[p]  -=  ltQ[p]  *  ltQ[p].;	  ltQ[p]    -=    ltQ[p]    *    ltQ[p];    ltQ[p]    -=    ltQ[p]    *    ltQ[p].;    	non-compiled	[CE]  <identifier>  expected	110	None	replace
84	[BUG]  [BUGGY]  LtQ[p]  -=  ltQ[p]  *  ltQ[i];  [CE]  cannot  find  symbol  LtQ  [FE]          AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  LtQ[p]  -=  ltQ[p]  *  ltQ[i];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	LtQ[p]  -=  ltQ[p]  *  ltQ[i];	  ltQ[p]    -=    ltQ[p]    *    ltQ[i];    LtQ[p]    -=    ltQ[p]    *    ltQ[i];    	non-compiled	[CE]  cannot  find  symbol  LtQ	27	None	replace
85	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.log(ltQ[p]);  ltQ[p]  =  Math.log(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]    =    Math.log(ltQ[p]);    ltQ[p]  =  Math.log(ltQ[p]);	  	compilable	  [FE]  AssertionError  	41	5	add
86	[BUG]  [BUGGY]  ltQ[p]  =  Math.log(ltQ[p]);  ltQ[p]  =  Math.log(ltQ[p]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.log(ltQ[p]);  ltQ[p]  =  Math.log(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]    =    Math.log(ltQ[p]);    ltQ[p]  =  Math.log(ltQ[p]);	  	compilable	  [FE]  AssertionError  	41	5	add
87	[BUG]  [BUGGY]  ltQ[p]  =  Math.log(ltQ[p]);  ltQ[p]  =  Math.log(ltQ[p]).log(ltQ[p]);  [CE]  double  cannot  be  dereferenced  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.log(ltQ[p]);  ltQ[p]  =  Math.log(ltQ[p]).log(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]    =    Math.log(ltQ[p]);    ltQ[p]  =  Math.log(ltQ[p]).log(ltQ[p]);	  	non-compiled	[CE]  double  cannot  be  dereferenced	41	None	add
88	[BUG]  [BUGGY]  ltQ[p]  =  Math.log(ltQ[p]);  LtQ[p]  =  Math.log(ltQ[p]);  [CE]  cannot  find  symbol  LtQ  [FE]        AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.log(ltQ[p]);  LtQ[p]  =  Math.log(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]    =    Math.log(ltQ[p]);    LtQ[p]  =  Math.log(ltQ[p]);	  	non-compiled	[CE]  cannot  find  symbol  LtQ	41	None	add
89	[BUG]  [BUGGY]  ltQ[p]  =  Math.log(ltQ[p]);  ltQ[p]  =  Math.log(ltQ[p]));  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.log(ltQ[p]);  ltQ[p]  =  Math.log(ltQ[p]));  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]    =    Math.log(ltQ[p]);    ltQ[p]  =  Math.log(ltQ[p]));	  	non-compiled	[CE]  ';'  expected	41	None	add
90	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltQ[q]  *  ltI[p];  ltI[p]  -=  ltQ[q]  *  ltI[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltI[p]    -=    ltQ[q]    *    ltI[p];    ltI[p]  -=  ltQ[q]  *  ltI[p];	  	compilable	  [FE]  AssertionError  	73	5	add
91	[BUG]  [BUGGY]  ltI[p]  -=  ltQ[q]  *  ltI[p];  ltI[p]  -=  ltQ[q]  *  ltI[p];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltQ[q]  *  ltI[p];  ltI[p]  -=  ltQ[q]  *  ltI[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]    -=    ltQ[q]    *    ltI[p];    ltI[p]  -=  ltQ[q]  *  ltI[p];	  	compilable	  [FE]  AssertionError  	73	5	add
92	[BUG]  [BUGGY]  ltI[p]  -=  ltQ[q]  *  ltI[p];  LtI[p]  -=  ltQ[q]  *  ltI[p];  [CE]  cannot  find  symbol  LtI  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltQ[q]  *  ltI[p];  LtI[p]  -=  ltQ[q]  *  ltI[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]    -=    ltQ[q]    *    ltI[p];    LtI[p]  -=  ltQ[q]  *  ltI[p];	  	non-compiled	[CE]  cannot  find  symbol  LtI	73	None	add
93	[BUG]  [BUGGY]  ltI[p]  -=  ltQ[q]  *  ltI[p];  ltI[p]  -=  ltQu[q]  *  ltI[p];  [CE]  cannot  find  symbol  ltQu  [FE]        AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltQ[q]  *  ltI[p];  ltI[p]  -=  ltQu[q]  *  ltI[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]    -=    ltQ[q]    *    ltI[p];    ltI[p]  -=  ltQu[q]  *  ltI[p];	  	non-compiled	[CE]  cannot  find  symbol  ltQu	73	None	add
94	[BUG]  [BUGGY]  LtQ[p]  -=  ltQ[i]  *  ltQ[p];  [CE]  cannot  find  symbol  LtQ  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  LtQ[p]  -=  ltQ[i]  *  ltQ[p];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	LtQ[p]  -=  ltQ[i]  *  ltQ[p];	  ltQ[p]    -=    ltQ[i]    *    ltQ[p];    ltQ[p]    -=    ltQ[i]    *    ltQ[p];    	non-compiled	[CE]  cannot  find  symbol  LtQ	4	None	replace
95	[BUG]  [BUGGY]  LtI[p]  -=  ltI[p]  *  ltI[p];  [CE]  cannot  find  symbol  LtI  [FE]          AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  LtI[p]  -=  ltI[p]  *  ltI[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	LtI[p]  -=  ltI[p]  *  ltI[p];	          ltI[p]    -=    ltI[p]    *    ltI[p];    LtI[p]    -=    ltI[p]    *    ltI[p];    	non-compiled	[CE]  cannot  find  symbol  LtI	9	None	replace
96	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltQ[p]  *  ltQ[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltI[p]  -=  ltQ[p]  *  ltQ[p];	  ltI[p]    -=    ltI[p]    *    ltQ[p];    	compilable	  [FE]  AssertionError  	12	4	replace
97	[BUG]  [BUGGY]  ltI[p]  -=  ltQ[p]  *  ltQ[p];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltQ[p]  *  ltQ[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]  -=  ltQ[p]  *  ltQ[p];	  ltI[p]    -=    ltI[p]    *    ltQ[p];    	compilable	  [FE]  AssertionError  	12	4	replace
98	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltI[p]  *  ltQ[p]  +  1;  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltI[p]  -=  ltI[p]  *  ltQ[p]  +  1;	  ltI[p]    -=    ltI[p]    *    ltQ[p];    	compilable	  [FE]  AssertionError  	12	4	replace
99	[BUG]  [BUGGY]  ltI[p]  -=  ltI[p]  *  ltQ[p]  +  1;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltI[p]  *  ltQ[p]  +  1;  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]  -=  ltI[p]  *  ltQ[p]  +  1;	  ltI[p]    -=    ltI[p]    *    ltQ[p];    	compilable	  [FE]  AssertionError  	12	4	replace
100	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltI[q]  *  ltQ[p];  ltI[p]  -=  ltI[q]  *  ltQ[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltI[p]    -=    ltI[q]    *    ltQ[p];    ltI[p]  -=  ltI[q]  *  ltQ[p];	  	compilable	  [FE]  AssertionError  	71	5	add
101	[BUG]  [BUGGY]  ltI[p]  -=  ltI[q]  *  ltQ[p];  ltI[p]  -=  ltI[q]  *  ltQ[p];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltI[q]  *  ltQ[p];  ltI[p]  -=  ltI[q]  *  ltQ[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]    -=    ltI[q]    *    ltQ[p];    ltI[p]  -=  ltI[q]  *  ltQ[p];	  	compilable	  [FE]  AssertionError  	71	5	add
102	[BUG]  [BUGGY]  ltI[p]  -=  ltI[q]  *  ltQ[p];  LtI[p]  -=  ltI[q]  *  ltQ[p];  [CE]  cannot  find  symbol  LtI  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltI[q]  *  ltQ[p];  LtI[p]  -=  ltI[q]  *  ltQ[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]    -=    ltI[q]    *    ltQ[p];    LtI[p]  -=  ltI[q]  *  ltQ[p];	  	non-compiled	[CE]  cannot  find  symbol  LtI	71	None	add
103	[BUG]  [BUGGY]  ltI[p]  -=  ltI[q]  *  ltQ[p];  ltI[p]  -=  ltI[q]  *  ltQu[p];  [CE]  cannot  find  symbol  ltQu  [FE]        AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltI[q]  *  ltQ[p];  ltI[p]  -=  ltI[q]  *  ltQu[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]    -=    ltI[q]    *    ltQ[p];    ltI[p]  -=  ltI[q]  *  ltQu[p];	  	non-compiled	[CE]  cannot  find  symbol  ltQu	71	None	add
104	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[p]  -  1);  ltQ[p]  =  Math.sqrt(ltQ[p]  -  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]    =    Math.sqrt(ltQ[p]    -    1);    ltQ[p]  =  Math.sqrt(ltQ[p]  -  1);	  	compilable	  [FE]  AssertionError  	93	5	add
105	[BUG]  [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[p]  -  1);  ltQ[p]  =  Math.sqrt(ltQ[p]  -  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[p]  -  1);  ltQ[p]  =  Math.sqrt(ltQ[p]  -  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]    =    Math.sqrt(ltQ[p]    -    1);    ltQ[p]  =  Math.sqrt(ltQ[p]  -  1);	  	compilable	  [FE]  AssertionError  	93	5	add
106	[BUG]  [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[p]  -  1);  LtQ[p]  =  Math.sqrt(ltQ[p]  -  1);  [CE]  cannot  find  symbol  LtQ  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[p]  -  1);  LtQ[p]  =  Math.sqrt(ltQ[p]  -  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]    =    Math.sqrt(ltQ[p]    -    1);    LtQ[p]  =  Math.sqrt(ltQ[p]  -  1);	  	non-compiled	[CE]  cannot  find  symbol  LtQ	93	None	add
107	[BUG]  [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[p]  -  1);  ltQ[p]  =  Math.sqrt(ltQ[p]  -  1));  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[p]  -  1);  ltQ[p]  =  Math.sqrt(ltQ[p]  -  1));  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]    =    Math.sqrt(ltQ[p]    -    1);    ltQ[p]  =  Math.sqrt(ltQ[p]  -  1));	  	non-compiled	[CE]  ';'  expected	93	None	add
108	[BUG]  [BUGGY]  ltQ[p]  -=  ltQ[i]  *  ltQ[j];  [CE]  cannot  find  symbol  j  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[i]  *  ltQ[j];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  -=  ltQ[i]  *  ltQ[j];	  ltQ[p]    -=    ltQ[i]    *    ltQ[q];    	non-compiled	[CE]  cannot  find  symbol  j	84	None	replace
109	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltI[p]  *  ltQ[0];  ltI[p]  -=  ltI[p]  *  ltQ[0];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltI[p]    -=    ltI[p]    *    ltQ[0];    ltI[p]  -=  ltI[p]  *  ltQ[0];	  	compilable	  [FE]  AssertionError  	99	2	add
110	[BUG]  [BUGGY]  ltI[p]  -=  ltI[p]  *  ltQ[0];  ltI[p]  -=  ltI[p]  *  ltQ[0];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltI[p]  *  ltQ[0];  ltI[p]  -=  ltI[p]  *  ltQ[0];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]    -=    ltI[p]    *    ltQ[0];    ltI[p]  -=  ltI[p]  *  ltQ[0];	  	compilable	  [FE]  AssertionError  	99	2	add
111	[BUG]  [BUGGY]  ltI[p]  -=  ltI[p]  *  ltQ[0];  LtI[p]  -=  ltI[p]  *  ltQ[0];  [CE]  cannot  find  symbol  LtI  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltI[p]  *  ltQ[0];  LtI[p]  -=  ltI[p]  *  ltQ[0];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]    -=    ltI[p]    *    ltQ[0];    LtI[p]  -=  ltI[p]  *  ltQ[0];	  	non-compiled	[CE]  cannot  find  symbol  LtI	99	None	add
112	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltI[p]  *  ltQ[0];  ltI[p]  -=  ltI[p]  *  ltQ[1];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltI[p]    -=    ltI[p]    *    ltQ[0];    ltI[p]  -=  ltI[p]  *  ltQ[1];	  	compilable	  [FE]  AssertionError  	99	5	add
113	[BUG]  [BUGGY]  ltI[p]  -=  ltI[p]  *  ltQ[0];  ltI[p]  -=  ltI[p]  *  ltQ[1];  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltI[p]  *  ltQ[0];  ltI[p]  -=  ltI[p]  *  ltQ[1];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]    -=    ltI[p]    *    ltQ[0];    ltI[p]  -=  ltI[p]  *  ltQ[1];	  	compilable	  [FE]  AssertionError  	99	5	add
114	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]  =  Math.sqrt(ltQ[p]);  ltI[p]  =  Math.sqrt(ltQ[p]);  ltI[p]  =  Math.sqrt(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	                ltI[p]        =        Math.sqrt(ltQ[p]);        ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]  =  Math.sqrt(ltQ[p]);  ltI[p]  =  Math.sqrt(ltQ[p]);	  	compilable	  [FE]  AssertionError  	53	5	add
115	[BUG]  [BUGGY]          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]  =  Math.sqrt(ltQ[p]);  ltI[p]  =  Math.sqrt(ltQ[p]);  ltI[p]  =  Math.sqrt(ltQ[p]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]  =  Math.sqrt(ltQ[p]);  ltI[p]  =  Math.sqrt(ltQ[p]);  ltI[p]  =  Math.sqrt(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	                ltI[p]        =        Math.sqrt(ltQ[p]);        ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]  =  Math.sqrt(ltQ[p]);  ltI[p]  =  Math.sqrt(ltQ[p]);	  	compilable	  [FE]  AssertionError  	53	5	add
116	[BUG]  [BUGGY]          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]  =  Math.sqrt(ltQ[p]);  LtI[p]  =  Math.sqrt(ltQ[p]);  ltI[p]  =  Math.sqrt(ltQ[p]);  [CE]  cannot  find  symbol  LtI  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]  =  Math.sqrt(ltQ[p]);  LtI[p]  =  Math.sqrt(ltQ[p]);  ltI[p]  =  Math.sqrt(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	                ltI[p]        =        Math.sqrt(ltQ[p]);        ltI[p]    =    Math.sqrt(ltQ[p]);    LtI[p]  =  Math.sqrt(ltQ[p]);  ltI[p]  =  Math.sqrt(ltQ[p]);	  	non-compiled	[CE]  cannot  find  symbol  LtI	53	None	add
117	[BUG]  [BUGGY]          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]  =  Math.sqrt(ltQ[p]);  ltI[p]  =  Math.sqrt(ltQ[p]);  ltI[p]  =  Math.sqrt(ltQ[p];  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]  =  Math.sqrt(ltQ[p]);  ltI[p]  =  Math.sqrt(ltQ[p]);  ltI[p]  =  Math.sqrt(ltQ[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	                ltI[p]        =        Math.sqrt(ltQ[p]);        ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]  =  Math.sqrt(ltQ[p]);  ltI[p]  =  Math.sqrt(ltQ[p];	  	non-compiled	[CE]  ')'  expected	53	None	add
118	[BUG]  [BUGGY]          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]  =  Math.sqrt(ltQ[p]);  ltI[p]  =  Math.sqrt(ltY[p]);  ltI[p]  =  Math.sqrt(ltQ[p]);  [CE]  cannot  find  symbol  ltY  [FE]          AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]  =  Math.sqrt(ltQ[p]);  ltI[p]  =  Math.sqrt(ltY[p]);  ltI[p]  =  Math.sqrt(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	                ltI[p]        =        Math.sqrt(ltQ[p]);        ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]  =  Math.sqrt(ltY[p]);  ltI[p]  =  Math.sqrt(ltQ[p]);	  	non-compiled	[CE]  cannot  find  symbol  ltY	53	None	add
119	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]  =  Math.log(ltQ[p]);  ltI[p]  =  Math.sqrt(ltQ[p]);  ltI[p]  =  Math.log(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	                ltI[p]        =        Math.sqrt(ltQ[p]);        ltI[p]    =    Math.log(ltQ[p]);    ltI[p]  =  Math.sqrt(ltQ[p]);  ltI[p]  =  Math.log(ltQ[p]);	  	compilable	  [FE]  AssertionError  	55	4	add
120	[BUG]  [BUGGY]          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]  =  Math.log(ltQ[p]);  ltI[p]  =  Math.sqrt(ltQ[p]);  ltI[p]  =  Math.log(ltQ[p]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]  =  Math.log(ltQ[p]);  ltI[p]  =  Math.sqrt(ltQ[p]);  ltI[p]  =  Math.log(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	                ltI[p]        =        Math.sqrt(ltQ[p]);        ltI[p]    =    Math.log(ltQ[p]);    ltI[p]  =  Math.sqrt(ltQ[p]);  ltI[p]  =  Math.log(ltQ[p]);	  	compilable	  [FE]  AssertionError  	55	4	add
121	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]  =  Math.log(ltQ[p]);  ltI[p]  =  Math.log(ltQ[p]);  ltI[p]  =  Math.log(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	                ltI[p]        =        Math.sqrt(ltQ[p]);        ltI[p]    =    Math.log(ltQ[p]);    ltI[p]  =  Math.log(ltQ[p]);  ltI[p]  =  Math.log(ltQ[p]);	  	compilable	  [FE]  AssertionError  	55	4	add
122	[BUG]  [BUGGY]          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]  =  Math.log(ltQ[p]);  ltI[p]  =  Math.log(ltQ[p]);  ltI[p]  =  Math.log(ltQ[p]);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]  =  Math.log(ltQ[p]);  ltI[p]  =  Math.log(ltQ[p]);  ltI[p]  =  Math.log(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	                ltI[p]        =        Math.sqrt(ltQ[p]);        ltI[p]    =    Math.log(ltQ[p]);    ltI[p]  =  Math.log(ltQ[p]);  ltI[p]  =  Math.log(ltQ[p]);	  	compilable	  [FE]  AssertionError  	55	4	add
123	[BUG]  [BUGGY]          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]  =  Math.log(ltQ[p]);  LtI[p]  =  Math.sqrt(ltQ[p]);  ltI[p]  =  Math.log(ltQ[p]);  [CE]  cannot  find  symbol  LtI  [FE]        AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]  =  Math.log(ltQ[p]);  LtI[p]  =  Math.sqrt(ltQ[p]);  ltI[p]  =  Math.log(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	                ltI[p]        =        Math.sqrt(ltQ[p]);        ltI[p]    =    Math.log(ltQ[p]);    LtI[p]  =  Math.sqrt(ltQ[p]);  ltI[p]  =  Math.log(ltQ[p]);	  	non-compiled	[CE]  cannot  find  symbol  LtI	55	None	add
124	[BUG]  [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[p]).doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]          AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[p]).doubleValue();  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  =  Math.sqrt(ltQ[p]).doubleValue();	          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]    =    Math.sqrt(ltQ[p]).doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	66	None	replace
125	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltI[p]  *  ltQ[1];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltI[p]  -=  ltI[p]  *  ltQ[1];	  ltI[p]    -=    ltI[p]    *    ltQ[0];    	compilable	  [FE]  AssertionError  	100	4	replace
126	[BUG]  [BUGGY]  ltI[p]  -=  ltI[p]  *  ltQ[1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltI[p]  *  ltQ[1];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]  -=  ltI[p]  *  ltQ[1];	  ltI[p]    -=    ltI[p]    *    ltQ[0];    	compilable	  [FE]  AssertionError  	100	4	replace
127	[BUG]  [BUGGY]  LtI[p]  -=  ltI[q]  *  ltI[p];  [CE]  cannot  find  symbol  LtI  [FE]          AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  LtI[p]  -=  ltI[q]  *  ltI[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	LtI[p]  -=  ltI[q]  *  ltI[p];	          ltI[p]    -=    ltI[q]    *    ltI[p];    LtI[p]    -=    ltI[q]    *    ltI[p];    	non-compiled	[CE]  cannot  find  symbol  LtI	31	None	replace
128	[BUG]  [BUGGY]  LtI[p]  =  Math.sqrt(ltQ[p]);  [CE]  cannot  find  symbol  LtI  [FE]          AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  LtI[p]  =  Math.sqrt(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	LtI[p]  =  Math.sqrt(ltQ[p]);	          ltI[p]    =    Math.sqrt(ltQ[p]);    LtI[p]    =    Math.sqrt(ltQ[p]);    	non-compiled	[CE]  cannot  find  symbol  LtI	86	None	replace
129	[BUG]  [BUGGY]  final  double  inverse  =  1.0  /  ltI[i].doubleValue();  [CE]  variable  inverse  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]          AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  final  double  inverse  =  1.0  /  ltI[i].doubleValue();  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	final  double  inverse  =  1.0  /  ltI[i].doubleValue();	          ltI[i]    =    Math.sqrt(ltQ[i]);    final    double    inverse    =    1.0    /    ltI[i].doubleValue();    	non-compiled	[CE]  variable  inverse  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	90	None	replace
130	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[i]  *  ltQ[i];  ltQ[p]  -=  ltQ[i]  *  ltQ[i];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]    -=    ltQ[i]    *    ltQ[i];    ltQ[p]  -=  ltQ[i]  *  ltQ[i];	  	compilable	  [FE]  AssertionError  	49	2	add
131	[BUG]  [BUGGY]  ltQ[p]  -=  ltQ[i]  *  ltQ[i];  ltQ[p]  -=  ltQ[i]  *  ltQ[i];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[i]  *  ltQ[i];  ltQ[p]  -=  ltQ[i]  *  ltQ[i];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]    -=    ltQ[i]    *    ltQ[i];    ltQ[p]  -=  ltQ[i]  *  ltQ[i];	  	compilable	  [FE]  AssertionError  	49	2	add
132	[BUG]  [BUGGY]  ltQ[p]  -=  ltQ[i]  *  ltQ[i];  LtQ[p]  -=  ltQ[i]  *  ltQ[i];  [CE]  cannot  find  symbol  LtQ  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[i]  *  ltQ[i];  LtQ[p]  -=  ltQ[i]  *  ltQ[i];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]    -=    ltQ[i]    *    ltQ[i];    LtQ[p]  -=  ltQ[i]  *  ltQ[i];	  	non-compiled	[CE]  cannot  find  symbol  LtQ	49	None	add
133	[BUG]  [BUGGY]  ltQ[p]  -=  ltQ[i]  *  ltQ[i];  ltQ[p]  -=  ltQu[i]  *  ltQ[i];  [CE]  cannot  find  symbol  ltQu  [FE]        AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[i]  *  ltQ[i];  ltQ[p]  -=  ltQu[i]  *  ltQ[i];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]    -=    ltQ[i]    *    ltQ[i];    ltQ[p]  -=  ltQu[i]  *  ltQ[i];	  	non-compiled	[CE]  cannot  find  symbol  ltQu	49	None	add
134	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	                ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.sqrt(ltQ[i]);	  	compilable	  [FE]  AssertionError  	13	4	add
135	[BUG]  [BUGGY]          ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	                ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.sqrt(ltQ[i]);	  	compilable	  [FE]  AssertionError  	13	4	add
136	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltQ[i]  *  p);  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	                ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.sqrt(ltQ[i]  *  p);	  	compilable	  [FE]  AssertionError  	13	4	add
137	[BUG]  [BUGGY]          ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltQ[i]  *  p);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltQ[i]  *  p);  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	                ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.sqrt(ltQ[i]  *  p);	  	compilable	  [FE]  AssertionError  	13	4	add
138	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltQ[i]  +  p);  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	                ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.sqrt(ltQ[i]  +  p);	  	compilable	  [FE]  AssertionError  	13	4	add
139	[BUG]  [BUGGY]          ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltQ[i]  +  p);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltQ[i]  +  p);  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	                ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.sqrt(ltQ[i]  +  p);	  	compilable	  [FE]  AssertionError  	13	4	add
140	[BUG]  [BUGGY]          ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltQ[i].doubleValue());  [CE]  double  cannot  be  dereferenced  [FE]          AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltQ[i].doubleValue());  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	                ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.sqrt(ltQ[i].doubleValue());	  	non-compiled	[CE]  double  cannot  be  dereferenced	13	None	add
141	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[i]  *  ltQ[0];  ltQ[p]  -=  ltQ[i]  *  ltQ[0];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]    -=    ltQ[i]    *    ltQ[0];    ltQ[p]  -=  ltQ[i]  *  ltQ[0];	  	compilable	  [FE]  AssertionError  	47	2	add
142	[BUG]  [BUGGY]  ltQ[p]  -=  ltQ[i]  *  ltQ[0];  ltQ[p]  -=  ltQ[i]  *  ltQ[0];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[i]  *  ltQ[0];  ltQ[p]  -=  ltQ[i]  *  ltQ[0];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]    -=    ltQ[i]    *    ltQ[0];    ltQ[p]  -=  ltQ[i]  *  ltQ[0];	  	compilable	  [FE]  AssertionError  	47	2	add
143	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[i]  *  ltQ[0];  ltQ[p]  -=  ltQ[i]  *  ltQ[1];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]    -=    ltQ[i]    *    ltQ[0];    ltQ[p]  -=  ltQ[i]  *  ltQ[1];	  	compilable	  [FE]  AssertionError  	47	2	add
144	[BUG]  [BUGGY]  ltQ[p]  -=  ltQ[i]  *  ltQ[0];  ltQ[p]  -=  ltQ[i]  *  ltQ[1];  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[i]  *  ltQ[0];  ltQ[p]  -=  ltQ[i]  *  ltQ[1];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]    -=    ltQ[i]    *    ltQ[0];    ltQ[p]  -=  ltQ[i]  *  ltQ[1];	  	compilable	  [FE]  AssertionError  	47	2	add
145	[BUG]  [BUGGY]  ltQ[p]  -=  ltQ[i]  *  ltQ[0];  LtQ[p]  -=  ltQ[i]  *  ltQ[0];  [CE]  cannot  find  symbol  LtQ  [FE]        AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[i]  *  ltQ[0];  LtQ[p]  -=  ltQ[i]  *  ltQ[0];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]    -=    ltQ[i]    *    ltQ[0];    LtQ[p]  -=  ltQ[i]  *  ltQ[0];	  	non-compiled	[CE]  cannot  find  symbol  LtQ	47	None	add
146	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[i]  *  ltQ[1];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]  -=  ltQ[i]  *  ltQ[1];	  ltQ[p]    -=    ltQ[i]    *    ltQ[0];    	compilable	  [FE]  AssertionError  	48	4	replace
147	[BUG]  [BUGGY]  ltQ[p]  -=  ltQ[i]  *  ltQ[1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[i]  *  ltQ[1];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  -=  ltQ[i]  *  ltQ[1];	  ltQ[p]    -=    ltQ[i]    *    ltQ[0];    	compilable	  [FE]  AssertionError  	48	4	replace
148	[BUG]  [BUGGY]  ltI[p]  -=  ltQ[p]  *  ltJI[p];  [CE]  cannot  find  symbol  ltJI  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltQ[p]  *  ltJI[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]  -=  ltQ[p]  *  ltJI[p];	  ltI[p]    -=    ltQ[q]    *    ltI[p];    	non-compiled	[CE]  cannot  find  symbol  ltJI	74	None	replace
149	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.min(ltQ[p],  p);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltI[p]  =  Math.min(ltQ[p],  p);	          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]    =    Math.min(ltQ[p]);    	compilable	  [FE]  AssertionError  	113	4	replace
150	[BUG]  [BUGGY]  ltI[p]  =  Math.min(ltQ[p],  p);  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.min(ltQ[p],  p);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]  =  Math.min(ltQ[p],  p);	          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]    =    Math.min(ltQ[p]);    	compilable	  [FE]  AssertionError  	113	4	replace
151	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.min(ltQ[p],  inverse);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltI[p]  =  Math.min(ltQ[p],  inverse);	          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]    =    Math.min(ltQ[p]);    	compilable	  [FE]  AssertionError  	113	4	replace
152	[BUG]  [BUGGY]  ltI[p]  =  Math.min(ltQ[p],  inverse);  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.min(ltQ[p],  inverse);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]  =  Math.min(ltQ[p],  inverse);	          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]    =    Math.min(ltQ[p]);    	compilable	  [FE]  AssertionError  	113	4	replace
153	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.min(ltQ[p],  i);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltI[p]  =  Math.min(ltQ[p],  i);	          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]    =    Math.min(ltQ[p]);    	compilable	  [FE]  AssertionError  	113	4	replace
154	[BUG]  [BUGGY]  ltI[p]  =  Math.min(ltQ[p],  i);  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.min(ltQ[p],  i);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]  =  Math.min(ltQ[p],  i);	          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]    =    Math.min(ltQ[p]);    	compilable	  [FE]  AssertionError  	113	4	replace
155	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltQ[p]    -=    ltQ[q]    *    ltI[p];    ltQ[p]  -=  ltQ[q]  *  ltI[p];  ltQ[p]  -=  ltQ[q]  *  ltI[p];  ltQ[p]  -=  ltQ[q]  *  ltI[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	                ltQ[p]        -=        ltQ[q]        *        ltI[p];        ltQ[p]    -=    ltQ[q]    *    ltI[p];    ltQ[p]  -=  ltQ[q]  *  ltI[p];  ltQ[p]  -=  ltQ[q]  *  ltI[p];	  	compilable	  [FE]  AssertionError  	33	4	add
156	[BUG]  [BUGGY]          ltQ[p]    -=    ltQ[q]    *    ltI[p];    ltQ[p]  -=  ltQ[q]  *  ltI[p];  ltQ[p]  -=  ltQ[q]  *  ltI[p];  ltQ[p]  -=  ltQ[q]  *  ltI[p];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltQ[p]    -=    ltQ[q]    *    ltI[p];    ltQ[p]  -=  ltQ[q]  *  ltI[p];  ltQ[p]  -=  ltQ[q]  *  ltI[p];  ltQ[p]  -=  ltQ[q]  *  ltI[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	                ltQ[p]        -=        ltQ[q]        *        ltI[p];        ltQ[p]    -=    ltQ[q]    *    ltI[p];    ltQ[p]  -=  ltQ[q]  *  ltI[p];  ltQ[p]  -=  ltQ[q]  *  ltI[p];	  	compilable	  [FE]  AssertionError  	33	4	add
157	[BUG]  [BUGGY]          ltQ[p]    -=    ltQ[q]    *    ltI[p];    ltQ[p]  -=  ltQ[q]  *  ltI[p];  LtQ[p]  -=  ltQ[q]  *  ltI[p];  ltQ[p]  -=  ltQ[q]  *  ltI[p];  [CE]  cannot  find  symbol  LtQ  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltQ[p]    -=    ltQ[q]    *    ltI[p];    ltQ[p]  -=  ltQ[q]  *  ltI[p];  LtQ[p]  -=  ltQ[q]  *  ltI[p];  ltQ[p]  -=  ltQ[q]  *  ltI[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	                ltQ[p]        -=        ltQ[q]        *        ltI[p];        ltQ[p]    -=    ltQ[q]    *    ltI[p];    LtQ[p]  -=  ltQ[q]  *  ltI[p];  ltQ[p]  -=  ltQ[q]  *  ltI[p];	  	non-compiled	[CE]  cannot  find  symbol  LtQ	33	None	add
158	[BUG]  [BUGGY]  ltQ[p]  -=  ltQ[i]  *  ltQ[i].doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[i]  *  ltQ[i].doubleValue();  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  -=  ltQ[i]  *  ltQ[i].doubleValue();	  ltQ[p]    -=    ltQ[i]    *    ltQ[i];    	non-compiled	[CE]  double  cannot  be  dereferenced	50	None	replace
159	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[i]  *  ltQ[i]  +  1;  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]  -=  ltQ[i]  *  ltQ[i]  +  1;	  ltQ[p]    -=    ltQ[i]    *    ltQ[i];    	compilable	  [FE]  AssertionError  	50	4	replace
160	[BUG]  [BUGGY]  ltQ[p]  -=  ltQ[i]  *  ltQ[i]  +  1;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[i]  *  ltQ[i]  +  1;  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  -=  ltQ[i]  *  ltQ[i]  +  1;	  ltQ[p]    -=    ltQ[i]    *    ltQ[i];    	compilable	  [FE]  AssertionError  	50	4	replace
161	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[0]);  ltQ[p]  =  Math.sqrt(ltQ[0]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]    =    Math.sqrt(ltQ[0]);    ltQ[p]  =  Math.sqrt(ltQ[0]);	  	compilable	  [FE]  AssertionError  	97	5	add
162	[BUG]  [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[0]);  ltQ[p]  =  Math.sqrt(ltQ[0]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[0]);  ltQ[p]  =  Math.sqrt(ltQ[0]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]    =    Math.sqrt(ltQ[0]);    ltQ[p]  =  Math.sqrt(ltQ[0]);	  	compilable	  [FE]  AssertionError  	97	5	add
163	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[0]);  ltQ[p]  =  Math.sqrt(ltQ[1]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]    =    Math.sqrt(ltQ[0]);    ltQ[p]  =  Math.sqrt(ltQ[1]);	  	compilable	  [FE]  AssertionError  	97	5	add
164	[BUG]  [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[0]);  ltQ[p]  =  Math.sqrt(ltQ[1]);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[0]);  ltQ[p]  =  Math.sqrt(ltQ[1]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]    =    Math.sqrt(ltQ[0]);    ltQ[p]  =  Math.sqrt(ltQ[1]);	  	compilable	  [FE]  AssertionError  	97	5	add
165	[BUG]  [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[0]);  LtQ[p]  =  Math.sqrt(ltQ[0]);  [CE]  cannot  find  symbol  LtQ  [FE]        AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[0]);  LtQ[p]  =  Math.sqrt(ltQ[0]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]    =    Math.sqrt(ltQ[0]);    LtQ[p]  =  Math.sqrt(ltQ[0]);	  	non-compiled	[CE]  cannot  find  symbol  LtQ	97	None	add
166	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[0]);  ltQ[p]  =  Math.cos(ltQ[0]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]    =    Math.sqrt(ltQ[0]);    ltQ[p]  =  Math.cos(ltQ[0]);	  	compilable	  [FE]  AssertionError  	97	5	add
167	[BUG]  [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[0]);  ltQ[p]  =  Math.cos(ltQ[0]);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[0]);  ltQ[p]  =  Math.cos(ltQ[0]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]    =    Math.sqrt(ltQ[0]);    ltQ[p]  =  Math.cos(ltQ[0]);	  	compilable	  [FE]  AssertionError  	97	5	add
168	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i]);  final  double  inverse  =  1.0  /  ltI[i];  for(int  j  =  0;  j  <  ltI.length;  ++j)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i]);  final  double  inverse  =  1.0  /  ltI[i];  for(int  j  =  0;  j  <  ltI.length;  ++j)  {  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[i]  =  Math.sqrt(ltQ[i]);  final  double  inverse  =  1.0  /  ltI[i];  for(int  j  =  0;  j  <  ltI.length;  ++j)  {	          ltI[i]    =    Math.sqrt(ltQ[i]);    final    double    inverse    =    1.0    /    ltI[i];    for(int    j    =    0;    j    <    ltI.length;    ++j)    {    lt    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
169	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i]);  final  double  inverse  =  1.0  /  ltI[i];  for(int  j  =  0;  j  <  ltI.length;  ++j)  {  }  [CE]  variable  inverse  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                  AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i]);  final  double  inverse  =  1.0  /  ltI[i];  for(int  j  =  0;  j  <  ltI.length;  ++j)  {  }  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[i]  =  Math.sqrt(ltQ[i]);  final  double  inverse  =  1.0  /  ltI[i];  for(int  j  =  0;  j  <  ltI.length;  ++j)  {  }	          ltI[i]    =    Math.sqrt(ltQ[i]);    final    double    inverse    =    1.0    /    ltI[i];    for(int    j    =    0;    j    <    ltI.length;    ++j)    {    lt    	non-compiled	[CE]  variable  inverse  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	18	None	replace
170	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[i]);  ltQ[p]  =  Math.sqrt(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]    =    Math.sqrt(ltQ[i]);    ltQ[p]  =  Math.sqrt(ltQ[p]);	  	compilable	  [FE]  AssertionError  	95	5	add
171	[BUG]  [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[i]);  ltQ[p]  =  Math.sqrt(ltQ[p]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[i]);  ltQ[p]  =  Math.sqrt(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]    =    Math.sqrt(ltQ[i]);    ltQ[p]  =  Math.sqrt(ltQ[p]);	  	compilable	  [FE]  AssertionError  	95	5	add
172	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[i]);  ltQ[p]  =  Math.sqrt(ltQ[i]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]    =    Math.sqrt(ltQ[i]);    ltQ[p]  =  Math.sqrt(ltQ[i]);	  	compilable	  [FE]  AssertionError  	95	5	add
173	[BUG]  [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[i]);  ltQ[p]  =  Math.sqrt(ltQ[i]);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[i]);  ltQ[p]  =  Math.sqrt(ltQ[i]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]    =    Math.sqrt(ltQ[i]);    ltQ[p]  =  Math.sqrt(ltQ[i]);	  	compilable	  [FE]  AssertionError  	95	5	add
174	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[i]);  ltQ[p]  =  Math.sqrt(ltQ[0]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]    =    Math.sqrt(ltQ[i]);    ltQ[p]  =  Math.sqrt(ltQ[0]);	  	compilable	  [FE]  AssertionError  	95	5	add
175	[BUG]  [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[i]);  ltQ[p]  =  Math.sqrt(ltQ[0]);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[i]);  ltQ[p]  =  Math.sqrt(ltQ[0]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]    =    Math.sqrt(ltQ[i]);    ltQ[p]  =  Math.sqrt(ltQ[0]);	  	compilable	  [FE]  AssertionError  	95	5	add
176	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[i]);  ltQ[p]  =  Math.log(ltQ[i]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]    =    Math.sqrt(ltQ[i]);    ltQ[p]  =  Math.log(ltQ[i]);	  	compilable	  [FE]  AssertionError  	95	5	add
177	[BUG]  [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[i]);  ltQ[p]  =  Math.log(ltQ[i]);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[i]);  ltQ[p]  =  Math.log(ltQ[i]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]    =    Math.sqrt(ltQ[i]);    ltQ[p]  =  Math.log(ltQ[i]);	  	compilable	  [FE]  AssertionError  	95	5	add
178	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.ceil(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]  =  Math.ceil(ltQ[p]);	          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]    =    Math.log(ltQ[p]);    	compilable	  [FE]  AssertionError  	68	4	replace
179	[BUG]  [BUGGY]  ltQ[p]  =  Math.ceil(ltQ[p]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.ceil(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  =  Math.ceil(ltQ[p]);	          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]    =    Math.log(ltQ[p]);    	compilable	  [FE]  AssertionError  	68	4	replace
180	[BUG]  [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[p].doubleValue());  [CE]  double  cannot  be  dereferenced  [FE]        AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[p].doubleValue());  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  =  Math.sqrt(ltQ[p].doubleValue());	          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]    =    Math.sqrt(ltQ[p].doubleValue());    	non-compiled	[CE]  double  cannot  be  dereferenced	92	None	replace
181	[BUG]  [BUGGY]  LtQ[p]  =  Math.sqrt(ltQ[p].doubleValue());  [CE]  cannot  find  symbol  LtQ  [FE]          AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  LtQ[p]  =  Math.sqrt(ltQ[p].doubleValue());  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	LtQ[p]  =  Math.sqrt(ltQ[p].doubleValue());	          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]    =    Math.sqrt(ltQ[p].doubleValue());    	non-compiled	[CE]  cannot  find  symbol  LtQ	92	None	replace
182	[BUG]  [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[p],  ltQ[p].doubleValue());  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[p],  ltQ[p].doubleValue());  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  =  Math.sqrt(ltQ[p],  ltQ[p].doubleValue());	          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]    =    Math.sqrt(ltQ[p].doubleValue());    	non-compiled	[CE]  double  cannot  be  dereferenced	92	None	replace
183	[BUG]  [BUGGY]  ltQ[p]  -=  ltQ[i]  *  lJI[p];  [CE]  cannot  find  symbol  lJI  [FE]        AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[i]  *  lJI[p];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  -=  ltQ[i]  *  lJI[p];	  ltQ[p]    -=    ltQ[i]    *    ltJI[p];    	non-compiled	[CE]  cannot  find  symbol  lJI	111	None	replace
184	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltQ[q];  ltQ[p]  -=  ltQ[p]  *  ltQ[q];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]    -=    ltQ[p]    *    ltQ[q];    ltQ[p]  -=  ltQ[p]  *  ltQ[q];	  	compilable	  [FE]  AssertionError  	80	5	add
185	[BUG]  [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltQ[q];  ltQ[p]  -=  ltQ[p]  *  ltQ[q];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltQ[q];  ltQ[p]  -=  ltQ[p]  *  ltQ[q];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]    -=    ltQ[p]    *    ltQ[q];    ltQ[p]  -=  ltQ[p]  *  ltQ[q];	  	compilable	  [FE]  AssertionError  	80	5	add
186	[BUG]  [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltQ[q];  LtQ[p]  -=  ltQ[p]  *  ltQ[q];  [CE]  cannot  find  symbol  LtQ  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltQ[q];  LtQ[p]  -=  ltQ[p]  *  ltQ[q];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]    -=    ltQ[p]    *    ltQ[q];    LtQ[p]  -=  ltQ[p]  *  ltQ[q];	  	non-compiled	[CE]  cannot  find  symbol  LtQ	80	None	add
187	[BUG]  [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltQ[q];  ltQ[p]  -=  ltQu[p]  *  ltQ[q];  [CE]  cannot  find  symbol  ltQu  [FE]        AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltQ[q];  ltQ[p]  -=  ltQu[p]  *  ltQ[q];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]    -=    ltQ[p]    *    ltQ[q];    ltQ[p]  -=  ltQu[p]  *  ltQ[q];	  	non-compiled	[CE]  cannot  find  symbol  ltQu	80	None	add
188	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltQ[0];  ltQ[p]  -=  ltQ[p]  *  ltQ[0];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]    -=    ltQ[p]    *    ltQ[0];    ltQ[p]  -=  ltQ[p]  *  ltQ[0];	  	compilable	  [FE]  AssertionError  	1	2	add
189	[BUG]  [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltQ[0];  ltQ[p]  -=  ltQ[p]  *  ltQ[0];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltQ[0];  ltQ[p]  -=  ltQ[p]  *  ltQ[0];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]    -=    ltQ[p]    *    ltQ[0];    ltQ[p]  -=  ltQ[p]  *  ltQ[0];	  	compilable	  [FE]  AssertionError  	1	2	add
190	[BUG]  [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltQ[0];  LtQ[p]  -=  ltQ[p]  *  ltQ[0];  [CE]  cannot  find  symbol  LtQ  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltQ[0];  LtQ[p]  -=  ltQ[p]  *  ltQ[0];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]    -=    ltQ[p]    *    ltQ[0];    LtQ[p]  -=  ltQ[p]  *  ltQ[0];	  	non-compiled	[CE]  cannot  find  symbol  LtQ	1	None	add
191	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltQ[0];  ltQ[p]  -=  ltQ[p]  *  ltQ[1];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]    -=    ltQ[p]    *    ltQ[0];    ltQ[p]  -=  ltQ[p]  *  ltQ[1];	  	compilable	  [FE]  AssertionError  	1	5	add
192	[BUG]  [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltQ[0];  ltQ[p]  -=  ltQ[p]  *  ltQ[1];  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltQ[0];  ltQ[p]  -=  ltQ[p]  *  ltQ[1];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]    -=    ltQ[p]    *    ltQ[0];    ltQ[p]  -=  ltQ[p]  *  ltQ[1];	  	compilable	  [FE]  AssertionError  	1	5	add
193	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltQ[1];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]  -=  ltQ[p]  *  ltQ[1];	  ltQ[p]    -=    ltQ[p]    *    ltQ[0];    	compilable	  [FE]  AssertionError  	2	5	replace
194	[BUG]  [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltQ[1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltQ[1];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  -=  ltQ[p]  *  ltQ[1];	  ltQ[p]    -=    ltQ[p]    *    ltQ[0];    	compilable	  [FE]  AssertionError  	2	5	replace
195	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i]  *  p);  final  double  inverse  =  1.0  /  ltI[i];  [CE]  variable  inverse  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]          AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i]  *  p);  final  double  inverse  =  1.0  /  ltI[i];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[i]  =  Math.sqrt(ltQ[i]  *  p);  final  double  inverse  =  1.0  /  ltI[i];	          ltI[i]    =    Math.sqrt(ltQ[i]);    final    double    inverse    =    1.0    /    ltI[i];    	non-compiled	[CE]  variable  inverse  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	15	None	replace
196	[BUG]  [BUGGY]  LtQ[p]  -=  ltQ[q]  *  ltQ[p];  [CE]  cannot  find  symbol  LtQ  [FE]            AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  LtQ[p]  -=  ltQ[q]  *  ltQ[p];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	LtQ[p]  -=  ltQ[q]  *  ltQ[p];	  ltQ[p]    -=    ltQ[q]    *    ltQ[p];    ltQ[p]    -=    ltQu[q]    *    ltQ[p];    	non-compiled	[CE]  cannot  find  symbol  LtQ	46	None	replace
197	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltQ[p];  ltQ[p]  -=  ltQ[q]  *  ltQ[p];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]  -=  ltQ[p]  *  ltQ[p];  ltQ[p]  -=  ltQ[q]  *  ltQ[p];	  ltQ[p]    -=    ltQ[q]    *    ltQ[p];    ltQ[p]    -=    ltQ[q]    *    ltQ[p];    	compilable	  [FE]  AssertionError  	44	5	replace
198	[BUG]  [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltQ[p];  ltQ[p]  -=  ltQ[q]  *  ltQ[p];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltQ[p];  ltQ[p]  -=  ltQ[q]  *  ltQ[p];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  -=  ltQ[p]  *  ltQ[p];  ltQ[p]  -=  ltQ[q]  *  ltQ[p];	  ltQ[p]    -=    ltQ[q]    *    ltQ[p];    ltQ[p]    -=    ltQ[q]    *    ltQ[p];    	compilable	  [FE]  AssertionError  	44	5	replace
199	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]    -=    ltQ[p]    *    ltQ[i];    ltQ[p]  -=  ltQ[p]  *  ltQ[i];  ltQ[p]  -=  ltQ[p]  *  ltQ[i];  ltQ[p]  -=  ltQ[p]  *  ltQ[i];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]        -=        ltQ[p]        *        ltQ[i];        ltQ[p]    -=    ltQ[p]    *    ltQ[i];    ltQ[p]  -=  ltQ[p]  *  ltQ[i];  ltQ[p]  -=  ltQ[p]  *  ltQ[i];	  	compilable	  [FE]  AssertionError  	25	2	add
200	[BUG]  [BUGGY]  ltQ[p]    -=    ltQ[p]    *    ltQ[i];    ltQ[p]  -=  ltQ[p]  *  ltQ[i];  ltQ[p]  -=  ltQ[p]  *  ltQ[i];  ltQ[p]  -=  ltQ[p]  *  ltQ[i];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]    -=    ltQ[p]    *    ltQ[i];    ltQ[p]  -=  ltQ[p]  *  ltQ[i];  ltQ[p]  -=  ltQ[p]  *  ltQ[i];  ltQ[p]  -=  ltQ[p]  *  ltQ[i];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]        -=        ltQ[p]        *        ltQ[i];        ltQ[p]    -=    ltQ[p]    *    ltQ[i];    ltQ[p]  -=  ltQ[p]  *  ltQ[i];  ltQ[p]  -=  ltQ[p]  *  ltQ[i];	  	compilable	  [FE]  AssertionError  	25	2	add
201	[BUG]  [BUGGY]  ltQ[p]    -=    ltQ[p]    *    ltQ[i];    ltQ[p]  -=  ltQ[p]  *  ltQ[i];  LtQ[p]  -=  ltQ[p]  *  ltQ[i];  ltQ[p]  -=  ltQ[p]  *  ltQ[i];  [CE]  cannot  find  symbol  LtQ  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]    -=    ltQ[p]    *    ltQ[i];    ltQ[p]  -=  ltQ[p]  *  ltQ[i];  LtQ[p]  -=  ltQ[p]  *  ltQ[i];  ltQ[p]  -=  ltQ[p]  *  ltQ[i];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]        -=        ltQ[p]        *        ltQ[i];        ltQ[p]    -=    ltQ[p]    *    ltQ[i];    LtQ[p]  -=  ltQ[p]  *  ltQ[i];  ltQ[p]  -=  ltQ[p]  *  ltQ[i];	  	non-compiled	[CE]  cannot  find  symbol  LtQ	25	None	add
202	[BUG]  [BUGGY]  ltQ[p]    -=    ltQ[p]    *    ltQ[i];    ltQ[p]  -=  ltQ[p]  *  ltQ[i];  ltQ[p]  -=  ltQ[p]  *  ltQ[i];  ltQ[p]  -=  ltQ[p]  *  ltQ[i]  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]    -=    ltQ[p]    *    ltQ[i];    ltQ[p]  -=  ltQ[p]  *  ltQ[i];  ltQ[p]  -=  ltQ[p]  *  ltQ[i];  ltQ[p]  -=  ltQ[p]  *  ltQ[i]  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]        -=        ltQ[p]        *        ltQ[i];        ltQ[p]    -=    ltQ[p]    *    ltQ[i];    ltQ[p]  -=  ltQ[p]  *  ltQ[i];  ltQ[p]  -=  ltQ[p]  *  ltQ[i]	  	non-compiled	[CE]  ';'  expected	25	None	add
203	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  Math.sqrt(ltQ[p]);  ltI[p]  -=  Math.sqrt(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltI[p]    -=    Math.sqrt(ltQ[p]);    ltI[p]  -=  Math.sqrt(ltQ[p]);	  	compilable	  [FE]  AssertionError  	19	5	add
204	[BUG]  [BUGGY]  ltI[p]  -=  Math.sqrt(ltQ[p]);  ltI[p]  -=  Math.sqrt(ltQ[p]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  Math.sqrt(ltQ[p]);  ltI[p]  -=  Math.sqrt(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]    -=    Math.sqrt(ltQ[p]);    ltI[p]  -=  Math.sqrt(ltQ[p]);	  	compilable	  [FE]  AssertionError  	19	5	add
205	[BUG]  [BUGGY]  ltI[p]  -=  Math.sqrt(ltQ[p]);  ltI[p]  -=  Math.sqrt(ltQu[p]);  [CE]  cannot  find  symbol  ltQu  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  Math.sqrt(ltQ[p]);  ltI[p]  -=  Math.sqrt(ltQu[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]    -=    Math.sqrt(ltQ[p]);    ltI[p]  -=  Math.sqrt(ltQu[p]);	  	non-compiled	[CE]  cannot  find  symbol  ltQu	19	None	add
206	[BUG]  [BUGGY]  ltI[p]  -=  Math.sqrt(ltQ[p]);  ltI[p]  -=  Math.sqrt(ltX[p]);  [CE]  cannot  find  symbol  ltX  [FE]        AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  Math.sqrt(ltQ[p]);  ltI[p]  -=  Math.sqrt(ltX[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]    -=    Math.sqrt(ltQ[p]);    ltI[p]  -=  Math.sqrt(ltX[p]);	  	non-compiled	[CE]  cannot  find  symbol  ltX	19	None	add
207	[BUG]  [BUGGY]  ltI[p]  -=  Math.sqrt(ltQ[p]);  ltI[p]  -=  Math.sqrt(ltY[p]);  [CE]  cannot  find  symbol  ltY  [FE]          AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  Math.sqrt(ltQ[p]);  ltI[p]  -=  Math.sqrt(ltY[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]    -=    Math.sqrt(ltQ[p]);    ltI[p]  -=  Math.sqrt(ltY[p]);	  	non-compiled	[CE]  cannot  find  symbol  ltY	19	None	add
208	[BUG]  [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[p]  *  ltQ);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[p]  *  ltQ);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  =  Math.sqrt(ltQ[p]  *  ltQ);	  ltQ[p]    =    Math.sqrt(ltQ[p]    *    ltJI);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	112	None	replace
209	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[p]  *  ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]  =  Math.sqrt(ltQ[p]  *  ltQ[p]);	  ltQ[p]    =    Math.sqrt(ltQ[p]    *    ltJI);    	compilable	  [FE]  AssertionError  	112	4	replace
210	[BUG]  [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[p]  *  ltQ[p]);  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[p]  *  ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  =  Math.sqrt(ltQ[p]  *  ltQ[p]);	  ltQ[p]    =    Math.sqrt(ltQ[p]    *    ltJI);    	compilable	  [FE]  AssertionError  	112	4	replace
211	[BUG]  [BUGGY]  double  ltQ[p]  -=  ltQ[q]  *  ltQ[p];  [CE]  ']'  expected  [FE]        AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  double  ltQ[p]  -=  ltQ[q]  *  ltQ[p];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	double  ltQ[p]  -=  ltQ[q]  *  ltQ[p];	  ltQ[p]    -=    ltQ[q]    *    ltQ[p];    double    ltQ[p]    -=    ltQ[q]    *    ltQ[p];    	non-compiled	[CE]  ']'  expected	82	None	replace
212	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]  =  Math.sqrt(ltQ[p]  +  1);  ltQ[p]  =  Math.sqrt(ltQ[p]);  ltQ[p]  =  Math.sqrt(ltQ[p]  +  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	                ltQ[p]        =        Math.sqrt(ltQ[p]);        ltQ[p]    =    Math.sqrt(ltQ[p]    +    1);    ltQ[p]  =  Math.sqrt(ltQ[p]);  ltQ[p]  =  Math.sqrt(ltQ[p]  +  1);	  	compilable	  [FE]  AssertionError  	69	5	add
213	[BUG]  [BUGGY]          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]  =  Math.sqrt(ltQ[p]  +  1);  ltQ[p]  =  Math.sqrt(ltQ[p]);  ltQ[p]  =  Math.sqrt(ltQ[p]  +  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]  =  Math.sqrt(ltQ[p]  +  1);  ltQ[p]  =  Math.sqrt(ltQ[p]);  ltQ[p]  =  Math.sqrt(ltQ[p]  +  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	                ltQ[p]        =        Math.sqrt(ltQ[p]);        ltQ[p]    =    Math.sqrt(ltQ[p]    +    1);    ltQ[p]  =  Math.sqrt(ltQ[p]);  ltQ[p]  =  Math.sqrt(ltQ[p]  +  1);	  	compilable	  [FE]  AssertionError  	69	5	add
214	[BUG]  [BUGGY]          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]  =  Math.sqrt(ltQ[p]  +  1);  LtQ[p]  =  Math.sqrt(ltQ[p]);  ltQ[p]  =  Math.sqrt(ltQ[p]  +  1);  [CE]  cannot  find  symbol  LtQ  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]  =  Math.sqrt(ltQ[p]  +  1);  LtQ[p]  =  Math.sqrt(ltQ[p]);  ltQ[p]  =  Math.sqrt(ltQ[p]  +  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	                ltQ[p]        =        Math.sqrt(ltQ[p]);        ltQ[p]    =    Math.sqrt(ltQ[p]    +    1);    LtQ[p]  =  Math.sqrt(ltQ[p]);  ltQ[p]  =  Math.sqrt(ltQ[p]  +  1);	  	non-compiled	[CE]  cannot  find  symbol  LtQ	69	None	add
215	[BUG]  [BUGGY]          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]  =  Math.sqrt(ltQ[p]  +  1);  ltQ[p]  =  Math.qrt(ltQ[p]);  ltQ[p]  =  Math.sqrt(ltQ[p]  +  1);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]  =  Math.sqrt(ltQ[p]  +  1);  ltQ[p]  =  Math.qrt(ltQ[p]);  ltQ[p]  =  Math.sqrt(ltQ[p]  +  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	                ltQ[p]        =        Math.sqrt(ltQ[p]);        ltQ[p]    =    Math.sqrt(ltQ[p]    +    1);    ltQ[p]  =  Math.qrt(ltQ[p]);  ltQ[p]  =  Math.sqrt(ltQ[p]  +  1);	  	non-compiled	[CE]  cannot  find  symbol	69	None	add
216	[BUG]  [BUGGY]          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]  =  Math.sqrt(ltQ[p]  +  1);  ltQ[p]  =  Math.sqrt(ltQ[p]);  ltQ[p]  =  Math.sqrt(ltQ[p]  +  1;  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]  =  Math.sqrt(ltQ[p]  +  1);  ltQ[p]  =  Math.sqrt(ltQ[p]);  ltQ[p]  =  Math.sqrt(ltQ[p]  +  1;  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	                ltQ[p]        =        Math.sqrt(ltQ[p]);        ltQ[p]    =    Math.sqrt(ltQ[p]    +    1);    ltQ[p]  =  Math.sqrt(ltQ[p]);  ltQ[p]  =  Math.sqrt(ltQ[p]  +  1;	  	non-compiled	[CE]  ')'  expected	69	None	add
217	[BUG]  [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[p]).doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[p]).doubleValue();  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]  =  Math.sqrt(ltQ[p]).doubleValue();	          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]    =    Math.sqrt(ltQ[p]).doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	57	None	replace
218	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[i]  =  Math.sqrt(ltQ[i]  *  p);  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[i]  =  Math.sqrt(ltQ[i]  *  p);	          ltQ[i]    =    Math.sqrt(ltQ[i]);    	compilable	  [FE]  AssertionError  	89	4	replace
219	[BUG]  [BUGGY]  ltQ[i]  =  Math.sqrt(ltQ[i]  *  p);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[i]  =  Math.sqrt(ltQ[i]  *  p);  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[i]  =  Math.sqrt(ltQ[i]  *  p);	          ltQ[i]    =    Math.sqrt(ltQ[i]);    	compilable	  [FE]  AssertionError  	89	4	replace
220	[BUG]  [BUGGY]  ltQ[i]  =  Math.sqrt(ltQ[i],  p);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[i]  =  Math.sqrt(ltQ[i],  p);  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[i]  =  Math.sqrt(ltQ[i],  p);	          ltQ[i]    =    Math.sqrt(ltQ[i]);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	89	None	replace
221	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[i]  =  Math.sqrt(ltQ[i]  +  p);  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[i]  =  Math.sqrt(ltQ[i]  +  p);	          ltQ[i]    =    Math.sqrt(ltQ[i]);    	compilable	  [FE]  AssertionError  	89	5	replace
222	[BUG]  [BUGGY]  ltQ[i]  =  Math.sqrt(ltQ[i]  +  p);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[i]  =  Math.sqrt(ltQ[i]  +  p);  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[i]  =  Math.sqrt(ltQ[i]  +  p);	          ltQ[i]    =    Math.sqrt(ltQ[i]);    	compilable	  [FE]  AssertionError  	89	5	replace
223	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltI[p]    -=    ltI[p]    *    ltI[p];    ltI[p]  -=  ltI[p]  *  ltI[p];  ltI[p]  -=  ltI[p]  *  ltI[p];  ltI[p]  -=  ltI[p]  *  ltI[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	                ltI[p]        -=        ltI[p]        *        ltI[p];        ltI[p]    -=    ltI[p]    *    ltI[p];    ltI[p]  -=  ltI[p]  *  ltI[p];  ltI[p]  -=  ltI[p]  *  ltI[p];	  	compilable	  [FE]  AssertionError  	7	5	add
224	[BUG]  [BUGGY]          ltI[p]    -=    ltI[p]    *    ltI[p];    ltI[p]  -=  ltI[p]  *  ltI[p];  ltI[p]  -=  ltI[p]  *  ltI[p];  ltI[p]  -=  ltI[p]  *  ltI[p];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltI[p]    -=    ltI[p]    *    ltI[p];    ltI[p]  -=  ltI[p]  *  ltI[p];  ltI[p]  -=  ltI[p]  *  ltI[p];  ltI[p]  -=  ltI[p]  *  ltI[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	                ltI[p]        -=        ltI[p]        *        ltI[p];        ltI[p]    -=    ltI[p]    *    ltI[p];    ltI[p]  -=  ltI[p]  *  ltI[p];  ltI[p]  -=  ltI[p]  *  ltI[p];	  	compilable	  [FE]  AssertionError  	7	5	add
225	[BUG]  [BUGGY]          ltI[p]    -=    ltI[p]    *    ltI[p];    ltI[p]  -=  ltI[p]  *  ltI[p];  LtI[p]  -=  ltI[p]  *  ltI[p];  ltI[p]  -=  ltI[p]  *  ltI[p];  [CE]  cannot  find  symbol  LtI  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltI[p]    -=    ltI[p]    *    ltI[p];    ltI[p]  -=  ltI[p]  *  ltI[p];  LtI[p]  -=  ltI[p]  *  ltI[p];  ltI[p]  -=  ltI[p]  *  ltI[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	                ltI[p]        -=        ltI[p]        *        ltI[p];        ltI[p]    -=    ltI[p]    *    ltI[p];    LtI[p]  -=  ltI[p]  *  ltI[p];  ltI[p]  -=  ltI[p]  *  ltI[p];	  	non-compiled	[CE]  cannot  find  symbol  LtI	7	None	add
226	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltI[i]  *  ltI[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltI[p]  -=  ltI[i]  *  ltI[p];	  ltI[p]    -=    ltI[j]    *    ltI[p];    	compilable	  [FE]  AssertionError  	105	4	replace
227	[BUG]  [BUGGY]  ltI[p]  -=  ltI[i]  *  ltI[p];  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltI[i]  *  ltI[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]  -=  ltI[i]  *  ltI[p];	  ltI[p]    -=    ltI[j]    *    ltI[p];    	compilable	  [FE]  AssertionError  	105	4	replace
228	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  Math.sqrt(ltQ[p]);  ltQ[p]  -=  Math.sqrt(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]    -=    Math.sqrt(ltQ[p]);    ltQ[p]  -=  Math.sqrt(ltQ[p]);	  	compilable	  [FE]  AssertionError  	37	4	add
229	[BUG]  [BUGGY]  ltQ[p]  -=  Math.sqrt(ltQ[p]);  ltQ[p]  -=  Math.sqrt(ltQ[p]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  Math.sqrt(ltQ[p]);  ltQ[p]  -=  Math.sqrt(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]    -=    Math.sqrt(ltQ[p]);    ltQ[p]  -=  Math.sqrt(ltQ[p]);	  	compilable	  [FE]  AssertionError  	37	4	add
230	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  Math.sqrt(ltQ[p]);  ltQ[p]  -=  Math.cos(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]    -=    Math.sqrt(ltQ[p]);    ltQ[p]  -=  Math.cos(ltQ[p]);	  	compilable	  [FE]  AssertionError  	37	4	add
231	[BUG]  [BUGGY]  ltQ[p]  -=  Math.sqrt(ltQ[p]);  ltQ[p]  -=  Math.cos(ltQ[p]);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  Math.sqrt(ltQ[p]);  ltQ[p]  -=  Math.cos(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]    -=    Math.sqrt(ltQ[p]);    ltQ[p]  -=  Math.cos(ltQ[p]);	  	compilable	  [FE]  AssertionError  	37	4	add
232	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  Math.sqrt(ltQ[p]);  ltQ[p]  -=  Math.log(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]    -=    Math.sqrt(ltQ[p]);    ltQ[p]  -=  Math.log(ltQ[p]);	  	compilable	  [FE]  AssertionError  	37	4	add
233	[BUG]  [BUGGY]  ltQ[p]  -=  Math.sqrt(ltQ[p]);  ltQ[p]  -=  Math.log(ltQ[p]);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  Math.sqrt(ltQ[p]);  ltQ[p]  -=  Math.log(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]    -=    Math.sqrt(ltQ[p]);    ltQ[p]  -=  Math.log(ltQ[p]);	  	compilable	  [FE]  AssertionError  	37	4	add
234	[BUG]  [BUGGY]  ltQ[p]  -=  Math.sqrt(ltQ[p]);  ltQ[p]  -=  Math.min(ltQ[p]);  [CE]  no  suitable  method  found  for  min(double)  [FE]          AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  Math.sqrt(ltQ[p]);  ltQ[p]  -=  Math.min(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]    -=    Math.sqrt(ltQ[p]);    ltQ[p]  -=  Math.min(ltQ[p]);	  	non-compiled	[CE]  no  suitable  method  found  for  min(double)	37	None	add
235	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]  =  Math.sqrt(ltQ[p]  +  1);  ltI[p]  =  Math.sqrt(ltQ[p]);  ltI[p]  =  Math.sqrt(ltQ[p]  +  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	                ltI[p]        =        Math.sqrt(ltQ[p]);        ltI[p]    =    Math.sqrt(ltQ[p]    +    1);    ltI[p]  =  Math.sqrt(ltQ[p]);  ltI[p]  =  Math.sqrt(ltQ[p]  +  1);	  	compilable	  [FE]  AssertionError  	58	5	add
236	[BUG]  [BUGGY]          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]  =  Math.sqrt(ltQ[p]  +  1);  ltI[p]  =  Math.sqrt(ltQ[p]);  ltI[p]  =  Math.sqrt(ltQ[p]  +  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]  =  Math.sqrt(ltQ[p]  +  1);  ltI[p]  =  Math.sqrt(ltQ[p]);  ltI[p]  =  Math.sqrt(ltQ[p]  +  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	                ltI[p]        =        Math.sqrt(ltQ[p]);        ltI[p]    =    Math.sqrt(ltQ[p]    +    1);    ltI[p]  =  Math.sqrt(ltQ[p]);  ltI[p]  =  Math.sqrt(ltQ[p]  +  1);	  	compilable	  [FE]  AssertionError  	58	5	add
237	[BUG]  [BUGGY]          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]  =  Math.sqrt(ltQ[p]  +  1);  LtI[p]  =  Math.sqrt(ltQ[p]);  ltI[p]  =  Math.sqrt(ltQ[p]  +  1);  [CE]  cannot  find  symbol  LtI  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]  =  Math.sqrt(ltQ[p]  +  1);  LtI[p]  =  Math.sqrt(ltQ[p]);  ltI[p]  =  Math.sqrt(ltQ[p]  +  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	                ltI[p]        =        Math.sqrt(ltQ[p]);        ltI[p]    =    Math.sqrt(ltQ[p]    +    1);    LtI[p]  =  Math.sqrt(ltQ[p]);  ltI[p]  =  Math.sqrt(ltQ[p]  +  1);	  	non-compiled	[CE]  cannot  find  symbol  LtI	58	None	add
238	[BUG]  [BUGGY]          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]  =  Math.sqrt(ltQ[p]  +  1);  ltI[p]  =  Math.sqrt(ltQ[p]);  ltI[p]  =  Math.sqrt(ltQu[p]  +  1);  [CE]  cannot  find  symbol  ltQu  [FE]        AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]  =  Math.sqrt(ltQ[p]  +  1);  ltI[p]  =  Math.sqrt(ltQ[p]);  ltI[p]  =  Math.sqrt(ltQu[p]  +  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	                ltI[p]        =        Math.sqrt(ltQ[p]);        ltI[p]    =    Math.sqrt(ltQ[p]    +    1);    ltI[p]  =  Math.sqrt(ltQ[p]);  ltI[p]  =  Math.sqrt(ltQu[p]  +  1);	  	non-compiled	[CE]  cannot  find  symbol  ltQu	58	None	add
239	[BUG]  [BUGGY]          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]  =  Math.sqrt(ltQ[p]  +  1);  ltI[p]  =  Math.sqrt(ltQu[p]);  ltI[p]  =  Math.sqrt(ltQ[p]  +  1);  [CE]  cannot  find  symbol  ltQu  [FE]          AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]  =  Math.sqrt(ltQ[p]  +  1);  ltI[p]  =  Math.sqrt(ltQu[p]);  ltI[p]  =  Math.sqrt(ltQ[p]  +  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	                ltI[p]        =        Math.sqrt(ltQ[p]);        ltI[p]    =    Math.sqrt(ltQ[p]    +    1);    ltI[p]  =  Math.sqrt(ltQu[p]);  ltI[p]  =  Math.sqrt(ltQ[p]  +  1);	  	non-compiled	[CE]  cannot  find  symbol  ltQu	58	None	add
240	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[i]);  ltI[p]  =  Math.sqrt(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltI[p]    =    Math.sqrt(ltQ[i]);    ltI[p]  =  Math.sqrt(ltQ[p]);	  	compilable	  [FE]  AssertionError  	76	5	add
241	[BUG]  [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[i]);  ltI[p]  =  Math.sqrt(ltQ[p]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[i]);  ltI[p]  =  Math.sqrt(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]    =    Math.sqrt(ltQ[i]);    ltI[p]  =  Math.sqrt(ltQ[p]);	  	compilable	  [FE]  AssertionError  	76	5	add
242	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[i]);  ltI[p]  =  Math.sqrt(ltQ[i]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltI[p]    =    Math.sqrt(ltQ[i]);    ltI[p]  =  Math.sqrt(ltQ[i]);	  	compilable	  [FE]  AssertionError  	76	4	add
243	[BUG]  [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[i]);  ltI[p]  =  Math.sqrt(ltQ[i]);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[i]);  ltI[p]  =  Math.sqrt(ltQ[i]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]    =    Math.sqrt(ltQ[i]);    ltI[p]  =  Math.sqrt(ltQ[i]);	  	compilable	  [FE]  AssertionError  	76	4	add
244	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[i]);  ltI[p]  =  Math.sqrt(ltQ[0]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltI[p]    =    Math.sqrt(ltQ[i]);    ltI[p]  =  Math.sqrt(ltQ[0]);	  	compilable	  [FE]  AssertionError  	76	4	add
245	[BUG]  [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[i]);  ltI[p]  =  Math.sqrt(ltQ[0]);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[i]);  ltI[p]  =  Math.sqrt(ltQ[0]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]    =    Math.sqrt(ltQ[i]);    ltI[p]  =  Math.sqrt(ltQ[0]);	  	compilable	  [FE]  AssertionError  	76	4	add
246	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[i]);  ltI[p]  =  Math.sqrt(ltQ[i]  +  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltI[p]    =    Math.sqrt(ltQ[i]);    ltI[p]  =  Math.sqrt(ltQ[i]  +  1);	  	compilable	  [FE]  AssertionError  	76	4	add
247	[BUG]  [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[i]);  ltI[p]  =  Math.sqrt(ltQ[i]  +  1);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[i]);  ltI[p]  =  Math.sqrt(ltQ[i]  +  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]    =    Math.sqrt(ltQ[i]);    ltI[p]  =  Math.sqrt(ltQ[i]  +  1);	  	compilable	  [FE]  AssertionError  	76	4	add
248	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[i]);  ltI[p]  =  Math.log(ltQ[i]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltI[p]    =    Math.sqrt(ltQ[i]);    ltI[p]  =  Math.log(ltQ[i]);	  	compilable	  [FE]  AssertionError  	76	5	add
249	[BUG]  [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[i]);  ltI[p]  =  Math.log(ltQ[i]);  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[i]);  ltI[p]  =  Math.log(ltQ[i]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]    =    Math.sqrt(ltQ[i]);    ltI[p]  =  Math.log(ltQ[i]);	  	compilable	  [FE]  AssertionError  	76	5	add
250	[BUG]  [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[p].doubleValue());  [CE]  double  cannot  be  dereferenced  [FE]        AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[p].doubleValue());  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]  =  Math.sqrt(ltQ[p].doubleValue());	          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]    =    Math.sqrt(ltQ[p].doubleValue());    	non-compiled	[CE]  double  cannot  be  dereferenced	85	None	replace
251	[BUG]  [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[p],  ltQ[p].doubleValue());  [CE]  double  cannot  be  dereferenced  [FE]          AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[p],  ltQ[p].doubleValue());  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]  =  Math.sqrt(ltQ[p],  ltQ[p].doubleValue());	          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]    =    Math.sqrt(ltQ[p].doubleValue());    	non-compiled	[CE]  double  cannot  be  dereferenced	85	None	replace
252	[BUG]  [BUGGY]  LtI[p]  =  Math.sqrt(ltQ[p].doubleValue());  [CE]  cannot  find  symbol  LtI  [FE]            AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  LtI[p]  =  Math.sqrt(ltQ[p].doubleValue());  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	LtI[p]  =  Math.sqrt(ltQ[p].doubleValue());	          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]    =    Math.sqrt(ltQ[p].doubleValue());    	non-compiled	[CE]  cannot  find  symbol  LtI	85	None	replace
253	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[p]  *  ltQ[p]  +  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]  =  Math.sqrt(ltQ[p]  *  ltQ[p]  +  1);	          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]    =    Math.sqrt(ltQ[p]    +    1);    	compilable	  [FE]  AssertionError  	70	4	replace
254	[BUG]  [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[p]  *  ltQ[p]  +  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[p]  *  ltQ[p]  +  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  =  Math.sqrt(ltQ[p]  *  ltQ[p]  +  1);	          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]    =    Math.sqrt(ltQ[p]    +    1);    	compilable	  [FE]  AssertionError  	70	4	replace
255	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltI[p]    -=    ltI[q]    *    ltI[p];    ltI[p]  -=  ltI[q]  *  ltI[p];  ltI[p]  -=  ltI[q]  *  ltI[p];  ltI[p]  -=  ltI[q]  *  ltI[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	                ltI[p]        -=        ltI[q]        *        ltI[p];        ltI[p]    -=    ltI[q]    *    ltI[p];    ltI[p]  -=  ltI[q]  *  ltI[p];  ltI[p]  -=  ltI[q]  *  ltI[p];	  	compilable	  [FE]  AssertionError  	29	5	add
256	[BUG]  [BUGGY]          ltI[p]    -=    ltI[q]    *    ltI[p];    ltI[p]  -=  ltI[q]  *  ltI[p];  ltI[p]  -=  ltI[q]  *  ltI[p];  ltI[p]  -=  ltI[q]  *  ltI[p];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltI[p]    -=    ltI[q]    *    ltI[p];    ltI[p]  -=  ltI[q]  *  ltI[p];  ltI[p]  -=  ltI[q]  *  ltI[p];  ltI[p]  -=  ltI[q]  *  ltI[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	                ltI[p]        -=        ltI[q]        *        ltI[p];        ltI[p]    -=    ltI[q]    *    ltI[p];    ltI[p]  -=  ltI[q]  *  ltI[p];  ltI[p]  -=  ltI[q]  *  ltI[p];	  	compilable	  [FE]  AssertionError  	29	5	add
257	[BUG]  [BUGGY]          ltI[p]    -=    ltI[q]    *    ltI[p];    ltI[p]  -=  ltI[q]  *  ltI[p];  LtI[p]  -=  ltI[q]  *  ltI[p];  ltI[p]  -=  ltI[q]  *  ltI[p];  [CE]  cannot  find  symbol  LtI  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltI[p]    -=    ltI[q]    *    ltI[p];    ltI[p]  -=  ltI[q]  *  ltI[p];  LtI[p]  -=  ltI[q]  *  ltI[p];  ltI[p]  -=  ltI[q]  *  ltI[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	                ltI[p]        -=        ltI[q]        *        ltI[p];        ltI[p]    -=    ltI[q]    *    ltI[p];    LtI[p]  -=  ltI[q]  *  ltI[p];  ltI[p]  -=  ltI[q]  *  ltI[p];	  	non-compiled	[CE]  cannot  find  symbol  LtI	29	None	add
258	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltQ[i]  =  Math.sqrt(ltQ[i]);  ltQ[i]  =  Math.sqrt(ltQ[i]);  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	                ltQ[i]    =    Math.sqrt(ltQ[i]);    ltQ[i]  =  Math.sqrt(ltQ[i]);	  	compilable	  [FE]  AssertionError  	88	2	add
259	[BUG]  [BUGGY]          ltQ[i]  =  Math.sqrt(ltQ[i]);  ltQ[i]  =  Math.sqrt(ltQ[i]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltQ[i]  =  Math.sqrt(ltQ[i]);  ltQ[i]  =  Math.sqrt(ltQ[i]);  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	                ltQ[i]    =    Math.sqrt(ltQ[i]);    ltQ[i]  =  Math.sqrt(ltQ[i]);	  	compilable	  [FE]  AssertionError  	88	2	add
260	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltQ[i]  =  Math.sqrt(ltQ[i]);  ltQ[i]  =  Math.sqrt(ltQ[i]  *  p);  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	                ltQ[i]    =    Math.sqrt(ltQ[i]);    ltQ[i]  =  Math.sqrt(ltQ[i]  *  p);	  	compilable	  [FE]  AssertionError  	88	2	add
261	[BUG]  [BUGGY]          ltQ[i]  =  Math.sqrt(ltQ[i]);  ltQ[i]  =  Math.sqrt(ltQ[i]  *  p);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltQ[i]  =  Math.sqrt(ltQ[i]);  ltQ[i]  =  Math.sqrt(ltQ[i]  *  p);  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	                ltQ[i]    =    Math.sqrt(ltQ[i]);    ltQ[i]  =  Math.sqrt(ltQ[i]  *  p);	  	compilable	  [FE]  AssertionError  	88	2	add
262	[BUG]  [BUGGY]          ltQ[i]  =  Math.sqrt(ltQ[i]);  ltQ[i]  =  Math.sqrt(ltQ[i].doubleValue());  [CE]  double  cannot  be  dereferenced  [FE]        AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltQ[i]  =  Math.sqrt(ltQ[i]);  ltQ[i]  =  Math.sqrt(ltQ[i].doubleValue());  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	                ltQ[i]    =    Math.sqrt(ltQ[i]);    ltQ[i]  =  Math.sqrt(ltQ[i].doubleValue());	  	non-compiled	[CE]  double  cannot  be  dereferenced	88	None	add
263	[BUG]  [BUGGY]          ltQ[i]  =  Math.sqrt(ltQ[i]);  ltQ[i]  =  Math.sqrt(ltQ[i],  p);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltQ[i]  =  Math.sqrt(ltQ[i]);  ltQ[i]  =  Math.sqrt(ltQ[i],  p);  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	                ltQ[i]    =    Math.sqrt(ltQ[i]);    ltQ[i]  =  Math.sqrt(ltQ[i],  p);	  	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	88	None	add
264	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltQ[i]  =  Math.sqrt(ltQ[i]);  ltQ[i]  =  Math.sqrt(ltQ[i]  +  p);  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	                ltQ[i]    =    Math.sqrt(ltQ[i]);    ltQ[i]  =  Math.sqrt(ltQ[i]  +  p);	  	compilable	  [FE]  AssertionError  	88	5	add
265	[BUG]  [BUGGY]          ltQ[i]  =  Math.sqrt(ltQ[i]);  ltQ[i]  =  Math.sqrt(ltQ[i]  +  p);  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltQ[i]  =  Math.sqrt(ltQ[i]);  ltQ[i]  =  Math.sqrt(ltQ[i]  +  p);  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	                ltQ[i]    =    Math.sqrt(ltQ[i]);    ltQ[i]  =  Math.sqrt(ltQ[i]  +  p);	  	compilable	  [FE]  AssertionError  	88	5	add
266	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]    -=    ltQ[p]    *    ltQ[p];    ltQ[p]  -=  ltQ[p]  *  ltQ[p];  ltQ[p]  -=  ltQ[p]  *  ltQ[p];  ltQ[p]  -=  ltQ[p]  *  ltQ[p];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]        -=        ltQ[p]        *        ltQ[p];        ltQ[p]    -=    ltQ[p]    *    ltQ[p];    ltQ[p]  -=  ltQ[p]  *  ltQ[p];  ltQ[p]  -=  ltQ[p]  *  ltQ[p];	  	compilable	  [FE]  AssertionError  	60	5	add
267	[BUG]  [BUGGY]  ltQ[p]    -=    ltQ[p]    *    ltQ[p];    ltQ[p]  -=  ltQ[p]  *  ltQ[p];  ltQ[p]  -=  ltQ[p]  *  ltQ[p];  ltQ[p]  -=  ltQ[p]  *  ltQ[p];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]    -=    ltQ[p]    *    ltQ[p];    ltQ[p]  -=  ltQ[p]  *  ltQ[p];  ltQ[p]  -=  ltQ[p]  *  ltQ[p];  ltQ[p]  -=  ltQ[p]  *  ltQ[p];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]        -=        ltQ[p]        *        ltQ[p];        ltQ[p]    -=    ltQ[p]    *    ltQ[p];    ltQ[p]  -=  ltQ[p]  *  ltQ[p];  ltQ[p]  -=  ltQ[p]  *  ltQ[p];	  	compilable	  [FE]  AssertionError  	60	5	add
268	[BUG]  [BUGGY]  ltQ[p]    -=    ltQ[p]    *    ltQ[p];    ltQ[p]  -=  ltQ[p]  *  ltQ[p];  LtQ[p]  -=  ltQ[p]  *  ltQ[p];  ltQ[p]  -=  ltQ[p]  *  ltQ[p];  [CE]  cannot  find  symbol  LtQ  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]    -=    ltQ[p]    *    ltQ[p];    ltQ[p]  -=  ltQ[p]  *  ltQ[p];  LtQ[p]  -=  ltQ[p]  *  ltQ[p];  ltQ[p]  -=  ltQ[p]  *  ltQ[p];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]        -=        ltQ[p]        *        ltQ[p];        ltQ[p]    -=    ltQ[p]    *    ltQ[p];    LtQ[p]  -=  ltQ[p]  *  ltQ[p];  ltQ[p]  -=  ltQ[p]  *  ltQ[p];	  	non-compiled	[CE]  cannot  find  symbol  LtQ	60	None	add
269	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[1]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]  =  Math.sqrt(ltQ[1]);	  ltQ[p]    =    Math.sqrt(ltQ[0]);    	compilable	  [FE]  AssertionError  	98	5	replace
270	[BUG]  [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[1]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[1]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  =  Math.sqrt(ltQ[1]);	  ltQ[p]    =    Math.sqrt(ltQ[0]);    	compilable	  [FE]  AssertionError  	98	5	replace
271	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[0]  +  p);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]  =  Math.sqrt(ltQ[0]  +  p);	  ltQ[p]    =    Math.sqrt(ltQ[0]);    	compilable	  [FE]  AssertionError  	98	4	replace
272	[BUG]  [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[0]  +  p);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[0]  +  p);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  =  Math.sqrt(ltQ[0]  +  p);	  ltQ[p]    =    Math.sqrt(ltQ[0]);    	compilable	  [FE]  AssertionError  	98	4	replace
273	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[0]  +  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]  =  Math.sqrt(ltQ[0]  +  1);	  ltQ[p]    =    Math.sqrt(ltQ[0]);    	compilable	  [FE]  AssertionError  	98	4	replace
274	[BUG]  [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[0]  +  1);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[0]  +  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  =  Math.sqrt(ltQ[0]  +  1);	  ltQ[p]    =    Math.sqrt(ltQ[0]);    	compilable	  [FE]  AssertionError  	98	4	replace
275	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[0]  *  p);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]  =  Math.sqrt(ltQ[0]  *  p);	  ltQ[p]    =    Math.sqrt(ltQ[0]);    	compilable	  [FE]  AssertionError  	98	5	replace
276	[BUG]  [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[0]  *  p);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[0]  *  p);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  =  Math.sqrt(ltQ[0]  *  p);	  ltQ[p]    =    Math.sqrt(ltQ[0]);    	compilable	  [FE]  AssertionError  	98	5	replace
277	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]  =  Math.sqrt(ltQ[p]);  ltQ[p]  =  Math.sqrt(ltQ[p]);  ltQ[p]  =  Math.sqrt(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	                ltQ[p]        =        Math.sqrt(ltQ[p]);        ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]  =  Math.sqrt(ltQ[p]);  ltQ[p]  =  Math.sqrt(ltQ[p]);	  	compilable	  [FE]  AssertionError  	64	5	add
278	[BUG]  [BUGGY]          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]  =  Math.sqrt(ltQ[p]);  ltQ[p]  =  Math.sqrt(ltQ[p]);  ltQ[p]  =  Math.sqrt(ltQ[p]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]  =  Math.sqrt(ltQ[p]);  ltQ[p]  =  Math.sqrt(ltQ[p]);  ltQ[p]  =  Math.sqrt(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	                ltQ[p]        =        Math.sqrt(ltQ[p]);        ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]  =  Math.sqrt(ltQ[p]);  ltQ[p]  =  Math.sqrt(ltQ[p]);	  	compilable	  [FE]  AssertionError  	64	5	add
279	[BUG]  [BUGGY]          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]  =  Math.sqrt(ltQ[p]);  LtQ[p]  =  Math.sqrt(ltQ[p]);  ltQ[p]  =  Math.sqrt(ltQ[p]);  [CE]  cannot  find  symbol  LtQ  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]  =  Math.sqrt(ltQ[p]);  LtQ[p]  =  Math.sqrt(ltQ[p]);  ltQ[p]  =  Math.sqrt(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	                ltQ[p]        =        Math.sqrt(ltQ[p]);        ltQ[p]    =    Math.sqrt(ltQ[p]);    LtQ[p]  =  Math.sqrt(ltQ[p]);  ltQ[p]  =  Math.sqrt(ltQ[p]);	  	non-compiled	[CE]  cannot  find  symbol  LtQ	64	None	add
280	[BUG]  [BUGGY]          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]  =  Math.sqrt(ltQ[p]);  ltQ[p]  =  Math.qrt(ltQ[p]);  ltQ[p]  =  Math.sqrt(ltQ[p]);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]  =  Math.sqrt(ltQ[p]);  ltQ[p]  =  Math.qrt(ltQ[p]);  ltQ[p]  =  Math.sqrt(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	                ltQ[p]        =        Math.sqrt(ltQ[p]);        ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]  =  Math.qrt(ltQ[p]);  ltQ[p]  =  Math.sqrt(ltQ[p]);	  	non-compiled	[CE]  cannot  find  symbol	64	None	add
281	[BUG]  [BUGGY]          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]  =  Math.sqrt(ltQ[p]);  ltQ[p]  =  Math.sqrt(ltQ[p]);  ltQ[p]  =  Math.sqrt(ltQ[p];  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]  =  Math.sqrt(ltQ[p]);  ltQ[p]  =  Math.sqrt(ltQ[p]);  ltQ[p]  =  Math.sqrt(ltQ[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	                ltQ[p]        =        Math.sqrt(ltQ[p]);        ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]  =  Math.sqrt(ltQ[p]);  ltQ[p]  =  Math.sqrt(ltQ[p];	  	non-compiled	[CE]  ')'  expected	64	None	add
282	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[p]  *  ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltI[p]  =  Math.sqrt(ltQ[p]  *  ltQ[p]);	  ltI[p]    =    Math.sqrt(ltQ[p]    *    ltJI);    	compilable	  [FE]  AssertionError  	108	4	replace
283	[BUG]  [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[p]  *  ltQ[p]);  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[p]  *  ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]  =  Math.sqrt(ltQ[p]  *  ltQ[p]);	  ltI[p]    =    Math.sqrt(ltQ[p]    *    ltJI);    	compilable	  [FE]  AssertionError  	108	4	replace
284	[BUG]  [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[p]  *  ltQ);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[p]  *  ltQ);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]  =  Math.sqrt(ltQ[p]  *  ltQ);	  ltI[p]    =    Math.sqrt(ltQ[p]    *    ltJI);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	108	None	replace
285	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[p]  +  1);  ltQ[p]  =  Math.sqrt(ltQ[p]  +  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]    =    Math.sqrt(ltQ[p]    +    1);    ltQ[p]  =  Math.sqrt(ltQ[p]  +  1);	  	compilable	  [FE]  AssertionError  	39	5	add
286	[BUG]  [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[p]  +  1);  ltQ[p]  =  Math.sqrt(ltQ[p]  +  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[p]  +  1);  ltQ[p]  =  Math.sqrt(ltQ[p]  +  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]    =    Math.sqrt(ltQ[p]    +    1);    ltQ[p]  =  Math.sqrt(ltQ[p]  +  1);	  	compilable	  [FE]  AssertionError  	39	5	add
287	[BUG]  [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[p]  +  1);  LtQ[p]  =  Math.sqrt(ltQ[p]  +  1);  [CE]  cannot  find  symbol  LtQ  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[p]  +  1);  LtQ[p]  =  Math.sqrt(ltQ[p]  +  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]    =    Math.sqrt(ltQ[p]    +    1);    LtQ[p]  =  Math.sqrt(ltQ[p]  +  1);	  	non-compiled	[CE]  cannot  find  symbol  LtQ	39	None	add
288	[BUG]  [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[p]  +  1);  ltQ[p]  =  Math.sqrt(ltQu[p]  +  1);  [CE]  cannot  find  symbol  ltQu  [FE]        AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[p]  +  1);  ltQ[p]  =  Math.sqrt(ltQu[p]  +  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]    =    Math.sqrt(ltQ[p]    +    1);    ltQ[p]  =  Math.sqrt(ltQu[p]  +  1);	  	non-compiled	[CE]  cannot  find  symbol  ltQu	39	None	add
289	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltQ[0]  +  1;  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]  -=  ltQ[p]  *  ltQ[0]  +  1;	  ltQ[p]    -=    ltQ[p]    *    ltQ[i]    +    1;    	compilable	  [FE]  AssertionError  	52	4	replace
290	[BUG]  [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltQ[0]  +  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltQ[0]  +  1;  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  -=  ltQ[p]  *  ltQ[0]  +  1;	  ltQ[p]    -=    ltQ[p]    *    ltQ[i]    +    1;    	compilable	  [FE]  AssertionError  	52	4	replace
291	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltQ[q]  +  1;  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]  -=  ltQ[p]  *  ltQ[q]  +  1;	  ltQ[p]    -=    ltQ[p]    *    ltQ[i]    +    1;    	compilable	  [FE]  AssertionError  	52	5	replace
292	[BUG]  [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltQ[q]  +  1;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltQ[q]  +  1;  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  -=  ltQ[p]  *  ltQ[q]  +  1;	  ltQ[p]    -=    ltQ[p]    *    ltQ[i]    +    1;    	compilable	  [FE]  AssertionError  	52	5	replace
293	[BUG]  [BUGGY]  ltI[p]  -=  ltI[p]  *  ltI[p].;  [CE]  <identifier>  expected  [FE]        AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltI[p]  *  ltI[p].;  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]  -=  ltI[p]  *  ltI[p].;	          ltI[p]    -=    ltI[p]    *    ltI[p];    ltI[p]    -=    ltI[p]    *    ltI[p].;    	non-compiled	[CE]  <identifier>  expected	87	None	replace
294	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[i]  -=  ltQ[p]  *  ltQ[i];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[i]  -=  ltQ[p]  *  ltQ[i];	  ltQ[p]    -=    ltQ[p]    *    ltQ[i];    ltQ[p]    -=    ltQ[p]    *    ltQu[i];    	compilable	  [FE]  AssertionError  	103	4	replace
295	[BUG]  [BUGGY]  ltQ[i]  -=  ltQ[p]  *  ltQ[i];  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[i]  -=  ltQ[p]  *  ltQ[i];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[i]  -=  ltQ[p]  *  ltQ[i];	  ltQ[p]    -=    ltQ[p]    *    ltQ[i];    ltQ[p]    -=    ltQ[p]    *    ltQu[i];    	compilable	  [FE]  AssertionError  	103	4	replace
296	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[i]  *  ltQ[q];  ltQ[p]  -=  ltQ[i]  *  ltQ[q];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]    -=    ltQ[i]    *    ltQ[q];    ltQ[p]  -=  ltQ[i]  *  ltQ[q];	  	compilable	  [FE]  AssertionError  	83	2	add
297	[BUG]  [BUGGY]  ltQ[p]  -=  ltQ[i]  *  ltQ[q];  ltQ[p]  -=  ltQ[i]  *  ltQ[q];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[i]  *  ltQ[q];  ltQ[p]  -=  ltQ[i]  *  ltQ[q];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]    -=    ltQ[i]    *    ltQ[q];    ltQ[p]  -=  ltQ[i]  *  ltQ[q];	  	compilable	  [FE]  AssertionError  	83	2	add
298	[BUG]  [BUGGY]  ltQ[p]  -=  ltQ[i]  *  ltQ[q];  LtQ[p]  -=  ltQ[i]  *  ltQ[q];  [CE]  cannot  find  symbol  LtQ  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[i]  *  ltQ[q];  LtQ[p]  -=  ltQ[i]  *  ltQ[q];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]    -=    ltQ[i]    *    ltQ[q];    LtQ[p]  -=  ltQ[i]  *  ltQ[q];	  	non-compiled	[CE]  cannot  find  symbol  LtQ	83	None	add
299	[BUG]  [BUGGY]  ltQ[p]  -=  ltQ[i]  *  ltQ[q];  ltQ[p]  -=  ltQu[i]  *  ltQ[q];  [CE]  cannot  find  symbol  ltQu  [FE]        AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[i]  *  ltQ[q];  ltQ[p]  -=  ltQu[i]  *  ltQ[q];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]    -=    ltQ[i]    *    ltQ[q];    ltQ[p]  -=  ltQu[i]  *  ltQ[q];	  	non-compiled	[CE]  cannot  find  symbol  ltQu	83	None	add
300	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i]  *  p);  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltI[i]  =  Math.sqrt(ltQ[i]  *  p);	          ltI[i]    =    Math.sqrt(ltQ[i]);    	compilable	  [FE]  AssertionError  	14	4	replace
301	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i]  *  p);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i]  *  p);  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[i]  =  Math.sqrt(ltQ[i]  *  p);	          ltI[i]    =    Math.sqrt(ltQ[i]);    	compilable	  [FE]  AssertionError  	14	4	replace
302	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i]  +  p);  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltI[i]  =  Math.sqrt(ltQ[i]  +  p);	          ltI[i]    =    Math.sqrt(ltQ[i]);    	compilable	  [FE]  AssertionError  	14	4	replace
303	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i]  +  p);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i]  +  p);  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[i]  =  Math.sqrt(ltQ[i]  +  p);	          ltI[i]    =    Math.sqrt(ltQ[i]);    	compilable	  [FE]  AssertionError  	14	4	replace
304	[BUG]  [BUGGY]  inverse  =  Math.sqrt(ltQ[p]  +  1);  [CE]  cannot  assign  a  value  to  final  variable  inverse  [FE]            AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  inverse  =  Math.sqrt(ltQ[p]  +  1);  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	inverse  =  Math.sqrt(ltQ[p]  +  1);	          inverse    =    Math.sqrt(ltQ[p]);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  inverse	91	None	replace
305	[BUG]  [BUGGY]          ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltQ[i],  p);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltQ[i],  p);  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	                ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.sqrt(ltQ[i],  p);	  	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	13	None	add
306	[BUG]  [BUGGY]  ltQ[p]    -=    ltQ[i]    *    ltQ[p];    ltQ[p]  -=  ltQ[i]  *  ltQ[p];  ltQ[p]  -=  ltQ[i]  *  ltQ[p];  ltQ[p]  -=  ltQ[i]  *  ltQ[p]  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]    -=    ltQ[i]    *    ltQ[p];    ltQ[p]  -=  ltQ[i]  *  ltQ[p];  ltQ[p]  -=  ltQ[i]  *  ltQ[p];  ltQ[p]  -=  ltQ[i]  *  ltQ[p]  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]        -=        ltQ[i]        *        ltQ[p];        ltQ[p]    -=    ltQ[i]    *    ltQ[p];    ltQ[p]  -=  ltQ[i]  *  ltQ[p];  ltQ[p]  -=  ltQ[i]  *  ltQ[p]	  	non-compiled	[CE]  ';'  expected	3	None	add
307	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]    -=    ltQ[i]    *    ltQ[p];    ltQ[p]  -=  ltQ[i]  *  ltQ[p];  ltQ[p]  -=  ltQ[0]  *  ltQ[p];  ltQ[p]  -=  ltQ[i]  *  ltQ[p];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]        -=        ltQ[i]        *        ltQ[p];        ltQ[p]    -=    ltQ[i]    *    ltQ[p];    ltQ[p]  -=  ltQ[0]  *  ltQ[p];  ltQ[p]  -=  ltQ[i]  *  ltQ[p];	  	compilable	  [FE]  AssertionError  	3	2	add
308	[BUG]  [BUGGY]  ltQ[p]    -=    ltQ[i]    *    ltQ[p];    ltQ[p]  -=  ltQ[i]  *  ltQ[p];  ltQ[p]  -=  ltQ[0]  *  ltQ[p];  ltQ[p]  -=  ltQ[i]  *  ltQ[p];  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]    -=    ltQ[i]    *    ltQ[p];    ltQ[p]  -=  ltQ[i]  *  ltQ[p];  ltQ[p]  -=  ltQ[0]  *  ltQ[p];  ltQ[p]  -=  ltQ[i]  *  ltQ[p];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]        -=        ltQ[i]        *        ltQ[p];        ltQ[p]    -=    ltQ[i]    *    ltQ[p];    ltQ[p]  -=  ltQ[0]  *  ltQ[p];  ltQ[p]  -=  ltQ[i]  *  ltQ[p];	  	compilable	  [FE]  AssertionError  	3	2	add
309	[BUG]  [BUGGY]          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]  =  Math.sqrt(ltQ[p]);  ltQ[p]  =  Math.sqrt(ltQ[p]);  ltQ[p]  =  Math.sqrt(ltQ[p]  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]  =  Math.sqrt(ltQ[p]);  ltQ[p]  =  Math.sqrt(ltQ[p]);  ltQ[p]  =  Math.sqrt(ltQ[p]  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	                ltQ[p]        =        Math.sqrt(ltQ[p]);        ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]  =  Math.sqrt(ltQ[p]);  ltQ[p]  =  Math.sqrt(ltQ[p]	  	non-compiled	[CE]  ')'  expected	64	None	add
310	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[p]  /  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltI[p]  =  Math.sqrt(ltQ[p]  /  1);	  ltI[p]    =    Math.sqrt(ltQ[p]    -    1);    	compilable	  [FE]  AssertionError  	24	4	replace
311	[BUG]  [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[p]  /  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[p]  /  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]  =  Math.sqrt(ltQ[p]  /  1);	  ltI[p]    =    Math.sqrt(ltQ[p]    -    1);    	compilable	  [FE]  AssertionError  	24	4	replace
312	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]    -=    ltQ[q]    *    ltQ[p];    ltQ[p]  -=  ltQ[q]  *  ltQ[p];  ltQ[p]  -=  ltQ[q]  *  ltQ[p];  ltQ[p]  -=  ltQ[p]  *  ltQ[p];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]        -=        ltQ[q]        *        ltQ[p];        ltQ[p]    -=    ltQ[q]    *    ltQ[p];    ltQ[p]  -=  ltQ[q]  *  ltQ[p];  ltQ[p]  -=  ltQ[p]  *  ltQ[p];	  	compilable	  [FE]  AssertionError  	43	5	add
313	[BUG]  [BUGGY]  ltQ[p]    -=    ltQ[q]    *    ltQ[p];    ltQ[p]  -=  ltQ[q]  *  ltQ[p];  ltQ[p]  -=  ltQ[q]  *  ltQ[p];  ltQ[p]  -=  ltQ[p]  *  ltQ[p];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]    -=    ltQ[q]    *    ltQ[p];    ltQ[p]  -=  ltQ[q]  *  ltQ[p];  ltQ[p]  -=  ltQ[q]  *  ltQ[p];  ltQ[p]  -=  ltQ[p]  *  ltQ[p];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]        -=        ltQ[q]        *        ltQ[p];        ltQ[p]    -=    ltQ[q]    *    ltQ[p];    ltQ[p]  -=  ltQ[q]  *  ltQ[p];  ltQ[p]  -=  ltQ[p]  *  ltQ[p];	  	compilable	  [FE]  AssertionError  	43	5	add
314	[BUG]  [BUGGY]  ltQ[p]    -=    ltQ[q]    *    ltQ[p];    ltQ[p]  -=  ltQ[q]  *  ltQ[p];  ltQ[p]  -=  ltQ[q]  *  ltQ[p];  ltQ[p]  -=  ltQ[q]  *  ltQ[p]  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]    -=    ltQ[q]    *    ltQ[p];    ltQ[p]  -=  ltQ[q]  *  ltQ[p];  ltQ[p]  -=  ltQ[q]  *  ltQ[p];  ltQ[p]  -=  ltQ[q]  *  ltQ[p]  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]        -=        ltQ[q]        *        ltQ[p];        ltQ[p]    -=    ltQ[q]    *    ltQ[p];    ltQ[p]  -=  ltQ[q]  *  ltQ[p];  ltQ[p]  -=  ltQ[q]  *  ltQ[p]	  	non-compiled	[CE]  ';'  expected	43	None	add
315	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.min(ltQ[p],  ltQ[q]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]  =  Math.min(ltQ[p],  ltQ[q]);	  ltQ[p]    =    Math.log(ltQ[p]);    	compilable	  [FE]  AssertionError  	42	4	replace
316	[BUG]  [BUGGY]  ltQ[p]  =  Math.min(ltQ[p],  ltQ[q]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.min(ltQ[p],  ltQ[q]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  =  Math.min(ltQ[p],  ltQ[q]);	  ltQ[p]    =    Math.log(ltQ[p]);    	compilable	  [FE]  AssertionError  	42	4	replace
317	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.log(ltQ[q]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]  =  Math.log(ltQ[q]);	  ltQ[p]    =    Math.log(ltQ[p]);    	compilable	  [FE]  AssertionError  	42	5	replace
318	[BUG]  [BUGGY]  ltQ[p]  =  Math.log(ltQ[q]);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.log(ltQ[q]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  =  Math.log(ltQ[q]);	  ltQ[p]    =    Math.log(ltQ[p]);    	compilable	  [FE]  AssertionError  	42	5	replace
319	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.min(ltQ[p],  ltQ[i]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]  =  Math.min(ltQ[p],  ltQ[i]);	  ltQ[p]    =    Math.log(ltQ[p]);    	compilable	  [FE]  AssertionError  	42	5	replace
320	[BUG]  [BUGGY]  ltQ[p]  =  Math.min(ltQ[p],  ltQ[i]);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.min(ltQ[p],  ltQ[i]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  =  Math.min(ltQ[p],  ltQ[i]);	  ltQ[p]    =    Math.log(ltQ[p]);    	compilable	  [FE]  AssertionError  	42	5	replace
321	[BUG]  [BUGGY]  LtQ[p]  -=  ltQ[q]  *  ltQ[p];  ltQ[p]  -=  ltQ[q]  *  ltQ[p];  [CE]  cannot  find  symbol  LtQ  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  LtQ[p]  -=  ltQ[q]  *  ltQ[p];  ltQ[p]  -=  ltQ[q]  *  ltQ[p];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	LtQ[p]  -=  ltQ[q]  *  ltQ[p];  ltQ[p]  -=  ltQ[q]  *  ltQ[p];	  ltQ[p]    -=    ltQ[q]    *    ltQ[p];    ltQ[p]    -=    ltQ[q]    *    ltQ[p];    	non-compiled	[CE]  cannot  find  symbol  LtQ	44	None	replace
322	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i],  p);  final  double  inverse  =  1.0  /  ltI[i].doubleValue();  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i],  p);  final  double  inverse  =  1.0  /  ltI[i].doubleValue();  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[i]  =  Math.sqrt(ltQ[i],  p);  final  double  inverse  =  1.0  /  ltI[i].doubleValue();	          ltI[i]    =    Math.sqrt(ltQ[i]);    final    double    inverse    =    1.0    /    ltI[i].doubleValue();    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	90	None	replace
323	[BUG]  [BUGGY]          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]  =  Math.sqrt(ltQ[p]  +  1);  ltI[p]  =  Math.sqrt(ltY[p]);  ltI[p]  =  Math.sqrt(ltQ[p]  +  1);  [CE]  cannot  find  symbol  ltY  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]  =  Math.sqrt(ltQ[p]  +  1);  ltI[p]  =  Math.sqrt(ltY[p]);  ltI[p]  =  Math.sqrt(ltQ[p]  +  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	                ltI[p]        =        Math.sqrt(ltQ[p]);        ltI[p]    =    Math.sqrt(ltQ[p]    +    1);    ltI[p]  =  Math.sqrt(ltY[p]);  ltI[p]  =  Math.sqrt(ltQ[p]  +  1);	  	non-compiled	[CE]  cannot  find  symbol  ltY	58	None	add
324	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i],  inverse);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i],  inverse);  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[i]  =  Math.sqrt(ltQ[i],  inverse);	          ltI[i]    =    Math.sqrt(ltQ[i],    p);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	109	None	replace
325	[BUG]  [BUGGY]          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]  =  Math.sqrt(ltQ[p]);  ltI[p]  =  Math.sqrt(ltX[p]);  ltI[p]  =  Math.sqrt(ltQ[p]);  [CE]  cannot  find  symbol  ltX  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]  =  Math.sqrt(ltQ[p]);  ltI[p]  =  Math.sqrt(ltX[p]);  ltI[p]  =  Math.sqrt(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	                ltI[p]        =        Math.sqrt(ltQ[p]);        ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]  =  Math.sqrt(ltX[p]);  ltI[p]  =  Math.sqrt(ltQ[p]);	  	non-compiled	[CE]  cannot  find  symbol  ltX	53	None	add
326	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.min(ltQ[p],  ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]  =  Math.min(ltQ[p],  ltQ[p]);	          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]    =    Math.min(ltQ[p]);    	compilable	  [FE]  AssertionError  	106	4	replace
327	[BUG]  [BUGGY]  ltQ[p]  =  Math.min(ltQ[p],  ltQ[p]);  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.min(ltQ[p],  ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  =  Math.min(ltQ[p],  ltQ[p]);	          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]    =    Math.min(ltQ[p]);    	compilable	  [FE]  AssertionError  	106	4	replace
328	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.min(ltQ[p],  q);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]  =  Math.min(ltQ[p],  q);	          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]    =    Math.min(ltQ[p]);    	compilable	  [FE]  AssertionError  	106	4	replace
329	[BUG]  [BUGGY]  ltQ[p]  =  Math.min(ltQ[p],  q);  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.min(ltQ[p],  q);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  =  Math.min(ltQ[p],  q);	          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]    =    Math.min(ltQ[p]);    	compilable	  [FE]  AssertionError  	106	4	replace
330	[BUG]  [BUGGY]  ltI[p]  -=  ltI[p]  *  ltQ[p].;  [CE]  <identifier>  expected  [FE]        AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltI[p]  *  ltQ[p].;  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]  -=  ltI[p]  *  ltQ[p].;	          ltI[p]    -=    ltI[p]    *    ltI[p];    ltI[p]    -=    ltI[p]    *    ltI[p].;    	non-compiled	[CE]  <identifier>  expected	87	None	replace
331	[BUG]  [BUGGY]          ltI[p]    -=    ltI[q]    *    ltI[p];    ltI[p]  -=  ltI[q]  *  ltI[p];  ltI[p]  -=  ltI[q]  *  ltI[p];  ltI[p]  -=  ltI[q]  *  ltI[p]  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltI[p]    -=    ltI[q]    *    ltI[p];    ltI[p]  -=  ltI[q]  *  ltI[p];  ltI[p]  -=  ltI[q]  *  ltI[p];  ltI[p]  -=  ltI[q]  *  ltI[p]  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	                ltI[p]        -=        ltI[q]        *        ltI[p];        ltI[p]    -=    ltI[q]    *    ltI[p];    ltI[p]  -=  ltI[q]  *  ltI[p];  ltI[p]  -=  ltI[q]  *  ltI[p]	  	non-compiled	[CE]  ';'  expected	29	None	add
332	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltI[q]  *  ltQ[i];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltI[p]  -=  ltI[q]  *  ltQ[i];	  ltI[p]    -=    ltI[p]    *    ltQ[i];    	compilable	  [FE]  AssertionError  	102	4	replace
333	[BUG]  [BUGGY]  ltI[p]  -=  ltI[q]  *  ltQ[i];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltI[q]  *  ltQ[i];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]  -=  ltI[q]  *  ltQ[i];	  ltI[p]    -=    ltI[p]    *    ltQ[i];    	compilable	  [FE]  AssertionError  	102	4	replace
334	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltI[p]  *  ltQ[q];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltI[p]  -=  ltI[p]  *  ltQ[q];	  ltI[p]    -=    ltI[p]    *    ltQ[i];    	compilable	  [FE]  AssertionError  	102	4	replace
335	[BUG]  [BUGGY]  ltI[p]  -=  ltI[p]  *  ltQ[q];  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltI[p]  *  ltQ[q];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]  -=  ltI[p]  *  ltQ[q];	  ltI[p]    -=    ltI[p]    *    ltQ[i];    	compilable	  [FE]  AssertionError  	102	4	replace
336	[BUG]  [BUGGY]          ltI[p]    -=    ltI[p]    *    ltI[p];    ltI[p]  -=  ltI[p]  *  ltI[p];  ltI[p]  -=  ltI[p]  *  ltI[p];  ltI[p]  -=  ltI[p]  *  ltI[p]  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltI[p]    -=    ltI[p]    *    ltI[p];    ltI[p]  -=  ltI[p]  *  ltI[p];  ltI[p]  -=  ltI[p]  *  ltI[p];  ltI[p]  -=  ltI[p]  *  ltI[p]  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	                ltI[p]        -=        ltI[p]        *        ltI[p];        ltI[p]    -=    ltI[p]    *    ltI[p];    ltI[p]  -=  ltI[p]  *  ltI[p];  ltI[p]  -=  ltI[p]  *  ltI[p]	  	non-compiled	[CE]  ';'  expected	7	None	add
337	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i]);  final  double  inverse  =  1.0  /  ltI[i];  for(int  j  =  0;  j  <  p;  ++j)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i]);  final  double  inverse  =  1.0  /  ltI[i];  for(int  j  =  0;  j  <  p;  ++j)  {  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[i]  =  Math.sqrt(ltQ[i]);  final  double  inverse  =  1.0  /  ltI[i];  for(int  j  =  0;  j  <  p;  ++j)  {	          ltI[i]    =    Math.sqrt(ltQ[i]);    final    double    inverse    =    1.0    /    ltI[i];    for(int    j    =    0;    j    <    p;    ++j)    {    ltI[    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
338	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[0]  =  Math.sqrt(ltQ[0]);  ltQ[0]  =  Math.sqrt(ltQ[0]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[0]  =  Math.sqrt(ltQ[0]);  ltQ[0]  =  Math.sqrt(ltQ[0]);	          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]    =    Math.sqrt(ltQ[p]);    	compilable	  [FE]  AssertionError  	65	4	replace
339	[BUG]  [BUGGY]  ltQ[0]  =  Math.sqrt(ltQ[0]);  ltQ[0]  =  Math.sqrt(ltQ[0]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[0]  =  Math.sqrt(ltQ[0]);  ltQ[0]  =  Math.sqrt(ltQ[0]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[0]  =  Math.sqrt(ltQ[0]);  ltQ[0]  =  Math.sqrt(ltQ[0]);	          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]    =    Math.sqrt(ltQ[p]);    	compilable	  [FE]  AssertionError  	65	4	replace
340	[BUG]  [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[p],  ltQ[p]);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[p],  ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  =  Math.sqrt(ltQ[p],  ltQ[p]);	          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]    =    Math.sqrt(ltQ[p]);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	65	None	replace
341	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[p]  /  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]  =  Math.sqrt(ltQ[p]  /  1);	  ltQ[p]    =    Math.sqrt(ltQ[p]    -    1);    	compilable	  [FE]  AssertionError  	94	4	replace
342	[BUG]  [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[p]  /  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[p]  /  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  =  Math.sqrt(ltQ[p]  /  1);	  ltQ[p]    =    Math.sqrt(ltQ[p]    -    1);    	compilable	  [FE]  AssertionError  	94	4	replace
343	[BUG]  [BUGGY]  LtQ[p]  =  Math.sqrt(ltQ[p]).doubleValue();  [CE]  cannot  find  symbol  LtQ  [FE]          AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  LtQ[p]  =  Math.sqrt(ltQ[p]).doubleValue();  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	LtQ[p]  =  Math.sqrt(ltQ[p]).doubleValue();	          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]    =    Math.sqrt(ltQ[p]).doubleValue();    	non-compiled	[CE]  cannot  find  symbol  LtQ	66	None	replace
344	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[p]  +  2);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]  =  Math.sqrt(ltQ[p]  +  2);	          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]    =    Math.sqrt(ltQ[p]    +    1);    	compilable	  [FE]  AssertionError  	70	4	replace
345	[BUG]  [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[p]  +  2);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[p]  +  2);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  =  Math.sqrt(ltQ[p]  +  2);	          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]    =    Math.sqrt(ltQ[p]    +    1);    	compilable	  [FE]  AssertionError  	70	4	replace
346	[BUG]  [BUGGY]  final  double  inverse  =  1.0  /  ltI[i];  [CE]  variable  inverse  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]          AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  final  double  inverse  =  1.0  /  ltI[i];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	final  double  inverse  =  1.0  /  ltI[i];	          ltI[i]    =    Math.sqrt(ltQ[i]);    final    double    inverse    =    1.0    /    ltI[i];    	non-compiled	[CE]  variable  inverse  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	15	None	replace
347	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i]  +  p);  final  double  inverse  =  1.0  /  ltI[i];  [CE]  variable  inverse  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i]  +  p);  final  double  inverse  =  1.0  /  ltI[i];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[i]  =  Math.sqrt(ltQ[i]  +  p);  final  double  inverse  =  1.0  /  ltI[i];	          ltI[i]    =    Math.sqrt(ltQ[i]);    final    double    inverse    =    1.0    /    ltI[i];    	non-compiled	[CE]  variable  inverse  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	15	None	replace
348	[BUG]  [BUGGY]  LtI[p]  -=  ltI[p]  *  ltQ[p];  [CE]  cannot  find  symbol  LtI  [FE]            AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  LtI[p]  -=  ltI[p]  *  ltQ[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	LtI[p]  -=  ltI[p]  *  ltQ[p];	          ltI[p]    -=    ltI[p]    *    ltI[p];    ltI[p]    -=    ltI[p]    *    rtI[p];    	non-compiled	[CE]  cannot  find  symbol  LtI	10	None	replace
349	[BUG]  [BUGGY]  ltI[p]  -=  ltI[p]  *  ltJI[p];  [CE]  cannot  find  symbol  ltJI  [FE]              AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltI[p]  *  ltJI[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]  -=  ltI[p]  *  ltJI[p];	          ltI[p]    -=    ltI[p]    *    ltI[p];    ltI[p]    -=    ltI[p]    *    rtI[p];    	non-compiled	[CE]  cannot  find  symbol  ltJI	10	None	replace
350	[BUG]  [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltQ[p];  ltQ[p]  -=  ltQ[p]  *  ltQ[p].  [CE]  <identifier>  expected  [FE]        AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltQ[p];  ltQ[p]  -=  ltQ[p]  *  ltQ[p].  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  -=  ltQ[p]  *  ltQ[p];  ltQ[p]  -=  ltQ[p]  *  ltQ[p].	  ltQ[p]    -=    ltQ[p]    *    ltQ[p];    ltQ[p]    -=    ltQ[p]    *    ltQ[p].;    	non-compiled	[CE]  <identifier>  expected	110	None	replace
351	[BUG]  [BUGGY]  LtI[p]  -=  ltI[q]  *  ltQ[p];  [CE]  cannot  find  symbol  LtI  [FE]        AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  LtI[p]  -=  ltI[q]  *  ltQ[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	LtI[p]  -=  ltI[q]  *  ltQ[p];	          ltI[p]    -=    ltI[q]    *    ltI[p];    ltI[p]    -=    ltI[q]    *    rtI[p];    	non-compiled	[CE]  cannot  find  symbol  LtI	107	None	replace
352	[BUG]  [BUGGY]  ltI[p]  -=  ltI[q]  *  ltT[p];  [CE]  cannot  find  symbol  ltT  [FE]          AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltI[q]  *  ltT[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]  -=  ltI[q]  *  ltT[p];	          ltI[p]    -=    ltI[q]    *    ltI[p];    ltI[p]    -=    ltI[q]    *    rtI[p];    	non-compiled	[CE]  cannot  find  symbol  ltT	107	None	replace
353	[BUG]  [BUGGY]  ltQ[p]    -=    ltQ[p]    *    ltQ[p];    ltQ[p]  -=  ltQ[p]  *  ltQ[p];  ltQ[p]  -=  ltQ[p]  *  ltQ[p];  ltQ[p]  -=  ltQ[p]  *  ltQ[p]  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]    -=    ltQ[p]    *    ltQ[p];    ltQ[p]  -=  ltQ[p]  *  ltQ[p];  ltQ[p]  -=  ltQ[p]  *  ltQ[p];  ltQ[p]  -=  ltQ[p]  *  ltQ[p]  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]        -=        ltQ[p]        *        ltQ[p];        ltQ[p]    -=    ltQ[p]    *    ltQ[p];    ltQ[p]  -=  ltQ[p]  *  ltQ[p];  ltQ[p]  -=  ltQ[p]  *  ltQ[p]	  	non-compiled	[CE]  ';'  expected	60	None	add
354	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  Math.sqrt(ltQ[i]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]  -=  Math.sqrt(ltQ[i]);	  ltQ[p]    -=    Math.sqrt(ltQ[p]);    	compilable	  [FE]  AssertionError  	38	4	replace
355	[BUG]  [BUGGY]  ltQ[p]  -=  Math.sqrt(ltQ[i]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  Math.sqrt(ltQ[i]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  -=  Math.sqrt(ltQ[i]);	  ltQ[p]    -=    Math.sqrt(ltQ[p]);    	compilable	  [FE]  AssertionError  	38	4	replace
356	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  Math.sqrt(ltQ[0]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]  -=  Math.sqrt(ltQ[0]);	  ltQ[p]    -=    Math.sqrt(ltQ[p]);    	compilable	  [FE]  AssertionError  	38	4	replace
357	[BUG]  [BUGGY]  ltQ[p]  -=  Math.sqrt(ltQ[0]);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  Math.sqrt(ltQ[0]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  -=  Math.sqrt(ltQ[0]);	  ltQ[p]    -=    Math.sqrt(ltQ[p]);    	compilable	  [FE]  AssertionError  	38	4	replace
358	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  Math.sqrt(ltQ[p]  +  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]  -=  Math.sqrt(ltQ[p]  +  1);	  ltQ[p]    -=    Math.sqrt(ltQ[p]);    	compilable	  [FE]  AssertionError  	38	4	replace
359	[BUG]  [BUGGY]  ltQ[p]  -=  Math.sqrt(ltQ[p]  +  1);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  Math.sqrt(ltQ[p]  +  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  -=  Math.sqrt(ltQ[p]  +  1);	  ltQ[p]    -=    Math.sqrt(ltQ[p]);    	compilable	  [FE]  AssertionError  	38	4	replace
360	[BUG]  [BUGGY]  ltQ[i]  -=  ltQ[p]  *  ltQ[i];  LtQ[p]  -=  ltQ[p]  *  ltQ[i];  [CE]  cannot  find  symbol  LtQ  [FE]          AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[i]  -=  ltQ[p]  *  ltQ[i];  LtQ[p]  -=  ltQ[p]  *  ltQ[i];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[i]  -=  ltQ[p]  *  ltQ[i];  LtQ[p]  -=  ltQ[p]  *  ltQ[i];	  ltQ[p]    -=    ltQ[p]    *    ltQ[i];    LtQ[p]    -=    ltQ[p]    *    ltQ[i];    	non-compiled	[CE]  cannot  find  symbol  LtQ	27	None	replace
361	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[i]  +  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltI[p]  =  Math.sqrt(ltQ[i]  +  1);	  ltI[p]    =    Math.sqrt(ltQ[i]);    	compilable	  [FE]  AssertionError  	77	4	replace
362	[BUG]  [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[i]  +  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[i]  +  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]  =  Math.sqrt(ltQ[i]  +  1);	  ltI[p]    =    Math.sqrt(ltQ[i]);    	compilable	  [FE]  AssertionError  	77	4	replace
363	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[0]);  ltQ[p]  =  Math.sqrt(ltQ[2]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]    =    Math.sqrt(ltQ[0]);    ltQ[p]  =  Math.sqrt(ltQ[2]);	  	compilable	  [FE]  AssertionError  	97	5	add
364	[BUG]  [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[0]);  ltQ[p]  =  Math.sqrt(ltQ[2]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[0]);  ltQ[p]  =  Math.sqrt(ltQ[2]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]    =    Math.sqrt(ltQ[0]);    ltQ[p]  =  Math.sqrt(ltQ[2]);	  	compilable	  [FE]  AssertionError  	97	5	add
365	[BUG]  [BUGGY]  ltQ[p]  =  Math.log(ltQ[p]);  ltQ[p]  =  Math.log(ltQ[p].);  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.log(ltQ[p]);  ltQ[p]  =  Math.log(ltQ[p].);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]    =    Math.log(ltQ[p]);    ltQ[p]  =  Math.log(ltQ[p].);	  	non-compiled	[CE]  <identifier>  expected	41	None	add
366	[BUG]  [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltQ[i]  +  1;  ltQ[p]  -=  ltQ[p]  *  ltQu[i]  +  1;  [CE]  cannot  find  symbol  ltQu  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltQ[i]  +  1;  ltQ[p]  -=  ltQ[p]  *  ltQu[i]  +  1;  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]    -=    ltQ[p]    *    ltQ[i]    +    1;    ltQ[p]  -=  ltQ[p]  *  ltQu[i]  +  1;	  	non-compiled	[CE]  cannot  find  symbol  ltQu	51	None	add
367	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[0]  =  Math.sqrt(ltQ[0]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltI[0]  =  Math.sqrt(ltQ[0]);	          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]    =    Math.sqrt(ltQ[p]);    	compilable	  [FE]  AssertionError  	54	4	replace
368	[BUG]  [BUGGY]  ltI[0]  =  Math.sqrt(ltQ[0]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[0]  =  Math.sqrt(ltQ[0]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[0]  =  Math.sqrt(ltQ[0]);	          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]    =    Math.sqrt(ltQ[p]);    	compilable	  [FE]  AssertionError  	54	4	replace
369	[BUG]  [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[p]);  LtI[p]  =  Math.sqrt(ltI[p]);  [CE]  cannot  find  symbol  LtI  [FE]          AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[p]);  LtI[p]  =  Math.sqrt(ltI[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]  =  Math.sqrt(ltQ[p]);  LtI[p]  =  Math.sqrt(ltI[p]);	          ltI[p]    =    Math.sqrt(ltQ[p]);    LtI[p]    =    Math.sqrt(ltQ[p]);    	non-compiled	[CE]  cannot  find  symbol  LtI	86	None	replace
370	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  Math.sqrt(ltQ[i]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltI[p]  -=  Math.sqrt(ltQ[i]);	  ltI[p]    -=    Math.sqrt(ltQ[p]);    	compilable	  [FE]  AssertionError  	20	4	replace
371	[BUG]  [BUGGY]  ltI[p]  -=  Math.sqrt(ltQ[i]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  Math.sqrt(ltQ[i]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]  -=  Math.sqrt(ltQ[i]);	  ltI[p]    -=    Math.sqrt(ltQ[p]);    	compilable	  [FE]  AssertionError  	20	4	replace
372	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  Math.sqrt(ltQ[p]  +  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltI[p]  -=  Math.sqrt(ltQ[p]  +  1);	  ltI[p]    -=    Math.sqrt(ltQ[p]);    	compilable	  [FE]  AssertionError  	20	4	replace
373	[BUG]  [BUGGY]  ltI[p]  -=  Math.sqrt(ltQ[p]  +  1);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  Math.sqrt(ltQ[p]  +  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]  -=  Math.sqrt(ltQ[p]  +  1);	  ltI[p]    -=    Math.sqrt(ltQ[p]);    	compilable	  [FE]  AssertionError  	20	4	replace
374	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  Math.sqrt(ltQ[0]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltI[p]  -=  Math.sqrt(ltQ[0]);	  ltI[p]    -=    Math.sqrt(ltQ[p]);    	compilable	  [FE]  AssertionError  	20	4	replace
375	[BUG]  [BUGGY]  ltI[p]  -=  Math.sqrt(ltQ[0]);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  Math.sqrt(ltQ[0]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]  -=  Math.sqrt(ltQ[0]);	  ltI[p]    -=    Math.sqrt(ltQ[p]);    	compilable	  [FE]  AssertionError  	20	4	replace
376	[BUG]  [BUGGY]  ltI[p]  -=  Math.sqrt(ltQ[p]);  LtI[p]  -=  Math.sqrt(ltQ[p]);  [CE]  cannot  find  symbol  LtI  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  Math.sqrt(ltQ[p]);  LtI[p]  -=  Math.sqrt(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]    -=    Math.sqrt(ltQ[p]);    LtI[p]  -=  Math.sqrt(ltQ[p]);	  	non-compiled	[CE]  cannot  find  symbol  LtI	19	None	add
377	[BUG]  [BUGGY]  ltI[p]  -=  Math.sqrt(ltQ[p]);  ltI[p]  -=  Math.min(ltQ[p]);  [CE]  no  suitable  method  found  for  min(double)  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  Math.sqrt(ltQ[p]);  ltI[p]  -=  Math.min(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]    -=    Math.sqrt(ltQ[p]);    ltI[p]  -=  Math.min(ltQ[p]);	  	non-compiled	[CE]  no  suitable  method  found  for  min(double)	19	None	add
378	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[0]  =  Math.sqrt(ltQ[0]);  ltQ[0]  =  Math.log(ltQ[0]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[0]  =  Math.sqrt(ltQ[0]);  ltQ[0]  =  Math.log(ltQ[0]);	          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]    =    Math.log(ltQ[p]);    	compilable	  [FE]  AssertionError  	68	6	replace
379	[BUG]  [BUGGY]  ltQ[0]  =  Math.sqrt(ltQ[0]);  ltQ[0]  =  Math.log(ltQ[0]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[0]  =  Math.sqrt(ltQ[0]);  ltQ[0]  =  Math.log(ltQ[0]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[0]  =  Math.sqrt(ltQ[0]);  ltQ[0]  =  Math.log(ltQ[0]);	          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]    =    Math.log(ltQ[p]);    	compilable	  [FE]  AssertionError  	68	6	replace
380	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[0]  =  Math.sqrt(ltQ[0]);  ltQ[p]  =  Math.log(ltQ[0]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[0]  =  Math.sqrt(ltQ[0]);  ltQ[p]  =  Math.log(ltQ[0]);	          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]    =    Math.log(ltQ[p]);    	compilable	  [FE]  AssertionError  	68	5	replace
381	[BUG]  [BUGGY]  ltQ[0]  =  Math.sqrt(ltQ[0]);  ltQ[p]  =  Math.log(ltQ[0]);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[0]  =  Math.sqrt(ltQ[0]);  ltQ[p]  =  Math.log(ltQ[0]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[0]  =  Math.sqrt(ltQ[0]);  ltQ[p]  =  Math.log(ltQ[0]);	          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]    =    Math.log(ltQ[p]);    	compilable	  [FE]  AssertionError  	68	5	replace
382	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[i]  +  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]  =  Math.sqrt(ltQ[i]  +  1);	  ltQ[p]    =    Math.sqrt(ltQ[i]);    	compilable	  [FE]  AssertionError  	96	4	replace
383	[BUG]  [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[i]  +  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[i]  +  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  =  Math.sqrt(ltQ[i]  +  1);	  ltQ[p]    =    Math.sqrt(ltQ[i]);    	compilable	  [FE]  AssertionError  	96	4	replace
384	[BUG]  [BUGGY]          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]  =  Math.log(ltQ[p]);  ltI[p]  =  Math.sqrt(ltY[p]);  ltI[p]  =  Math.log(ltQ[p]);  [CE]  cannot  find  symbol  ltY  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]  =  Math.log(ltQ[p]);  ltI[p]  =  Math.sqrt(ltY[p]);  ltI[p]  =  Math.log(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	                ltI[p]        =        Math.sqrt(ltQ[p]);        ltI[p]    =    Math.log(ltQ[p]);    ltI[p]  =  Math.sqrt(ltY[p]);  ltI[p]  =  Math.log(ltQ[p]);	  	non-compiled	[CE]  cannot  find  symbol  ltY	55	None	add
385	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltQ[q]  *  ltQ[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltI[p]  -=  ltQ[q]  *  ltQ[p];	  ltI[p]    -=    ltI[q]    *    ltQ[p];    	compilable	  [FE]  AssertionError  	72	4	replace
386	[BUG]  [BUGGY]  ltI[p]  -=  ltQ[q]  *  ltQ[p];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltQ[q]  *  ltQ[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]  -=  ltQ[q]  *  ltQ[p];	  ltI[p]    -=    ltI[q]    *    ltQ[p];    	compilable	  [FE]  AssertionError  	72	4	replace
387	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltI[q]  *  ltQ[p]  +  1;  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltI[p]  -=  ltI[q]  *  ltQ[p]  +  1;	  ltI[p]    -=    ltI[q]    *    ltQ[p];    	compilable	  [FE]  AssertionError  	72	4	replace
388	[BUG]  [BUGGY]  ltI[p]  -=  ltI[q]  *  ltQ[p]  +  1;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltI[q]  *  ltQ[p]  +  1;  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]  -=  ltI[q]  *  ltQ[p]  +  1;	  ltI[p]    -=    ltI[q]    *    ltQ[p];    	compilable	  [FE]  AssertionError  	72	4	replace
389	[BUG]  [BUGGY]          ltQ[p]    -=    ltQ[q]    *    ltI[p];    ltQ[p]  -=  ltQ[q]  *  ltI[p];  ltQ[p]  -=  ltQ[q]  *  ltI[p];  ltQ[p]  -=  ltQ[q]  *  ltI[p]  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltQ[p]    -=    ltQ[q]    *    ltI[p];    ltQ[p]  -=  ltQ[q]  *  ltI[p];  ltQ[p]  -=  ltQ[q]  *  ltI[p];  ltQ[p]  -=  ltQ[q]  *  ltI[p]  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	                ltQ[p]        -=        ltQ[q]        *        ltI[p];        ltQ[p]    -=    ltQ[q]    *    ltI[p];    ltQ[p]  -=  ltQ[q]  *  ltI[p];  ltQ[p]  -=  ltQ[q]  *  ltI[p]	  	non-compiled	[CE]  ';'  expected	33	None	add
390	[BUG]  [BUGGY]  ltI[p]  -=  ltI[q]  *  ltQ[p];  ltI[p]  -=  ltI[Q]  *  ltQ[p];  [CE]  cannot  find  symbol  Q  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltI[q]  *  ltQ[p];  ltI[p]  -=  ltI[Q]  *  ltQ[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]    -=    ltI[q]    *    ltQ[p];    ltI[p]  -=  ltI[Q]  *  ltQ[p];	  	non-compiled	[CE]  cannot  find  symbol  Q	71	None	add
391	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[i]);  ltI[p]  =  Math.sqrt(ltQ[i]  +  p);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltI[p]    =    Math.sqrt(ltQ[i]);    ltI[p]  =  Math.sqrt(ltQ[i]  +  p);	  	compilable	  [FE]  AssertionError  	76	4	add
392	[BUG]  [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[i]);  ltI[p]  =  Math.sqrt(ltQ[i]  +  p);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[i]);  ltI[p]  =  Math.sqrt(ltQ[i]  +  p);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]    =    Math.sqrt(ltQ[i]);    ltI[p]  =  Math.sqrt(ltQ[i]  +  p);	  	compilable	  [FE]  AssertionError  	76	4	add
393	[BUG]  [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltQ[q];  int  ltQ[p]  -=  ltQ[p]  *  ltQ[q];  [CE]  ']'  expected  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltQ[q];  int  ltQ[p]  -=  ltQ[p]  *  ltQ[q];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]    -=    ltQ[p]    *    ltQ[q];    int  ltQ[p]  -=  ltQ[p]  *  ltQ[q];	  	non-compiled	[CE]  ']'  expected	80	None	add
394	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltQ[i]  *  ltI[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltI[p]  -=  ltQ[i]  *  ltI[p];	  ltI[p]    -=    ltQ[q]    *    ltI[p];    	compilable	  [FE]  AssertionError  	74	4	replace
395	[BUG]  [BUGGY]  ltI[p]  -=  ltQ[i]  *  ltI[p];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltQ[i]  *  ltI[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]  -=  ltQ[i]  *  ltI[p];	  ltI[p]    -=    ltQ[q]    *    ltI[p];    	compilable	  [FE]  AssertionError  	74	4	replace
396	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltQ[q]  *  ltQ[q];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltI[p]  -=  ltQ[q]  *  ltQ[q];	  ltI[p]    -=    ltQ[q]    *    ltI[p];    	compilable	  [FE]  AssertionError  	74	4	replace
397	[BUG]  [BUGGY]  ltI[p]  -=  ltQ[q]  *  ltQ[q];  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltQ[q]  *  ltQ[q];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]  -=  ltQ[q]  *  ltQ[q];	  ltI[p]    -=    ltQ[q]    *    ltI[p];    	compilable	  [FE]  AssertionError  	74	4	replace
398	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[i]);  ltQ[p]  =  Math.sqrt(ltQ[i]  +  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]    =    Math.sqrt(ltQ[i]);    ltQ[p]  =  Math.sqrt(ltQ[i]  +  1);	  	compilable	  [FE]  AssertionError  	95	5	add
399	[BUG]  [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[i]);  ltQ[p]  =  Math.sqrt(ltQ[i]  +  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[i]);  ltQ[p]  =  Math.sqrt(ltQ[i]  +  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]    =    Math.sqrt(ltQ[i]);    ltQ[p]  =  Math.sqrt(ltQ[i]  +  1);	  	compilable	  [FE]  AssertionError  	95	5	add
400	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[p]  +  2);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltI[p]  =  Math.sqrt(ltQ[p]  +  2);	          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]    =    Math.sqrt(ltQ[p]    +    1);    	compilable	  [FE]  AssertionError  	59	4	replace
401	[BUG]  [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[p]  +  2);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[p]  +  2);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]  =  Math.sqrt(ltQ[p]  +  2);	          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]    =    Math.sqrt(ltQ[p]    +    1);    	compilable	  [FE]  AssertionError  	59	4	replace
402	[BUG]  [BUGGY]  ltI[p]  -=  ltI[q]  *  ltQ[p];  LtI[p]  -=  ltI[q]  *  ltI[p];  [CE]  cannot  find  symbol  LtI  [FE]          AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltI[q]  *  ltQ[p];  LtI[p]  -=  ltI[q]  *  ltI[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]  -=  ltI[q]  *  ltQ[p];  LtI[p]  -=  ltI[q]  *  ltI[p];	          ltI[p]    -=    ltI[q]    *    ltI[p];    LtI[p]    -=    ltI[q]    *    ltI[p];    	non-compiled	[CE]  cannot  find  symbol  LtI	31	None	replace
403	[BUG]  [BUGGY]          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]  =  Math.log(ltQ[p]);  ltQ[p]  =  Math.qrt(ltQ[p]);  ltQ[p]  =  Math.log(ltQ[p]);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]  =  Math.log(ltQ[p]);  ltQ[p]  =  Math.qrt(ltQ[p]);  ltQ[p]  =  Math.log(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	                ltQ[p]        =        Math.sqrt(ltQ[p]);        ltQ[p]    =    Math.log(ltQ[p]);    ltQ[p]  =  Math.qrt(ltQ[p]);  ltQ[p]  =  Math.log(ltQ[p]);	  	non-compiled	[CE]  cannot  find  symbol	67	None	add
404	[BUG]  [BUGGY]  inverse  =  Math.sqrt(ltQ[i]);  [CE]  cannot  assign  a  value  to  final  variable  inverse  [FE]            AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  inverse  =  Math.sqrt(ltQ[i]);  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	inverse  =  Math.sqrt(ltQ[i]);	          inverse    =    Math.sqrt(ltQ[p]);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  inverse	91	None	replace
405	[BUG]  [BUGGY]  inverse  =  Math.sqrt(ltQ[p],  lJI);  [CE]  cannot  assign  a  value  to  final  variable  inverse  [FE]              AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  inverse  =  Math.sqrt(ltQ[p],  lJI);  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	inverse  =  Math.sqrt(ltQ[p],  lJI);	          inverse    =    Math.sqrt(ltQ[p]);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  inverse	91	None	replace
406	[BUG]  [BUGGY]  ltI[p]  -=  ltI[p]  *  ltQ[p];  LtI[p]  -=  ltI[p]  *  ltI[p];  [CE]  cannot  find  symbol  LtI  [FE]          AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltI[p]  *  ltQ[p];  LtI[p]  -=  ltI[p]  *  ltI[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]  -=  ltI[p]  *  ltQ[p];  LtI[p]  -=  ltI[p]  *  ltI[p];	          ltI[p]    -=    ltI[p]    *    ltI[p];    LtI[p]    -=    ltI[p]    *    ltI[p];    	non-compiled	[CE]  cannot  find  symbol  LtI	9	None	replace
407	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.min(ltQ[p],  ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltI[p]  =  Math.min(ltQ[p],  ltQ[p]);	          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]    =    Math.min(ltQ[p]);    	compilable	  [FE]  AssertionError  	113	4	replace
408	[BUG]  [BUGGY]  ltI[p]  =  Math.min(ltQ[p],  ltQ[p]);  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.min(ltQ[p],  ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]  =  Math.min(ltQ[p],  ltQ[p]);	          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]    =    Math.min(ltQ[p]);    	compilable	  [FE]  AssertionError  	113	4	replace
409	[BUG]  [BUGGY]  ltI[p]  =  Math.min(ltQ[p],  lJI);  [CE]  cannot  find  symbol  lJI  [FE]          AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.min(ltQ[p],  lJI);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]  =  Math.min(ltQ[p],  lJI);	          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]    =    Math.min(ltQ[p]);    	non-compiled	[CE]  cannot  find  symbol  lJI	113	None	replace
410	[BUG]  [BUGGY]  ltQ[p]  -=  Math.sqrt(ltQ[p]);  LtQ[p]  -=  Math.sqrt(ltQ[p]);  [CE]  cannot  find  symbol  LtQ  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  Math.sqrt(ltQ[p]);  LtQ[p]  -=  Math.sqrt(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]    -=    Math.sqrt(ltQ[p]);    LtQ[p]  -=  Math.sqrt(ltQ[p]);	  	non-compiled	[CE]  cannot  find  symbol  LtQ	37	None	add
411	[BUG]  [BUGGY]  ltQ[p]  -=  Math.sqrt(ltQ[p]);  ltQ[p]  -=  Math.sqrt(ltQ[p].);  [CE]  <identifier>  expected  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  Math.sqrt(ltQ[p]);  ltQ[p]  -=  Math.sqrt(ltQ[p].);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]    -=    Math.sqrt(ltQ[p]);    ltQ[p]  -=  Math.sqrt(ltQ[p].);	  	non-compiled	[CE]  <identifier>  expected	37	None	add
412	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltQ[i]  +  1;  ltQ[p]  -=  ltQ[p]  *  ltQ[i];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]  -=  ltQ[p]  *  ltQ[i]  +  1;  ltQ[p]  -=  ltQ[p]  *  ltQ[i];	  ltQ[p]    -=    ltQ[p]    *    ltQ[i];    ltQ[p]    -=    ltQ[p]    *    ltQ[i];    }    	compilable	  [FE]  AssertionError  	28	4	replace
413	[BUG]  [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltQ[i]  +  1;  ltQ[p]  -=  ltQ[p]  *  ltQ[i];  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltQ[i]  +  1;  ltQ[p]  -=  ltQ[p]  *  ltQ[i];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  -=  ltQ[p]  *  ltQ[i]  +  1;  ltQ[p]  -=  ltQ[p]  *  ltQ[i];	  ltQ[p]    -=    ltQ[p]    *    ltQ[i];    ltQ[p]    -=    ltQ[p]    *    ltQ[i];    }    	compilable	  [FE]  AssertionError  	28	4	replace
414	[BUG]  [BUGGY]  ltQ[i]  =  Math.sqrt(ltQ[i].doubleValue());  [CE]  double  cannot  be  dereferenced  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[i]  =  Math.sqrt(ltQ[i].doubleValue());  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[i]  =  Math.sqrt(ltQ[i].doubleValue());	          ltQ[i]    =    Math.sqrt(ltQ[i]);    	non-compiled	[CE]  double  cannot  be  dereferenced	89	None	replace
415	[BUG]  [BUGGY]  final  double  inverse  =  1.0  /  ltQ[i];  for(int  j  =  0;  j  <  ltI.length;  ++j)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  final  double  inverse  =  1.0  /  ltQ[i];  for(int  j  =  0;  j  <  ltI.length;  ++j)  {  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	final  double  inverse  =  1.0  /  ltQ[i];  for(int  j  =  0;  j  <  ltI.length;  ++j)  {	          ltI[i]    =    Math.sqrt(ltQ[i]);    final    double    inverse    =    1.0    /    ltI[i];    for(int    j    =    0;    j    <    ltI.length;    ++j)    {    lt    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
416	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i],  p  +  1);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i],  p  +  1);  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[i]  =  Math.sqrt(ltQ[i],  p  +  1);	          ltI[i]    =    Math.sqrt(ltQ[i],    p);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	109	None	replace
417	[BUG]  [BUGGY]  ltI[p]  -=  ltQ[q]  *  ltI[p];  ltI[p]  -=  ltq[q]  *  ltI[p];  [CE]  cannot  find  symbol  ltq  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltQ[q]  *  ltI[p];  ltI[p]  -=  ltq[q]  *  ltI[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]    -=    ltQ[q]    *    ltI[p];    ltI[p]  -=  ltq[q]  *  ltI[p];	  	non-compiled	[CE]  cannot  find  symbol  ltq	73	None	add
418	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[i]  -=  ltQ[i]  *  ltQ[i];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[i]  -=  ltQ[i]  *  ltQ[i];	  ltQ[p]    -=    ltQ[i]    *    ltQ[i];    	compilable	  [FE]  AssertionError  	50	4	replace
419	[BUG]  [BUGGY]  ltQ[i]  -=  ltQ[i]  *  ltQ[i];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[i]  -=  ltQ[i]  *  ltQ[i];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[i]  -=  ltQ[i]  *  ltQ[i];	  ltQ[p]    -=    ltQ[i]    *    ltQ[i];    	compilable	  [FE]  AssertionError  	50	4	replace
420	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[i]  -=  ltQ[i]  *  ltQ[p];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[i]  -=  ltQ[i]  *  ltQ[p];	  ltQ[p]    -=    ltQ[i]    *    ltQ[p];    ltQ[p]    -=    ltQ[i]    *    ltQ[p];    	compilable	  [FE]  AssertionError  	4	4	replace
421	[BUG]  [BUGGY]  ltQ[i]  -=  ltQ[i]  *  ltQ[p];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[i]  -=  ltQ[i]  *  ltQ[p];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[i]  -=  ltQ[i]  *  ltQ[p];	  ltQ[p]    -=    ltQ[i]    *    ltQ[p];    ltQ[p]    -=    ltQ[i]    *    ltQ[p];    	compilable	  [FE]  AssertionError  	4	4	replace
422	[BUG]  [BUGGY]  ltQ[p]  -=  ltQu[p]  *  ltQ[p];  [CE]  cannot  find  symbol  ltQu  [FE]            AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQu[p]  *  ltQ[p];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  -=  ltQu[p]  *  ltQ[p];	  ltQ[p]    -=    ltQ[p]    *    ltQ[p];    ltQ[p]    -=    ltQu[p]    *    ltQ[p];    	non-compiled	[CE]  cannot  find  symbol  ltQu	63	None	replace
423	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.floor(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltI[p]  =  Math.floor(ltQ[p]);	          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]    =    Math.log(ltQ[p]);    	compilable	  [FE]  AssertionError  	56	4	replace
424	[BUG]  [BUGGY]  ltI[p]  =  Math.floor(ltQ[p]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.floor(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]  =  Math.floor(ltQ[p]);	          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]    =    Math.log(ltQ[p]);    	compilable	  [FE]  AssertionError  	56	4	replace
425	[BUG]  [BUGGY]  ltQ[p]  -=  ltQu[q]  *  ltQ[p];  [CE]  cannot  find  symbol  ltQu  [FE]            AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQu[q]  *  ltQ[p];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  -=  ltQu[q]  *  ltQ[p];	  ltQ[p]    -=    ltQ[q]    *    ltQ[p];    ltQ[p]    -=    ltQu[q]    *    ltQ[p];    	non-compiled	[CE]  cannot  find  symbol  ltQu	46	None	replace
426	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltQ[i]  /  1;  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]  -=  ltQ[p]  *  ltQ[i]  /  1;	  ltQ[p]    -=    ltQ[p]    *    ltQ[i]    +    1;    	compilable	  [FE]  AssertionError  	52	4	replace
427	[BUG]  [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltQ[i]  /  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltQ[i]  /  1;  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  -=  ltQ[p]  *  ltQ[i]  /  1;	  ltQ[p]    -=    ltQ[p]    *    ltQ[i]    +    1;    	compilable	  [FE]  AssertionError  	52	4	replace
428	[BUG]  [BUGGY]  ltQ[p]  -=  ltQ[i]  *  ltJI[q];  [CE]  cannot  find  symbol  ltJI  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[i]  *  ltJI[q];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  -=  ltQ[i]  *  ltJI[q];	  ltQ[p]    -=    ltQ[i]    *    ltQ[q];    	non-compiled	[CE]  cannot  find  symbol  ltJI	84	None	replace
429	[BUG]  [BUGGY]  ltQ[p]  -=  ltQ[i]  *  ltQ[i];  ltQ[p]  -=  ltQ[i]  *  ltQ[i].;  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[i]  *  ltQ[i];  ltQ[p]  -=  ltQ[i]  *  ltQ[i].;  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]    -=    ltQ[i]    *    ltQ[i];    ltQ[p]  -=  ltQ[i]  *  ltQ[i].;	  	non-compiled	[CE]  <identifier>  expected	49	None	add
430	[BUG]  [BUGGY]          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]  =  Math.sqrt(ltQ[p]  +  1);  ltI[p]  =  Math.sqrt(ltQ[p].);  ltI[p]  =  Math.sqrt(ltQ[p]  +  1);  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]  =  Math.sqrt(ltQ[p]  +  1);  ltI[p]  =  Math.sqrt(ltQ[p].);  ltI[p]  =  Math.sqrt(ltQ[p]  +  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	                ltI[p]        =        Math.sqrt(ltQ[p]);        ltI[p]    =    Math.sqrt(ltQ[p]    +    1);    ltI[p]  =  Math.sqrt(ltQ[p].);  ltI[p]  =  Math.sqrt(ltQ[p]  +  1);	  	non-compiled	[CE]  <identifier>  expected	58	None	add
431	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[p]  *  2);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[p]  =  Math.sqrt(ltQ[p]  *  2);	          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]    =    Math.sqrt(ltQ[p]    +    1);    	compilable	  [FE]  AssertionError  	70	4	replace
432	[BUG]  [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[p]  *  2);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[p]  *  2);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  =  Math.sqrt(ltQ[p]  *  2);	          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]    =    Math.sqrt(ltQ[p]    +    1);    	compilable	  [FE]  AssertionError  	70	4	replace
433	[BUG]  [BUGGY]          ltQ[i]  =  Math.sqrt(ltQ[i]);  ltQ[i]  =  Math.sqrt(ltQ[i].inverse);  [CE]  double  cannot  be  dereferenced  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltQ[i]  =  Math.sqrt(ltQ[i]);  ltQ[i]  =  Math.sqrt(ltQ[i].inverse);  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	                ltQ[i]    =    Math.sqrt(ltQ[i]);    ltQ[i]  =  Math.sqrt(ltQ[i].inverse);	  	non-compiled	[CE]  double  cannot  be  dereferenced	88	None	add
434	[BUG]  [BUGGY]  ltI[p]  -=  ltI[q]  *  rtQ[p];  [CE]  cannot  find  symbol  rtQ  [FE]        AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltI[q]  *  rtQ[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]  -=  ltI[q]  *  rtQ[p];	          ltI[p]    -=    ltI[q]    *    ltI[p];    ltI[p]    -=    ltI[q]    *    rtI[p];    	non-compiled	[CE]  cannot  find  symbol  rtQ	107	None	replace
435	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i]);  final  double  inverse  =  1.0  /  ltI[j];  for(int  j  =  0;  j  <  ltI.length;  ++j)  {  ltI[  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i]);  final  double  inverse  =  1.0  /  ltI[j];  for(int  j  =  0;  j  <  ltI.length;  ++j)  {  ltI[  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[i]  =  Math.sqrt(ltQ[i]);  final  double  inverse  =  1.0  /  ltI[j];  for(int  j  =  0;  j  <  ltI.length;  ++j)  {  ltI[	          ltI[i]    =    Math.sqrt(ltQ[i]);    final    double    inverse    =    1.0    /    ltI[i];    for(int    j    =    0;    j    <    ltI.length;    ++j)    {    ltI[    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
436	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for(int  j  =  0;  j  <  p;  ++j)  {  ltI[  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for(int  j  =  0;  j  <  p;  ++j)  {  ltI[  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for(int  j  =  0;  j  <  p;  ++j)  {  ltI[	          ltI[i]    =    Math.sqrt(ltQ[i]);    final    double    inverse    =    1.0    /    ltI[i];    for(int    j    =    0;    j    <    p;    ++j)    {    ltI[    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
437	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  Math.sqrt(ltQ[p]);  ltI[p]  -=  Math.cos(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltI[p]    -=    Math.sqrt(ltQ[p]);    ltI[p]  -=  Math.cos(ltQ[p]);	  	compilable	  [FE]  AssertionError  	19	5	add
438	[BUG]  [BUGGY]  ltI[p]  -=  Math.sqrt(ltQ[p]);  ltI[p]  -=  Math.cos(ltQ[p]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  Math.sqrt(ltQ[p]);  ltI[p]  -=  Math.cos(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]    -=    Math.sqrt(ltQ[p]);    ltI[p]  -=  Math.cos(ltQ[p]);	  	compilable	  [FE]  AssertionError  	19	5	add
439	[BUG]  [BUGGY]  ltI[p]  -=  Math.sqrt(ltQ[p]);  ltI[p]  -=  Math.sqrt(ltQ[p].);  [CE]  <identifier>  expected  [FE]      AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  Math.sqrt(ltQ[p]);  ltI[p]  -=  Math.sqrt(ltQ[p].);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]    -=    Math.sqrt(ltQ[p]);    ltI[p]  -=  Math.sqrt(ltQ[p].);	  	non-compiled	[CE]  <identifier>  expected	19	None	add
440	[BUG]  [BUGGY]          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]  =  Math.sqrt(ltQ[p]  +  1);  ltQ[p]  =  Math.sqrt(ltQ[p].);  ltQ[p]  =  Math.sqrt(ltQ[p]  +  1);  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]  =  Math.sqrt(ltQ[p]  +  1);  ltQ[p]  =  Math.sqrt(ltQ[p].);  ltQ[p]  =  Math.sqrt(ltQ[p]  +  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	                ltQ[p]        =        Math.sqrt(ltQ[p]);        ltQ[p]    =    Math.sqrt(ltQ[p]    +    1);    ltQ[p]  =  Math.sqrt(ltQ[p].);  ltQ[p]  =  Math.sqrt(ltQ[p]  +  1);	  	non-compiled	[CE]  <identifier>  expected	69	None	add
441	[BUG]  [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltQ[i]  +  1;  ltQ[p]  -=  ltQu[p]  *  ltQ[i]  +  1;  [CE]  cannot  find  symbol  ltQu  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQ[p]  *  ltQ[i]  +  1;  ltQ[p]  -=  ltQu[p]  *  ltQ[i]  +  1;  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]    -=    ltQ[p]    *    ltQ[i]    +    1;    ltQ[p]  -=  ltQu[p]  *  ltQ[i]  +  1;	  	non-compiled	[CE]  cannot  find  symbol  ltQu	51	None	add
442	[BUG]  [BUGGY]  ltI[p]  -=  ltI[p]  *  ltQ[i];  ltI[p]  -=  ltI[p]  *  ltQ[i].;  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltI[p]  *  ltQ[i];  ltI[p]  -=  ltI[p]  *  ltQ[i].;  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]    -=    ltI[p]    *    ltQ[i];    ltI[p]  -=  ltI[p]  *  ltQ[i].;	  	non-compiled	[CE]  <identifier>  expected	101	None	add
443	[BUG]  [BUGGY]          ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltQ[i].inverse);  [CE]  double  cannot  be  dereferenced  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltQ[i].inverse);  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	                ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.sqrt(ltQ[i].inverse);	  	non-compiled	[CE]  double  cannot  be  dereferenced	13	None	add
444	[BUG]  [BUGGY]  inverse  =  Math.sqrt(ltQ[p]  *  lJI);  [CE]  cannot  assign  a  value  to  final  variable  inverse  [FE]            AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  inverse  =  Math.sqrt(ltQ[p]  *  lJI);  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	inverse  =  Math.sqrt(ltQ[p]  *  lJI);	          inverse    =    Math.sqrt(ltQ[p]);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  inverse	91	None	replace
445	[BUG]  [BUGGY]  ltQ[p]  =  Math.log(ltQ[p].doubleValue());  [CE]  double  cannot  be  dereferenced  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.log(ltQ[p].doubleValue());  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  =  Math.log(ltQ[p].doubleValue());	          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]    =    Math.log(ltQ[p]);    	non-compiled	[CE]  double  cannot  be  dereferenced	68	None	replace
446	[BUG]  [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[p],  ltJI);  [CE]  cannot  find  symbol  ltJI  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[p],  ltJI);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]  =  Math.sqrt(ltQ[p],  ltJI);	          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]    =    Math.sqrt(ltQ[p]);    	non-compiled	[CE]  cannot  find  symbol  ltJI	54	None	replace
447	[BUG]  [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[p]),  ltQ[p]).doubleValue();  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[p]),  ltQ[p]).doubleValue();  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]  =  Math.sqrt(ltQ[p]),  ltQ[p]).doubleValue();	          ltI[p]    =    Math.sqrt(ltQ[p]);    ltI[p]    =    Math.sqrt(ltQ[p]).doubleValue();    	non-compiled	[CE]  ';'  expected	57	None	replace
448	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[0]  =  Math.sqrt(ltQ[0]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltQ[0]  =  Math.sqrt(ltQ[0]);	          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]    =    Math.sqrt(ltQ[p]);    	compilable	  [FE]  AssertionError  	65	4	replace
449	[BUG]  [BUGGY]  ltQ[0]  =  Math.sqrt(ltQ[0]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[0]  =  Math.sqrt(ltQ[0]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[0]  =  Math.sqrt(ltQ[0]);	          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]    =    Math.sqrt(ltQ[p]);    	compilable	  [FE]  AssertionError  	65	4	replace
450	[BUG]  [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[p]),  ltQ[p]  =  Math.sqrt(ltQ[p]).doubleValue();  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[p]),  ltQ[p]  =  Math.sqrt(ltQ[p]).doubleValue();  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  =  Math.sqrt(ltQ[p]),  ltQ[p]  =  Math.sqrt(ltQ[p]).doubleValue();	          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]    =    Math.sqrt(ltQ[p]).doubleValue();    	non-compiled	[CE]  ';'  expected	66	None	replace
451	[BUG]  [BUGGY]          ltQ[p]    -=    ltQ[q]    *    ltI[p];    ltQ[p]  -=  ltQ[q]  *  ltI[p];  ltQ[p]  -=  ltQu[q]  *  ltI[p];  ltQ[p]  -=  ltQ[q]  *  ltI[p];  [CE]  cannot  find  symbol  ltQu  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltQ[p]    -=    ltQ[q]    *    ltI[p];    ltQ[p]  -=  ltQ[q]  *  ltI[p];  ltQ[p]  -=  ltQu[q]  *  ltI[p];  ltQ[p]  -=  ltQ[q]  *  ltI[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	                ltQ[p]        -=        ltQ[q]        *        ltI[p];        ltQ[p]    -=    ltQ[q]    *    ltI[p];    ltQ[p]  -=  ltQu[q]  *  ltI[p];  ltQ[p]  -=  ltQ[q]  *  ltI[p];	  	non-compiled	[CE]  cannot  find  symbol  ltQu	33	None	add
452	[BUG]  [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[p]  -  1);  rtQ[p]  =  Math.sqrt(ltQ[p]  -  1);  [CE]  cannot  find  symbol  rtQ  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[p]  -  1);  rtQ[p]  =  Math.sqrt(ltQ[p]  -  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]    =    Math.sqrt(ltQ[p]    -    1);    rtQ[p]  =  Math.sqrt(ltQ[p]  -  1);	  	non-compiled	[CE]  cannot  find  symbol  rtQ	93	None	add
453	[BUG]  [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[p]  +  1);  ltI[p]  =  Math.sqrt(ltQ[p]  +  1));  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  =  Math.sqrt(ltQ[p]  +  1);  ltI[p]  =  Math.sqrt(ltQ[p]  +  1));  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]    =    Math.sqrt(ltQ[p]    +    1);    ltI[p]  =  Math.sqrt(ltQ[p]  +  1));	  	non-compiled	[CE]  ';'  expected	21	None	add
454	[BUG]  [BUGGY]  LtI[p]  -=  ltI[p]  *  ltI[p].;  [CE]  <identifier>  expected  [FE]        AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  LtI[p]  -=  ltI[p]  *  ltI[p].;  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	LtI[p]  -=  ltI[p]  *  ltI[p].;	          ltI[p]    -=    ltI[p]    *    ltI[p];    ltI[p]    -=    ltI[p]    *    ltI[p].;    	non-compiled	[CE]  <identifier>  expected	87	None	replace
455	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i]);  final  double  inverse  =  1.0  /  ltI[i].inverse;  [CE]  variable  inverse  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]          AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i]);  final  double  inverse  =  1.0  /  ltI[i].inverse;  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[i]  =  Math.sqrt(ltQ[i]);  final  double  inverse  =  1.0  /  ltI[i].inverse;	          ltI[i]    =    Math.sqrt(ltQ[i]);    final    double    inverse    =    1.0    /    ltI[i];    	non-compiled	[CE]  variable  inverse  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	15	None	replace
456	[BUG]  [BUGGY]  ltQ[p]  -=  ltQu[i]  *  ltQ[p];  [CE]  cannot  find  symbol  ltQu  [FE]            AssertionError      [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  -=  ltQu[i]  *  ltQ[p];  [BUGGY]      }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]  -=  ltQu[i]  *  ltQ[p];	  ltQ[p]    -=    ltQ[i]    *    ltQ[p];    ltQ[p]    -=    ltQu[i]    *    ltQ[p];    	non-compiled	[CE]  cannot  find  symbol  ltQu	6	None	replace
457	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltQ[i]  *  ltQ[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	ltI[p]  -=  ltQ[i]  *  ltQ[p];	  ltI[p]    -=    ltQ[q]    *    ltI[p];    	compilable	  [FE]  AssertionError  	74	4	replace
458	[BUG]  [BUGGY]  ltI[p]  -=  ltQ[i]  *  ltQ[p];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltI[p]  -=  ltQ[i]  *  ltQ[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltI[p]  -=  ltQ[i]  *  ltQ[p];	  ltI[p]    -=    ltQ[q]    *    ltI[p];    	compilable	  [FE]  AssertionError  	74	4	replace
459	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]  =  Math.sqrt(ltQ[p]);  ltQ[p]  =  Math.log(ltQ[p]);  ltQ[p]  =  Math.sqrt(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	add	                ltQ[p]        =        Math.sqrt(ltQ[p]);        ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]  =  Math.log(ltQ[p]);  ltQ[p]  =  Math.sqrt(ltQ[p]);	  	compilable	  [FE]  AssertionError  	64	5	add
460	[BUG]  [BUGGY]          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]  =  Math.sqrt(ltQ[p]);  ltQ[p]  =  Math.log(ltQ[p]);  ltQ[p]  =  Math.sqrt(ltQ[p]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]          ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]  =  Math.sqrt(ltQ[p]);  ltQ[p]  =  Math.log(ltQ[p]);  ltQ[p]  =  Math.sqrt(ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	                ltQ[p]        =        Math.sqrt(ltQ[p]);        ltQ[p]    =    Math.sqrt(ltQ[p]);    ltQ[p]  =  Math.log(ltQ[p]);  ltQ[p]  =  Math.sqrt(ltQ[p]);	  	compilable	  [FE]  AssertionError  	64	5	add
461	[BUG]  [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[p]  +  1);  ltQ[p]  =  Math.sqrt(ltQ[p]  +  1));  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]        ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {      [BUGGY]  ltQ[p]  =  Math.sqrt(ltQ[p]  +  1);  ltQ[p]  =  Math.sqrt(ltQ[p]  +  1));  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	145	145	2	replace	ltQ[p]    =    Math.sqrt(ltQ[p]    +    1);    ltQ[p]  =  Math.sqrt(ltQ[p]  +  1));	  	non-compiled	[CE]  ';'  expected	39	None	add
