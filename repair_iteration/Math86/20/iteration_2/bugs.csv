bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NotSymmetricMatrixException    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double  lIJ  =  lI[j]  *  1;  [BUGGY]    final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	add	final  double  lIJ  =  lI[j]  *  1;	  final    double    lIJ    =    lI[j]    +    1;    	compilable	  [FE]  AssertionError  	8	2	replace
2	[BUG]  [BUGGY]  final  double  lIJ  =  lI[j]  *  1;  [FE]  AssertionError  [FE]    NotSymmetricMatrixException    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double  lIJ  =  lI[j]  *  1;  [BUGGY]    final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double  lIJ  =  lI[j]  *  1;	  final    double    lIJ    =    lI[j]    +    1;    	compilable	  [FE]  AssertionError  	8	2	replace
3	[BUG]  [BUGGY]  [FE]  NotSymmetricMatrixException  [FE]      NotSymmetricMatrixException    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double  lIJ  =  lI[j]  -  1;  [BUGGY]    final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	add	final  double  lIJ  =  lI[j]  -  1;	  final    double    lIJ    =    lI[j]    +    1;    	compilable	  [FE]  NotSymmetricMatrixException  	8	7	replace
4	[BUG]  [BUGGY]  final  double  lIJ  =  lI[j]  -  1;  [FE]  NotSymmetricMatrixException  [FE]      NotSymmetricMatrixException    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double  lIJ  =  lI[j]  -  1;  [BUGGY]    final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double  lIJ  =  lI[j]  -  1;	  final    double    lIJ    =    lI[j]    +    1;    	compilable	  [FE]  NotSymmetricMatrixException  	8	7	replace
5	[BUG]  [BUGGY]  final  double[]  lJ  =  lTData[j].relativeSymmetryThreshold;  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double[]  lJ  =  lTData[j].relativeSymmetryThreshold;  [BUGGY]    final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double[]  lJ  =  lTData[j].relativeSymmetryThreshold;	      final    double[]    lJ    =    lTData[j];    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	3	None	replace
6	[BUG]  [BUGGY]  final  double[]  lJ  =  ltData[j];  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double[]  lJ  =  ltData[j];  [BUGGY]    final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double[]  lJ  =  ltData[j];	      final    double[]    lJ    =    lTData[j];    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	3	None	replace
7	[BUG]  [BUGGY]  final  double[][]  lJ  =  relativeSymmetryThreshold  *  Math.max(lTData[j].relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]        AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double[][]  lJ  =  relativeSymmetryThreshold  *  Math.max(lTData[j].relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [BUGGY]    final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double[][]  lJ  =  relativeSymmetryThreshold  *  Math.max(lTData[j].relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));	      final    double[][]    lJ    =    lTData[j].relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold));    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	11	None	replace
8	[BUG]  [BUGGY]  final  double[][]  lJ  =  lTData[j].relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold));  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double[][]  lJ  =  lTData[j].relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold));  [BUGGY]    final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double[][]  lJ  =  lTData[j].relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold));	      final    double[][]    lJ    =    lTData[j].relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold));    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	11	None	replace
9	[BUG]  [BUGGY]  final  double[][]  lJ  =  lTData[j].relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(relativeSymmetryThreshold));  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double[][]  lJ  =  lTData[j].relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(relativeSymmetryThreshold));  [BUGGY]    final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double[][]  lJ  =  lTData[j].relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(relativeSymmetryThreshold));	      final    double[][]    lJ    =    lTData[j].relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold));    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	11	None	replace
10	[BUG]  [BUGGY]  final  double[][]  lJ  =  lTData[j].relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJ)-  1);  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double[][]  lJ  =  lTData[j].relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJ)-  1);  [BUGGY]    final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double[][]  lJ  =  lTData[j].relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJ)-  1);	      final    double[][]    lJ    =    lTData[j].relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJ));    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	12	None	replace
11	[BUG]  [BUGGY]  final  double[][]  lJ  =  lTData[j].relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJ)+  1);  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double[][]  lJ  =  lTData[j].relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJ)+  1);  [BUGGY]    final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double[][]  lJ  =  lTData[j].relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJ)+  1);	      final    double[][]    lJ    =    lTData[j].relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJ));    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	12	None	replace
12	[BUG]  [BUGGY]  final  double[][]  lJ  =  lTData[j].relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJ  +  1));  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double[][]  lJ  =  lTData[j].relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJ  +  1));  [BUGGY]    final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double[][]  lJ  =  lTData[j].relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJ  +  1));	      final    double[][]    lJ    =    lTData[j].relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJ));    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	12	None	replace
13	[BUG]  [BUGGY]  final  double[][]  lJ  =  lTData[j].relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double[][]  lJ  =  lTData[j].relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]    final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double[][]  lJ  =  lTData[j].relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);	      final    double[][]    lJ    =    lTData[j].relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	14	None	replace
14	[BUG]  [BUGGY]  final  double[][]  lJ  =  lTData[j].relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absoluteSymmetryThreshold);  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double[][]  lJ  =  lTData[j].relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absoluteSymmetryThreshold);  [BUGGY]    final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double[][]  lJ  =  lTData[j].relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absoluteSymmetryThreshold);	      final    double[][]    lJ    =    lTData[j].relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	14	None	replace
15	[BUG]  [BUGGY]  final  double[][]  lJ  =  lTData[j].relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                  AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double[][]  lJ  =  lTData[j].relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [BUGGY]    final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double[][]  lJ  =  lTData[j].relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  relativeSymmetryThreshold);	      final    double[][]    lJ    =    lTData[j].relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	14	None	replace
16	[BUG]  [BUGGY]  final  double  lIJ  =  lI[j].length;  [CE]  double  cannot  be  dereferenced  [FE]    NotSymmetricMatrixException    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double  lIJ  =  lI[j].length;  [BUGGY]    final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double  lIJ  =  lI[j].length;	  final    double    lIJ    =    lI[j    +    1];    	non-compiled	[CE]  double  cannot  be  dereferenced	16	None	replace
17	[BUG]  [BUGGY]  [FE]  NotSymmetricMatrixException  [FE]      NotSymmetricMatrixException    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double  lIJ  =  lI[j  +  2];  [BUGGY]    final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	add	final  double  lIJ  =  lI[j  +  2];	  final    double    lIJ    =    lI[j    +    1];    	compilable	  [FE]  NotSymmetricMatrixException  	16	7	replace
18	[BUG]  [BUGGY]  final  double  lIJ  =  lI[j  +  2];  [FE]  NotSymmetricMatrixException  [FE]      NotSymmetricMatrixException    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double  lIJ  =  lI[j  +  2];  [BUGGY]    final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double  lIJ  =  lI[j  +  2];	  final    double    lIJ    =    lI[j    +    1];    	compilable	  [FE]  NotSymmetricMatrixException  	16	7	replace
19	[BUG]  [BUGGY]  final  double[][]  lJ  =  lJ[j];  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double[][]  lJ  =  lJ[j];  [BUGGY]    final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double[][]  lJ  =  lJ[j];	      final    double[][]    lJ    =    lTData[j];    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	2	None	replace
20	[BUG]  [BUGGY]  final  double[][]  lJ  =  ltData[j];  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double[][]  lJ  =  ltData[j];  [BUGGY]    final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double[][]  lJ  =  ltData[j];	      final    double[][]    lJ    =    lTData[j];    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	2	None	replace
21	[BUG]  [BUGGY]  final  double[][]  lJ  =  lTData[j].relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  maxDelta);  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double[][]  lJ  =  lTData[j].relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  maxDelta);  [BUGGY]    final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double[][]  lJ  =  lTData[j].relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  maxDelta);	      final    double[][]    lJ    =    lTData[j].relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold);    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	13	None	replace
22	[BUG]  [BUGGY]  final  double[][]  lJ  =  lJ[0];  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double[][]  lJ  =  lJ[0];  [BUGGY]    final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double[][]  lJ  =  lJ[0];	      final    double[][]    lJ    =    lJ[i];    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	5	None	replace
23	[BUG]  [BUGGY]  final  double  lIJ  =  lI[j]  +  1;  final  double  lIJ  =  lI[j]  +  1;  [CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    NotSymmetricMatrixException    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double  lIJ  =  lI[j]  +  1;  final  double  lIJ  =  lI[j]  +  1;  [BUGGY]    final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final    double    lIJ    =    lI[j]    +    1;    final  double  lIJ  =  lI[j]  +  1;	  	non-compiled	[CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	7	None	add
24	[BUG]  [BUGGY]  final  double  lIJ  =  lI[j]  +  1;  Final  double  lIJ  =  lI[j]  +  1;  [CE]  not  a  statement  [FE]      NotSymmetricMatrixException    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double  lIJ  =  lI[j]  +  1;  Final  double  lIJ  =  lI[j]  +  1;  [BUGGY]    final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final    double    lIJ    =    lI[j]    +    1;    Final  double  lIJ  =  lI[j]  +  1;	  	non-compiled	[CE]  not  a  statement	7	None	add
25	[BUG]  [BUGGY]  final  double  lIJ  =  lI[j]  +  1;  final  double  lIJ  =  lTData[j]  +  1;  [CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]        NotSymmetricMatrixException    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double  lIJ  =  lI[j]  +  1;  final  double  lIJ  =  lTData[j]  +  1;  [BUGGY]    final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final    double    lIJ    =    lI[j]    +    1;    final  double  lIJ  =  lTData[j]  +  1;	  	non-compiled	[CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	7	None	add
26	[BUG]  [BUGGY]  final  double  lIJ  =  lI[j]  +  1;  final  double  lIJ  =  lIT[j]  +  1;  [CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]          NotSymmetricMatrixException    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double  lIJ  =  lI[j]  +  1;  final  double  lIJ  =  lIT[j]  +  1;  [BUGGY]    final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final    double    lIJ    =    lI[j]    +    1;    final  double  lIJ  =  lIT[j]  +  1;	  	non-compiled	[CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	7	None	add
27	[BUG]  [BUGGY]  final  double[]  lJ  =  lTData[j  +  1];  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]        AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double[]  lJ  =  lTData[j  +  1];  [BUGGY]    final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double[]  lJ  =  lTData[j  +  1];	      final    double[]    lJ    =    lTData[i    +    1];    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	17	None	replace
28	[BUG]  [BUGGY]  final  double[]  lJ  =  lTData[i  +  2];  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double[]  lJ  =  lTData[i  +  2];  [BUGGY]    final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double[]  lJ  =  lTData[i  +  2];	      final    double[]    lJ    =    lTData[i    +    1];    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	17	None	replace
29	[BUG]  [BUGGY]  final  double[]  lJ  =  lTData[i  +  3];  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double[]  lJ  =  lTData[i  +  3];  [BUGGY]    final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double[]  lJ  =  lTData[i  +  3];	      final    double[]    lJ    =    lTData[i    +    1];    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	17	None	replace
30	[BUG]  [BUGGY]  final  double  lIJ  =  lTData[i];  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double  lIJ  =  lTData[i];  [BUGGY]    final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double  lIJ  =  lTData[i];	  final    double    lIJ    =    lTData[j];    	non-compiled	[CE]  incompatible  types	6	None	replace
31	[BUG]  [BUGGY]  [FE]  NotSymmetricMatrixException  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double  lIJ  =  lTData[j].length;  [BUGGY]    final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	add	final  double  lIJ  =  lTData[j].length;	  final    double    lIJ    =    lTData[j];    	compilable	  [FE]  NotSymmetricMatrixException  	6	7	replace
32	[BUG]  [BUGGY]  final  double  lIJ  =  lTData[j].length;  [FE]  NotSymmetricMatrixException  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double  lIJ  =  lTData[j].length;  [BUGGY]    final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double  lIJ  =  lTData[j].length;	  final    double    lIJ    =    lTData[j];    	compilable	  [FE]  NotSymmetricMatrixException  	6	7	replace
33	[BUG]  [BUGGY]  final  double  lIJ  =  lTData[j  +  1];  [CE]  incompatible  types  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double  lIJ  =  lTData[j  +  1];  [BUGGY]    final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double  lIJ  =  lTData[j  +  1];	  final    double    lIJ    =    lTData[j];    	non-compiled	[CE]  incompatible  types	6	None	replace
34	[BUG]  [BUGGY]  final  double[][]  lJ  =  ltData[i];  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]        AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double[][]  lJ  =  ltData[i];  [BUGGY]    final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double[][]  lJ  =  ltData[i];	      final    double[][]    lJ    =    lTData[i];    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	1	None	replace
35	[BUG]  [BUGGY]  final  double  lIJ  =  lI[j  +  1];  final  double  lIJ  =  lI[j  +  1];  [CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    NotSymmetricMatrixException    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double  lIJ  =  lI[j  +  1];  final  double  lIJ  =  lI[j  +  1];  [BUGGY]    final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final    double    lIJ    =    lI[j    +    1];    final  double  lIJ  =  lI[j  +  1];	  	non-compiled	[CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	15	None	add
36	[BUG]  [BUGGY]  final  double  lIJ  =  lI[j  +  1];  Final  double  lIJ  =  lI[j  +  1];  [CE]  not  a  statement  [FE]      NotSymmetricMatrixException    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double  lIJ  =  lI[j  +  1];  Final  double  lIJ  =  lI[j  +  1];  [BUGGY]    final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final    double    lIJ    =    lI[j    +    1];    Final  double  lIJ  =  lI[j  +  1];	  	non-compiled	[CE]  not  a  statement	15	None	add
37	[BUG]  [BUGGY]  final  double  lIJ  =  lI[j  +  1];  final  double  lIJ  =  lI[j  +  1)];  [CE]  ']'  expected  [FE]        NotSymmetricMatrixException    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double  lIJ  =  lI[j  +  1];  final  double  lIJ  =  lI[j  +  1)];  [BUGGY]    final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final    double    lIJ    =    lI[j    +    1];    final  double  lIJ  =  lI[j  +  1)];	  	non-compiled	[CE]  ']'  expected	15	None	add
38	[BUG]  [BUGGY]  final  double  lIJ  =  lI[j  +  1];  final  double  lIJ  =  lI[j  +  2];  [CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]          NotSymmetricMatrixException    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double  lIJ  =  lI[j  +  1];  final  double  lIJ  =  lI[j  +  2];  [BUGGY]    final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final    double    lIJ    =    lI[j    +    1];    final  double  lIJ  =  lI[j  +  2];	  	non-compiled	[CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	15	None	add
39	[BUG]  [BUGGY]  final  double  lIJ  =  lI[i];  final  double  lIJ  =  lI[i];  [CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    NotSymmetricMatrixException    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double  lIJ  =  lI[i];  final  double  lIJ  =  lI[i];  [BUGGY]    final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final    double    lIJ    =    lI[i];    final  double  lIJ  =  lI[i];	  	non-compiled	[CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	9	None	add
40	[BUG]  [BUGGY]  final  double  lIJ  =  lI[i];  Final  double  lIJ  =  lI[i];  [CE]  not  a  statement  [FE]      NotSymmetricMatrixException    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double  lIJ  =  lI[i];  Final  double  lIJ  =  lI[i];  [BUGGY]    final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final    double    lIJ    =    lI[i];    Final  double  lIJ  =  lI[i];	  	non-compiled	[CE]  not  a  statement	9	None	add
41	[BUG]  [BUGGY]  final  double  lIJ  =  lI[i];  last  double  lIJ  =  lI[i];  [CE]  not  a  statement  [FE]        NotSymmetricMatrixException    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double  lIJ  =  lI[i];  last  double  lIJ  =  lI[i];  [BUGGY]    final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final    double    lIJ    =    lI[i];    last  double  lIJ  =  lI[i];	  	non-compiled	[CE]  not  a  statement	9	None	add
42	[BUG]  [BUGGY]  final  double  lIJ  =  lI[i];  final  double  lIJ  =  lI[i]);  [CE]  ';'  expected  [FE]          NotSymmetricMatrixException    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double  lIJ  =  lI[i];  final  double  lIJ  =  lI[i]);  [BUGGY]    final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final    double    lIJ    =    lI[i];    final  double  lIJ  =  lI[i]);	  	non-compiled	[CE]  ';'  expected	9	None	add
43	[BUG]  [BUGGY]  final  double[]  lTData  =  lTData[j  +  1];  [CE]  incompatible  types  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double[]  lTData  =  lTData[j  +  1];  [BUGGY]    final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double[]  lTData  =  lTData[j  +  1];	      final    double[]    lTData    =    lTData[i    +    1];    	non-compiled	[CE]  incompatible  types	18	None	replace
44	[BUG]  [BUGGY]  final  double[]  lTData  =  lTData[i  +  2];  [CE]  incompatible  types  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double[]  lTData  =  lTData[i  +  2];  [BUGGY]    final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double[]  lTData  =  lTData[i  +  2];	      final    double[]    lTData    =    lTData[i    +    1];    	non-compiled	[CE]  incompatible  types	18	None	replace
45	[BUG]  [BUGGY]  final  double[]  lTData  =  lTData[i  +  3];  [CE]  incompatible  types  [FE]              AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double[]  lTData  =  lTData[i  +  3];  [BUGGY]    final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double[]  lTData  =  lTData[i  +  3];	      final    double[]    lTData    =    lTData[i    +    1];    	non-compiled	[CE]  incompatible  types	18	None	replace
46	[BUG]  [BUGGY]  final  double[]  lJ  =  ltData[i];  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double[]  lJ  =  ltData[i];  [BUGGY]    final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double[]  lJ  =  ltData[i];	      final    double[]    lJ    =    lTData[i];    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	4	None	replace
47	[BUG]  [BUGGY]  final  double[]  lJ  =  lTData[i].doubleValue();  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double[]  lJ  =  lTData[i].doubleValue();  [BUGGY]    final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double[]  lJ  =  lTData[i].doubleValue();	      final    double[]    lJ    =    lTData[i];    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	4	None	replace
48	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NotSymmetricMatrixException    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double  lIJ  =  lJ[i];  [BUGGY]    final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	add	final  double  lIJ  =  lJ[i];	  final    double    lIJ    =    lI[i];    	compilable	  [FE]  AssertionError  	10	3	replace
49	[BUG]  [BUGGY]  final  double  lIJ  =  lJ[i];  [FE]  AssertionError  [FE]    NotSymmetricMatrixException    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double  lIJ  =  lJ[i];  [BUGGY]    final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double  lIJ  =  lJ[i];	  final    double    lIJ    =    lI[i];    	compilable	  [FE]  AssertionError  	10	3	replace
50	[BUG]  [BUGGY]  [FE]  NotSymmetricMatrixException  [FE]      NotSymmetricMatrixException    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double  lIJ  =  lJ[j];  [BUGGY]    final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	add	final  double  lIJ  =  lJ[j];	  final    double    lIJ    =    lI[i];    	compilable	  [FE]  NotSymmetricMatrixException  	10	7	replace
51	[BUG]  [BUGGY]  final  double  lIJ  =  lJ[j];  [FE]  NotSymmetricMatrixException  [FE]      NotSymmetricMatrixException    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double  lIJ  =  lJ[j];  [BUGGY]    final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double  lIJ  =  lJ[j];	  final    double    lIJ    =    lI[i];    	compilable	  [FE]  NotSymmetricMatrixException  	10	7	replace
52	[BUG]  [BUGGY]  final  double[]  lJ  =  lTData[j].value;  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double[]  lJ  =  lTData[j].value;  [BUGGY]    final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double[]  lJ  =  lTData[j].value;	      final    double[]    lJ    =    lTData[j];    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	3	None	replace
53	[BUG]  [BUGGY]  final  double  lIJ  =  lI[i];  final  int  lIJ  =  lI[i];  [CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    NotSymmetricMatrixException    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double  lIJ  =  lI[i];  final  int  lIJ  =  lI[i];  [BUGGY]    final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final    double    lIJ    =    lI[i];    final  int  lIJ  =  lI[i];	  	non-compiled	[CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	9	None	add
54	[BUG]  [BUGGY]  final  double[][]  lJ  =  lTData[j].relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double[][]  lJ  =  lTData[j].relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]    final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double[][]  lJ  =  lTData[j].relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);	      final    double[][]    lJ    =    lTData[j].relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold);    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	13	None	replace
55	[BUG]  [BUGGY]  final  double[][]  lJ  =  lTData[j  +  1];  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double[][]  lJ  =  lTData[j  +  1];  [BUGGY]    final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double[][]  lJ  =  lTData[j  +  1];	      final    double[][]    lJ    =    lTData[j];    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	2	None	replace
56	[BUG]  [BUGGY]  final  double[][]  lJ  =  lTData[0];  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double[][]  lJ  =  lTData[0];  [BUGGY]    final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double[][]  lJ  =  lTData[0];	      final    double[][]    lJ    =    lTData[j];    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	2	None	replace
57	[BUG]  [BUGGY]  final  double[][]  lJ  =  lTData[i].relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double[][]  lJ  =  lTData[i].relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [BUGGY]    final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double[][]  lJ  =  lTData[i].relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);	      final    double[][]    lJ    =    lTData[j].relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	14	None	replace
58	[BUG]  [BUGGY]  final  double  lIJ  =  lTData[j]  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    NotSymmetricMatrixException    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double  lIJ  =  lTData[j]  +  1;  [BUGGY]    final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double  lIJ  =  lTData[j]  +  1;	  final    double    lIJ    =    lI[j]    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	8	None	replace
59	[BUG]  [BUGGY]  final  double[]  lJ  =  lTData[i]  +  absolutePositivityThreshold;  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double[]  lJ  =  lTData[i]  +  absolutePositivityThreshold;  [BUGGY]    final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double[]  lJ  =  lTData[i]  +  absolutePositivityThreshold;	      final    double[]    lJ    =    lTData[i];    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	4	None	replace
60	[BUG]  [BUGGY]  final  double[]  lJ  =  lTData[i]  [absolutePositivityThreshold];  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double[]  lJ  =  lTData[i]  [absolutePositivityThreshold];  [BUGGY]    final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double[]  lJ  =  lTData[i]  [absolutePositivityThreshold];	      final    double[]    lJ    =    lTData[i];    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	4	None	replace
61	[BUG]  [BUGGY]  final  double  lIJ  =  lY[i];  [CE]  cannot  find  symbol  lY  [FE]    NotSymmetricMatrixException    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double  lIJ  =  lY[i];  [BUGGY]    final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double  lIJ  =  lY[i];	  final    double    lIJ    =    lI[i];    	non-compiled	[CE]  cannot  find  symbol  lY	10	None	replace
62	[BUG]  [BUGGY]  final  double  lIJ  =  lTI[j];  [CE]  cannot  find  symbol  lTI  [FE]      NotSymmetricMatrixException    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double  lIJ  =  lTI[j];  [BUGGY]    final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double  lIJ  =  lTI[j];	  final    double    lIJ    =    lI[i];    	non-compiled	[CE]  cannot  find  symbol  lTI	10	None	replace
63	[BUG]  [BUGGY]  final  double[][]  lJ  =  lTData[i]  +  absolutePositivityThreshold;  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]        AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double[][]  lJ  =  lTData[i]  +  absolutePositivityThreshold;  [BUGGY]    final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double[][]  lJ  =  lTData[i]  +  absolutePositivityThreshold;	      final    double[][]    lJ    =    lTData[i];    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	1	None	replace
64	[BUG]  [BUGGY]  final  double[][]  lJ  =  lTData[i]  [absolutePositivityThreshold];  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double[][]  lJ  =  lTData[i]  [absolutePositivityThreshold];  [BUGGY]    final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double[][]  lJ  =  lTData[i]  [absolutePositivityThreshold];	      final    double[][]    lJ    =    lTData[i];    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	1	None	replace
65	[BUG]  [BUGGY]  final  double  lIJ  =  lI[j]  +  1;  last  double  lIJ  =  lI[j]  +  1;  [CE]  not  a  statement  [FE]    NotSymmetricMatrixException    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double  lIJ  =  lI[j]  +  1;  last  double  lIJ  =  lI[j]  +  1;  [BUGGY]    final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final    double    lIJ    =    lI[j]    +    1;    last  double  lIJ  =  lI[j]  +  1;	  	non-compiled	[CE]  not  a  statement	7	None	add
66	[BUG]  [BUGGY]  final  double[][]  lJ  =  lTData[j].relativeSymmetryThreshold  *  Math.max(Math.abs(lJ));  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double[][]  lJ  =  lTData[j].relativeSymmetryThreshold  *  Math.max(Math.abs(lJ));  [BUGGY]    final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double[][]  lJ  =  lTData[j].relativeSymmetryThreshold  *  Math.max(Math.abs(lJ));	      final    double[][]    lJ    =    lTData[j].relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJ));    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	12	None	replace
67	[BUG]  [BUGGY]  final  double[][]  lJ  =  lTData[j].relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  relativeSymmetryThreshold);  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double[][]  lJ  =  lTData[j].relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  relativeSymmetryThreshold);  [BUGGY]    final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double[][]  lJ  =  lTData[j].relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  relativeSymmetryThreshold);	      final    double[][]    lJ    =    lTData[j].relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJ));    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	12	None	replace
68	[BUG]  [BUGGY]  final  double[][]  lJ  =  lTData[j].relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJ));  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double[][]  lJ  =  lTData[j].relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJ));  [BUGGY]    final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double[][]  lJ  =  lTData[j].relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJ));	      final    double[][]    lJ    =    lTData[j].relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJ));    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	12	None	replace
69	[BUG]  [BUGGY]  final  double[][]  lJ  =  lTData[j].relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]        AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double[][]  lJ  =  lTData[j].relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [BUGGY]    final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double[][]  lJ  =  lTData[j].relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));	      final    double[][]    lJ    =    lTData[j].relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold));    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	11	None	replace
70	[BUG]  [BUGGY]  final  double[]  lJ  =  lTData[0];  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double[]  lJ  =  lTData[0];  [BUGGY]    final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double[]  lJ  =  lTData[0];	      final    double[]    lJ    =    lTData[i];    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	4	None	replace
71	[BUG]  [BUGGY]  final  double[]  lJ  =  lTData[i]  +  1;  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double[]  lJ  =  lTData[i]  +  1;  [BUGGY]    final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double[]  lJ  =  lTData[i]  +  1;	      final    double[]    lJ    =    lTData[i];    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	4	None	replace
72	[BUG]  [BUGGY]  final  double[][]  lJ  =  lTData[j].relativeSymmetryThreshold;  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double[][]  lJ  =  lTData[j].relativeSymmetryThreshold;  [BUGGY]    final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double[][]  lJ  =  lTData[j].relativeSymmetryThreshold;	      final    double[][]    lJ    =    lTData[j];    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	2	None	replace
73	[BUG]  [BUGGY]  [FE]  NotSymmetricMatrixException  [FE]    NotSymmetricMatrixException    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double  lIJ  =  lI[i]  +  1;  [BUGGY]    final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	add	final  double  lIJ  =  lI[i]  +  1;	  final    double    lIJ    =    lI[i];    	compilable	  [FE]  NotSymmetricMatrixException  	10	7	replace
74	[BUG]  [BUGGY]  final  double  lIJ  =  lI[i]  +  1;  [FE]  NotSymmetricMatrixException  [FE]    NotSymmetricMatrixException    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double  lIJ  =  lI[i]  +  1;  [BUGGY]    final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double  lIJ  =  lI[i]  +  1;	  final    double    lIJ    =    lI[i];    	compilable	  [FE]  NotSymmetricMatrixException  	10	7	replace
75	[BUG]  [BUGGY]  final  double[][]  lJ  =  lTData[j].relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absolutePositiveThreshold);  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double[][]  lJ  =  lTData[j].relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absolutePositiveThreshold);  [BUGGY]    final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double[][]  lJ  =  lTData[j].relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absolutePositiveThreshold);	      final    double[][]    lJ    =    lTData[j].relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	14	None	replace
76	[BUG]  [BUGGY]  final  double[][]  lJ  =  lTData[j].relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double[][]  lJ  =  lTData[j].relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [BUGGY]    final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double[][]  lJ  =  lTData[j].relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ));	      final    double[][]    lJ    =    lTData[j].relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJ));    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	12	None	replace
77	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NotSymmetricMatrixException    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double  lIJ  =  lI[j]  /  1;  [BUGGY]    final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	add	final  double  lIJ  =  lI[j]  /  1;	  final    double    lIJ    =    lI[j]    +    1;    	compilable	  [FE]  AssertionError  	8	2	replace
78	[BUG]  [BUGGY]  final  double  lIJ  =  lI[j]  /  1;  [FE]  AssertionError  [FE]    NotSymmetricMatrixException    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double  lIJ  =  lI[j]  /  1;  [BUGGY]    final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double  lIJ  =  lI[j]  /  1;	  final    double    lIJ    =    lI[j]    +    1;    	compilable	  [FE]  AssertionError  	8	2	replace
79	[BUG]  [BUGGY]  final  double  lIJ  =  lI[j  +  1];  last  double  lIJ  =  lI[j  +  1];  [CE]  not  a  statement  [FE]    NotSymmetricMatrixException    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double  lIJ  =  lI[j  +  1];  last  double  lIJ  =  lI[j  +  1];  [BUGGY]    final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final    double    lIJ    =    lI[j    +    1];    last  double  lIJ  =  lI[j  +  1];	  	non-compiled	[CE]  not  a  statement	15	None	add
80	[BUG]  [BUGGY]  [FE]  NotSymmetricMatrixException  [FE]    NotSymmetricMatrixException    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double  lIJ  =  lI[j  +  3];  [BUGGY]    final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	add	final  double  lIJ  =  lI[j  +  3];	  final    double    lIJ    =    lI[j    +    1];    	compilable	  [FE]  NotSymmetricMatrixException  	16	7	replace
81	[BUG]  [BUGGY]  final  double  lIJ  =  lI[j  +  3];  [FE]  NotSymmetricMatrixException  [FE]    NotSymmetricMatrixException    [CONTEXT]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];    [BUGGY]  final  double  lIJ  =  lI[j  +  3];  [BUGGY]    final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	120	120	2	replace	final  double  lIJ  =  lI[j  +  3];	  final    double    lIJ    =    lI[j    +    1];    	compilable	  [FE]  NotSymmetricMatrixException  	16	7	replace
