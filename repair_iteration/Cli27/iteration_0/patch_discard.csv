increase failing tests,98,replace, [FE] AlreadySelectedException testOptionGroupLong,if (selected == null || selected.equals(option.getOpt())) { ,if(selected!= null || option.equals(option.getOpt())) {
increase failing tests,98,replace, [FE] NullPointerException testOptionGroupLong,if (selected == null || selected.equals(option.getOpt())) { ,if(selected!= null || selected.equals(option.getOpt())) {
compilation error,98,replace,[CE] illegal start of type,if (selected == null || selected.equals(option.getOpt())) { , 
compilation error,32,add,[CE] class or interface expected,,  return OptionGroup.longValue();
compilation error,32,add,[CE] class or interface expected,,  return OptionGroup.LEFT;
compilation error,32,add,[CE] class or interface expected,,  return OptionGroup.valueOf(getOptions().longValue());
compilation error,32,add,[CE] class or interface expected,,  return OptionGroup.valueOf(getOptionGroup().longValue());
compilation error,32,add,[CE] class or interface expected,,  return OptionGroup.LONG;
compilation error,57,add,[CE] cannot find symbol options,,  options.put(option.getValue(), option);
compilation error,57,add,[CE] cannot find symbol option,,  optionMap.put(option.getValue(), option); this.option = option;
compilation error,57,add,[CE] cannot find symbol value,,  optionMap.put(option.getValue(), value);
increase failing tests,57,add, [FE] ClassCastException testMissingRequiredGroup,,  optionMap.put(option.getValue(), this);
increase failing tests,88,add, [FE] NullPointerException testMissingRequiredGroup,,  optionMap.put(option.getKey(), option);
compilation error,88,add,[CE] ';' expected,,  Option optionMap.put(option.getKey(), option);
increase failing tests,88,add, [FE] NullPointerException testMissingRequiredGroup,,  optionMap.remove(option.getKey());
compilation error,88,add,[CE] incompatible types,,  String selected = optionMap.get(option.getKey());
increase failing tests,88,add, [FE] NullPointerException testMissingRequiredGroup,,  this.optionMap.remove(option.getKey());
increase failing tests,113,replace, [FE] ComparisonFailure testOptionGroupLong,return selected; ,return selected!= null? null : selected;
compilation error,113,replace,[CE] incompatible types for ?: neither is a subtype of the other,return selected; ,return selected == null? this : selected;
compilation error,113,replace,[CE] missing return statement,return selected; , 
increase failing tests,113,add, [FE] junit.framework.ComparisonFailure: selected option expected:<[bar]> but was:<[[bar testOptionGroupLong,,  String selected = optionMap.keySet().toString();
increase failing tests,113,add, [FE] junit.framework.ComparisonFailure: selected option expected:<[bar]> but was:<[[bar testOptionGroupLong,,  String selected = optionMap.keySet().toString(); required = true;
compilation error,113,add,[CE] cannot find symbol,,  String selected = optionMap.getSelected();
compilation error,113,add,[CE] incompatible types,,  String selected = optionMap.get("selected");
compilation error,113,add,[CE] incompatible types,,  String selected = optionMap.keySet();
compilation error,106,add,[CE] class or interface expected,,  if(selected.equals(option.getLongOpt())) throw new IllegalArgumentException(""); }
compilation error,106,add,[CE] cannot find symbol map,,  if(selected.equals(option.getLongOpt())) { map.put(option.getKey(), option); } else { setSelected(selected); }
compilation error,100,replace,[CE] cannot find symbol,selected = option.getOpt(); ,selected = option.getSelected();
increase failing tests,100,replace, [FE] ComparisonFailure testOptionGroupLong,selected = option.getOpt(); , 
increase failing tests,76,add, [FE] StackOverflowError testMissingRequiredGroup,,  optionMap.remove(getOptions());
compilation error,76,add,[CE] cannot find symbol,,  optionMap.remove(getKey());
compilation error,76,add,[CE] method put in interface Map cannot be applied to given types;,,  optionMap.put("Option", true);
compilation error,57,replace,[CE] incompatible types for ?: neither is a subtype of the other,return this; ,return(option.getValue() == null)? this : option;
compilation error,57,replace,[CE] cannot find symbol,return this; ,return(option.hasOption(option))? this : null;
compilation error,57,replace,[CE] cannot find symbol,return this; ,return(option.hasOption(option))? this : option;
increase failing tests,88,replace, [FE] ComparisonFailure testOptionGroupLong,if (option == null) { ,if(option == null || option.getOpt()!= null) {
compilation error,88,replace,[CE] cannot find symbol,if (option == null) { ,if(option == null || optionMap.hasOption(option)) {
compilation error,98,add,[CE] illegal start of expression,,  if(optionMap.containsKey(option.getKey())) { if(selected.equals(option.getLongOpt())) { return; }
compilation error,98,add,[CE] illegal start of expression,,  if(optionMap.containsKey(option.getKey())) { if(!selected.equals(option.getLongOpt())) { return; }
compilation error,98,add,[CE] illegal start of expression,,  if(optionMap.containsKey(option.getKey())) { if(selected.equals(option.getValue())) { return; }
compilation error,98,add,[CE] illegal start of expression,,  if(optionMap.containsKey(option.getKey())) { if(!selected.equals(option.getValue())) { return; }
compilation error,100,add,[CE] ';' expected,,  Option optionMap.put(option.getKey(), option);
compilation error,37,replace,[CE] cannot find symbol optionMap,private Map optionMap = new HashMap(); , 
compilation error,55,add,[CE] cannot find symbol OptionMap,,  OptionMap.put(option.getValue(), option);
compilation error,55,add,[CE] cannot find symbol,,  optionMap.put(option.getLongValue(), option);
compilation error,55,add,[CE] incompatible types,,  option = option.getValue();
compilation error,55,add,[CE] cannot find symbol,,  option = option.getOption();
compilation error,37,add,[CE] <identifier> expected,,  optionMap = new HashMap();
compilation error,37,add,[CE] <identifier> expected,,  optionMap.put(OptionGroup.LONG, true);
compilation error,37,add,[CE] illegal start of type,,  return new HashMap();
compilation error,37,add,[CE] <identifier> expected,,  optionMap.put(OptionGroup.LONG_ROOT, true);
compilation error,37,add,[CE] illegal start of type,,  return optionMap.values();
increase failing tests,76,replace, [FE] ClassCastException testMissingRequiredGroup,return optionMap.values(); ,return optionMap.keySet();
compilation error,76,replace,[CE] incompatible types,return optionMap.values(); ,return optionMap.size();
compilation error,55,replace,[CE] cannot find symbol,optionMap.put(option.getKey(), option); ,optionMap.put(option.getLongKey(), option);
compilation error,55,replace,[CE] cannot find symbol,optionMap.put(option.getKey(), option); ,optionMap.put(option.getName(), option);
compilation error,106,replace,[CE] illegal start of expression,} ,options.put(option.getKey(), option);
compilation error,106,add,[CE] cannot find symbol selection,,  optionMap.put(option.getKey(), selection);
compilation error,32,add,[CE] class or interface expected,,  return optionGroup.getOptions();
compilation error,32,add,[CE] class or interface expected,,  return OptionGroup.Long.valueOf(getOptionGroup());
compilation error,32,add,[CE] class or interface expected,,  return OptionGroup.Long.getDefaultAlternatives();
compilation error,32,add,[CE] class or interface expected,,  return OptionGroup.Long.valueOf(optionGroupName);
compilation error,100,replace,[CE] cannot find symbol,selected = option.getOpt(); ,selected = option.next();
compilation error,100,replace,[CE] cannot find symbol,selected = option.getOpt(); ,selected = option.removeOpt();
compilation error,100,replace,[CE] cannot find symbol,selected = option.getOpt(); ,selected = option.selected();
compilation error,57,add,[CE] method put in interface Map cannot be applied to given types;,,  optionMap.put(option.getValue(), true);
compilation error,57,add,[CE] cannot find symbol,,  optionMap.put(option.getValue(), Option.longValue());
increase failing tests,88,replace, [FE] ComparisonFailure testOptionGroupLong,if (option == null) { ,if(option == null || optionMap.containsKey(option.getKey())) {
increase failing tests,88,replace, [FE] ComparisonFailure testOptionGroupLong,if (option == null) { ,if(selected == null) {
increase failing tests,88,replace, [FE] ComparisonFailure testOptionGroupLong,if (option == null) { ,if(option == null || option.getKey()!= null) {
compilation error,37,add,[CE] generics are not supported in -source 1.4,,  private final Map.Entry < K, V> optionMap = new HashMap();
compilation error,37,add,[CE] illegal start of type,,  return(OptionGroup)optionMap.clone();
compilation error,37,add,[CE] illegal start of type,,  return(OptionGroup)optionMap.get();
compilation error,37,add,[CE] illegal start of type,,  return(OptionGroup)optionMap.get(new OptionGroup());
compilation error,113,add,[CE] cannot find symbol,,  String selected =(OptionGroup)this.optionMap.getSelected();
compilation error,113,add,[CE] incompatible types,,  String selected =(OptionGroup)this.optionMap.get(selected);
compilation error,113,add,[CE] cannot find symbol,,  String selected =(OptionMap)this.optionMap.get(selected);
compilation error,113,add,[CE] cannot find symbol,,  String selected =(OptionMap)this.optionMap.get();
increase failing tests,113,replace, [FE] NullPointerException testOptionGroupLong,return selected; ,return(this.selected == null? this.selected.toString() :",");
increase failing tests,113,replace, [FE] NullPointerException testOptionGroupLong,return selected; ,return(this.selected == null? this.selected.toString() :"");
increase failing tests,100,add, [FE] NullPointerException testOptionGroupLong,,  option =(Option)optionMap.get(selected);
compilation error,100,add,[CE] incompatible types,,  option = optionMap.get(selected);
compilation error,100,add,[CE] cannot find symbol,,  option = optionMap.select(selected);
compilation error,76,add,[CE] cannot find symbol,,  OptionMap optionMap =(OptionMap)optionMap.keySet();
compilation error,76,add,[CE] cannot find symbol,,  OptionMap optionMap =(Option)optionMap.keySet();
compilation error,76,add,[CE] cannot find symbol,,  OptionMap optionMap =(OptionMap)this.optionMap.keySet();
compilation error,76,replace,[CE] bad operand types for binary operator '/',return optionMap.values(); ,return optionMap.values() /(optionMap.size() == 0)? optionMap.keySet() : null;
compilation error,57,replace,[CE] incompatible types,return this; ,return(option == null)? this : optionMap.get(option.getValue());
compilation error,57,replace,[CE] incompatible types,return this; ,return(option == null)? null : optionMap.get(option.getValue());
compilation error,57,replace,[CE] cannot find symbol,return this; ,return(option == null)? this : optionMap.keySet().addOption(option);
compilation error,98,add,[CE] variable option is already defined in method setSelected(Option),,  Option option =(Option)optionMap.get(option.getKey());
compilation error,98,add,[CE] illegal start of expression,,  if(!hasArg()) { if(selected.equals(option.getArg())) { return; }
compilation error,98,add,[CE] illegal start of expression,,  if(!hasArg()) { if(selected.equals(option.getArg())) { throw new IllegalArgumentException(""); }
compilation error,98,add,[CE] illegal start of expression,,  if(!hasArg()) { if(selected.equals(option.getArg())) { throw new MissingException(""); }
increase failing tests,98,replace, [FE] AlreadySelectedException testOptionGroupLong,if (selected == null || selected.equals(option.getOpt())) { ,if(selected!= null && selected.equals(option.getOpt())) {
increase failing tests,98,replace, [FE] NullPointerException testOptionGroupLong,if (selected == null || selected.equals(option.getOpt())) { ,if(selected == null && selected.equals(option.getOpt())) {
compilation error,98,replace,[CE] cannot find symbol select,if (selected == null || selected.equals(option.getOpt())) { ,if(selected!= null && select.equals(option.getOpt())) {
increase failing tests,55,replace, [FE] ClassCastException testMissingRequiredGroup,optionMap.put(option.getKey(), option); ,optionMap.put(option.getKey(), this);
compilation error,55,replace,[CE] cannot find symbol,optionMap.put(option.getKey(), option); ,optionMap.put(option.getRequired(), option);
increase failing tests,55,add, [FE] NullPointerException testMissingRequiredGroup,,  option =(Option)optionMap.get(option.getValue());
compilation error,55,add,[CE] cannot find symbol,,  OptionGroup optionMap =(OptionGroup)optionMap.get(option.getValue());
increase failing tests,88,add, [FE] NullPointerException testMissingRequiredGroup,,  optionMap.put(option.getKey(), option.getValue());
increase failing tests,88,add, [FE] NullPointerException testMissingRequiredGroup,,  this.optionMap.put(option.getKey(), option);
increase failing tests,88,add, [FE] NullPointerException testMissingRequiredGroup,,  optionMap.put(option.getKey(), option.getValue()); required = true;
increase failing tests,88,add, [FE] NullPointerException testMissingRequiredGroup,,  optionMap.put(option.getKey(), option.getValue()); required = false;
compilation error,32,replace,[CE] class or interface expected,,return OptionGroup.Long(OptionGroup.longValue(), Long.parseLong(OptionGroup.longValue()));
compilation error,32,replace,[CE] class or interface expected,,return OptionGroup.valueOf(OptionGroup.Long);
compilation error,32,replace,[CE] class or interface expected,,return OptionGroup.Long(OptionGroup.longValue());
compilation error,32,add,[CE] class or interface expected,,  return OptionGroup.valueOf(OptionGroup.LONG);
compilation error,57,add,[CE] constructor OptionGroup in class OptionGroup cannot be applied to given types;,,  optionMap.put(option.getValue(), new OptionGroup(this, option));
compilation error,57,add,[CE] cannot find symbol None,,  optionMap.put(option.getValue(), Option.None.forOption(option));
compilation error,106,replace,[CE] illegal start of expression,} ,optionMap.put(selected, true);
compilation error,106,replace,[CE] illegal start of expression,} ,this.optionMap.put(selected, option);
compilation error,76,add,[CE] cannot find symbol,,  OptionMap optionMap =(OptionGroup)optionMap.keySet();
compilation error,76,add,[CE] incompatible types,,  final Map optionMap = getOptions();
compilation error,76,add,[CE] types Collection and Map are incompatible; both define remove(java.lang.Object), but with unrelated return types,,  optionMap =(Map)optionMap.keySet();
compilation error,100,add,[CE] method put in interface Map cannot be applied to given types;,,  optionMap.put(option.getOpt(), true);
compilation error,98,add,[CE] cannot find symbol options,,  optionMap.put(option.getKey(), options.getValue());
compilation error,98,add,[CE] method putAll in interface Map cannot be applied to given types;,,  optionMap.putAll(option.getKey());
compilation error,37,add,[CE] illegal start of type,,  return(OptionGroup)OptionMap.clone();
compilation error,37,add,[CE] illegal start of type,,  return new HashMap(OptionGroup.Long.getValue(optionMap));
compilation error,57,replace,[CE] incompatible types for ?: neither is a subtype of the other,return this; ,return(option == null)? null : optionMap.containsKey(option.getValue());
compilation error,57,replace,[CE] cannot find symbol,return this; ,return(option == null)? this : OptionGroup.valueOf(option.getValue());
compilation error,76,replace,[CE] incompatible types,return optionMap.values(); ,return(OptionGroup)optionMap.values();
compilation error,113,add,[CE] variable selected might not have been initialized,,  final String selected =(String)optionMap.get(selected);
compilation error,113,add,[CE] variable selected might not have been initialized,,  String selected =(String)optionMap.get(selected); required = true;
compilation error,113,add,[CE] variable selected might not have been initialized,,  final String selected =(String)optionMap.get(selected); required = true;
compilation error,113,add,[CE] variable selected might not have been initialized,,  String selected =(String)optionMap.get(selected); if(selected!= null) { required = true; }
compilation error,113,add,[CE] variable selected might not have been initialized,,  String selected =(String)optionMap.get(selected);
compilation error,100,replace,[CE] cannot find symbol,selected = option.getOpt(); ,selected = option.select(option.getOpt());
compilation error,100,replace,[CE] cannot find symbol,selected = option.getOpt(); ,selected = option.select(option.getLongOpt());
