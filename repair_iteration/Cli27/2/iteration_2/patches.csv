bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  String  option  =  optionMap.get(selected.toLowerCase(),  selected.toLowerCase());  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  optionMap.get(selected.toLowerCase(),  selected.toLowerCase());  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionMap.get(selected.toLowerCase(),  selected.toLowerCase());	  String    option    =    optionMap.get(selected.toLowerCase());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	8	None	replace
2	[BUG]  [BUGGY]  String  option  =  optionMap.get(selected.toLowerCase(),  selected);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                    ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  optionMap.get(selected.toLowerCase(),  selected);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionMap.get(selected.toLowerCase(),  selected);	  String    option    =    optionMap.get(selected.toLowerCase());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	8	None	replace
3	[BUG]  [BUGGY]  String  option  =  optionMap.get(selected.toLowerCase()  +  1);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                      ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  optionMap.get(selected.toLowerCase()  +  1);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionMap.get(selected.toLowerCase()  +  1);	  String    option    =    optionMap.get(selected.toLowerCase());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	8	None	replace
4	[BUG]  [BUGGY]  Option  option  =  optionMap.get(selected.getOpt());  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]            ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =  optionMap.get(selected.getOpt());  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =  optionMap.get(selected.getOpt());	  Option    option    =    optionMap.get(option.getOpt());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	75	None	replace
5	[BUG]  [BUGGY]  Option  option  =  options.get(option.getOpt());  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]              ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =  options.get(option.getOpt());  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =  options.get(option.getOpt());	  Option    option    =    optionMap.get(option.getOpt());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	75	None	replace
6	[BUG]  [BUGGY]  Option  option  =  optionsMap.get(selected.getOpt());  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =  optionsMap.get(selected.getOpt());  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =  optionsMap.get(selected.getOpt());	  Option    option    =    optionMap.get(option.getOpt());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	75	None	replace
7	[BUG]  [BUGGY]  Option  option  =  optionsMap.get(option.getOpt());  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =  optionsMap.get(option.getOpt());  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =  optionsMap.get(option.getOpt());	  Option    option    =    optionMap.get(option.getOpt());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	75	None	replace
8	[BUG]  [BUGGY]  >>  [Delete]  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  >>  [Delete]  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	>>  [Delete]	          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(option.getLongOpt().equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
9	[BUG]  [BUGGY]  ==  [Delete]  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  ==  [Delete]  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	==  [Delete]	          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(option.getLongOpt().equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
10	[BUG]  [BUGGY]  !=  [Delete]  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  !=  [Delete]  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	!=  [Delete]	          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(option.getLongOpt().equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
11	[BUG]  [BUGGY]  String  option  =  option.getOption(),  selected,  required);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  option.getOption(),  selected,  required);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  option.getOption(),  selected,  required);	  String    option    =    option.getOption(),    selected);    	non-compiled	[CE]  ';'  expected	3	None	replace
12	[BUG]  [BUGGY]  String  option  =  selected.getOption(),  option);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  selected.getOption(),  option);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  selected.getOption(),  option);	  String    option    =    option.getOption(),    selected);    	non-compiled	[CE]  ';'  expected	3	None	replace
13	[BUG]  [BUGGY]  String  option  =  option.getOpt(),  selected);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  option.getOpt(),  selected);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  option.getOpt(),  selected);	  String    option    =    option.getOption(),    selected);    	non-compiled	[CE]  ';'  expected	3	None	replace
14	[BUG]  [BUGGY]  selected    =    option.getLongOpt();    String  opt  =  option.getLongOpt();  String  selected  =  option.getLongOpt();  String  opt  =  option.getLongOpt();  [CE]  variable  opt  is  already  defined  in  method  setSelected(Option)  [FE]    ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected    =    option.getLongOpt();    String  opt  =  option.getLongOpt();  String  selected  =  option.getLongOpt();  String  opt  =  option.getLongOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected        =        option.getLongOpt();        String    opt    =    option.getLongOpt();    String  selected  =  option.getLongOpt();  String  opt  =  option.getLongOpt();	  	non-compiled	[CE]  variable  opt  is  already  defined  in  method  setSelected(Option)	81	None	add
15	[BUG]  [BUGGY]  selected    =    option.getLongOpt();    String  opt  =  option.getLongOpt();  String  option  =  option.getOpt();  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]      ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected    =    option.getLongOpt();    String  opt  =  option.getLongOpt();  String  option  =  option.getOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected        =        option.getLongOpt();        String    opt    =    option.getLongOpt();    String  option  =  option.getOpt();	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	81	None	add
16	[BUG]  [BUGGY]  selected    =    option.getLongOpt();    String  opt  =  option.getLongOpt();  String  option  =  option.getLongOpt();  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]        ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected    =    option.getLongOpt();    String  opt  =  option.getLongOpt();  String  option  =  option.getLongOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected        =        option.getLongOpt();        String    opt    =    option.getLongOpt();    String  option  =  option.getLongOpt();	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	81	None	add
17	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected    =    option.getLongOpt();    String  opt  =  option.getLongOpt();  String  oldOpt  =  option.getLongOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	selected        =        option.getLongOpt();        String    opt    =    option.getLongOpt();    String  oldOpt  =  option.getLongOpt();	  	compilable	  [FE]  ComparisonFailure  	81	3	add
18	[BUG]  [BUGGY]  selected    =    option.getLongOpt();    String  opt  =  option.getLongOpt();  String  oldOpt  =  option.getLongOpt();  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected    =    option.getLongOpt();    String  opt  =  option.getLongOpt();  String  oldOpt  =  option.getLongOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected        =        option.getLongOpt();        String    opt    =    option.getLongOpt();    String  oldOpt  =  option.getLongOpt();	  	compilable	  [FE]  ComparisonFailure  	81	3	add
19	[BUG]  [BUGGY]  selected    =    option.getLongOpt();    String  opt  =  option.getLongOpt();  String  selected  =  option.getOpt();  String  opt  =  option.getLongOpt();  [CE]  variable  opt  is  already  defined  in  method  setSelected(Option)  [FE]            ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected    =    option.getLongOpt();    String  opt  =  option.getLongOpt();  String  selected  =  option.getOpt();  String  opt  =  option.getLongOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected        =        option.getLongOpt();        String    opt    =    option.getLongOpt();    String  selected  =  option.getOpt();  String  opt  =  option.getLongOpt();	  	non-compiled	[CE]  variable  opt  is  already  defined  in  method  setSelected(Option)	81	None	add
20	[BUG]  [BUGGY]  selected  =  optionMap.getSelectedOpt();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected  =  optionMap.getSelectedOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  optionMap.getSelectedOpt();	  selected    =    option.getSelectedOpt();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
21	[BUG]  [BUGGY]  selected  =  options.getSelectedOpt();  [CE]  cannot  find  symbol  options  [FE]            ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected  =  options.getSelectedOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  options.getSelectedOpt();	  selected    =    option.getSelectedOpt();    	non-compiled	[CE]  cannot  find  symbol  options	12	None	replace
22	[BUG]  [BUGGY]  selected  =  option.getSelectedOpt()  +  1;  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected  =  option.getSelectedOpt()  +  1;  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  option.getSelectedOpt()  +  1;	  selected    =    option.getSelectedOpt();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
23	[BUG]  [BUGGY]  Option  option  =  optionMap.get(selected.toLowerCase(),  selected.toLowerCase());  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]            ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =  optionMap.get(selected.toLowerCase(),  selected.toLowerCase());  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =  optionMap.get(selected.toLowerCase(),  selected.toLowerCase());	  Option    option    =    optionMap.get(selected.toLowerCase());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	34	None	replace
24	[BUG]  [BUGGY]  Option  option  =  optionMap.get(selected.toLowerCase(),  selected);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]              ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =  optionMap.get(selected.toLowerCase(),  selected);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =  optionMap.get(selected.toLowerCase(),  selected);	  Option    option    =    optionMap.get(selected.toLowerCase());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	34	None	replace
25	[BUG]  [BUGGY]  Option  option  =  optionMap.get(selected.toLowerCase(),  required);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =  optionMap.get(selected.toLowerCase(),  required);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =  optionMap.get(selected.toLowerCase(),  required);	  Option    option    =    optionMap.get(selected.toLowerCase());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	34	None	replace
26	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(selected.equals(option.getOpt()))  {  selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	if(selected.equals(option.getOpt()))  {  selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  }	  selected    =    option.getLongOpt();    selected    =    option.getLongOpt();    	compilable	  [FE]  NullPointerException  	19	6	replace
27	[BUG]  [BUGGY]  if(selected.equals(option.getOpt()))  {  selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  }  [FE]  NullPointerException  [FE]    ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(selected.equals(option.getOpt()))  {  selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	if(selected.equals(option.getOpt()))  {  selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  }	  selected    =    option.getLongOpt();    selected    =    option.getLongOpt();    	compilable	  [FE]  NullPointerException  	19	6	replace
28	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(selected!=  null)  {  selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	if(selected!=  null)  {  selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  }	  selected    =    option.getLongOpt();    selected    =    option.getLongOpt();    	compilable	  [FE]  ComparisonFailure  	19	6	replace
29	[BUG]  [BUGGY]  if(selected!=  null)  {  selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(selected!=  null)  {  selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	if(selected!=  null)  {  selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  }	  selected    =    option.getLongOpt();    selected    =    option.getLongOpt();    	compilable	  [FE]  ComparisonFailure  	19	6	replace
30	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(selected  ==  null)  {  selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	if(selected  ==  null)  {  selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  }	  selected    =    option.getLongOpt();    selected    =    option.getLongOpt();    	compilable	  [FE]  ComparisonFailure  	19	3	replace
31	[BUG]  [BUGGY]  if(selected  ==  null)  {  selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(selected  ==  null)  {  selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	if(selected  ==  null)  {  selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  }	  selected    =    option.getLongOpt();    selected    =    option.getLongOpt();    	compilable	  [FE]  ComparisonFailure  	19	3	replace
32	[BUG]  [BUGGY]  if(selected.equals(option.getOpt()))  {  selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  }  else  {  throw  new  AlreadySelectedException(this,  this);  }  [CE]  no  suitable  constructor  found  for  AlreadySelectedException(OptionGroup,OptionGroup)  [FE]          ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(selected.equals(option.getOpt()))  {  selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  }  else  {  throw  new  AlreadySelectedException(this,  this);  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	if(selected.equals(option.getOpt()))  {  selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  }  else  {  throw  new  AlreadySelectedException(this,  this);  }	  selected    =    option.getLongOpt();    selected    =    option.getLongOpt();    	non-compiled	[CE]  no  suitable  constructor  found  for  AlreadySelectedException(OptionGroup,OptionGroup)	19	None	replace
33	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	                if(selected.equals(option.getLongOpt()))        {        throw        new        AlreadySelectedException(this,        option);        }        if(!selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  	compilable	  [FE]  NullPointerException  	15	6	add
34	[BUG]  [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	                if(selected.equals(option.getLongOpt()))        {        throw        new        AlreadySelectedException(this,        option);        }        if(!selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  	compilable	  [FE]  NullPointerException  	15	6	add
35	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	                if(selected.equals(option.getLongOpt()))        {        throw        new        AlreadySelectedException(this,        option);        }        if(!selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  	compilable	  [FE]  NullPointerException  	15	6	add
36	[BUG]  [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	                if(selected.equals(option.getLongOpt()))        {        throw        new        AlreadySelectedException(this,        option);        }        if(!selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  	compilable	  [FE]  NullPointerException  	15	6	add
37	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(!selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	                if(selected.equals(option.getLongOpt()))        {        throw        new        AlreadySelectedException(this,        option);        }        if(!selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(!selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  	compilable	  [FE]  NullPointerException  	15	6	add
38	[BUG]  [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(!selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(!selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	                if(selected.equals(option.getLongOpt()))        {        throw        new        AlreadySelectedException(this,        option);        }        if(!selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(!selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  	compilable	  [FE]  NullPointerException  	15	6	add
39	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	                if(selected.equals(option.getLongOpt()))        {        throw        new        AlreadySelectedException(this,        option);        }        if(!selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  	compilable	  [FE]  NullPointerException  	15	6	add
40	[BUG]  [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	                if(selected.equals(option.getLongOpt()))        {        throw        new        AlreadySelectedException(this,        option);        }        if(!selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  	compilable	  [FE]  NullPointerException  	15	6	add
41	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	                if(selected.equals(option.getLongOpt()))        {        throw        new        AlreadySelectedException(this,        option);        }        if(!selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  	compilable	  [FE]  NullPointerException  	15	6	add
42	[BUG]  [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	                if(selected.equals(option.getLongOpt()))        {        throw        new        AlreadySelectedException(this,        option);        }        if(!selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  	compilable	  [FE]  NullPointerException  	15	6	add
43	[BUG]  [BUGGY]  selected  =  option.getLowerOpt();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected  =  option.getLowerOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  option.getLowerOpt();	  selected    =    option.getUpperOpt();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
44	[BUG]  [BUGGY]  selected  =  options.getUpperOpt();  [CE]  cannot  find  symbol  options  [FE]          ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected  =  options.getUpperOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  options.getUpperOpt();	  selected    =    option.getUpperOpt();    	non-compiled	[CE]  cannot  find  symbol  options	11	None	replace
45	[BUG]  [BUGGY]  aleger.equals(option.getOpt()))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]    NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  aleger.equals(option.getOpt()))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	aleger.equals(option.getOpt()))  {  throw  new  IllegalArgumentException( " ");  }	          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(!selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  	16	None	replace
46	[BUG]  [BUGGY]  aleger.equals(option.getRawOffset()))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]      NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  aleger.equals(option.getRawOffset()))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	aleger.equals(option.getRawOffset()))  {  throw  new  IllegalArgumentException( " ");  }	          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(!selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  	16	None	replace
47	[BUG]  [BUGGY]  String  option  =  selected.getSelectedString()  + "_ "  +  option;  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                    ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  selected.getSelectedString()  + "_ "  +  option;  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  selected.getSelectedString()  + "_ "  +  option;	  String    option    =    option.getSelectedString()    +   "_   "    +    selected;    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	95	None	replace
48	[BUG]  [BUGGY]  String  option  =  option.getSelectedString()  + "_ "  +  selected.toString();  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                      ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  option.getSelectedString()  + "_ "  +  selected.toString();  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  option.getSelectedString()  + "_ "  +  selected.toString();	  String    option    =    option.getSelectedString()    +   "_   "    +    selected;    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	95	None	replace
49	[BUG]  [BUGGY]  String  option  =  option.getSelectedString()  + "_ "  +  selected.toLowerCase();  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                        ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  option.getSelectedString()  + "_ "  +  selected.toLowerCase();  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  option.getSelectedString()  + "_ "  +  selected.toLowerCase();	  String    option    =    option.getSelectedString()    +   "_   "    +    selected;    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	95	None	replace
50	[BUG]  [BUGGY]  bucket!=  null  ||  selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [CE]  not  a  statement  [FE]          NullPointerException      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  bucket!=  null  ||  selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	bucket!=  null  ||  selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  bucket!=    null    &&    selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  not  a  statement	43	None	replace
51	[BUG]  [BUGGY]  bucket!=  null  &&  selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [CE]  not  a  statement  [FE]            NullPointerException      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  bucket!=  null  &&  selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	bucket!=  null  &&  selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  bucket!=    null    &&    selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  not  a  statement	43	None	replace
52	[BUG]  [BUGGY]  bucket!=  null  &&  selected.equals(option.getKey()))  {  throw  new  AlreadySelectedException(this,  option);  }  [CE]  not  a  statement  [FE]              NullPointerException      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  bucket!=  null  &&  selected.equals(option.getKey()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	bucket!=  null  &&  selected.equals(option.getKey()))  {  throw  new  AlreadySelectedException(this,  option);  }	  bucket!=    null    &&    selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  not  a  statement	43	None	replace
53	[BUG]  [BUGGY]  Option  option  =  selected.getOption();  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]              ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =  selected.getOption();  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =  selected.getOption();	  Option    option    =    option.getOption();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	85	None	replace
54	[BUG]  [BUGGY]  Option  option  =  options.getOption();  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =  options.getOption();  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =  options.getOption();	  Option    option    =    option.getOption();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	85	None	replace
55	[BUG]  [BUGGY]  Option  option  =  this.optionMap.getOption();  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =  this.optionMap.getOption();  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =  this.optionMap.getOption();	  Option    option    =    option.getOption();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	85	None	replace
56	[BUG]  [BUGGY]  String  option  =  selected.getSelectedValue();  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                        ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  selected.getSelectedValue();  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  selected.getSelectedValue();	  String    option    =    option.getSelectedValue();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	59	None	replace
57	[BUG]  [BUGGY]  String  option  =  option.getSelectedValue()  +  selected.toString();  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                          ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  option.getSelectedValue()  +  selected.toString();  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  option.getSelectedValue()  +  selected.toString();	  String    option    =    option.getSelectedValue();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	59	None	replace
58	[BUG]  [BUGGY]  String  option  =  options.getSelectedValue();  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                            ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  options.getSelectedValue();  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  options.getSelectedValue();	  String    option    =    option.getSelectedValue();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	59	None	replace
59	[BUG]  [BUGGY]  option.setSelected(option.getLongOpt());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  option.setSelected(option.getLongOpt());  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	option.setSelected(option.getLongOpt());	  vice.setSelected(option.getLongOpt());    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
60	[BUG]  [BUGGY]  selected.setSelected(option.getLongOpt());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected.setSelected(option.getLongOpt());  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected.setSelected(option.getLongOpt());	  vice.setSelected(option.getLongOpt());    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
61	[BUG]  [BUGGY]  selector.setSelected(option.getLongOpt());  [CE]  cannot  find  symbol  selector  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selector.setSelected(option.getLongOpt());  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selector.setSelected(option.getLongOpt());	  vice.setSelected(option.getLongOpt());    	non-compiled	[CE]  cannot  find  symbol  selector	60	None	replace
62	[BUG]  [BUGGY]  selection.setSelected(option.getLongOpt());  [CE]  cannot  find  symbol  selection  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selection.setSelected(option.getLongOpt());  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selection.setSelected(option.getLongOpt());	  vice.setSelected(option.getLongOpt());    	non-compiled	[CE]  cannot  find  symbol  selection	60	None	replace
63	[BUG]  [BUGGY]  option.setSelected(option.getOpt());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  option.setSelected(option.getOpt());  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	option.setSelected(option.getOpt());	  parent.setSelected(option.getOpt());    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
64	[BUG]  [BUGGY]  optionMap.setSelected(option.getOpt());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  optionMap.setSelected(option.getOpt());  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	optionMap.setSelected(option.getOpt());	  parent.setSelected(option.getOpt());    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
65	[BUG]  [BUGGY]  Option  option  =  option.getOpt();  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                        ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =  option.getOpt();  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =  option.getOpt();	  parent.setSelected(option.getOpt());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	41	None	replace
66	[BUG]  [BUGGY]  Option  option  =(Option)this.optionMap.get(selected.toLowerCase());  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]            ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =(Option)this.optionMap.get(selected.toLowerCase());  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =(Option)this.optionMap.get(selected.toLowerCase());	  Option    option    =(Option)this.optionMap.get(selected);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	31	None	replace
67	[BUG]  [BUGGY]  Option  option  =(Option)this.optionMap.get(selected  +  1);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]              ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =(Option)this.optionMap.get(selected  +  1);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =(Option)this.optionMap.get(selected  +  1);	  Option    option    =(Option)this.optionMap.get(selected);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	31	None	replace
68	[BUG]  [BUGGY]  Option  option  =(Option)this.optionMap.get(selected,  required);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =(Option)this.optionMap.get(selected,  required);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =(Option)this.optionMap.get(selected,  required);	  Option    option    =(Option)this.optionMap.get(selected);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	31	None	replace
69	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  [Delete]    	compilable	  [FE]  NullPointerException  	71	6	replace
70	[BUG]  [BUGGY]  if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [FE]  NullPointerException  [FE]          NullPointerException      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  [Delete]    	compilable	  [FE]  NullPointerException  	71	6	replace
71	[BUG]  [BUGGY]  if(selected.equals(option.getLocation()))  {  throw  new  AlreadySelectedException(this,  option.getLocation());  }  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(selected.equals(option.getLocation()))  {  throw  new  AlreadySelectedException(this,  option.getLocation());  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	if(selected.equals(option.getLocation()))  {  throw  new  AlreadySelectedException(this,  option.getLocation());  }	  [Delete]    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
72	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              NullPointerException      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException( " ");  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException( " ");  }	  [Delete]    	compilable	  [FE]  NullPointerException  	71	6	replace
73	[BUG]  [BUGGY]  if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException( " ");  }  [FE]  NullPointerException  [FE]              NullPointerException      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException( " ");  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException( " ");  }	  [Delete]    	compilable	  [FE]  NullPointerException  	71	6	replace
74	[BUG]  [BUGGY]  if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option.getName());  }  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option.getName());  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option.getName());  }	  [Delete]    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
75	[BUG]  [BUGGY]  selection  =  option.getName();  [CE]  cannot  find  symbol  selection  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selection  =  option.getName();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selection  =  option.getName();	  selected    =    options.getName();    	non-compiled	[CE]  cannot  find  symbol  selection	30	None	replace
76	[BUG]  [BUGGY]  selected  =  options.getItem(option.getOpt());  [CE]  cannot  find  symbol  options  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected  =  options.getItem(option.getOpt());  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  options.getItem(option.getOpt());	  selected    =    options.getItem(selected);    	non-compiled	[CE]  cannot  find  symbol  options	49	None	replace
77	[BUG]  [BUGGY]  Option  option  =(Option)optionMap.get(selected.getOpt()  +  1);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =(Option)optionMap.get(selected.getOpt()  +  1);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =(Option)optionMap.get(selected.getOpt()  +  1);	  Option    option    =(Option)optionMap.get(selected    +    1);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	33	None	replace
78	[BUG]  [BUGGY]  Option  option  =(Option)optionMap.get(selected,  selected  +  1);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =(Option)optionMap.get(selected,  selected  +  1);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =(Option)optionMap.get(selected,  selected  +  1);	  Option    option    =(Option)optionMap.get(selected    +    1);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	33	None	replace
79	[BUG]  [BUGGY]  selected    =    option.getLongOpt();    if(selected  ==  null)  {  selected  =  option.getLongOpt();  }  if(selected  ==  null)  {  selected  =  option.getLongOpt();  if(selected  ==  null)  {  selected  =  option.getLongOpt();  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected    =    option.getLongOpt();    if(selected  ==  null)  {  selected  =  option.getLongOpt();  }  if(selected  ==  null)  {  selected  =  option.getLongOpt();  if(selected  ==  null)  {  selected  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected        =        option.getLongOpt();        if(selected    ==    null)    {    selected    =    option.getLongOpt();    }    if(selected  ==  null)  {  selected  =  option.getLongOpt();  if(selected  ==  null)  {  selected  =  option.getLongOpt();  }	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
80	[BUG]  [BUGGY]  selected    =    option.getLongOpt();    if(selected  ==  null)  {  selected  =  option.getLongOpt();  }  if(selected!=  null)  {  selected  =  option.getLongOpt();  if(selected  ==  null)  {  selected  =  option.getLongOpt();  }  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected    =    option.getLongOpt();    if(selected  ==  null)  {  selected  =  option.getLongOpt();  }  if(selected!=  null)  {  selected  =  option.getLongOpt();  if(selected  ==  null)  {  selected  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected        =        option.getLongOpt();        if(selected    ==    null)    {    selected    =    option.getLongOpt();    }    if(selected!=  null)  {  selected  =  option.getLongOpt();  if(selected  ==  null)  {  selected  =  option.getLongOpt();  }	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
81	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected    =    option.getLongOpt();    if(selected  ==  null)  {  selected  =  option.getLongOpt();  }  String  selected  =  option.getOpt();  if(selected  ==  null)  {  selected  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	selected        =        option.getLongOpt();        if(selected    ==    null)    {    selected    =    option.getLongOpt();    }    String  selected  =  option.getOpt();  if(selected  ==  null)  {  selected  =  option.getLongOpt();  }	  	compilable	  [FE]  ComparisonFailure  	22	3	add
82	[BUG]  [BUGGY]  selected    =    option.getLongOpt();    if(selected  ==  null)  {  selected  =  option.getLongOpt();  }  String  selected  =  option.getOpt();  if(selected  ==  null)  {  selected  =  option.getLongOpt();  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected    =    option.getLongOpt();    if(selected  ==  null)  {  selected  =  option.getLongOpt();  }  String  selected  =  option.getOpt();  if(selected  ==  null)  {  selected  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected        =        option.getLongOpt();        if(selected    ==    null)    {    selected    =    option.getLongOpt();    }    String  selected  =  option.getOpt();  if(selected  ==  null)  {  selected  =  option.getLongOpt();  }	  	compilable	  [FE]  ComparisonFailure  	22	3	add
83	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected    =    option.getLongOpt();    if(selected  ==  null)  {  selected  =  option.getLongOpt();  }  String  selected  =  option.getLongOpt();  if(selected  ==  null)  {  selected  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	selected        =        option.getLongOpt();        if(selected    ==    null)    {    selected    =    option.getLongOpt();    }    String  selected  =  option.getLongOpt();  if(selected  ==  null)  {  selected  =  option.getLongOpt();  }	  	compilable	  [FE]  ComparisonFailure  	22	3	add
84	[BUG]  [BUGGY]  selected    =    option.getLongOpt();    if(selected  ==  null)  {  selected  =  option.getLongOpt();  }  String  selected  =  option.getLongOpt();  if(selected  ==  null)  {  selected  =  option.getLongOpt();  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected    =    option.getLongOpt();    if(selected  ==  null)  {  selected  =  option.getLongOpt();  }  String  selected  =  option.getLongOpt();  if(selected  ==  null)  {  selected  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected        =        option.getLongOpt();        if(selected    ==    null)    {    selected    =    option.getLongOpt();    }    String  selected  =  option.getLongOpt();  if(selected  ==  null)  {  selected  =  option.getLongOpt();  }	  	compilable	  [FE]  ComparisonFailure  	22	3	add
85	[BUG]  [BUGGY]  selected    =    option.getLongOpt();    if(selected  ==  null)  {  selected  =  option.getLongOpt();  }  if(selected  ==  null)  {  selected  =  option.getLongOpt();  if(selected!=  null)  {  selected  =  option.getLongOpt();  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected    =    option.getLongOpt();    if(selected  ==  null)  {  selected  =  option.getLongOpt();  }  if(selected  ==  null)  {  selected  =  option.getLongOpt();  if(selected!=  null)  {  selected  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected        =        option.getLongOpt();        if(selected    ==    null)    {    selected    =    option.getLongOpt();    }    if(selected  ==  null)  {  selected  =  option.getLongOpt();  if(selected!=  null)  {  selected  =  option.getLongOpt();  }	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
86	[BUG]  [BUGGY]  selection  =  option.getItemCount();  [CE]  cannot  find  symbol  selection  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selection  =  option.getItemCount();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selection  =  option.getItemCount();	  selected    =    options.getItemCount();    	non-compiled	[CE]  cannot  find  symbol  selection	28	None	replace
87	[BUG]  [BUGGY]  selected  =  option  Maps.getItem(option.getOpt());  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected  =  option  Maps.getItem(option.getOpt());  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  option  Maps.getItem(option.getOpt());	  selected    =    option    Maps.getItem(selected);    	non-compiled	[CE]  ';'  expected	98	None	replace
88	[BUG]  [BUGGY]  selected  =  optionMap.get(selected);  [CE]  incompatible  types  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected  =  optionMap.get(selected);  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  optionMap.get(selected);	  selected    =    option    Maps.getItem(selected);    	non-compiled	[CE]  incompatible  types	98	None	replace
89	[BUG]  [BUGGY]  Option  option  =  optionMap.get(selected.toString(),  selected);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =  optionMap.get(selected.toString(),  selected);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =  optionMap.get(selected.toString(),  selected);	  Option    option    =    optionMap.get(selected.toString());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	37	None	replace
90	[BUG]  [BUGGY]  Option  option  =  optionMap.get(selected.toString(),  required);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                    ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =  optionMap.get(selected.toString(),  required);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =  optionMap.get(selected.toString(),  required);	  Option    option    =    optionMap.get(selected.toString());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	37	None	replace
91	[BUG]  [BUGGY]  Option  option  =  optionMap.get(selected.toString()  + ": ");  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                      ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =  optionMap.get(selected.toString()  + ": ");  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =  optionMap.get(selected.toString()  + ": ");	  Option    option    =    optionMap.get(selected.toString());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	37	None	replace
92	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	                if(selected.equals(option.getLongOpt()))        {        throw        new        AlreadySelectedException(this,        option);        }        if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  	compilable	  [FE]  NullPointerException  	13	6	add
93	[BUG]  [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	                if(selected.equals(option.getLongOpt()))        {        throw        new        AlreadySelectedException(this,        option);        }        if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  	compilable	  [FE]  NullPointerException  	13	6	add
94	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	                if(selected.equals(option.getLongOpt()))        {        throw        new        AlreadySelectedException(this,        option);        }        if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  	compilable	  [FE]  NullPointerException  	13	6	add
95	[BUG]  [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	                if(selected.equals(option.getLongOpt()))        {        throw        new        AlreadySelectedException(this,        option);        }        if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  	compilable	  [FE]  NullPointerException  	13	6	add
96	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(selected  ==  null  ||  selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	                if(selected.equals(option.getLongOpt()))        {        throw        new        AlreadySelectedException(this,        option);        }        if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected  ==  null  ||  selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  	compilable	  [FE]  NullPointerException  	13	6	add
97	[BUG]  [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(selected  ==  null  ||  selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(selected  ==  null  ||  selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	                if(selected.equals(option.getLongOpt()))        {        throw        new        AlreadySelectedException(this,        option);        }        if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected  ==  null  ||  selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  	compilable	  [FE]  NullPointerException  	13	6	add
98	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(selected!=  null  ||  selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	                if(selected.equals(option.getLongOpt()))        {        throw        new        AlreadySelectedException(this,        option);        }        if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected!=  null  ||  selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  	compilable	  [FE]  NullPointerException  	13	6	add
99	[BUG]  [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(selected!=  null  ||  selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(selected!=  null  ||  selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	                if(selected.equals(option.getLongOpt()))        {        throw        new        AlreadySelectedException(this,        option);        }        if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected!=  null  ||  selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  	compilable	  [FE]  NullPointerException  	13	6	add
100	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(selected  ==  null  ||  selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	                if(selected.equals(option.getLongOpt()))        {        throw        new        AlreadySelectedException(this,        option);        }        if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected  ==  null  ||  selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  	compilable	  [FE]  NullPointerException  	13	6	add
101	[BUG]  [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(selected  ==  null  ||  selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(selected  ==  null  ||  selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	                if(selected.equals(option.getLongOpt()))        {        throw        new        AlreadySelectedException(this,        option);        }        if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected  ==  null  ||  selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  	compilable	  [FE]  NullPointerException  	13	6	add
102	[BUG]  [BUGGY]  selection  =  optionMap.getSelected();  [CE]  cannot  find  symbol  selection  [FE]            ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selection  =  optionMap.getSelected();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selection  =  optionMap.getSelected();	  selected    =    optionMap.getSelected();    	non-compiled	[CE]  cannot  find  symbol  selection	54	None	replace
103	[BUG]  [BUGGY]  String  option  =  selected.getText(),  option);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  selected.getText(),  option);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  selected.getText(),  option);	  String    option    =    option.getText(),    selected);    	non-compiled	[CE]  ';'  expected	79	None	replace
104	[BUG]  [BUGGY]  String  option  =  selection.getText(),  selected);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  selection.getText(),  selected);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  selection.getText(),  selected);	  String    option    =    option.getText(),    selected);    	non-compiled	[CE]  ';'  expected	79	None	replace
105	[BUG]  [BUGGY]  String  option  =  options.getText(),  selected);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  options.getText(),  selected);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  options.getText(),  selected);	  String    option    =    option.getText(),    selected);    	non-compiled	[CE]  ';'  expected	79	None	replace
106	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  selected  =  option.getOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	String  selected  =  option.getOpt();	  selected    =    option.getLongOpt();    String    selected    =    option.getLongOpt();    	compilable	  [FE]  ComparisonFailure  	21	6	replace
107	[BUG]  [BUGGY]  String  selected  =  option.getOpt();  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  selected  =  option.getOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  selected  =  option.getOpt();	  selected    =    option.getLongOpt();    String    selected    =    option.getLongOpt();    	compilable	  [FE]  ComparisonFailure  	21	6	replace
108	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(option.getOpt()!=  null)  {  selected  =  option.getLongOpt();  String  selected  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	if(option.getOpt()!=  null)  {  selected  =  option.getLongOpt();  String  selected  =  option.getLongOpt();  }	  selected    =    option.getLongOpt();    String    selected    =    option.getLongOpt();    	compilable	  [FE]  ComparisonFailure  	21	6	replace
109	[BUG]  [BUGGY]  if(option.getOpt()!=  null)  {  selected  =  option.getLongOpt();  String  selected  =  option.getLongOpt();  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(option.getOpt()!=  null)  {  selected  =  option.getLongOpt();  String  selected  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	if(option.getOpt()!=  null)  {  selected  =  option.getLongOpt();  String  selected  =  option.getLongOpt();  }	  selected    =    option.getLongOpt();    String    selected    =    option.getLongOpt();    	compilable	  [FE]  ComparisonFailure  	21	6	replace
110	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  selected  =  option.getLongOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	String  selected  =  option.getLongOpt();	  selected    =    option.getLongOpt();    String    selected    =    option.getLongOpt();    	compilable	  [FE]  ComparisonFailure  	21	6	replace
111	[BUG]  [BUGGY]  String  selected  =  option.getLongOpt();  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  selected  =  option.getLongOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  selected  =  option.getLongOpt();	  selected    =    option.getLongOpt();    String    selected    =    option.getLongOpt();    	compilable	  [FE]  ComparisonFailure  	21	6	replace
112	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(option.getOpt()  ==  null)  {  selected  =  option.getLongOpt();  String  selected  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	if(option.getOpt()  ==  null)  {  selected  =  option.getLongOpt();  String  selected  =  option.getLongOpt();  }	  selected    =    option.getLongOpt();    String    selected    =    option.getLongOpt();    	compilable	  [FE]  ComparisonFailure  	21	3	replace
113	[BUG]  [BUGGY]  if(option.getOpt()  ==  null)  {  selected  =  option.getLongOpt();  String  selected  =  option.getLongOpt();  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(option.getOpt()  ==  null)  {  selected  =  option.getLongOpt();  String  selected  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	if(option.getOpt()  ==  null)  {  selected  =  option.getLongOpt();  String  selected  =  option.getLongOpt();  }	  selected    =    option.getLongOpt();    String    selected    =    option.getLongOpt();    	compilable	  [FE]  ComparisonFailure  	21	3	replace
114	[BUG]  [BUGGY]  bucket  ==  null  ||  selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [CE]  not  a  statement  [FE]            NullPointerException      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  bucket  ==  null  ||  selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	bucket  ==  null  ||  selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  bucket    ==    null    &&    selected.equals(option.getOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  not  a  statement	44	None	replace
115	[BUG]  [BUGGY]  bucket!=  null  ||  selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [CE]  not  a  statement  [FE]              NullPointerException      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  bucket!=  null  ||  selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	bucket!=  null  ||  selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  bucket    ==    null    &&    selected.equals(option.getOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  not  a  statement	44	None	replace
116	[BUG]  [BUGGY]  Option  option  =  option.getLongOpt();  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]        ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =  option.getLongOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =  option.getLongOpt();	  selected    =    option.getLongOpt();    Option    option    =    option.getLongOpt();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	80	None	replace
117	[BUG]  [BUGGY]  if(selected.equals(option.getOpt()))  {  selected  =  option.getLongOpt();  Option  option  =  option.getLongOpt();  }  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]          ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(selected.equals(option.getOpt()))  {  selected  =  option.getLongOpt();  Option  option  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	if(selected.equals(option.getOpt()))  {  selected  =  option.getLongOpt();  Option  option  =  option.getLongOpt();  }	  selected    =    option.getLongOpt();    Option    option    =    option.getLongOpt();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	80	None	replace
118	[BUG]  [BUGGY]  if(selected.equals(option.getOpt()))  {  selected  =  option.getLongOpt();  option  =  option.getLongOpt();  }  [CE]  incompatible  types  [FE]            ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(selected.equals(option.getOpt()))  {  selected  =  option.getLongOpt();  option  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	if(selected.equals(option.getOpt()))  {  selected  =  option.getLongOpt();  option  =  option.getLongOpt();  }	  selected    =    option.getLongOpt();    Option    option    =    option.getLongOpt();    	non-compiled	[CE]  incompatible  types	80	None	replace
119	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(selected.equals(option.getOpt()))  {  selected  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	if(selected.equals(option.getOpt()))  {  selected  =  option.getLongOpt();  }	  selected    =    option.getLongOpt();    Option    option    =    option.getLongOpt();    	compilable	  [FE]  NullPointerException  	80	6	replace
120	[BUG]  [BUGGY]  if(selected.equals(option.getOpt()))  {  selected  =  option.getLongOpt();  }  [FE]  NullPointerException  [FE]              ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(selected.equals(option.getOpt()))  {  selected  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	if(selected.equals(option.getOpt()))  {  selected  =  option.getLongOpt();  }	  selected    =    option.getLongOpt();    Option    option    =    option.getLongOpt();    	compilable	  [FE]  NullPointerException  	80	6	replace
121	[BUG]  [BUGGY]  Option  option  =  optionsMap.get(selected.toLowerCase());  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]            ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =  optionsMap.get(selected.toLowerCase());  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =  optionsMap.get(selected.toLowerCase());	  Option    option    =    optionsMap.get(selected);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	64	None	replace
122	[BUG]  [BUGGY]  Option  option  =  optionsMap.get(selected.toString());  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]              ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =  optionsMap.get(selected.toString());  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =  optionsMap.get(selected.toString());	  Option    option    =    optionsMap.get(selected);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	64	None	replace
123	[BUG]  [BUGGY]  Option  option  =  optionsMap.get(selected,  required);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =  optionsMap.get(selected,  required);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =  optionsMap.get(selected,  required);	  Option    option    =    optionsMap.get(selected);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	64	None	replace
124	[BUG]  [BUGGY]  Option  option  =  optionsMap.get(selected  +  1);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =  optionsMap.get(selected  +  1);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =  optionsMap.get(selected  +  1);	  Option    option    =    optionsMap.get(selected);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	64	None	replace
125	[BUG]  [BUGGY]  aleger.equals(option.getRawOffset()))  {  throw  new  AlreadySelectedException(this,  option);  }  [CE]  ';'  expected  [FE]        NullPointerException      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  aleger.equals(option.getRawOffset()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	aleger.equals(option.getRawOffset()))  {  throw  new  AlreadySelectedException(this,  option);  }	  aleger.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  ';'  expected	70	None	replace
126	[BUG]  [BUGGY]  aleger.equals(option.getSelectedIndex()))  {  throw  new  AlreadySelectedException(this,  option);  }  [CE]  ';'  expected  [FE]          NullPointerException      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  aleger.equals(option.getSelectedIndex()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	aleger.equals(option.getSelectedIndex()))  {  throw  new  AlreadySelectedException(this,  option);  }	  aleger.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  ';'  expected	70	None	replace
127	[BUG]  [BUGGY]  String  option  =  selection.getText();  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                    ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  selection.getText();  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  selection.getText();	  String    option    =    options.getText();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	52	None	replace
128	[BUG]  [BUGGY]  String  option  =  options.getText()  + "n ";  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                      ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  options.getText()  + "n ";  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  options.getText()  + "n ";	  String    option    =    options.getText();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	52	None	replace
129	[BUG]  [BUGGY]  String  option  =  optionMap.get(option.getOpt()  +  1);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                      ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  optionMap.get(option.getOpt()  +  1);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionMap.get(option.getOpt()  +  1);	  String    option    =    optionMap.get(selected    +    1);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	10	None	replace
130	[BUG]  [BUGGY]  String  option  =  optionMap.get(selected,  selected  +  1);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                        ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  optionMap.get(selected,  selected  +  1);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionMap.get(selected,  selected  +  1);	  String    option    =    optionMap.get(selected    +    1);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	10	None	replace
131	[BUG]  [BUGGY]  String  option  =  optionMap.get(selected.getOpt()  +  1);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                          ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  optionMap.get(selected.getOpt()  +  1);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionMap.get(selected.getOpt()  +  1);	  String    option    =    optionMap.get(selected    +    1);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	10	None	replace
132	[BUG]  [BUGGY]  String  option  =  optionMap.getSelectedString();  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                      ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  optionMap.getSelectedString();  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionMap.getSelectedString();	  String    option    =    options.getSelectedString();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	58	None	replace
133	[BUG]  [BUGGY]  String  option  =  option.getItem(selected,  selected,  required);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  option.getItem(selected,  selected,  required);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  option.getItem(selected,  selected,  required);	  String    option    =    option.getItem(selected,    required);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	5	None	replace
134	[BUG]  [BUGGY]  String  option  =  option.getItem(selected,  item);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  option.getItem(selected,  item);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  option.getItem(selected,  item);	  String    option    =    option.getItem(selected,    required);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	5	None	replace
135	[BUG]  [BUGGY]  String  option  =  option.getItem(selected,  required,  selected);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                    ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  option.getItem(selected,  required,  selected);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  option.getItem(selected,  required,  selected);	  String    option    =    option.getItem(selected,    required);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	5	None	replace
136	[BUG]  [BUGGY]  String  selected  =  optionMap.getString();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  selected  =  optionMap.getString();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  selected  =  optionMap.getString();	  selected    =    optionMap.getString();    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
137	[BUG]  [BUGGY]  String  option  =  option.getItem(selected.toString(),  selected);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  option.getItem(selected.toString(),  selected);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  option.getItem(selected.toString(),  selected);	  String    option    =    option.getItem(selected.toString());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	6	None	replace
138	[BUG]  [BUGGY]  String  option  =  selected.getItem(option.toString());  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                    ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  selected.getItem(option.toString());  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  selected.getItem(option.toString());	  String    option    =    option.getItem(selected.toString());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	6	None	replace
139	[BUG]  [BUGGY]  String  option  =  optionMap.getItem(selected.toString());  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                      ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  optionMap.getItem(selected.toString());  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionMap.getItem(selected.toString());	  String    option    =    option.getItem(selected.toString());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	6	None	replace
140	[BUG]  [BUGGY]  String  option  =  optionMap.get(selected.toString(),  selected);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  optionMap.get(selected.toString(),  selected);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionMap.get(selected.toString(),  selected);	  String    option    =    optionMap.get(selected.toString());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	7	None	replace
141	[BUG]  [BUGGY]  String  option  =  optionMap.get(selected.toString()  +  1);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  optionMap.get(selected.toString()  +  1);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionMap.get(selected.toString()  +  1);	  String    option    =    optionMap.get(selected.toString());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	7	None	replace
142	[BUG]  [BUGGY]  String  option  =  optionMap.get(selected.toString(),  selected.toString());  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                    ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  optionMap.get(selected.toString(),  selected.toString());  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionMap.get(selected.toString(),  selected.toString());	  String    option    =    optionMap.get(selected.toString());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	7	None	replace
143	[BUG]  [BUGGY]  Aleger  <  K,  V>  selected  =  option.getOpt();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]            NullPointerException      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Aleger  <  K,  V>  selected  =  option.getOpt();  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Aleger  <  K,  V>  selected  =  option.getOpt();	          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    If(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	17	None	replace
144	[BUG]  [BUGGY]  Aleger  <  N,  V>  selected  =  option.getOpt();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]              NullPointerException      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Aleger  <  N,  V>  selected  =  option.getOpt();  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Aleger  <  N,  V>  selected  =  option.getOpt();	          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    If(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	17	None	replace
145	[BUG]  [BUGGY]  Aleger  <?>  selected  =  options.get(option.getOpt());  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                NullPointerException      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Aleger  <?>  selected  =  options.get(option.getOpt());  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Aleger  <?>  selected  =  options.get(option.getOpt());	          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    If(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	17	None	replace
146	[BUG]  [BUGGY]  parent  ==  null  &&  parent.equals(option.getParent()))  {  throw  new  AlreadySelectedException(this,  option);  }  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  parent  ==  null  &&  parent.equals(option.getParent()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	parent  ==  null  &&  parent.equals(option.getParent()))  {  throw  new  AlreadySelectedException(this,  option);  }	  parent    ==    null    ||    parent.equals(option.getParent()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  not  a  statement	101	None	replace
147	[BUG]  [BUGGY]  parent  ==  null  ||  parent.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  parent  ==  null  ||  parent.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	parent  ==  null  ||  parent.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  parent    ==    null    ||    parent.equals(option.getParent()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  not  a  statement	101	None	replace
148	[BUG]  [BUGGY]  bucket  <  =  selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [CE]  generics  are  not  supported  in  -source  1.4  [FE]          NullPointerException      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  bucket  <  =  selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	bucket  <  =  selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  bucket    <    =    selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	87	None	replace
149	[BUG]  [BUGGY]  bucket  <  =  option.getLongOpt())  {  throw  new  AlreadySelectedException(this,  option);  }  [CE]  generics  are  not  supported  in  -source  1.4  [FE]            NullPointerException      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  bucket  <  =  option.getLongOpt())  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	bucket  <  =  option.getLongOpt())  {  throw  new  AlreadySelectedException(this,  option);  }	  bucket    <    =    selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	87	None	replace
150	[BUG]  [BUGGY]  bucket  <  =  selected.equals(option.getColumnOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [CE]  generics  are  not  supported  in  -source  1.4  [FE]              NullPointerException      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  bucket  <  =  selected.equals(option.getColumnOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	bucket  <  =  selected.equals(option.getColumnOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  bucket    <    =    selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	87	None	replace
151	[BUG]  [BUGGY]  String  option  =  option.getValue();  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]              ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  option.getValue();  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  option.getValue();	  String    option    =    option.getKey();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	88	None	replace
152	[BUG]  [BUGGY]  String  option  =  selected.getKey();  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  selected.getKey();  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  selected.getKey();	  String    option    =    option.getKey();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	88	None	replace
153	[BUG]  [BUGGY]  String  option  =  option.getSelected();  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  option.getSelected();  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  option.getSelected();	  String    option    =    option.getKey();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	88	None	replace
154	[BUG]  [BUGGY]  selected  =  option.getItemCount()  /  1;  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected  =  option.getItemCount()  /  1;  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  option.getItemCount()  /  1;	  selected    =    option.getItemCount()    +    1;    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
155	[BUG]  [BUGGY]  selected  =  options.getItemCount()  +  1;  [CE]  cannot  find  symbol  options  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected  =  options.getItemCount()  +  1;  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  options.getItemCount()  +  1;	  selected    =    option.getItemCount()    +    1;    	non-compiled	[CE]  cannot  find  symbol  options	26	None	replace
156	[BUG]  [BUGGY]  String  option  =  selected.getSelectedOption();  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  selected.getSelectedOption();  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  selected.getSelectedOption();	  String    option    =    option.getSelectedOption();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	2	None	replace
157	[BUG]  [BUGGY]  String  option  =  option.getSelectedOption(),  selected);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  option.getSelectedOption(),  selected);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  option.getSelectedOption(),  selected);	  String    option    =    option.getSelectedOption();    	non-compiled	[CE]  ';'  expected	2	None	replace
158	[BUG]  [BUGGY]  parent  ==  null  &&  selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  [CE]  not  a  statement  [FE]            ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  parent  ==  null  &&  selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	parent  ==  null  &&  selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);	  parent    ==    null    ||    selected.equals(option.getOpt()))    {    throw    new    AlreadySelectedException(this,    option);    	non-compiled	[CE]  not  a  statement	91	None	replace
159	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected    =    option.getLongOpt();    selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	selected        =        option.getLongOpt();        selected    =    option.getLongOpt();    selected  =  option.getLongOpt();  selected  =  option.getLongOpt();	  	compilable	  [FE]  ComparisonFailure  	18	3	add
160	[BUG]  [BUGGY]  selected    =    option.getLongOpt();    selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected    =    option.getLongOpt();    selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected        =        option.getLongOpt();        selected    =    option.getLongOpt();    selected  =  option.getLongOpt();  selected  =  option.getLongOpt();	  	compilable	  [FE]  ComparisonFailure  	18	3	add
161	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected    =    option.getLongOpt();    selected  =  option.getLongOpt();  if(selected  ==  null)  {  selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	selected        =        option.getLongOpt();        selected    =    option.getLongOpt();    if(selected  ==  null)  {  selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  }	  	compilable	  [FE]  ComparisonFailure  	18	3	add
162	[BUG]  [BUGGY]  selected    =    option.getLongOpt();    selected  =  option.getLongOpt();  if(selected  ==  null)  {  selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected    =    option.getLongOpt();    selected  =  option.getLongOpt();  if(selected  ==  null)  {  selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected        =        option.getLongOpt();        selected    =    option.getLongOpt();    if(selected  ==  null)  {  selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  }	  	compilable	  [FE]  ComparisonFailure  	18	3	add
163	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected    =    option.getLongOpt();    selected  =  option.getLongOpt();  String  selected  =  option.getOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	selected        =        option.getLongOpt();        selected    =    option.getLongOpt();    String  selected  =  option.getOpt();	  	compilable	  [FE]  ComparisonFailure  	18	3	add
164	[BUG]  [BUGGY]  selected    =    option.getLongOpt();    selected  =  option.getLongOpt();  String  selected  =  option.getOpt();  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected    =    option.getLongOpt();    selected  =  option.getLongOpt();  String  selected  =  option.getOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected        =        option.getLongOpt();        selected    =    option.getLongOpt();    String  selected  =  option.getOpt();	  	compilable	  [FE]  ComparisonFailure  	18	3	add
165	[BUG]  [BUGGY]  selected    =    option.getLongOpt();    selected  =  option.getLongOpt();  selection  =  option.getLongOpt();  selected  =  option.getLongOpt();  [CE]  cannot  find  symbol  selection  [FE]          ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected    =    option.getLongOpt();    selected  =  option.getLongOpt();  selection  =  option.getLongOpt();  selected  =  option.getLongOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected        =        option.getLongOpt();        selected    =    option.getLongOpt();    selection  =  option.getLongOpt();  selected  =  option.getLongOpt();	  	non-compiled	[CE]  cannot  find  symbol  selection	18	None	add
166	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected    =    option.getLongOpt();    selected  =  option.getLongOpt();  String  selected  =  option.getLongOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	selected        =        option.getLongOpt();        selected    =    option.getLongOpt();    String  selected  =  option.getLongOpt();	  	compilable	  [FE]  ComparisonFailure  	18	3	add
167	[BUG]  [BUGGY]  selected    =    option.getLongOpt();    selected  =  option.getLongOpt();  String  selected  =  option.getLongOpt();  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected    =    option.getLongOpt();    selected  =  option.getLongOpt();  String  selected  =  option.getLongOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected        =        option.getLongOpt();        selected    =    option.getLongOpt();    String  selected  =  option.getLongOpt();	  	compilable	  [FE]  ComparisonFailure  	18	3	add
168	[BUG]  [BUGGY]  select  =  option.getOpt();  [CE]  cannot  find  symbol  select  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  select  =  option.getOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	select  =  option.getOpt();	  select    =    option.getName();    	non-compiled	[CE]  cannot  find  symbol  select	67	None	replace
169	[BUG]  [BUGGY]  selection  =  optionMap.getItem(selected);  [CE]  cannot  find  symbol  selection  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selection  =  optionMap.getItem(selected);  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selection  =  optionMap.getItem(selected);	  selection    =    option.getItem(selected);    	non-compiled	[CE]  cannot  find  symbol  selection	50	None	replace
170	[BUG]  [BUGGY]  selection  =  option.getItem(option.getOpt());  [CE]  cannot  find  symbol  selection  [FE]                    ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selection  =  option.getItem(option.getOpt());  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selection  =  option.getItem(option.getOpt());	  selection    =    option.getItem(selected);    	non-compiled	[CE]  cannot  find  symbol  selection	50	None	replace
171	[BUG]  [BUGGY]  selection  =  option.getItem(required);  [CE]  cannot  find  symbol  selection  [FE]                      ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selection  =  option.getItem(required);  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selection  =  option.getItem(required);	  selection    =    option.getItem(selected);    	non-compiled	[CE]  cannot  find  symbol  selection	50	None	replace
172	[BUG]  [BUGGY]  String  option  =  selected.getText()  + "n ";  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  selected.getText()  + "n ";  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  selected.getText()  + "n ";	  String    option    =    selected.getText();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	51	None	replace
173	[BUG]  [BUGGY]  String  option  =  selected.getText().trim();  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                    ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  selected.getText().trim();  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  selected.getText().trim();	  String    option    =    selected.getText();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	51	None	replace
174	[BUG]  [BUGGY]  String  option  =  selected.getText()  + ": ";  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                      ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  selected.getText()  + ": ";  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  selected.getText()  + ": ";	  String    option    =    selected.getText();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	51	None	replace
175	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  option.setLongOpt(option.getLongOpt());  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	option.setLongOpt(option.getLongOpt());	  aleger.setLongOpt(option.getLongOpt());    	compilable	  [FE]  ComparisonFailure  	39	6	replace
176	[BUG]  [BUGGY]  option.setLongOpt(option.getLongOpt());  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  option.setLongOpt(option.getLongOpt());  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	option.setLongOpt(option.getLongOpt());	  aleger.setLongOpt(option.getLongOpt());    	compilable	  [FE]  ComparisonFailure  	39	6	replace
177	[BUG]  [BUGGY]  selector.setLongOpt(option.getLongOpt());  [CE]  cannot  find  symbol  selector  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selector.setLongOpt(option.getLongOpt());  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selector.setLongOpt(option.getLongOpt());	  aleger.setLongOpt(option.getLongOpt());    	non-compiled	[CE]  cannot  find  symbol  selector	39	None	replace
178	[BUG]  [BUGGY]  String  option  =  selected.getText()  +  option.toString();  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                      ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  selected.getText()  +  option.toString();  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  selected.getText()  +  option.toString();	  String    option    =    option.getText()    +    selected.toString();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	53	None	replace
179	[BUG]  [BUGGY]  String  option  =  selection.getText()  +  selected.toString();  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                        ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  selection.getText()  +  selected.toString();  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  selection.getText()  +  selected.toString();	  String    option    =    option.getText()    +    selected.toString();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	53	None	replace
180	[BUG]  [BUGGY]  String  option  =  selected.getText()  +  options.toString();  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                          ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  selected.getText()  +  options.toString();  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  selected.getText()  +  options.toString();	  String    option    =    option.getText()    +    selected.toString();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	53	None	replace
181	[BUG]  [BUGGY]  String  option  =  options.getText()  +  selected.toString();  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                            ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  options.getText()  +  selected.toString();  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  options.getText()  +  selected.toString();	  String    option    =    option.getText()    +    selected.toString();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	53	None	replace
182	[BUG]  [BUGGY]  Option  option  =  optionMap.get(selected,  selected);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]              ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =  optionMap.get(selected,  selected);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =  optionMap.get(selected,  selected);	  Option    option    =    optionMap.get(selected,    required);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	35	None	replace
183	[BUG]  [BUGGY]  Option  option  =  optionMap.get(selected,  selected,  required);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =  optionMap.get(selected,  selected,  required);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =  optionMap.get(selected,  selected,  required);	  Option    option    =    optionMap.get(selected,    required);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	35	None	replace
184	[BUG]  [BUGGY]  Option  option  =  optionMap.get(required,  selected);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =  optionMap.get(required,  selected);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =  optionMap.get(required,  selected);	  Option    option    =    optionMap.get(selected,    required);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	35	None	replace
185	[BUG]  [BUGGY]  Option  option  =  optionMap.get(selected,  null);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                    ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =  optionMap.get(selected,  null);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =  optionMap.get(selected,  null);	  Option    option    =    optionMap.get(selected,    required);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	35	None	replace
186	[BUG]  [BUGGY]  parent  ==  null  &&  selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  parent  ==  null  &&  selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	parent  ==  null  &&  selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  parent    ==    null    ||    selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  not  a  statement	93	None	replace
187	[BUG]  [BUGGY]  selection  =  option.getLongOpt();  [CE]  cannot  find  symbol  selection  [FE]              ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selection  =  option.getLongOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selection  =  option.getLongOpt();	  selected    =    option.getLongOpt();    selection    =    option.getLongOpt();    	non-compiled	[CE]  cannot  find  symbol  selection	24	None	replace
188	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  this.selected  =  option.getLongOpt();  this.selected  =  option.getLongOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	this.selected  =  option.getLongOpt();  this.selected  =  option.getLongOpt();	  selected    =    option.getLongOpt();    selection    =    option.getLongOpt();    	compilable	  [FE]  ComparisonFailure  	24	3	replace
189	[BUG]  [BUGGY]  this.selected  =  option.getLongOpt();  this.selected  =  option.getLongOpt();  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  this.selected  =  option.getLongOpt();  this.selected  =  option.getLongOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	this.selected  =  option.getLongOpt();  this.selected  =  option.getLongOpt();	  selected    =    option.getLongOpt();    selection    =    option.getLongOpt();    	compilable	  [FE]  ComparisonFailure  	24	3	replace
190	[BUG]  [BUGGY]  Option  option  =(Option)required.get(selected);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]              ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =(Option)required.get(selected);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =(Option)required.get(selected);	  Option    option    =(Option)optionMap.get(selected,    required);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	32	None	replace
191	[BUG]  [BUGGY]  Option  option  =(Option)requiredMap.get(selected,  option);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =(Option)requiredMap.get(selected,  option);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =(Option)requiredMap.get(selected,  option);	  Option    option    =(Option)optionMap.get(selected,    required);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	32	None	replace
192	[BUG]  [BUGGY]  Option  option  =(Option)optionMap.get(selected,  selected);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =(Option)optionMap.get(selected,  selected);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =(Option)optionMap.get(selected,  selected);	  Option    option    =(Option)optionMap.get(selected,    required);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	32	None	replace
193	[BUG]  [BUGGY]  String  selected  =  option.getText();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  selected  =  option.getText();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  selected  =  option.getText();	  String    selected    =    option.getString();    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
194	[BUG]  [BUGGY]  String  selected  =  option.getSelectedString();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  selected  =  option.getSelectedString();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  selected  =  option.getSelectedString();	  String    selected    =    option.getString();    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
195	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                    ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  selected  =  option.getKey();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	String  selected  =  option.getKey();	  String    selected    =    option.getString();    	compilable	  [FE]  ComparisonFailure  	62	6	replace
196	[BUG]  [BUGGY]  String  selected  =  option.getKey();  [FE]  ComparisonFailure  [FE]                    ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  selected  =  option.getKey();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  selected  =  option.getKey();	  String    selected    =    option.getString();    	compilable	  [FE]  ComparisonFailure  	62	6	replace
197	[BUG]  [BUGGY]  selected  =  this.optionMap.getSelected();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected  =  this.optionMap.getSelected();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  this.optionMap.getSelected();	  selected    =    options.getSelected();    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
198	[BUG]  [BUGGY]  bucket!=  null  ||  selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  [CE]  not  a  statement  [FE]              NullPointerException      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  bucket!=  null  ||  selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	bucket!=  null  ||  selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);	  bucket!=    null    &&    selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    	non-compiled	[CE]  not  a  statement	45	None	replace
199	[BUG]  [BUGGY]  bucket!=  null  &&  selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  [CE]  not  a  statement  [FE]                NullPointerException      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  bucket!=  null  &&  selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	bucket!=  null  &&  selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);	  bucket!=    null    &&    selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    	non-compiled	[CE]  not  a  statement	45	None	replace
200	[BUG]  [BUGGY]  bucket!=  null  &&  selected.equals(option.getKey()))  {  throw  new  AlreadySelectedException(this,  option);  [CE]  not  a  statement  [FE]                  NullPointerException      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  bucket!=  null  &&  selected.equals(option.getKey()))  {  throw  new  AlreadySelectedException(this,  option);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	bucket!=  null  &&  selected.equals(option.getKey()))  {  throw  new  AlreadySelectedException(this,  option);	  bucket!=    null    &&    selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    	non-compiled	[CE]  not  a  statement	45	None	replace
201	[BUG]  [BUGGY]  selected  =  selection.getString();  [CE]  cannot  find  symbol  selection  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected  =  selection.getString();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  selection.getString();	  selected    =    options.getString();    	non-compiled	[CE]  cannot  find  symbol  selection	63	None	replace
202	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(selected!=  null)  {  selected  =  option.getLongOpt();  String  opt  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	if(selected!=  null)  {  selected  =  option.getLongOpt();  String  opt  =  option.getLongOpt();  }	  selected    =    option.getLongOpt();    String    opt    =    option.getLongOpt();    	compilable	  [FE]  ComparisonFailure  	82	6	replace
203	[BUG]  [BUGGY]  if(selected!=  null)  {  selected  =  option.getLongOpt();  String  opt  =  option.getLongOpt();  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(selected!=  null)  {  selected  =  option.getLongOpt();  String  opt  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	if(selected!=  null)  {  selected  =  option.getLongOpt();  String  opt  =  option.getLongOpt();  }	  selected    =    option.getLongOpt();    String    opt    =    option.getLongOpt();    	compilable	  [FE]  ComparisonFailure  	82	6	replace
204	[BUG]  [BUGGY]  if(selected!=  null)  {  selected  =  option.getLongOpt();  opt  =  option.getLongOpt();  }  [CE]  cannot  find  symbol  opt  [FE]      ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(selected!=  null)  {  selected  =  option.getLongOpt();  opt  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	if(selected!=  null)  {  selected  =  option.getLongOpt();  opt  =  option.getLongOpt();  }	  selected    =    option.getLongOpt();    String    opt    =    option.getLongOpt();    	non-compiled	[CE]  cannot  find  symbol  opt	82	None	replace
205	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  opt  =  option.getOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	String  opt  =  option.getOpt();	  selected    =    option.getLongOpt();    String    opt    =    option.getLongOpt();    	compilable	  [FE]  ComparisonFailure  	82	6	replace
206	[BUG]  [BUGGY]  String  opt  =  option.getOpt();  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  opt  =  option.getOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  opt  =  option.getOpt();	  selected    =    option.getLongOpt();    String    opt    =    option.getLongOpt();    	compilable	  [FE]  ComparisonFailure  	82	6	replace
207	[BUG]  [BUGGY]  option  =  option.getLongOpt();  [CE]  incompatible  types  [FE]        ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  option  =  option.getLongOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	option  =  option.getLongOpt();	  selected    =    option.getLongOpt();    option    =    option.getLongOpt();    	non-compiled	[CE]  incompatible  types	102	None	replace
208	[BUG]  [BUGGY]  if(option.getOpt()!=  null)  {  selected  =  option.getLongOpt();  option  =  option.getLongOpt();  }  [CE]  incompatible  types  [FE]          ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(option.getOpt()!=  null)  {  selected  =  option.getLongOpt();  option  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	if(option.getOpt()!=  null)  {  selected  =  option.getLongOpt();  option  =  option.getLongOpt();  }	  selected    =    option.getLongOpt();    option    =    option.getLongOpt();    	non-compiled	[CE]  incompatible  types	102	None	replace
209	[BUG]  [BUGGY]  if(option.getOpt()  ==  null)  {  selected  =  option.getLongOpt();  option  =  option.getLongOpt();  }  [CE]  incompatible  types  [FE]            ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(option.getOpt()  ==  null)  {  selected  =  option.getLongOpt();  option  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	if(option.getOpt()  ==  null)  {  selected  =  option.getLongOpt();  option  =  option.getLongOpt();  }	  selected    =    option.getLongOpt();    option    =    option.getLongOpt();    	non-compiled	[CE]  incompatible  types	102	None	replace
210	[BUG]  [BUGGY]  parent  ==  null  &&  selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  parent  ==  null  &&  selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	parent  ==  null  &&  selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  parent    ==    null    ||    selected.equals(option.getOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  not  a  statement	94	None	replace
211	[BUG]  [BUGGY]  parent  ==  null  &&  parent.equals(option.getParent()))  {  throw  new  AlreadySelectedException(this,  option);  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  parent  ==  null  &&  parent.equals(option.getParent()))  {  throw  new  AlreadySelectedException(this,  option);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	parent  ==  null  &&  parent.equals(option.getParent()))  {  throw  new  AlreadySelectedException(this,  option);	  parent    ==    null    ||    parent.equals(option.getParent()))    {    throw    new    AlreadySelectedException(this,    option);    	non-compiled	[CE]  not  a  statement	100	None	replace
212	[BUG]  [BUGGY]  parent  ==  null  ||  parent.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  parent  ==  null  ||  parent.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	parent  ==  null  ||  parent.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);	  parent    ==    null    ||    parent.equals(option.getParent()))    {    throw    new    AlreadySelectedException(this,    option);    	non-compiled	[CE]  not  a  statement	100	None	replace
213	[BUG]  [BUGGY]  aleger.equals(option.getKey()))  {  throw  new  AlreadySelectedException(this,  option);  }  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  aleger.equals(option.getKey()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	aleger.equals(option.getKey()))  {  throw  new  AlreadySelectedException(this,  option);  }	  aleger.equals(option.getOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  ';'  expected	72	None	replace
214	[BUG]  [BUGGY]  aleger.equals(option.getName()))  {  throw  new  AlreadySelectedException(this,  option);  }  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  aleger.equals(option.getName()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	aleger.equals(option.getName()))  {  throw  new  AlreadySelectedException(this,  option);  }	  aleger.equals(option.getOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  ';'  expected	72	None	replace
215	[BUG]  [BUGGY]  aleger.equals(option.getImmediateParent()))  {  throw  new  AlreadySelectedException(this,  option);  }  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  aleger.equals(option.getImmediateParent()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	aleger.equals(option.getImmediateParent()))  {  throw  new  AlreadySelectedException(this,  option);  }	  aleger.equals(option.getOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  ';'  expected	72	None	replace
216	[BUG]  [BUGGY]  Option  option  =  optionMap.get(selected,  selected  +  1);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =  optionMap.get(selected,  selected  +  1);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =  optionMap.get(selected,  selected  +  1);	  Option    option    =    optionMap.get(selected    +    1);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	36	None	replace
217	[BUG]  [BUGGY]  Option  option  =  optionMap.get(selected.getOpt()  +  1);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =  optionMap.get(selected.getOpt()  +  1);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =  optionMap.get(selected.getOpt()  +  1);	  Option    option    =    optionMap.get(selected    +    1);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	36	None	replace
218	[BUG]  [BUGGY]  Option  option  =  optionMap.get(selected.length  +  1);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                    ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =  optionMap.get(selected.length  +  1);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =  optionMap.get(selected.length  +  1);	  Option    option    =    optionMap.get(selected    +    1);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	36	None	replace
219	[BUG]  [BUGGY]  String  option  =  optionMap.get(selected.getOpt());  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  optionMap.get(selected.getOpt());  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionMap.get(selected.getOpt());	  String    option    =    optionMap.get(option.getOpt());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	68	None	replace
220	[BUG]  [BUGGY]  String  option  =  optionMap.get(option.getOpt(),  selected);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  optionMap.get(option.getOpt(),  selected);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionMap.get(option.getOpt(),  selected);	  String    option    =    optionMap.get(option.getOpt());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	68	None	replace
221	[BUG]  [BUGGY]  String  option  =  options.get(option.getOpt());  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                    ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  options.get(option.getOpt());  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  options.get(option.getOpt());	  String    option    =    optionMap.get(option.getOpt());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	68	None	replace
222	[BUG]  [BUGGY]  String  option  =  optionsMap.get(option.getOpt());  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                      ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  optionsMap.get(option.getOpt());  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionsMap.get(option.getOpt());	  String    option    =    optionMap.get(option.getOpt());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	68	None	replace
223	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(option.getLongOpt().equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(option.getLongOpt().equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	                if(selected.equals(option.getLongOpt()))        {        throw        new        AlreadySelectedException(this,        option);        }        if(option.getLongOpt().equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(option.getLongOpt().equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  	compilable	  [FE]  NullPointerException  	73	6	add
224	[BUG]  [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(option.getLongOpt().equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(option.getLongOpt().equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(option.getLongOpt().equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(option.getLongOpt().equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	                if(selected.equals(option.getLongOpt()))        {        throw        new        AlreadySelectedException(this,        option);        }        if(option.getLongOpt().equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(option.getLongOpt().equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  	compilable	  [FE]  NullPointerException  	73	6	add
225	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(option.getLongOpt().equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	                if(selected.equals(option.getLongOpt()))        {        throw        new        AlreadySelectedException(this,        option);        }        if(option.getLongOpt().equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  	compilable	  [FE]  NullPointerException  	73	6	add
226	[BUG]  [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(option.getLongOpt().equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(option.getLongOpt().equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	                if(selected.equals(option.getLongOpt()))        {        throw        new        AlreadySelectedException(this,        option);        }        if(option.getLongOpt().equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  	compilable	  [FE]  NullPointerException  	73	6	add
227	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(option.getLongOpt().equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(option.getLongOpt().equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	                if(selected.equals(option.getLongOpt()))        {        throw        new        AlreadySelectedException(this,        option);        }        if(option.getLongOpt().equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(option.getLongOpt().equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  	compilable	  [FE]  NullPointerException  	73	6	add
228	[BUG]  [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(option.getLongOpt().equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(option.getLongOpt().equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(option.getLongOpt().equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(option.getLongOpt().equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	                if(selected.equals(option.getLongOpt()))        {        throw        new        AlreadySelectedException(this,        option);        }        if(option.getLongOpt().equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(option.getLongOpt().equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  	compilable	  [FE]  NullPointerException  	73	6	add
229	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(option.getLongOpt().equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	                if(selected.equals(option.getLongOpt()))        {        throw        new        AlreadySelectedException(this,        option);        }        if(option.getLongOpt().equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  	compilable	  [FE]  NullPointerException  	73	6	add
230	[BUG]  [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(option.getLongOpt().equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(option.getLongOpt().equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	                if(selected.equals(option.getLongOpt()))        {        throw        new        AlreadySelectedException(this,        option);        }        if(option.getLongOpt().equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  	compilable	  [FE]  NullPointerException  	73	6	add
231	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(option.getLongOpt().equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(option.getOpt().equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	                if(selected.equals(option.getLongOpt()))        {        throw        new        AlreadySelectedException(this,        option);        }        if(option.getLongOpt().equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(option.getOpt().equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  	compilable	  [FE]  NullPointerException  	73	6	add
232	[BUG]  [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(option.getLongOpt().equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(option.getOpt().equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(option.getLongOpt().equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(option.getOpt().equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	                if(selected.equals(option.getLongOpt()))        {        throw        new        AlreadySelectedException(this,        option);        }        if(option.getLongOpt().equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(option.getOpt().equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  	compilable	  [FE]  NullPointerException  	73	6	add
233	[BUG]  [BUGGY]  selected  =  options.getShortOpt();  [CE]  cannot  find  symbol  options  [FE]        ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected  =  options.getShortOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  options.getShortOpt();	  selected    =    option.getShortOpt();    	non-compiled	[CE]  cannot  find  symbol  options	77	None	replace
234	[BUG]  [BUGGY]  selected  =  optionMap.getShortOpt();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected  =  optionMap.getShortOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  optionMap.getShortOpt();	  selected    =    option.getShortOpt();    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
235	[BUG]  [BUGGY]  this.selected  =  option.getSelected();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  this.selected  =  option.getSelected();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	this.selected  =  option.getSelected();	  select    =    option.getSelected();    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
236	[BUG]  [BUGGY]  Aleger  <?>  selected  =  option.getSelected();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]              ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Aleger  <?>  selected  =  option.getSelected();  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Aleger  <?>  selected  =  option.getSelected();	  Aleger    <?>    selected    =    option.getOpt();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	38	None	replace
237	[BUG]  [BUGGY]  Aleger  <?>  selected  =  option.getKey();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Aleger  <?>  selected  =  option.getKey();  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Aleger  <?>  selected  =  option.getKey();	  Aleger    <?>    selected    =    option.getOpt();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	38	None	replace
238	[BUG]  [BUGGY]  Aleger  <?>  selected  =  option.getValue();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Aleger  <?>  selected  =  option.getValue();  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Aleger  <?>  selected  =  option.getValue();	  Aleger    <?>    selected    =    option.getOpt();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	38	None	replace
239	[BUG]  [BUGGY]  String  option  =  selected.getText()  + ": "  +  option;  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  selected.getText()  + ": "  +  option;  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  selected.getText()  + ": "  +  option;	  String    option    =    option.getText()    +   ":   "    +    selected;    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	89	None	replace
240	[BUG]  [BUGGY]  String  option  =  selected.getText()  + ".: "  +  option;  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                    ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  selected.getText()  + ".: "  +  option;  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  selected.getText()  + ".: "  +  option;	  String    option    =    option.getText()    +   ":   "    +    selected;    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	89	None	replace
241	[BUG]  [BUGGY]  String  option  =  selected.getItem(option,  selected);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]              ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  selected.getItem(option,  selected);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  selected.getItem(option,  selected);	  String    option    =    option.getItem(selected,    selected);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	4	None	replace
242	[BUG]  [BUGGY]  String  option  =  option.getItem(selected,  selected.toString());  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  option.getItem(selected,  selected.toString());  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  option.getItem(selected,  selected.toString());	  String    option    =    option.getItem(selected,    selected);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	4	None	replace
243	[BUG]  [BUGGY]  selected    =    option.getLongOpt();    String  selected  =  option.getLongOpt();  String  selected  =  option.getLongOpt();  [CE]  variable  selected  is  already  defined  in  method  setSelected(Option)  [FE]    ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected    =    option.getLongOpt();    String  selected  =  option.getLongOpt();  String  selected  =  option.getLongOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected        =        option.getLongOpt();        String    selected    =    option.getLongOpt();    String  selected  =  option.getLongOpt();	  	non-compiled	[CE]  variable  selected  is  already  defined  in  method  setSelected(Option)	20	None	add
244	[BUG]  [BUGGY]  selected    =    option.getLongOpt();    String  selected  =  option.getLongOpt();  String  selected  =  option.getOpt();  [CE]  variable  selected  is  already  defined  in  method  setSelected(Option)  [FE]      ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected    =    option.getLongOpt();    String  selected  =  option.getLongOpt();  String  selected  =  option.getOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected        =        option.getLongOpt();        String    selected    =    option.getLongOpt();    String  selected  =  option.getOpt();	  	non-compiled	[CE]  variable  selected  is  already  defined  in  method  setSelected(Option)	20	None	add
245	[BUG]  [BUGGY]  selected    =    option.getLongOpt();    String  selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  String  selected  =  option.getLongOpt();  [CE]  variable  selected  is  already  defined  in  method  setSelected(Option)  [FE]        ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected    =    option.getLongOpt();    String  selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  String  selected  =  option.getLongOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected        =        option.getLongOpt();        String    selected    =    option.getLongOpt();    selected  =  option.getLongOpt();  String  selected  =  option.getLongOpt();	  	non-compiled	[CE]  variable  selected  is  already  defined  in  method  setSelected(Option)	20	None	add
246	[BUG]  [BUGGY]  selected    =    option.getLongOpt();    String  selected  =  option.getLongOpt();  String  selected  =  option.getUpperOpt();  [CE]  variable  selected  is  already  defined  in  method  setSelected(Option)  [FE]          ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected    =    option.getLongOpt();    String  selected  =  option.getLongOpt();  String  selected  =  option.getUpperOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected        =        option.getLongOpt();        String    selected    =    option.getLongOpt();    String  selected  =  option.getUpperOpt();	  	non-compiled	[CE]  variable  selected  is  already  defined  in  method  setSelected(Option)	20	None	add
247	[BUG]  [BUGGY]  selected    =    option.getLongOpt();    String  selected  =  option.getLongOpt();  String  selected  =  option.getLongOpt();  String  selected  =  option.getLongOpt();  [CE]  variable  selected  is  already  defined  in  method  setSelected(Option)  [FE]            ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected    =    option.getLongOpt();    String  selected  =  option.getLongOpt();  String  selected  =  option.getLongOpt();  String  selected  =  option.getLongOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected        =        option.getLongOpt();        String    selected    =    option.getLongOpt();    String  selected  =  option.getLongOpt();  String  selected  =  option.getLongOpt();	  	non-compiled	[CE]  variable  selected  is  already  defined  in  method  setSelected(Option)	20	None	add
248	[BUG]  [BUGGY]  bucket  ==  null  ||  selected.equals(option.getKey()))  {  throw  new  AlreadySelectedException(this,  option);  }  [CE]  not  a  statement  [FE]        NullPointerException      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  bucket  ==  null  ||  selected.equals(option.getKey()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	bucket  ==  null  ||  selected.equals(option.getKey()))  {  throw  new  AlreadySelectedException(this,  option);  }	  bucket    ==    null    ||    selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  not  a  statement	86	None	replace
249	[BUG]  [BUGGY]  String  option  =  option.getName();  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  option.getName();  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  option.getName();	  String    option    =    option.getOptionName();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	47	None	replace
250	[BUG]  [BUGGY]  String  option  =  option.getSelectedOptionName();  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  option.getSelectedOptionName();  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  option.getSelectedOptionName();	  String    option    =    option.getOptionName();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	47	None	replace
251	[BUG]  [BUGGY]  select  =  option.getItem(option.getOpt());  [CE]  cannot  find  symbol  select  [FE]              ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  select  =  option.getItem(option.getOpt());  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	select  =  option.getItem(option.getOpt());	  select    =    option.getItem(selected);    	non-compiled	[CE]  cannot  find  symbol  select	65	None	replace
252	[BUG]  [BUGGY]  select  =  option.getItem(this);  [CE]  cannot  find  symbol  select  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  select  =  option.getItem(this);  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	select  =  option.getItem(this);	  select    =    option.getItem(selected);    	non-compiled	[CE]  cannot  find  symbol  select	65	None	replace
253	[BUG]  [BUGGY]  selected  =  optionMap.getItem(option.getOpt());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected  =  optionMap.getItem(option.getOpt());  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  optionMap.getItem(option.getOpt());	  selected    =    optionMap.getItem(selected);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
254	[BUG]  [BUGGY]  String  option  =  option.getText()  + "= ";  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  option.getText()  + "= ";  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  option.getText()  + "= ";	  String    option    =    option.getText()    +   "n   ";    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	78	None	replace
255	[BUG]  [BUGGY]  String  option  =  option.getText()  + ": ";  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                    ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  option.getText()  + ": ";  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  option.getText()  + ": ";	  String    option    =    option.getText()    +   "n   ";    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	78	None	replace
256	[BUG]  [BUGGY]  String  option  =  option.getText()  + "  - ";  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                      ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  option.getText()  + "  - ";  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  option.getText()  + "  - ";	  String    option    =    option.getText()    +   "n   ";    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	78	None	replace
257	[BUG]  [BUGGY]  Option  option  =(Option)optionMap.get(selected.toLowerCase(),  required);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]            ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =(Option)optionMap.get(selected.toLowerCase(),  required);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =(Option)optionMap.get(selected.toLowerCase(),  required);	  Option    option    =(Option)optionMap.get(selected.toLowerCase());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	83	None	replace
258	[BUG]  [BUGGY]  Option  option  =(Option)optionMap.get(selected.toLowerCase(),  selected.toLowerCase());  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]              ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =(Option)optionMap.get(selected.toLowerCase(),  selected.toLowerCase());  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =(Option)optionMap.get(selected.toLowerCase(),  selected.toLowerCase());	  Option    option    =(Option)optionMap.get(selected.toLowerCase());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	83	None	replace
259	[BUG]  [BUGGY]  String  option  =  optionMap.get(selected.opt(),  selected);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  optionMap.get(selected.opt(),  selected);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionMap.get(selected.opt(),  selected);	  String    option    =    optionMap.get(selected.opt());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	96	None	replace
260	[BUG]  [BUGGY]  String  option  =  optionMap.get(selected.opt()  +  1);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  optionMap.get(selected.opt()  +  1);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionMap.get(selected.opt()  +  1);	  String    option    =    optionMap.get(selected.opt());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	96	None	replace
261	[BUG]  [BUGGY]  String  option  =  optionMap.get(option.opt());  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                    ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  optionMap.get(option.opt());  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionMap.get(option.opt());	  String    option    =    optionMap.get(selected.opt());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	96	None	replace
262	[BUG]  [BUGGY]  String  option  =  optionMap.get(option.opt(),  selected);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                      ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  optionMap.get(option.opt(),  selected);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionMap.get(option.opt(),  selected);	  String    option    =    optionMap.get(selected.opt());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	96	None	replace
263	[BUG]  [BUGGY]  String  option  =  selected.getOption(),  required);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  selected.getOption(),  required);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  selected.getOption(),  required);	  String    option    =    selected.getOption();    	non-compiled	[CE]  ';'  expected	1	None	replace
264	[BUG]  [BUGGY]  selected  =  optionMap.get(selected.getName());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected  =  optionMap.get(selected.getName());  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  optionMap.get(selected.getName());	  selected    =    optionMap.get(option.getName());    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
265	[BUG]  [BUGGY]  selected  =  options.get(option.getName());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected  =  options.get(option.getName());  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  options.get(option.getName());	  selected    =    optionMap.get(option.getName());    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
266	[BUG]  [BUGGY]  selected  =  optionMap.get(option.getOpt());  [CE]  incompatible  types  [FE]                    ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected  =  optionMap.get(option.getOpt());  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  optionMap.get(option.getOpt());	  selected    =    optionMap.get(option.getName());    	non-compiled	[CE]  incompatible  types	90	None	replace
267	[BUG]  [BUGGY]  String  option  =  optionsMap.get(selected.toString());  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  optionsMap.get(selected.toString());  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionsMap.get(selected.toString());	  String    option    =    optionsMap.get(selected);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	69	None	replace
268	[BUG]  [BUGGY]  String  option  =  optionsMap.get(selected.toLowerCase());  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                    ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  optionsMap.get(selected.toLowerCase());  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionsMap.get(selected.toLowerCase());	  String    option    =    optionsMap.get(selected);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	69	None	replace
269	[BUG]  [BUGGY]  String  option  =  optionsMap.get(selected,  required);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                      ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  optionsMap.get(selected,  required);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionsMap.get(selected,  required);	  String    option    =    optionsMap.get(selected);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	69	None	replace
270	[BUG]  [BUGGY]  String  option  =  optionsMap.get(selected  +  1);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                        ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  optionsMap.get(selected  +  1);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionsMap.get(selected  +  1);	  String    option    =    optionsMap.get(selected);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	69	None	replace
271	[BUG]  [BUGGY]  Option  option  =  optionMap.get(selected.getLongOpt());  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]              ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =  optionMap.get(selected.getLongOpt());  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =  optionMap.get(selected.getLongOpt());	  Option    option    =    optionMap.get(option.getLongOpt());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	76	None	replace
272	[BUG]  [BUGGY]  Option  option  =  optionsMap.get(selected.getLongOpt());  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =  optionsMap.get(selected.getLongOpt());  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =  optionsMap.get(selected.getLongOpt());	  Option    option    =    optionMap.get(option.getLongOpt());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	76	None	replace
273	[BUG]  [BUGGY]  Option  option  =  options.get(option.getLongOpt());  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =  options.get(option.getLongOpt());  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =  options.get(option.getLongOpt());	  Option    option    =    optionMap.get(option.getLongOpt());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	76	None	replace
274	[BUG]  [BUGGY]  selected  =  optionMap.getName(option.getOpt());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected  =  optionMap.getName(option.getOpt());  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  optionMap.getName(option.getOpt());	  selected    =    optionMap.getName();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
275	[BUG]  [BUGGY]  if(selected.equals(option.getOpt()))  {  selected  =  option.getLongOpt();  if(selected  ==  null)  {  selected  =  option.getLongOpt();  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(selected.equals(option.getOpt()))  {  selected  =  option.getLongOpt();  if(selected  ==  null)  {  selected  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	if(selected.equals(option.getOpt()))  {  selected  =  option.getLongOpt();  if(selected  ==  null)  {  selected  =  option.getLongOpt();  }	  selected    =    option.getLongOpt();    if(selected    ==    null)    {    selected    =    option.getLongOpt();    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
276	[BUG]  [BUGGY]  if(selected.equals(option.getOpt()))  {  selected  =  option.getLongOpt();  if(selected!=  null)  {  selected  =  option.getLongOpt();  }  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(selected.equals(option.getOpt()))  {  selected  =  option.getLongOpt();  if(selected!=  null)  {  selected  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	if(selected.equals(option.getOpt()))  {  selected  =  option.getLongOpt();  if(selected!=  null)  {  selected  =  option.getLongOpt();  }	  selected    =    option.getLongOpt();    if(selected    ==    null)    {    selected    =    option.getLongOpt();    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
277	[BUG]  [BUGGY]  if(option.getOpt()!=  null)  {  selected  =  option.getLongOpt();  if(selected  ==  null)  {  selected  =  option.getOpt();  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(option.getOpt()!=  null)  {  selected  =  option.getLongOpt();  if(selected  ==  null)  {  selected  =  option.getOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	if(option.getOpt()!=  null)  {  selected  =  option.getLongOpt();  if(selected  ==  null)  {  selected  =  option.getOpt();  }	  selected    =    option.getLongOpt();    if(selected    ==    null)    {    selected    =    option.getLongOpt();    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
278	[BUG]  [BUGGY]  selected  =  optionMap.getItemCount()  +  1;  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected  =  optionMap.getItemCount()  +  1;  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  optionMap.getItemCount()  +  1;	  selected    =    optionMap.getItemCount();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
279	[BUG]  [BUGGY]  String  option  =  optionMap.get(selected.opt,  selected.option);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  optionMap.get(selected.opt,  selected.option);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionMap.get(selected.opt,  selected.option);	  String    option    =    optionMap.get(selected.opt);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	97	None	replace
280	[BUG]  [BUGGY]  String  option  =  optionMap.get(selected.opt,  required);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                    ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  optionMap.get(selected.opt,  required);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionMap.get(selected.opt,  required);	  String    option    =    optionMap.get(selected.opt);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	97	None	replace
281	[BUG]  [BUGGY]  String  option  =  optionMap.get(option.opt);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                      ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  optionMap.get(option.opt);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionMap.get(option.opt);	  String    option    =    optionMap.get(selected.opt);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	97	None	replace
282	[BUG]  [BUGGY]  String  option  =  selected.getOptionName();  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                    ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  selected.getOptionName();  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  selected.getOptionName();	  String    option    =    selected.getSelectedString();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	57	None	replace
283	[BUG]  [BUGGY]  String  option  =  selected.getSelectedString()  + "n ";  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                      ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  selected.getSelectedString()  + "n ";  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  selected.getSelectedString()  + "n ";	  String    option    =    selected.getSelectedString();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	57	None	replace
284	[BUG]  [BUGGY]  String  option  =  option.getLongOpt();  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  option.getLongOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  option.getLongOpt();	  selected    =    option.getLongOpt();    String    option    =    option.getLongOpt();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	25	None	replace
285	[BUG]  [BUGGY]  if(option.getOpt()!=  null)  {  selected  =  option.getLongOpt();  String  option  =  option.getLongOpt();  }  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(option.getOpt()!=  null)  {  selected  =  option.getLongOpt();  String  option  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	if(option.getOpt()!=  null)  {  selected  =  option.getLongOpt();  String  option  =  option.getLongOpt();  }	  selected    =    option.getLongOpt();    String    option    =    option.getLongOpt();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	25	None	replace
286	[BUG]  [BUGGY]  if(option.getOpt()  ==  null)  {  selected  =  option.getLongOpt();  String  option  =  option.getLongOpt();  }  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                    ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(option.getOpt()  ==  null)  {  selected  =  option.getLongOpt();  String  option  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	if(option.getOpt()  ==  null)  {  selected  =  option.getLongOpt();  String  option  =  option.getLongOpt();  }	  selected    =    option.getLongOpt();    String    option    =    option.getLongOpt();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	25	None	replace
287	[BUG]  [BUGGY]  ettySelected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [CE]  ';'  expected  [FE]        NullPointerException      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  ettySelected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	ettySelected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(Selection.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  ';'  expected	99	None	replace
288	[BUG]  [BUGGY]  ettySelected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [CE]  ';'  expected  [FE]          NullPointerException      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  ettySelected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	ettySelected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(Selection.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  ';'  expected	99	None	replace
289	[BUG]  [BUGGY]  ettySelected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  ettySelected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	ettySelected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);	          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(Selection.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  ';'  expected	99	None	replace
290	[BUG]  [BUGGY]  ettySelected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  ettySelected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	ettySelected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);	          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(Selection.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  ';'  expected	99	None	replace
291	[BUG]  [BUGGY]  selected.setSelected(option.getOpt());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected.setSelected(option.getOpt());  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected.setSelected(option.getOpt());	  vice.setSelected(option.getOpt());    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
292	[BUG]  [BUGGY]  selector.setSelected(option.getOpt());  [CE]  cannot  find  symbol  selector  [FE]                    ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selector.setSelected(option.getOpt());  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selector.setSelected(option.getOpt());	  vice.setSelected(option.getOpt());    	non-compiled	[CE]  cannot  find  symbol  selector	40	None	replace
293	[BUG]  [BUGGY]  selection.setSelected(option.getOpt());  [CE]  cannot  find  symbol  selection  [FE]                      ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selection.setSelected(option.getOpt());  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selection.setSelected(option.getOpt());	  vice.setSelected(option.getOpt());    	non-compiled	[CE]  cannot  find  symbol  selection	40	None	replace
294	[BUG]  [BUGGY]  parent  ==  null  &&  selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  parent  ==  null  &&  selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	parent  ==  null  &&  selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);	  parent    ==    null    ||    selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    	non-compiled	[CE]  not  a  statement	92	None	replace
295	[BUG]  [BUGGY]  String  option  =  optionMap.get(selected,  selected);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                    ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  optionMap.get(selected,  selected);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionMap.get(selected,  selected);	  String    option    =    optionMap.get(selected,    required);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	9	None	replace
296	[BUG]  [BUGGY]  String  option  =  optionMap.get(required,  selected);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                      ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  optionMap.get(required,  selected);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionMap.get(required,  selected);	  String    option    =    optionMap.get(selected,    required);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	9	None	replace
297	[BUG]  [BUGGY]  String  option  =  optionMap.get(selected,  0);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                        ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  optionMap.get(selected,  0);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionMap.get(selected,  0);	  String    option    =    optionMap.get(selected,    required);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	9	None	replace
298	[BUG]  [BUGGY]  String  option  =  optionMap.get(selected,  null);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                          ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  optionMap.get(selected,  null);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionMap.get(selected,  null);	  String    option    =    optionMap.get(selected,    required);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	9	None	replace
299	[BUG]  [BUGGY]  selected  =  options.getItemCount()  -  1;  [CE]  cannot  find  symbol  options  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected  =  options.getItemCount()  -  1;  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  options.getItemCount()  -  1;	  selected    =    option.getItemCount()    -    1;    	non-compiled	[CE]  cannot  find  symbol  options	27	None	replace
300	[BUG]  [BUGGY]  selected  =  optionMap.get(selected.getSelected());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected  =  optionMap.get(selected.getSelected());  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  optionMap.get(selected.getSelected());	  selected    =    optionMap.get(option.getSelected());    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
301	[BUG]  [BUGGY]  selected  =  options.get(option.getSelected());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected  =  options.get(option.getSelected());  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  options.get(option.getSelected());	  selected    =    optionMap.get(option.getSelected());    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
302	[BUG]  [BUGGY]  String  option  =  option.getOptionKey();  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]              ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  option.getOptionKey();  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  option.getOptionKey();	  String    option    =    option.getKey();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	88	None	replace
303	[BUG]  [BUGGY]  safeNameMap.put(option.getOpt(),  null);  [CE]  cannot  find  symbol  safeNameMap  [FE]    NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  safeNameMap.put(option.getOpt(),  null);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	safeNameMap.put(option.getOpt(),  null);	          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(!selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  cannot  find  symbol  safeNameMap	16	None	replace
304	[BUG]  [BUGGY]  safeNameMap.put(option.getOpt(),  selected);  [CE]  cannot  find  symbol  safeNameMap  [FE]      NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  safeNameMap.put(option.getOpt(),  selected);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	safeNameMap.put(option.getOpt(),  selected);	          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(!selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  cannot  find  symbol  safeNameMap	16	None	replace
305	[BUG]  [BUGGY]  String  option  =  optionMap.get(option.toString());  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  optionMap.get(option.toString());  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionMap.get(option.toString());	  String    option    =    optionMap.get(selected.toString());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	7	None	replace
306	[BUG]  [BUGGY]  String  option  =  optionMap.get(selected.toString(),  options);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  optionMap.get(selected.toString(),  options);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionMap.get(selected.toString(),  options);	  String    option    =    optionMap.get(selected.toString());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	7	None	replace
307	[BUG]  [BUGGY]  Option  option  =(Option)this.optionMap.get(selected  -  1);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]            ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =(Option)this.optionMap.get(selected  -  1);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =(Option)this.optionMap.get(selected  -  1);	  Option    option    =(Option)this.optionMap.get(selected);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	31	None	replace
308	[BUG]  [BUGGY]  String  option  =  options.getOptionString();  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                      ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  options.getOptionString();  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  options.getOptionString();	  String    option    =    options.getSelectedString();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	58	None	replace
309	[BUG]  [BUGGY]  selected  =  option.getItemCount()  *  1;  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected  =  option.getItemCount()  *  1;  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  option.getItemCount()  *  1;	  selected    =    option.getItemCount()    -    1;    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
310	[BUG]  [BUGGY]  selected  =  option.getOpt();  String  option  =  option.getLongOpt();  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected  =  option.getOpt();  String  option  =  option.getLongOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  option.getOpt();  String  option  =  option.getLongOpt();	  selected    =    option.getLongOpt();    String    option    =    option.getLongOpt();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	25	None	replace
311	[BUG]  [BUGGY]  safeNameMap.put(option.getLongOpt(),  selected);  [CE]  cannot  find  symbol  safeNameMap  [FE]    NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  safeNameMap.put(option.getLongOpt(),  selected);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	safeNameMap.put(option.getLongOpt(),  selected);	          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  cannot  find  symbol  safeNameMap	14	None	replace
312	[BUG]  [BUGGY]  safeNameMap.put(option.getLongOpt(),  null);  [CE]  cannot  find  symbol  safeNameMap  [FE]      NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  safeNameMap.put(option.getLongOpt(),  null);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	safeNameMap.put(option.getLongOpt(),  null);	          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  cannot  find  symbol  safeNameMap	14	None	replace
313	[BUG]  [BUGGY]  cuplur.setSelected(option.getOpt());  [CE]  cannot  find  symbol  cuplur  [FE]        NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  cuplur.setSelected(option.getOpt());  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	cuplur.setSelected(option.getOpt());	          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  cannot  find  symbol  cuplur	14	None	replace
314	[BUG]  [BUGGY]  option  =  option.getOption();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  option  =  option.getOption();  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	option  =  option.getOption();	  Option    option    =    option.getOption();    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
315	[BUG]  [BUGGY]  bucket  ==  null  &&  selected.equals(option.getKey()))  {  throw  new  AlreadySelectedException(this,  option);  }  [CE]  not  a  statement  [FE]            NullPointerException      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  bucket  ==  null  &&  selected.equals(option.getKey()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	bucket  ==  null  &&  selected.equals(option.getKey()))  {  throw  new  AlreadySelectedException(this,  option);  }	  bucket    ==    null    &&    selected.equals(option.getOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  not  a  statement	44	None	replace
316	[BUG]  [BUGGY]  selected  =  optionsMap.getSelected();  [CE]  cannot  find  symbol  optionsMap  [FE]            ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected  =  optionsMap.getSelected();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  optionsMap.getSelected();	  selected    =    optionMap.getSelected();    	non-compiled	[CE]  cannot  find  symbol  optionsMap	54	None	replace
317	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          NullPointerException      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(selected!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	if(selected!=  null)  {  throw  new  IllegalStateException( " ");  }	  [Delete]    	compilable	  [FE]  ComparisonFailure  	71	6	replace
318	[BUG]  [BUGGY]  if(selected!=  null)  {  throw  new  IllegalStateException( " ");  }  [FE]  ComparisonFailure  [FE]          NullPointerException      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(selected!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	if(selected!=  null)  {  throw  new  IllegalStateException( " ");  }	  [Delete]    	compilable	  [FE]  ComparisonFailure  	71	6	replace
319	[BUG]  [BUGGY]  String  option  =  optionMap.get(option.getKey());  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  optionMap.get(option.getKey());  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionMap.get(option.getKey());	  String    option    =    optionMap.get(option.getOpt());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	68	None	replace
320	[BUG]  [BUGGY]  selected  =  optionsMap.get(option.getSelected());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected  =  optionsMap.get(option.getSelected());  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  optionsMap.get(option.getSelected());	  selected    =    optionMap.get(option.getSelected());    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
321	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected    =    option.getLongOpt();    if(selected  ==  null)  {  selected  =  option.getLongOpt();  }  String  selected  =  option.getOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	selected        =        option.getLongOpt();        if(selected    ==    null)    {    selected    =    option.getLongOpt();    }    String  selected  =  option.getOpt();	  	compilable	  [FE]  ComparisonFailure  	22	3	add
322	[BUG]  [BUGGY]  selected    =    option.getLongOpt();    if(selected  ==  null)  {  selected  =  option.getLongOpt();  }  String  selected  =  option.getOpt();  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected    =    option.getLongOpt();    if(selected  ==  null)  {  selected  =  option.getLongOpt();  }  String  selected  =  option.getOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected        =        option.getLongOpt();        if(selected    ==    null)    {    selected    =    option.getLongOpt();    }    String  selected  =  option.getOpt();	  	compilable	  [FE]  ComparisonFailure  	22	3	add
323	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected    =    option.getLongOpt();    if(selected  ==  null)  {  selected  =  option.getLongOpt();  }  String  selected  =  option.getLongOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	selected        =        option.getLongOpt();        if(selected    ==    null)    {    selected    =    option.getLongOpt();    }    String  selected  =  option.getLongOpt();	  	compilable	  [FE]  ComparisonFailure  	22	3	add
324	[BUG]  [BUGGY]  selected    =    option.getLongOpt();    if(selected  ==  null)  {  selected  =  option.getLongOpt();  }  String  selected  =  option.getLongOpt();  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected    =    option.getLongOpt();    if(selected  ==  null)  {  selected  =  option.getLongOpt();  }  String  selected  =  option.getLongOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected        =        option.getLongOpt();        if(selected    ==    null)    {    selected    =    option.getLongOpt();    }    String  selected  =  option.getLongOpt();	  	compilable	  [FE]  ComparisonFailure  	22	3	add
325	[BUG]  [BUGGY]  selected    =    option.getLongOpt();    if(selected  ==  null)  {  selected  =  option.getLongOpt();  }  if(selected  ==  null)  {  String  selected  =  option.getLongOpt();  if(selected  ==  null)  {  selected  =  option.getLongOpt();  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected    =    option.getLongOpt();    if(selected  ==  null)  {  selected  =  option.getLongOpt();  }  if(selected  ==  null)  {  String  selected  =  option.getLongOpt();  if(selected  ==  null)  {  selected  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected        =        option.getLongOpt();        if(selected    ==    null)    {    selected    =    option.getLongOpt();    }    if(selected  ==  null)  {  String  selected  =  option.getLongOpt();  if(selected  ==  null)  {  selected  =  option.getLongOpt();  }	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
326	[BUG]  [BUGGY]  select  =  option.getShortOpt();  [CE]  cannot  find  symbol  select  [FE]        ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  select  =  option.getShortOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	select  =  option.getShortOpt();	  selected    =    option.getShortOpt();    	non-compiled	[CE]  cannot  find  symbol  select	77	None	replace
327	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(option.getLongOpt()  ==  null)  {  throw  new  AlreadySelectedException(this,  option);  }  if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	                if(selected.equals(option.getLongOpt()))        {        throw        new        AlreadySelectedException(this,        option);        }        if(!selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(option.getLongOpt()  ==  null)  {  throw  new  AlreadySelectedException(this,  option);  }  if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  	compilable	  [FE]  NullPointerException  	15	6	add
328	[BUG]  [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(option.getLongOpt()  ==  null)  {  throw  new  AlreadySelectedException(this,  option);  }  if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(option.getLongOpt()  ==  null)  {  throw  new  AlreadySelectedException(this,  option);  }  if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	                if(selected.equals(option.getLongOpt()))        {        throw        new        AlreadySelectedException(this,        option);        }        if(!selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(option.getLongOpt()  ==  null)  {  throw  new  AlreadySelectedException(this,  option);  }  if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  	compilable	  [FE]  NullPointerException  	15	6	add
329	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	                if(selected.equals(option.getLongOpt()))        {        throw        new        AlreadySelectedException(this,        option);        }        if(!selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  	compilable	  [FE]  NullPointerException  	15	6	add
330	[BUG]  [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	                if(selected.equals(option.getLongOpt()))        {        throw        new        AlreadySelectedException(this,        option);        }        if(!selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  	compilable	  [FE]  NullPointerException  	15	6	add
331	[BUG]  [BUGGY]  parent  ==  null  ||  selected.equals(option.getParent()))  {  throw  new  AlreadySelectedException(this,  option);  }  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  parent  ==  null  ||  selected.equals(option.getParent()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	parent  ==  null  ||  selected.equals(option.getParent()))  {  throw  new  AlreadySelectedException(this,  option);  }	  parent    ==    null    ||    selected.equals(option.getOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  not  a  statement	94	None	replace
332	[BUG]  [BUGGY]  parent  ==  null  ||  selected.equals(option.getKey()))  {  throw  new  AlreadySelectedException(this,  option);  }  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  parent  ==  null  ||  selected.equals(option.getKey()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	parent  ==  null  ||  selected.equals(option.getKey()))  {  throw  new  AlreadySelectedException(this,  option);  }	  parent    ==    null    ||    selected.equals(option.getOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  not  a  statement	94	None	replace
333	[BUG]  [BUGGY]  String  option  =  option.getItem(this,  selected);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]              ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  option.getItem(this,  selected);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  option.getItem(this,  selected);	  String    option    =    option.getItem(selected,    selected);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	4	None	replace
334	[BUG]  [BUGGY]  String  option  =  optionMap.get(selected.opt  -  1);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  optionMap.get(selected.opt  -  1);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionMap.get(selected.opt  -  1);	  String    option    =    optionMap.get(selected.opt);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	97	None	replace
335	[BUG]  [BUGGY]  bucket  ==  null  ||  selected.equals(option.getShortOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [CE]  not  a  statement  [FE]        NullPointerException      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  bucket  ==  null  ||  selected.equals(option.getShortOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	bucket  ==  null  ||  selected.equals(option.getShortOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  bucket    ==    null    ||    selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  not  a  statement	86	None	replace
336	[BUG]  [BUGGY]  String  option  =  optionMap.get(selected  -  1);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                      ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  optionMap.get(selected  -  1);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionMap.get(selected  -  1);	  String    option    =    optionMap.get(selected    +    1);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	10	None	replace
337	[BUG]  [BUGGY]  String  option  =  optionMap.get(selected  +  1).toString();  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                        ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  optionMap.get(selected  +  1).toString();  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionMap.get(selected  +  1).toString();	  String    option    =    optionMap.get(selected    +    1);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	10	None	replace
338	[BUG]  [BUGGY]  Option  option  =  optionMap.get(option.getOpt()  +  1);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =  optionMap.get(option.getOpt()  +  1);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =  optionMap.get(option.getOpt()  +  1);	  Option    option    =    optionMap.get(selected    +    1);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	36	None	replace
339	[BUG]  [BUGGY]  Option  option  =  optionMap.get(selected  -  1);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =  optionMap.get(selected  -  1);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =  optionMap.get(selected  -  1);	  Option    option    =    optionMap.get(selected    +    1);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	36	None	replace
340	[BUG]  [BUGGY]  selected  =  optionMap.getString(option.getOpt());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected  =  optionMap.getString(option.getOpt());  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  optionMap.getString(option.getOpt());	  selected    =    optionMap.getString();    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
341	[BUG]  [BUGGY]  select  =  option.getItem(required);  [CE]  cannot  find  symbol  select  [FE]              ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  select  =  option.getItem(required);  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	select  =  option.getItem(required);	  select    =    option.getItem(selected);    	non-compiled	[CE]  cannot  find  symbol  select	65	None	replace
342	[BUG]  [BUGGY]  Option  option  =  optionMap.get(option.getOpt(),  selected);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]            NullPointerException      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =  optionMap.get(option.getOpt(),  selected);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =  optionMap.get(option.getOpt(),  selected);	          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    If(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	17	None	replace
343	[BUG]  [BUGGY]  if(option.getOpt()  ==  null)  {  selected  =  option.getLongOpt();  if(selected!=  null)  {  selected  =  option.getOpt();  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(option.getOpt()  ==  null)  {  selected  =  option.getLongOpt();  if(selected!=  null)  {  selected  =  option.getOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	if(option.getOpt()  ==  null)  {  selected  =  option.getLongOpt();  if(selected!=  null)  {  selected  =  option.getOpt();  }	  selected    =    option.getLongOpt();    if(selected    ==    null)    {    selected    =    option.getLongOpt();    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
344	[BUG]  [BUGGY]  if(option.getOpt()  ==  null)  {  selected  =  option.getLongOpt();  if(selected  ==  null)  {  selected  =  option.getOpt();  }  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(option.getOpt()  ==  null)  {  selected  =  option.getLongOpt();  if(selected  ==  null)  {  selected  =  option.getOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	if(option.getOpt()  ==  null)  {  selected  =  option.getLongOpt();  if(selected  ==  null)  {  selected  =  option.getOpt();  }	  selected    =    option.getLongOpt();    if(selected    ==    null)    {    selected    =    option.getLongOpt();    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
345	[BUG]  [BUGGY]  if(option.getOpt()!=  null)  {  selected  =  option.getLongOpt();  if(selected!=  null)  {  selected  =  option.getOpt();  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(option.getOpt()!=  null)  {  selected  =  option.getLongOpt();  if(selected!=  null)  {  selected  =  option.getOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	if(option.getOpt()!=  null)  {  selected  =  option.getLongOpt();  if(selected!=  null)  {  selected  =  option.getOpt();  }	  selected    =    option.getLongOpt();    if(selected    ==    null)    {    selected    =    option.getLongOpt();    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
346	[BUG]  [BUGGY]  selected  =  option  Maps.getItem(option.getLocation());  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected  =  option  Maps.getItem(option.getLocation());  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  option  Maps.getItem(option.getLocation());	  selected    =    option    Maps.getItem(selected);    	non-compiled	[CE]  ';'  expected	98	None	replace
347	[BUG]  [BUGGY]  String  option  =  optionsMap.get(option);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  optionsMap.get(option);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionsMap.get(option);	  String    option    =    optionsMap.get(selected);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	69	None	replace
348	[BUG]  [BUGGY]  String  option  =  optionsMap.get(selected.option);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                    ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  optionsMap.get(selected.option);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionsMap.get(selected.option);	  String    option    =    optionsMap.get(selected);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	69	None	replace
349	[BUG]  [BUGGY]  parent  ==  null  ||  selected.equals(option.getParent()))  {  throw  new  AlreadySelectedException(this,  option);  [CE]  not  a  statement  [FE]            ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  parent  ==  null  ||  selected.equals(option.getParent()))  {  throw  new  AlreadySelectedException(this,  option);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	parent  ==  null  ||  selected.equals(option.getParent()))  {  throw  new  AlreadySelectedException(this,  option);	  parent    ==    null    ||    selected.equals(option.getOpt()))    {    throw    new    AlreadySelectedException(this,    option);    	non-compiled	[CE]  not  a  statement	91	None	replace
350	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(option.getLongOpt().equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(option.getOpt().equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	                if(selected.equals(option.getLongOpt()))        {        throw        new        AlreadySelectedException(this,        option);        }        if(option.getLongOpt().equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(option.getOpt().equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  	compilable	  [FE]  NullPointerException  	73	6	add
351	[BUG]  [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(option.getLongOpt().equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(option.getOpt().equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(option.getLongOpt().equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(option.getOpt().equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	                if(selected.equals(option.getLongOpt()))        {        throw        new        AlreadySelectedException(this,        option);        }        if(option.getLongOpt().equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(option.getOpt().equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  	compilable	  [FE]  NullPointerException  	73	6	add
352	[BUG]  [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(option.getLongOpt().equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(option.getLongOpt().equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  [CE]  ')'  expected  [FE]      NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(option.getLongOpt().equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(option.getLongOpt().equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	                if(selected.equals(option.getLongOpt()))        {        throw        new        AlreadySelectedException(this,        option);        }        if(option.getLongOpt().equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(option.getLongOpt().equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,	  	non-compiled	[CE]  ')'  expected	73	None	add
353	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected    =    option.getLongOpt();    String  selected  =  option.getLongOpt();  String  opt  =  option.getOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	selected        =        option.getLongOpt();        String    selected    =    option.getLongOpt();    String  opt  =  option.getOpt();	  	compilable	  [FE]  ComparisonFailure  	20	3	add
354	[BUG]  [BUGGY]  selected    =    option.getLongOpt();    String  selected  =  option.getLongOpt();  String  opt  =  option.getOpt();  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected    =    option.getLongOpt();    String  selected  =  option.getLongOpt();  String  opt  =  option.getOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected        =        option.getLongOpt();        String    selected    =    option.getLongOpt();    String  opt  =  option.getOpt();	  	compilable	  [FE]  ComparisonFailure  	20	3	add
355	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(selected!=  null)  {  selected  =  option.getLongOpt();  String  selected  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	if(selected!=  null)  {  selected  =  option.getLongOpt();  String  selected  =  option.getLongOpt();  }	  selected    =    option.getLongOpt();    String    selected    =    option.getLongOpt();    	compilable	  [FE]  ComparisonFailure  	21	6	replace
356	[BUG]  [BUGGY]  if(selected!=  null)  {  selected  =  option.getLongOpt();  String  selected  =  option.getLongOpt();  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(selected!=  null)  {  selected  =  option.getLongOpt();  String  selected  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	if(selected!=  null)  {  selected  =  option.getLongOpt();  String  selected  =  option.getLongOpt();  }	  selected    =    option.getLongOpt();    String    selected    =    option.getLongOpt();    	compilable	  [FE]  ComparisonFailure  	21	6	replace
357	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(selected  ==  null)  {  selected  =  option.getLongOpt();  String  selected  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	if(selected  ==  null)  {  selected  =  option.getLongOpt();  String  selected  =  option.getLongOpt();  }	  selected    =    option.getLongOpt();    String    selected    =    option.getLongOpt();    	compilable	  [FE]  ComparisonFailure  	21	3	replace
358	[BUG]  [BUGGY]  if(selected  ==  null)  {  selected  =  option.getLongOpt();  String  selected  =  option.getLongOpt();  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(selected  ==  null)  {  selected  =  option.getLongOpt();  String  selected  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	if(selected  ==  null)  {  selected  =  option.getLongOpt();  String  selected  =  option.getLongOpt();  }	  selected    =    option.getLongOpt();    String    selected    =    option.getLongOpt();    	compilable	  [FE]  ComparisonFailure  	21	3	replace
359	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(option.getOpt()!=  null)  {  selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	if(option.getOpt()!=  null)  {  selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  }	  selected    =    option.getLongOpt();    selected    =    option.getLongOpt();    	compilable	  [FE]  ComparisonFailure  	19	6	replace
360	[BUG]  [BUGGY]  if(option.getOpt()!=  null)  {  selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(option.getOpt()!=  null)  {  selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	if(option.getOpt()!=  null)  {  selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  }	  selected    =    option.getLongOpt();    selected    =    option.getLongOpt();    	compilable	  [FE]  ComparisonFailure  	19	6	replace
361	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(option.getOpt()  ==  null)  {  selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	if(option.getOpt()  ==  null)  {  selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  }	  selected    =    option.getLongOpt();    selected    =    option.getLongOpt();    	compilable	  [FE]  ComparisonFailure  	19	3	replace
362	[BUG]  [BUGGY]  if(option.getOpt()  ==  null)  {  selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(option.getOpt()  ==  null)  {  selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	if(option.getOpt()  ==  null)  {  selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  }	  selected    =    option.getLongOpt();    selected    =    option.getLongOpt();    	compilable	  [FE]  ComparisonFailure  	19	3	replace
363	[BUG]  [BUGGY]  selected  =  optionsMap.getItemCount();  [CE]  cannot  find  symbol  optionsMap  [FE]              ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected  =  optionsMap.getItemCount();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  optionsMap.getItemCount();	  selected    =    optionMap.getItemCount();    	non-compiled	[CE]  cannot  find  symbol  optionsMap	84	None	replace
364	[BUG]  [BUGGY]  selection  =  option.getItem(this);  [CE]  cannot  find  symbol  selection  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selection  =  option.getItem(this);  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selection  =  option.getItem(this);	  selection    =    option.getItem(selected);    	non-compiled	[CE]  cannot  find  symbol  selection	50	None	replace
365	[BUG]  [BUGGY]  Option  option  =(Option)optionMap.get(selected.toLowerCase(),  selected);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]            ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =(Option)optionMap.get(selected.toLowerCase(),  selected);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =(Option)optionMap.get(selected.toLowerCase(),  selected);	  Option    option    =(Option)optionMap.get(selected.toLowerCase());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	83	None	replace
366	[BUG]  [BUGGY]  select  =  option.getString();  [CE]  cannot  find  symbol  select  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  select  =  option.getString();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	select  =  option.getString();	  selected    =    options.getString();    	non-compiled	[CE]  cannot  find  symbol  select	63	None	replace
367	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(selected  ==  null)  {  selected  =  option.getLongOpt();  String  opt  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	if(selected  ==  null)  {  selected  =  option.getLongOpt();  String  opt  =  option.getLongOpt();  }	  selected    =    option.getLongOpt();    String    opt    =    option.getLongOpt();    	compilable	  [FE]  ComparisonFailure  	82	3	replace
368	[BUG]  [BUGGY]  if(selected  ==  null)  {  selected  =  option.getLongOpt();  String  opt  =  option.getLongOpt();  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(selected  ==  null)  {  selected  =  option.getLongOpt();  String  opt  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	if(selected  ==  null)  {  selected  =  option.getLongOpt();  String  opt  =  option.getLongOpt();  }	  selected    =    option.getLongOpt();    String    opt    =    option.getLongOpt();    	compilable	  [FE]  ComparisonFailure  	82	3	replace
369	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(option.getOpt()!=  null)  {  selected  =  option.getLongOpt();  String  opt  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	if(option.getOpt()!=  null)  {  selected  =  option.getLongOpt();  String  opt  =  option.getLongOpt();  }	  selected    =    option.getLongOpt();    String    opt    =    option.getLongOpt();    	compilable	  [FE]  ComparisonFailure  	82	6	replace
370	[BUG]  [BUGGY]  if(option.getOpt()!=  null)  {  selected  =  option.getLongOpt();  String  opt  =  option.getLongOpt();  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(option.getOpt()!=  null)  {  selected  =  option.getLongOpt();  String  opt  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	if(option.getOpt()!=  null)  {  selected  =  option.getLongOpt();  String  opt  =  option.getLongOpt();  }	  selected    =    option.getLongOpt();    String    opt    =    option.getLongOpt();    	compilable	  [FE]  ComparisonFailure  	82	6	replace
371	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected  =  option.getOpt();  String  opt  =  option.getLongOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	selected  =  option.getOpt();  String  opt  =  option.getLongOpt();	  selected    =    option.getLongOpt();    String    opt    =    option.getLongOpt();    	compilable	  [FE]  ComparisonFailure  	82	3	replace
372	[BUG]  [BUGGY]  selected  =  option.getOpt();  String  opt  =  option.getLongOpt();  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected  =  option.getOpt();  String  opt  =  option.getLongOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  option.getOpt();  String  opt  =  option.getLongOpt();	  selected    =    option.getLongOpt();    String    opt    =    option.getLongOpt();    	compilable	  [FE]  ComparisonFailure  	82	3	replace
373	[BUG]  [BUGGY]  String  option  =  option.getItem(this,  selected,  required);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  option.getItem(this,  selected,  required);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  option.getItem(this,  selected,  required);	  String    option    =    option.getItem(selected,    required);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	5	None	replace
374	[BUG]  [BUGGY]  String  option  =  option.getItem(selected,  null);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  option.getItem(selected,  null);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  option.getItem(selected,  null);	  String    option    =    option.getItem(selected,    required);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	5	None	replace
375	[BUG]  [BUGGY]  String  option  =  option.getItem(required,  selected);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                    ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  option.getItem(required,  selected);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  option.getItem(required,  selected);	  String    option    =    option.getItem(selected,    required);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	5	None	replace
376	[BUG]  [BUGGY]  select  =  option.getSelectedOpt();  [CE]  cannot  find  symbol  select  [FE]          ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  select  =  option.getSelectedOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	select  =  option.getSelectedOpt();	  selected    =    option.getSelectedOpt();    	non-compiled	[CE]  cannot  find  symbol  select	12	None	replace
377	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected    =    option.getLongOpt();    selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	selected        =        option.getLongOpt();        selected    =    option.getLongOpt();    selected  =  option.getLongOpt();	  	compilable	  [FE]  ComparisonFailure  	18	3	add
378	[BUG]  [BUGGY]  selected    =    option.getLongOpt();    selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected    =    option.getLongOpt();    selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected        =        option.getLongOpt();        selected    =    option.getLongOpt();    selected  =  option.getLongOpt();	  	compilable	  [FE]  ComparisonFailure  	18	3	add
379	[BUG]  [BUGGY]  Option  option  =  optionsMap.get(option.getLongOpt());  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]              ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =  optionsMap.get(option.getLongOpt());  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =  optionsMap.get(option.getLongOpt());	  Option    option    =    optionMap.get(option.getLongOpt());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	76	None	replace
380	[BUG]  [BUGGY]  Option  option  =  optionMap.get(selected.toString(),  options);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =  optionMap.get(selected.toString(),  options);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =  optionMap.get(selected.toString(),  options);	  Option    option    =    optionMap.get(selected.toString());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	37	None	replace
381	[BUG]  [BUGGY]  String  option  =  option.getItem(selected.toString(),  selected.toString());  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  option.getItem(selected.toString(),  selected.toString());  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  option.getItem(selected.toString(),  selected.toString());	  String    option    =    option.getItem(selected.toString());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	6	None	replace
382	[BUG]  [BUGGY]  String  option  =  option.getItem(selected.toString()  +  1);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                    ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  option.getItem(selected.toString()  +  1);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  option.getItem(selected.toString()  +  1);	  String    option    =    option.getItem(selected.toString());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	6	None	replace
383	[BUG]  [BUGGY]  String  option  =  option.getOption(),  selected  +  1;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  option.getOption(),  selected  +  1;  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  option.getOption(),  selected  +  1;	  String    option    =    option.getOption(),    selected);    	non-compiled	[CE]  ';'  expected	3	None	replace
384	[BUG]  [BUGGY]  String  option  =  option.getOption(),  selected  +  1);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  option.getOption(),  selected  +  1);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  option.getOption(),  selected  +  1);	  String    option    =    option.getOption(),    selected);    	non-compiled	[CE]  ';'  expected	3	None	replace
385	[BUG]  [BUGGY]  selected  =  options.getOpt();  [CE]  cannot  find  symbol  options  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected  =  options.getOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  options.getOpt();	  selected    =    options.getName();    	non-compiled	[CE]  cannot  find  symbol  options	30	None	replace
386	[BUG]  [BUGGY]  String  option  =  option.getText(),  selected  +  1;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  option.getText(),  selected  +  1;  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  option.getText(),  selected  +  1;	  String    option    =    option.getText(),    selected);    	non-compiled	[CE]  ';'  expected	79	None	replace
387	[BUG]  [BUGGY]  String  option  =  option.getText(),  selected.toLowerCase());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  option.getText(),  selected.toLowerCase());  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  option.getText(),  selected.toLowerCase());	  String    option    =    option.getText(),    selected);    	non-compiled	[CE]  ';'  expected	79	None	replace
388	[BUG]  [BUGGY]  Option  option  =(Option)optionMap.get(selected  -  1);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =(Option)optionMap.get(selected  -  1);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =(Option)optionMap.get(selected  -  1);	  Option    option    =(Option)optionMap.get(selected    +    1);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	33	None	replace
389	[BUG]  [BUGGY]  Option  option  =(Option)optionMap.get(selected  *  1);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =(Option)optionMap.get(selected  *  1);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =(Option)optionMap.get(selected  *  1);	  Option    option    =(Option)optionMap.get(selected    +    1);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	33	None	replace
390	[BUG]  [BUGGY]  String  option  =  optionsMap.get(selected.opt());  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  optionsMap.get(selected.opt());  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionsMap.get(selected.opt());	  String    option    =    optionMap.get(selected.opt());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	96	None	replace
391	[BUG]  [BUGGY]  String  option  =  option.getSelectedString()  + "._ "  +  selected;  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                    ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  option.getSelectedString()  + "._ "  +  selected;  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  option.getSelectedString()  + "._ "  +  selected;	  String    option    =    option.getSelectedString()    +   "_   "    +    selected;    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	95	None	replace
392	[BUG]  [BUGGY]  String  selected  =  options.getString();  [CE]  cannot  find  symbol  options  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  selected  =  options.getString();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  selected  =  options.getString();	  String    selected    =    option.getString();    	non-compiled	[CE]  cannot  find  symbol  options	62	None	replace
393	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  selected  =  option.toString();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	String  selected  =  option.toString();	  String    selected    =    option.getString();    	compilable	  [FE]  ComparisonFailure  	62	6	replace
394	[BUG]  [BUGGY]  String  selected  =  option.toString();  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  selected  =  option.toString();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  selected  =  option.toString();	  String    selected    =    option.getString();    	compilable	  [FE]  ComparisonFailure  	62	6	replace
395	[BUG]  [BUGGY]  if(Selection.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [CE]  cannot  find  symbol  Selection  [FE]        NullPointerException      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(Selection.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	if(Selection.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(Selection.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  cannot  find  symbol  Selection	99	None	replace
396	[BUG]  [BUGGY]  elected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [CE]  ';'  expected  [FE]          NullPointerException      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  elected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	elected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(Selection.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  ';'  expected	99	None	replace
397	[BUG]  [BUGGY]  aleger.equals(option.getSelected()))  {  throw  new  AlreadySelectedException(this,  option);  }  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  aleger.equals(option.getSelected()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	aleger.equals(option.getSelected()))  {  throw  new  AlreadySelectedException(this,  option);  }	  aleger.equals(option.getOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  ';'  expected	72	None	replace
398	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              NullPointerException      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  optionMap.put(option.getKey(),  selected);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	optionMap.put(option.getKey(),  selected);	  aleger.equals(option.getOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	compilable	  [FE]  ComparisonFailure  	72	6	replace
399	[BUG]  [BUGGY]  optionMap.put(option.getKey(),  selected);  [FE]  ComparisonFailure  [FE]              NullPointerException      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  optionMap.put(option.getKey(),  selected);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	optionMap.put(option.getKey(),  selected);	  aleger.equals(option.getOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	compilable	  [FE]  ComparisonFailure  	72	6	replace
400	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected    =    option.getLongOpt();    String  opt  =  option.getLongOpt();  String  selected  =  option.getLongOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	selected        =        option.getLongOpt();        String    opt    =    option.getLongOpt();    String  selected  =  option.getLongOpt();	  	compilable	  [FE]  ComparisonFailure  	81	3	add
401	[BUG]  [BUGGY]  selected    =    option.getLongOpt();    String  opt  =  option.getLongOpt();  String  selected  =  option.getLongOpt();  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected    =    option.getLongOpt();    String  opt  =  option.getLongOpt();  String  selected  =  option.getLongOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected        =        option.getLongOpt();        String    opt    =    option.getLongOpt();    String  selected  =  option.getLongOpt();	  	compilable	  [FE]  ComparisonFailure  	81	3	add
402	[BUG]  [BUGGY]  selected    =    option.getLongOpt();    String  opt  =  option.getLongOpt();  String  opt  =  option.getOpt();  [CE]  variable  opt  is  already  defined  in  method  setSelected(Option)  [FE]      ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected    =    option.getLongOpt();    String  opt  =  option.getLongOpt();  String  opt  =  option.getOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected        =        option.getLongOpt();        String    opt    =    option.getLongOpt();    String  opt  =  option.getOpt();	  	non-compiled	[CE]  variable  opt  is  already  defined  in  method  setSelected(Option)	81	None	add
403	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected    =    option.getLongOpt();    String  opt  =  option.getLongOpt();  String  oldOpt  =  option.getOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	selected        =        option.getLongOpt();        String    opt    =    option.getLongOpt();    String  oldOpt  =  option.getOpt();	  	compilable	  [FE]  ComparisonFailure  	81	3	add
404	[BUG]  [BUGGY]  selected    =    option.getLongOpt();    String  opt  =  option.getLongOpt();  String  oldOpt  =  option.getOpt();  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected    =    option.getLongOpt();    String  opt  =  option.getLongOpt();  String  oldOpt  =  option.getOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected        =        option.getLongOpt();        String    opt    =    option.getLongOpt();    String  oldOpt  =  option.getOpt();	  	compilable	  [FE]  ComparisonFailure  	81	3	add
405	[BUG]  [BUGGY]  String  option  =  options.getOption();  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  options.getOption();  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  options.getOption();	  String    option    =    selected.getOption();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	1	None	replace
406	[BUG]  [BUGGY]  Option  option  =  optionMap.get(selected,  this.required);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]              ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =  optionMap.get(selected,  this.required);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =  optionMap.get(selected,  this.required);	  Option    option    =    optionMap.get(selected,    required);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	35	None	replace
407	[BUG]  [BUGGY]  Option  option  =  optionMap.get(selected,  0);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =  optionMap.get(selected,  0);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =  optionMap.get(selected,  0);	  Option    option    =    optionMap.get(selected,    required);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	35	None	replace
408	[BUG]  [BUGGY]  selected  =  optionsMap.getItem(selected);  [CE]  cannot  find  symbol  optionsMap  [FE]              ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected  =  optionsMap.getItem(selected);  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  optionsMap.getItem(selected);	  selected    =    optionMap.getItem(selected);    	non-compiled	[CE]  cannot  find  symbol  optionsMap	48	None	replace
409	[BUG]  [BUGGY]  Option  option  =  optionMap.get(selected.toLowerCase(),  preferred);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]            ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =  optionMap.get(selected.toLowerCase(),  preferred);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =  optionMap.get(selected.toLowerCase(),  preferred);	  Option    option    =    optionMap.get(selected.toLowerCase());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	34	None	replace
410	[BUG]  [BUGGY]  safely().equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [CE]  ';'  expected  [FE]    NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  safely().equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	safely().equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(option.getLongOpt().equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  ';'  expected	74	None	replace
411	[BUG]  [BUGGY]  safely().equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  [CE]  ';'  expected  [FE]      NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  safely().equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	safely().equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);	          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(option.getLongOpt().equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  ';'  expected	74	None	replace
412	[BUG]  [BUGGY]  safeMultiply(option.getOpt(),  selected)  {  throw  new  AlreadySelectedException(this,  option);  }  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  safeMultiply(option.getOpt(),  selected)  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	safeMultiply(option.getOpt(),  selected)  {  throw  new  AlreadySelectedException(this,  option);  }	          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(option.getLongOpt().equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  ';'  expected	74	None	replace
413	[BUG]  [BUGGY]  selected  =  optionMap.getUpperOpt();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected  =  optionMap.getUpperOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  optionMap.getUpperOpt();	  selected    =    option.getUpperOpt();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
414	[BUG]  [BUGGY]  String  option  =  optionMap.get(option.toLowerCase());  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  optionMap.get(option.toLowerCase());  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionMap.get(option.toLowerCase());	  String    option    =    optionMap.get(selected.toLowerCase());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	8	None	replace
415	[BUG]  [BUGGY]  String  option  =  option.getText()  + "_ ";  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  option.getText()  + "_ ";  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  option.getText()  + "_ ";	  String    option    =    option.getText()    +   "n   ";    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	78	None	replace
416	[BUG]  [BUGGY]  select  =  option.getItemCount();  [CE]  cannot  find  symbol  select  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  select  =  option.getItemCount();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	select  =  option.getItemCount();	  selected    =    options.getItemCount();    	non-compiled	[CE]  cannot  find  symbol  select	28	None	replace
417	[BUG]  [BUGGY]  String  option  =  selected.toString();  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  selected.toString();  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  selected.toString();	  String    option    =    selected.getText();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	51	None	replace
418	[BUG]  [BUGGY]  String  option  =  option.getKey()  + "_ "  +  selected;  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]              ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  option.getKey()  + "_ "  +  selected;  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  option.getKey()  + "_ "  +  selected;	  String    option    =    option.getKey();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	88	None	replace
419	[BUG]  [BUGGY]  String  option  =  option.getKey()  + "n ";  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  option.getKey()  + "n ";  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  option.getKey()  + "n ";	  String    option    =    option.getKey();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	88	None	replace
420	[BUG]  [BUGGY]  [FE]  AlreadySelectedException  [FE]    ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected    =    option.getLongOpt();    selected  =  option.getLongOpt();  if(selected  ==  null)  {  selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	selected        =        option.getLongOpt();        selected    =    option.getLongOpt();    if(selected  ==  null)  {  selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }	  	compilable	  [FE]  AlreadySelectedException  	18	3	add
421	[BUG]  [BUGGY]  selected    =    option.getLongOpt();    selected  =  option.getLongOpt();  if(selected  ==  null)  {  selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  [FE]  AlreadySelectedException  [FE]    ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected    =    option.getLongOpt();    selected  =  option.getLongOpt();  if(selected  ==  null)  {  selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected        =        option.getLongOpt();        selected    =    option.getLongOpt();    if(selected  ==  null)  {  selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }	  	compilable	  [FE]  AlreadySelectedException  	18	3	add
422	[BUG]  [BUGGY]  selected    =    option.getLongOpt();    selected  =  option.getLongOpt();  if(selected  ==  null)  {  selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  }  else  {  throw  new  AlreadySelectedException(this,  this,  option);  }  [CE]  no  suitable  constructor  found  for  AlreadySelectedException(OptionGroup,OptionGroup,Option)  [FE]      ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected    =    option.getLongOpt();    selected  =  option.getLongOpt();  if(selected  ==  null)  {  selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  }  else  {  throw  new  AlreadySelectedException(this,  this,  option);  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected        =        option.getLongOpt();        selected    =    option.getLongOpt();    if(selected  ==  null)  {  selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  }  else  {  throw  new  AlreadySelectedException(this,  this,  option);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  AlreadySelectedException(OptionGroup,OptionGroup,Option)	18	None	add
423	[BUG]  [BUGGY]  String  option  =  optionMap.get(option.getLongOpt());  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  optionMap.get(option.getLongOpt());  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionMap.get(option.getLongOpt());	  String    option    =    optionMap.get(option.getOpt());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	68	None	replace
424	[BUG]  [BUGGY]  >=  [Delete]  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  >=  [Delete]  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	>=  [Delete]	          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(option.getLongOpt().equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
425	[BUG]  [BUGGY]  >>  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  >>  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	>>	          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(option.getLongOpt().equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
426	[BUG]  [BUGGY]  bucket!=  null  &&  selected.equals(option.getSelectedIndex()))  {  throw  new  AlreadySelectedException(this,  option);  [CE]  not  a  statement  [FE]              NullPointerException      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  bucket!=  null  &&  selected.equals(option.getSelectedIndex()))  {  throw  new  AlreadySelectedException(this,  option);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	bucket!=  null  &&  selected.equals(option.getSelectedIndex()))  {  throw  new  AlreadySelectedException(this,  option);	  bucket!=    null    &&    selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    	non-compiled	[CE]  not  a  statement	45	None	replace
427	[BUG]  [BUGGY]  aleger.equals(option.getRawClass()))  {  throw  new  AlreadySelectedException(this,  option);  }  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  aleger.equals(option.getRawClass()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	aleger.equals(option.getRawClass()))  {  throw  new  AlreadySelectedException(this,  option);  }	  aleger.equals(option.getOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  ';'  expected	72	None	replace
428	[BUG]  [BUGGY]  safely().equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [CE]  ';'  expected  [FE]        NullPointerException      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  safely().equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	safely().equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(Selection.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  ';'  expected	99	None	replace
429	[BUG]  [BUGGY]  aughtExceptionHandler.throw  new  AlreadySelectedException(this,  option);  [CE]  <identifier>  expected  [FE]          NullPointerException      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  aughtExceptionHandler.throw  new  AlreadySelectedException(this,  option);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	aughtExceptionHandler.throw  new  AlreadySelectedException(this,  option);	          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(Selection.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  <identifier>  expected	99	None	replace
430	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsSyntheticException( " ");  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]            NullPointerException      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  aughtExceptionHandler.throwAsSyntheticException( " ");  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	aughtExceptionHandler.throwAsSyntheticException( " ");	          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(Selection.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	99	None	replace
431	[BUG]  [BUGGY]  String  option  =  selected.getString()  + "_ "  +  option;  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                    ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  selected.getString()  + "_ "  +  option;  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  selected.getString()  + "_ "  +  option;	  String    option    =    option.getSelectedString()    +   "_   "    +    selected;    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	95	None	replace
432	[BUG]  [BUGGY]  String  option  =  options.getSelectedString()  + "_ "  +  selected;  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                      ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  options.getSelectedString()  + "_ "  +  selected;  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  options.getSelectedString()  + "_ "  +  selected;	  String    option    =    option.getSelectedString()    +   "_   "    +    selected;    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	95	None	replace
433	[BUG]  [BUGGY]  String  option  =  optionMap.getItem(selected,  selected);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]              ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  optionMap.getItem(selected,  selected);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionMap.getItem(selected,  selected);	  String    option    =    option.getItem(selected,    selected);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	4	None	replace
434	[BUG]  [BUGGY]  String  option  =  optionMap.get(selected.opt(),  options);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  optionMap.get(selected.opt(),  options);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionMap.get(selected.opt(),  options);	  String    option    =    optionMap.get(selected.opt());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	96	None	replace
435	[BUG]  [BUGGY]  String  option  =  options.getText()  + ": "  +  selected;  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                    ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  options.getText()  + ": "  +  selected;  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  options.getText()  + ": "  +  selected;	  String    option    =    options.getText();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	52	None	replace
436	[BUG]  [BUGGY]  selected    =    option.getLongOpt();    if(selected  ==  null)  {  selected  =  option.getLongOpt();  }  if(selected  ==  null)  {  selected  =  option.getOpt();  if(selected  ==  null)  {  selected  =  option.getLongOpt();  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected    =    option.getLongOpt();    if(selected  ==  null)  {  selected  =  option.getLongOpt();  }  if(selected  ==  null)  {  selected  =  option.getOpt();  if(selected  ==  null)  {  selected  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected        =        option.getLongOpt();        if(selected    ==    null)    {    selected    =    option.getLongOpt();    }    if(selected  ==  null)  {  selected  =  option.getOpt();  if(selected  ==  null)  {  selected  =  option.getLongOpt();  }	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
437	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected    =    option.getLongOpt();    if(selected  ==  null)  {  selected  =  option.getLongOpt();  }  if(selected  ==  null)  {  selected  =  option.getLongOpt();  if(selected  ==  null)  {  selected  =  option.getLongOpt();  }  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	selected        =        option.getLongOpt();        if(selected    ==    null)    {    selected    =    option.getLongOpt();    }    if(selected  ==  null)  {  selected  =  option.getLongOpt();  if(selected  ==  null)  {  selected  =  option.getLongOpt();  }  }	  	compilable	  [FE]  ComparisonFailure  	22	3	add
438	[BUG]  [BUGGY]  selected    =    option.getLongOpt();    if(selected  ==  null)  {  selected  =  option.getLongOpt();  }  if(selected  ==  null)  {  selected  =  option.getLongOpt();  if(selected  ==  null)  {  selected  =  option.getLongOpt();  }  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected    =    option.getLongOpt();    if(selected  ==  null)  {  selected  =  option.getLongOpt();  }  if(selected  ==  null)  {  selected  =  option.getLongOpt();  if(selected  ==  null)  {  selected  =  option.getLongOpt();  }  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected        =        option.getLongOpt();        if(selected    ==    null)    {    selected    =    option.getLongOpt();    }    if(selected  ==  null)  {  selected  =  option.getLongOpt();  if(selected  ==  null)  {  selected  =  option.getLongOpt();  }  }	  	compilable	  [FE]  ComparisonFailure  	22	3	add
439	[BUG]  [BUGGY]  parent  ==  null  ||  selected.equals(option.getKey()))  {  throw  new  AlreadySelectedException(this,  option);  [CE]  not  a  statement  [FE]            ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  parent  ==  null  ||  selected.equals(option.getKey()))  {  throw  new  AlreadySelectedException(this,  option);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	parent  ==  null  ||  selected.equals(option.getKey()))  {  throw  new  AlreadySelectedException(this,  option);	  parent    ==    null    ||    selected.equals(option.getOpt()))    {    throw    new    AlreadySelectedException(this,    option);    	non-compiled	[CE]  not  a  statement	91	None	replace
440	[BUG]  [BUGGY]  String  option  =  optionMap.get(selected.toUpperCase());  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  optionMap.get(selected.toUpperCase());  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionMap.get(selected.toUpperCase());	  String    option    =    optionMap.get(selected.toLowerCase());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	8	None	replace
441	[BUG]  [BUGGY]  String  option  =  optionMap.get(selected.toLowerCase(),  options);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                    ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  optionMap.get(selected.toLowerCase(),  options);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionMap.get(selected.toLowerCase(),  options);	  String    option    =    optionMap.get(selected.toLowerCase());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	8	None	replace
442	[BUG]  [BUGGY]  Option  option  =(Option)optionMap.get(selected.toUpperCase());  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]            ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =(Option)optionMap.get(selected.toUpperCase());  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =(Option)optionMap.get(selected.toUpperCase());	  Option    option    =(Option)optionMap.get(selected.toLowerCase());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	83	None	replace
443	[BUG]  [BUGGY]  Option  option  =(Option)optionMap.get(selected.toLowerCase(),  options);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]              ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =(Option)optionMap.get(selected.toLowerCase(),  options);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =(Option)optionMap.get(selected.toLowerCase(),  options);	  Option    option    =(Option)optionMap.get(selected.toLowerCase());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	83	None	replace
444	[BUG]  [BUGGY]  Option  option  =  optionMap.get(selected.toUpperCase());  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]            ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =  optionMap.get(selected.toUpperCase());  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =  optionMap.get(selected.toUpperCase());	  Option    option    =    optionMap.get(selected.toLowerCase());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	34	None	replace
445	[BUG]  [BUGGY]  Option  option  =  optionMap.get(selected.toLowerCase(),  options);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]              ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =  optionMap.get(selected.toLowerCase(),  options);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =  optionMap.get(selected.toLowerCase(),  options);	  Option    option    =    optionMap.get(selected.toLowerCase());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	34	None	replace
446	[BUG]  [BUGGY]  if(selected.equals(option.getOpt()))  {  selected  =  option.getLongOpt();  String  option  =  option.getLongOpt();  }  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(selected.equals(option.getOpt()))  {  selected  =  option.getLongOpt();  String  option  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	if(selected.equals(option.getOpt()))  {  selected  =  option.getLongOpt();  String  option  =  option.getLongOpt();  }	  selected    =    option.getLongOpt();    String    option    =    option.getLongOpt();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	25	None	replace
447	[BUG]  [BUGGY]  String  option  =  options.getOption(option);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                      ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  options.getOption(option);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  options.getOption(option);	  String    option    =    options.getSelectedString();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	58	None	replace
448	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected    =    option.getLongOpt();    String  opt  =  option.getLongOpt();  String  old  =  option.getLongOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	selected        =        option.getLongOpt();        String    opt    =    option.getLongOpt();    String  old  =  option.getLongOpt();	  	compilable	  [FE]  ComparisonFailure  	81	3	add
449	[BUG]  [BUGGY]  selected    =    option.getLongOpt();    String  opt  =  option.getLongOpt();  String  old  =  option.getLongOpt();  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected    =    option.getLongOpt();    String  opt  =  option.getLongOpt();  String  old  =  option.getLongOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected        =        option.getLongOpt();        String    opt    =    option.getLongOpt();    String  old  =  option.getLongOpt();	  	compilable	  [FE]  ComparisonFailure  	81	3	add
450	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(selected  ==  null  ||  selected.equals(option.getOpt()))  {  selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	if(selected  ==  null  ||  selected.equals(option.getOpt()))  {  selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  }	  selected    =    option.getLongOpt();    selected    =    option.getLongOpt();    	compilable	  [FE]  ComparisonFailure  	19	3	replace
451	[BUG]  [BUGGY]  if(selected  ==  null  ||  selected.equals(option.getOpt()))  {  selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(selected  ==  null  ||  selected.equals(option.getOpt()))  {  selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	if(selected  ==  null  ||  selected.equals(option.getOpt()))  {  selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  }	  selected    =    option.getLongOpt();    selected    =    option.getLongOpt();    	compilable	  [FE]  ComparisonFailure  	19	3	replace
452	[BUG]  [BUGGY]  String  option  =  optionMap.getItem(selected,  required);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  optionMap.getItem(selected,  required);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionMap.getItem(selected,  required);	  String    option    =    option.getItem(selected,    required);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	5	None	replace
453	[BUG]  [BUGGY]  selected  =  optionMap.getItemCount()  -  1;  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected  =  optionMap.getItemCount()  -  1;  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  optionMap.getItemCount()  -  1;	  selected    =    option.getItemCount()    -    1;    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
454	[BUG]  [BUGGY]  Option  option  =(Option)this.optionMap.get(selected.toString());  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]            ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =(Option)this.optionMap.get(selected.toString());  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =(Option)this.optionMap.get(selected.toString());	  Option    option    =(Option)this.optionMap.get(selected);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	31	None	replace
455	[BUG]  [BUGGY]  Option  option  =  optionMap.get(selected.toString(),  this);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =  optionMap.get(selected.toString(),  this);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =  optionMap.get(selected.toString(),  this);	  Option    option    =    optionMap.get(selected.toString());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	37	None	replace
456	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(option.getOpt()!=  null)  {  selected  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	if(option.getOpt()!=  null)  {  selected  =  option.getLongOpt();  }	  selected    =    option.getLongOpt();    if(selected    ==    null)    {    selected    =    option.getLongOpt();    }    	compilable	  [FE]  ComparisonFailure  	23	6	replace
457	[BUG]  [BUGGY]  if(option.getOpt()!=  null)  {  selected  =  option.getLongOpt();  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(option.getOpt()!=  null)  {  selected  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	if(option.getOpt()!=  null)  {  selected  =  option.getLongOpt();  }	  selected    =    option.getLongOpt();    if(selected    ==    null)    {    selected    =    option.getLongOpt();    }    	compilable	  [FE]  ComparisonFailure  	23	6	replace
458	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(selected!=  null)  {  selected  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	if(selected!=  null)  {  selected  =  option.getLongOpt();  }	  selected    =    option.getLongOpt();    if(selected    ==    null)    {    selected    =    option.getLongOpt();    }    	compilable	  [FE]  ComparisonFailure  	23	6	replace
459	[BUG]  [BUGGY]  if(selected!=  null)  {  selected  =  option.getLongOpt();  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(selected!=  null)  {  selected  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	if(selected!=  null)  {  selected  =  option.getLongOpt();  }	  selected    =    option.getLongOpt();    if(selected    ==    null)    {    selected    =    option.getLongOpt();    }    	compilable	  [FE]  ComparisonFailure  	23	6	replace
460	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(selected  ==  null)  {  selected  =  option.getOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	if(selected  ==  null)  {  selected  =  option.getOpt();  }	  selected    =    option.getLongOpt();    if(selected    ==    null)    {    selected    =    option.getLongOpt();    }    	compilable	  [FE]  ComparisonFailure  	23	3	replace
461	[BUG]  [BUGGY]  if(selected  ==  null)  {  selected  =  option.getOpt();  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(selected  ==  null)  {  selected  =  option.getOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	if(selected  ==  null)  {  selected  =  option.getOpt();  }	  selected    =    option.getLongOpt();    if(selected    ==    null)    {    selected    =    option.getLongOpt();    }    	compilable	  [FE]  ComparisonFailure  	23	3	replace
462	[BUG]  [BUGGY]  Option  option  =  optionMap.get(option.getLongOpt(),  selected);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]              ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =  optionMap.get(option.getLongOpt(),  selected);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =  optionMap.get(option.getLongOpt(),  selected);	  Option    option    =    optionMap.get(option.getLongOpt());    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	76	None	replace
463	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(option.getParent()))  {  throw  new  AlreadySelectedException(this,  option);  }  [CE]  not  a  statement  [FE]    NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  parent  ==  null  ||!parent.equals(option.getParent()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	parent  ==  null  ||!parent.equals(option.getParent()))  {  throw  new  AlreadySelectedException(this,  option);  }	          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(!selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  not  a  statement	16	None	replace
464	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [CE]  not  a  statement  [FE]      NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  parent  ==  null  ||!parent.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	parent  ==  null  ||!parent.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(!selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  not  a  statement	16	None	replace
465	[BUG]  [BUGGY]  this.selected  =  option.getName();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  this.selected  =  option.getName();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	this.selected  =  option.getName();	  select    =    option.getName();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
466	[BUG]  [BUGGY]  Option  option  =  optionMap.get(option.getOption());  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]              ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =  optionMap.get(option.getOption());  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =  optionMap.get(option.getOption());	  Option    option    =    option.getOption();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	85	None	replace
467	[BUG]  [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(option.getOpt()!=  null)  {  if(!selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(option.getOpt()!=  null)  {  if(!selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	                if(selected.equals(option.getLongOpt()))        {        throw        new        AlreadySelectedException(this,        option);        }        if(!selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(option.getOpt()!=  null)  {  if(!selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
468	[BUG]  [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(option.getOpt()!=  null)  {  if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(option.getOpt()!=  null)  {  if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	                if(selected.equals(option.getLongOpt()))        {        throw        new        AlreadySelectedException(this,        option);        }        if(!selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(option.getOpt()!=  null)  {  if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
469	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	                if(selected.equals(option.getLongOpt()))        {        throw        new        AlreadySelectedException(this,        option);        }        if(!selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  	compilable	  [FE]  NullPointerException  	15	6	add
470	[BUG]  [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	                if(selected.equals(option.getLongOpt()))        {        throw        new        AlreadySelectedException(this,        option);        }        if(!selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  	compilable	  [FE]  NullPointerException  	15	6	add
471	[BUG]  [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(option.getOpt()!=  null)  {  if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(option.getOpt()!=  null)  {  if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	                if(selected.equals(option.getLongOpt()))        {        throw        new        AlreadySelectedException(this,        option);        }        if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(option.getOpt()!=  null)  {  if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
472	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(selected!=  null  ||  selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	                if(selected.equals(option.getLongOpt()))        {        throw        new        AlreadySelectedException(this,        option);        }        if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected!=  null  ||  selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  	compilable	  [FE]  NullPointerException  	13	6	add
473	[BUG]  [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(selected!=  null  ||  selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(selected!=  null  ||  selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	                if(selected.equals(option.getLongOpt()))        {        throw        new        AlreadySelectedException(this,        option);        }        if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected!=  null  ||  selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  	compilable	  [FE]  NullPointerException  	13	6	add
474	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(option.getOpt()  ==  null)  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	                if(selected.equals(option.getLongOpt()))        {        throw        new        AlreadySelectedException(this,        option);        }        if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(option.getOpt()  ==  null)  {  throw  new  AlreadySelectedException(this,  option);  }	  	compilable	  [FE]  NullPointerException  	13	6	add
475	[BUG]  [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(option.getOpt()  ==  null)  {  throw  new  AlreadySelectedException(this,  option);  }  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(option.getOpt()  ==  null)  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	                if(selected.equals(option.getLongOpt()))        {        throw        new        AlreadySelectedException(this,        option);        }        if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(option.getOpt()  ==  null)  {  throw  new  AlreadySelectedException(this,  option);  }	  	compilable	  [FE]  NullPointerException  	13	6	add
476	[BUG]  [BUGGY]  selected  =  optionMap.getItemCount(option.getOpt());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected  =  optionMap.getItemCount(option.getOpt());  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  optionMap.getItemCount(option.getOpt());	  selected    =    optionMap.getItemCount();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
477	[BUG]  [BUGGY]  if(selected.equals(option.getOpt()))  {  selected  =  option.getLongOpt();  opt  =  option.getLongOpt();  }  [CE]  cannot  find  symbol  opt  [FE]    ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(selected.equals(option.getOpt()))  {  selected  =  option.getLongOpt();  opt  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	if(selected.equals(option.getOpt()))  {  selected  =  option.getLongOpt();  opt  =  option.getLongOpt();  }	  selected    =    option.getLongOpt();    String    opt    =    option.getLongOpt();    	non-compiled	[CE]  cannot  find  symbol  opt	82	None	replace
478	[BUG]  [BUGGY]  if(option.getOpt()!=  null)  {  selected  =  option.getLongOpt();  opt  =  option.getLongOpt();  }  [CE]  cannot  find  symbol  opt  [FE]      ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(option.getOpt()!=  null)  {  selected  =  option.getLongOpt();  opt  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	if(option.getOpt()!=  null)  {  selected  =  option.getLongOpt();  opt  =  option.getLongOpt();  }	  selected    =    option.getLongOpt();    String    opt    =    option.getLongOpt();    	non-compiled	[CE]  cannot  find  symbol  opt	82	None	replace
479	[BUG]  [BUGGY]  if(selected  ==  null)  {  selected  =  option.getLongOpt();  opt  =  option.getLongOpt();  }  [CE]  cannot  find  symbol  opt  [FE]        ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(selected  ==  null)  {  selected  =  option.getLongOpt();  opt  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	if(selected  ==  null)  {  selected  =  option.getLongOpt();  opt  =  option.getLongOpt();  }	  selected    =    option.getLongOpt();    String    opt    =    option.getLongOpt();    	non-compiled	[CE]  cannot  find  symbol  opt	82	None	replace
480	[BUG]  [BUGGY]  selected  =  optionMap.getSelected(option.getOpt());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected  =  optionMap.getSelected(option.getOpt());  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  optionMap.getSelected(option.getOpt());	  selected    =    optionMap.getSelected();    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
481	[BUG]  [BUGGY]  selected  =  optionMap.getString(selected);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected  =  optionMap.getString(selected);  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  optionMap.getString(selected);	  selected    =    optionMap.getString();    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
482	[BUG]  [BUGGY]  String  option  =  optionMap.get(selected.opt,  selected.opt);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  optionMap.get(selected.opt,  selected.opt);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionMap.get(selected.opt,  selected.opt);	  String    option    =    optionMap.get(selected.opt);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	97	None	replace
483	[BUG]  [BUGGY]  Option  option  =  optionMap.get(selected  +  2);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =  optionMap.get(selected  +  2);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =  optionMap.get(selected  +  2);	  Option    option    =    optionMap.get(selected    +    1);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	36	None	replace
484	[BUG]  [BUGGY]  Aleger  <?>  selected  =  option.getItem(selected);  [CE]  generics  are  not  supported  in  -source  1.4  [FE]              ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Aleger  <?>  selected  =  option.getItem(selected);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Aleger  <?>  selected  =  option.getItem(selected);	  Aleger    <?>    selected    =    option.getOpt();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	38	None	replace
485	[BUG]  [BUGGY]  chosen  =  option.getName();  [CE]  cannot  find  symbol  chosen  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  chosen  =  option.getName();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	chosen  =  option.getName();	  selected    =    options.getName();    	non-compiled	[CE]  cannot  find  symbol  chosen	30	None	replace
486	[BUG]  [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(option.getLongOpt().equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(option.getOpt()!=  null)  {  if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(option.getLongOpt().equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(option.getOpt()!=  null)  {  if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	                if(selected.equals(option.getLongOpt()))        {        throw        new        AlreadySelectedException(this,        option);        }        if(option.getLongOpt().equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(option.getOpt()!=  null)  {  if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  	non-compiled	[CE]  illegal  start  of  expression	73	None	add
487	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(option.getLongOpt().equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(option.getOpt().equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	                if(selected.equals(option.getLongOpt()))        {        throw        new        AlreadySelectedException(this,        option);        }        if(option.getLongOpt().equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(option.getOpt().equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  	compilable	  [FE]  NullPointerException  	73	6	add
488	[BUG]  [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(option.getLongOpt().equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(option.getOpt().equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]          if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(option.getLongOpt().equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(option.getOpt().equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	                if(selected.equals(option.getLongOpt()))        {        throw        new        AlreadySelectedException(this,        option);        }        if(option.getLongOpt().equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(option.getOpt().equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  	compilable	  [FE]  NullPointerException  	73	6	add
489	[BUG]  [BUGGY]  s  =  option.getLongOpt();  [CE]  cannot  find  symbol  s  [FE]              ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  s  =  option.getLongOpt();  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	s  =  option.getLongOpt();	  selected    =    option.getLongOpt();    selection    =    option.getLongOpt();    	non-compiled	[CE]  cannot  find  symbol  s	24	None	replace
490	[BUG]  [BUGGY]  String  option  =  option.getText(),  selected  +  1);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  option.getText(),  selected  +  1);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  option.getText(),  selected  +  1);	  String    option    =    option.getText(),    selected);    	non-compiled	[CE]  ';'  expected	79	None	replace
491	[BUG]  [BUGGY]  Option  option  =(Option)optionMap.get(selected,  this.required);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]              ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =(Option)optionMap.get(selected,  this.required);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =(Option)optionMap.get(selected,  this.required);	  Option    option    =(Option)optionMap.get(selected,    required);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	32	None	replace
492	[BUG]  [BUGGY]  Option  option  =(Option)optionMap.get(selected,  null);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =(Option)optionMap.get(selected,  null);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =(Option)optionMap.get(selected,  null);	  Option    option    =(Option)optionMap.get(selected,    required);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	32	None	replace
493	[BUG]  [BUGGY]  Option  option  =(Option)optionMap.get(this,  selected,  required);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                  ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  Option  option  =(Option)optionMap.get(this,  selected,  required);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =(Option)optionMap.get(this,  selected,  required);	  Option    option    =(Option)optionMap.get(selected,    required);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	32	None	replace
494	[BUG]  [BUGGY]  selected    =    option.getLongOpt();    String  selected  =  option.getLongOpt();  if(selected  ==  null)  {  selected  =  option.getLongOpt();  String  selected  =  option.getLongOpt();  }  [CE]  variable  selected  is  already  defined  in  method  setSelected(Option)  [FE]    ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected    =    option.getLongOpt();    String  selected  =  option.getLongOpt();  if(selected  ==  null)  {  selected  =  option.getLongOpt();  String  selected  =  option.getLongOpt();  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected        =        option.getLongOpt();        String    selected    =    option.getLongOpt();    if(selected  ==  null)  {  selected  =  option.getLongOpt();  String  selected  =  option.getLongOpt();  }	  	non-compiled	[CE]  variable  selected  is  already  defined  in  method  setSelected(Option)	20	None	add
495	[BUG]  [BUGGY]  selected    =    option.getLongOpt();    String  selected  =  option.getLongOpt();  if(selected  ==  null)  {  selected  =  option.getLongOpt();  String  selected  =  option.getLongOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  [CE]  variable  selected  is  already  defined  in  method  setSelected(Option)  [FE]      ComparisonFailure    [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  selected    =    option.getLongOpt();    String  selected  =  option.getLongOpt();  if(selected  ==  null)  {  selected  =  option.getLongOpt();  String  selected  =  option.getLongOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]      }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected        =        option.getLongOpt();        String    selected    =    option.getLongOpt();    if(selected  ==  null)  {  selected  =  option.getLongOpt();  String  selected  =  option.getLongOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }	  	non-compiled	[CE]  variable  selected  is  already  defined  in  method  setSelected(Option)	20	None	add
496	[BUG]  [BUGGY]  String  option  =  optionMap.get(selected,  this.required);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                    ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  optionMap.get(selected,  this.required);  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionMap.get(selected,  this.required);	  String    option    =    optionMap.get(selected,    required);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	9	None	replace
497	[BUG]  [BUGGY]  String  option  =  options.getOpt();  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]              ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  options.getOpt();  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  options.getOpt();	  String    option    =    selected.getOpt();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	46	None	replace
498	[BUG]  [BUGGY]  if(selected.equals(option.getLongOpt()))  {  if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option.getLongOpt());  }  [CE]  illegal  start  of  expression  [FE]          NullPointerException      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  if(selected.equals(option.getLongOpt()))  {  if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option.getLongOpt());  }  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	if(selected.equals(option.getLongOpt()))  {  if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option.getLongOpt());  }	  [Delete]    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
499	[BUG]  [BUGGY]  String  option  =  selection.getText()  +  option.toString();  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                      ComparisonFailure      [CONTEXT]        selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {      [BUGGY]  String  option  =  selection.getText()  +  option.toString();  [BUGGY]      selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  selection.getText()  +  option.toString();	  String    option    =    option.getText()    +    selected.toString();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	53	None	replace
