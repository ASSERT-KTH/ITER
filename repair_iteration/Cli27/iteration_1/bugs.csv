bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number
this_action1	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]  if  (option  ==  null)  {  selected  =  null;  return;  }      [BUGGY]  if(selected  ==  null  ||  option.equals(option.getOpt()))  {  [BUGGY]  {  selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	98	99	3	add	if(selected  ==  null  ||  option.equals(option.getOpt()))  {	if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  	compilable	  [FE]  ComparisonFailure  testOptionGroupLong	1	3
2	[BUG]  [BUGGY]  if(selected  ==  null  ||  option.equals(option.getOpt()))  {  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]  if  (option  ==  null)  {  selected  =  null;  return;  }      [BUGGY]  if(selected  ==  null  ||  option.equals(option.getOpt()))  {  [BUGGY]  {  selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	98	99	3	replace	if(selected  ==  null  ||  option.equals(option.getOpt()))  {	if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  	compilable	  [FE]  ComparisonFailure  testOptionGroupLong	1	3	replace
5	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [CONTEXT]  if  (option  ==  null)  {  selected  =  null;  return;  }      [BUGGY]    [BUGGY]  {  selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	98	99	3	replace	  	if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  	non-compiled	[CE]  illegal  start  of  type	1	None	replace
21	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]  public  OptionGroup  addOption(Option  option)  {    optionMap.put(option.getKey(),  option);  [BUGGY]    optionMap.put(option.getValue(),  option);  [BUGGY]  return  this;  }  [CLASS]  OptionGroup  [METHOD]  addOption  [RETURN_TYPE]  OptionGroup  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	57	57	3	add	    optionMap.put(option.getValue(),  option);		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	16	3
22	[BUG]  [BUGGY]    optionMap.put(option.getValue(),  option);  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]  public  OptionGroup  addOption(Option  option)  {    optionMap.put(option.getKey(),  option);  [BUGGY]    optionMap.put(option.getValue(),  option);  [BUGGY]  return  this;  }  [CLASS]  OptionGroup  [METHOD]  addOption  [RETURN_TYPE]  OptionGroup  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	57	57	3	replace	    optionMap.put(option.getValue(),  option);		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	16	3	add
22	[BUG]  [BUGGY]    options.put(option.getValue(),  option);  [CE]  cannot  find  symbol  options  [CONTEXT]  public  OptionGroup  addOption(Option  option)  {    optionMap.put(option.getKey(),  option);  [BUGGY]    options.put(option.getValue(),  option);  [BUGGY]  return  this;  }  [CLASS]  OptionGroup  [METHOD]  addOption  [RETURN_TYPE]  OptionGroup  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	57	57	3	replace	    options.put(option.getValue(),  option);		non-compiled	[CE]  cannot  find  symbol  options	16	None	add
23	[BUG]  [BUGGY]    optionMap.put(option.getValue(),  option);  this.option  =  option;  [CE]  cannot  find  symbol  option  [CONTEXT]  public  OptionGroup  addOption(Option  option)  {    optionMap.put(option.getKey(),  option);  [BUGGY]    optionMap.put(option.getValue(),  option);  this.option  =  option;  [BUGGY]  return  this;  }  [CLASS]  OptionGroup  [METHOD]  addOption  [RETURN_TYPE]  OptionGroup  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	57	57	3	replace	    optionMap.put(option.getValue(),  option);  this.option  =  option;		non-compiled	[CE]  cannot  find  symbol  option	16	None	add
24	[BUG]  [BUGGY]    optionMap.put(option.getValue(),  value);  [CE]  cannot  find  symbol  value  [CONTEXT]  public  OptionGroup  addOption(Option  option)  {    optionMap.put(option.getKey(),  option);  [BUGGY]    optionMap.put(option.getValue(),  value);  [BUGGY]  return  this;  }  [CLASS]  OptionGroup  [METHOD]  addOption  [RETURN_TYPE]  OptionGroup  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	57	57	3	replace	    optionMap.put(option.getValue(),  value);		non-compiled	[CE]  cannot  find  symbol  value	16	None	add
32	[BUG]  [BUGGY]    Option  optionMap.put(option.getKey(),  option);  [CE]  ';'  expected  [CONTEXT]  public  void  setSelected(Option  option)  throws  AlreadySelectedException  {  [BUGGY]    Option  optionMap.put(option.getKey(),  option);  [BUGGY]  if  (option  ==  null)  {  {  selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	88	89	3	replace	    Option  optionMap.put(option.getKey(),  option);		non-compiled	[CE]  ';'  expected	20	None	add
34	[BUG]  [BUGGY]    String  selected  =  optionMap.get(option.getKey());  [CE]  incompatible  types  [CONTEXT]  public  void  setSelected(Option  option)  throws  AlreadySelectedException  {  [BUGGY]    String  selected  =  optionMap.get(option.getKey());  [BUGGY]  if  (option  ==  null)  {  {  selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	88	89	3	replace	    String  selected  =  optionMap.get(option.getKey());		non-compiled	[CE]  incompatible  types	20	None	add
41	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]  public  String  getSelected()  {  [BUGGY]  return  this.selected;  [BUGGY]  }  [CLASS]  OptionGroup  [METHOD]  getSelected  [RETURN_TYPE]  String  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	113	113	3	add	return  this.selected;	return  selected;  	compilable	  [FE]  ComparisonFailure  testOptionGroupLong	7	3
42	[BUG]  [BUGGY]  return  this.selected;  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]  public  String  getSelected()  {  [BUGGY]  return  this.selected;  [BUGGY]  }  [CLASS]  OptionGroup  [METHOD]  getSelected  [RETURN_TYPE]  String  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	113	113	3	replace	return  this.selected;	return  selected;  	compilable	  [FE]  ComparisonFailure  testOptionGroupLong	7	3	replace
42	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]  public  String  getSelected()  {  [BUGGY]  return  selected  ==  null?  null  :  selected;  [BUGGY]  }  [CLASS]  OptionGroup  [METHOD]  getSelected  [RETURN_TYPE]  String  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	113	113	3	add	return  selected  ==  null?  null  :  selected;	return  selected;  	compilable	  [FE]  ComparisonFailure  testOptionGroupLong	7	3
43	[BUG]  [BUGGY]  return  selected  ==  null?  null  :  selected;  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]  public  String  getSelected()  {  [BUGGY]  return  selected  ==  null?  null  :  selected;  [BUGGY]  }  [CLASS]  OptionGroup  [METHOD]  getSelected  [RETURN_TYPE]  String  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	113	113	3	replace	return  selected  ==  null?  null  :  selected;	return  selected;  	compilable	  [FE]  ComparisonFailure  testOptionGroupLong	7	3	replace
44	[BUG]  [BUGGY]  return  selected  ==  null?  this  :  selected;  [CE]  incompatible  types  for  ?:  neither  is  a  subtype  of  the  other  [CONTEXT]  public  String  getSelected()  {  [BUGGY]  return  selected  ==  null?  this  :  selected;  [BUGGY]  }  [CLASS]  OptionGroup  [METHOD]  getSelected  [RETURN_TYPE]  String  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	113	113	3	replace	return  selected  ==  null?  this  :  selected;	return  selected;  	non-compiled	[CE]  incompatible  types  for  ?:  neither  is  a  subtype  of  the  other	7	None	replace
45	[BUG]  [BUGGY]    [CE]  missing  return  statement  [CONTEXT]  public  String  getSelected()  {  [BUGGY]    [BUGGY]  }  [CLASS]  OptionGroup  [METHOD]  getSelected  [RETURN_TYPE]  String  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	113	113	3	replace	  	return  selected;  	non-compiled	[CE]  missing  return  statement	7	None	replace
53	[BUG]  [BUGGY]    String  selected  =  optionMap.getSelected();  [CE]  cannot  find  symbol  [CONTEXT]  public  String  getSelected()  {  [BUGGY]    String  selected  =  optionMap.getSelected();  [BUGGY]  return  selected;  }  [CLASS]  OptionGroup  [METHOD]  getSelected  [RETURN_TYPE]  String  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	113	113	3	replace	    String  selected  =  optionMap.getSelected();		non-compiled	[CE]  cannot  find  symbol	8	None	add
54	[BUG]  [BUGGY]    String  selected  =  optionMap.get( "selected ");  [CE]  incompatible  types  [CONTEXT]  public  String  getSelected()  {  [BUGGY]    String  selected  =  optionMap.get( "selected ");  [BUGGY]  return  selected;  }  [CLASS]  OptionGroup  [METHOD]  getSelected  [RETURN_TYPE]  String  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	113	113	3	replace	    String  selected  =  optionMap.get( "selected ");		non-compiled	[CE]  incompatible  types	8	None	add
55	[BUG]  [BUGGY]    String  selected  =  optionMap.keySet();  [CE]  incompatible  types  [CONTEXT]  public  String  getSelected()  {  [BUGGY]    String  selected  =  optionMap.keySet();  [BUGGY]  return  selected;  }  [CLASS]  OptionGroup  [METHOD]  getSelected  [RETURN_TYPE]  String  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	113	113	3	replace	    String  selected  =  optionMap.keySet();		non-compiled	[CE]  incompatible  types	8	None	add
61	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]    optionMap.put(option.getKey(),  option);  [BUGGY]  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	106	106	3	add	    optionMap.put(option.getKey(),  option);		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	6	3
62	[BUG]  [BUGGY]    optionMap.put(option.getKey(),  option);  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]    optionMap.put(option.getKey(),  option);  [BUGGY]  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	106	106	3	replace	    optionMap.put(option.getKey(),  option);		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	6	3	add
62	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]    optionMap.put(option.getKey(),  selected);  [BUGGY]  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	106	106	3	add	    optionMap.put(option.getKey(),  selected);		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	6	3
63	[BUG]  [BUGGY]    optionMap.put(option.getKey(),  selected);  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]    optionMap.put(option.getKey(),  selected);  [BUGGY]  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	106	106	3	replace	    optionMap.put(option.getKey(),  selected);		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	6	3	add
63	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]    this.optionMap.put(option.getKey(),  option);  [BUGGY]  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	106	106	3	add	    this.optionMap.put(option.getKey(),  option);		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	6	3
64	[BUG]  [BUGGY]    this.optionMap.put(option.getKey(),  option);  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]    this.optionMap.put(option.getKey(),  option);  [BUGGY]  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	106	106	3	replace	    this.optionMap.put(option.getKey(),  option);		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	6	3	add
64	[BUG]  [BUGGY]    if(selected.equals(option.getLongOpt()))  throw  new  IllegalArgumentException( " ");  }  [CE]  class  or  interface  expected  [CONTEXT]    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]    if(selected.equals(option.getLongOpt()))  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	106	106	3	replace	    if(selected.equals(option.getLongOpt()))  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  class  or  interface  expected	6	None	add
65	[BUG]  [BUGGY]    if(selected.equals(option.getLongOpt()))  {  map.put(option.getKey(),  option);  }  else  {  setSelected(selected);  }  [CE]  cannot  find  symbol  map  [CONTEXT]    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]    if(selected.equals(option.getLongOpt()))  {  map.put(option.getKey(),  option);  }  else  {  setSelected(selected);  }  [BUGGY]  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	106	106	3	replace	    if(selected.equals(option.getLongOpt()))  {  map.put(option.getKey(),  option);  }  else  {  setSelected(selected);  }		non-compiled	[CE]  cannot  find  symbol  map	6	None	add
71	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testOptionGroup  [CONTEXT]    selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  [BUGGY]  selected  =  option.getLongOpt();  [BUGGY]  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	selected  =  option.getLongOpt();	selected  =  option.getOpt();  	compilable	  [FE]  ComparisonFailure  testOptionGroup	3	3
72	[BUG]  [BUGGY]  selected  =  option.getLongOpt();  [FE]  ComparisonFailure  testOptionGroup  [CONTEXT]    selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  [BUGGY]  selected  =  option.getLongOpt();  [BUGGY]  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  option.getLongOpt();	selected  =  option.getOpt();  	compilable	  [FE]  ComparisonFailure  testOptionGroup	3	3	replace
72	[BUG]  [BUGGY]  selected  =  option.getSelected();  [CE]  cannot  find  symbol  [CONTEXT]    selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  [BUGGY]  selected  =  option.getSelected();  [BUGGY]  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  option.getSelected();	selected  =  option.getOpt();  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
81	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]  public  Collection  getOptions()  {    [BUGGY]    optionMap.remove(selected);  [BUGGY]  return  optionMap.values();  }  [CLASS]  OptionGroup  [METHOD]  getOptions  [RETURN_TYPE]  Collection  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	76	76	3	add	    optionMap.remove(selected);		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	18	3
82	[BUG]  [BUGGY]    optionMap.remove(selected);  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]  public  Collection  getOptions()  {    [BUGGY]    optionMap.remove(selected);  [BUGGY]  return  optionMap.values();  }  [CLASS]  OptionGroup  [METHOD]  getOptions  [RETURN_TYPE]  Collection  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	76	76	3	replace	    optionMap.remove(selected);		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	18	3	add
83	[BUG]  [BUGGY]    optionMap.remove(getKey());  [CE]  cannot  find  symbol  [CONTEXT]  public  Collection  getOptions()  {    [BUGGY]    optionMap.remove(getKey());  [BUGGY]  return  optionMap.values();  }  [CLASS]  OptionGroup  [METHOD]  getOptions  [RETURN_TYPE]  Collection  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	76	76	3	replace	    optionMap.remove(getKey());		non-compiled	[CE]  cannot  find  symbol	18	None	add
84	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]  public  Collection  getOptions()  {    [BUGGY]    optionMap.keySet();  [BUGGY]  return  optionMap.values();  }  [CLASS]  OptionGroup  [METHOD]  getOptions  [RETURN_TYPE]  Collection  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	76	76	3	add	    optionMap.keySet();		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	18	3
85	[BUG]  [BUGGY]    optionMap.keySet();  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]  public  Collection  getOptions()  {    [BUGGY]    optionMap.keySet();  [BUGGY]  return  optionMap.values();  }  [CLASS]  OptionGroup  [METHOD]  getOptions  [RETURN_TYPE]  Collection  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	76	76	3	replace	    optionMap.keySet();		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	18	3	add
85	[BUG]  [BUGGY]    optionMap.put( "Option ",  true);  [CE]  method  put  in  interface  Map  cannot  be  applied  to  given  types;  [CONTEXT]  public  Collection  getOptions()  {    [BUGGY]    optionMap.put( "Option ",  true);  [BUGGY]  return  optionMap.values();  }  [CLASS]  OptionGroup  [METHOD]  getOptions  [RETURN_TYPE]  Collection  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	76	76	3	replace	    optionMap.put( "Option ",  true);		non-compiled	[CE]  method  put  in  interface  Map  cannot  be  applied  to  given  types;	18	None	add
91	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]  public  OptionGroup  addOption(Option  option)  {    optionMap.put(option.getKey(),  option);  [BUGGY]  return  null;  [BUGGY]  }  [CLASS]  OptionGroup  [METHOD]  addOption  [RETURN_TYPE]  OptionGroup  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	57	57	3	add	return  null;	return  this;  	compilable	  [FE]  ComparisonFailure  testOptionGroupLong	15	3
92	[BUG]  [BUGGY]  return  null;  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]  public  OptionGroup  addOption(Option  option)  {    optionMap.put(option.getKey(),  option);  [BUGGY]  return  null;  [BUGGY]  }  [CLASS]  OptionGroup  [METHOD]  addOption  [RETURN_TYPE]  OptionGroup  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	57	57	3	replace	return  null;	return  this;  	compilable	  [FE]  ComparisonFailure  testOptionGroupLong	15	3	replace
92	[BUG]  [BUGGY]  return(option.getValue()  ==  null)?  this  :  option;  [CE]  incompatible  types  for  ?:  neither  is  a  subtype  of  the  other  [CONTEXT]  public  OptionGroup  addOption(Option  option)  {    optionMap.put(option.getKey(),  option);  [BUGGY]  return(option.getValue()  ==  null)?  this  :  option;  [BUGGY]  }  [CLASS]  OptionGroup  [METHOD]  addOption  [RETURN_TYPE]  OptionGroup  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	57	57	3	replace	return(option.getValue()  ==  null)?  this  :  option;	return  this;  	non-compiled	[CE]  incompatible  types  for  ?:  neither  is  a  subtype  of  the  other	15	None	replace
93	[BUG]  [BUGGY]  return(option.hasOption(option))?  this  :  null;  [CE]  cannot  find  symbol  [CONTEXT]  public  OptionGroup  addOption(Option  option)  {    optionMap.put(option.getKey(),  option);  [BUGGY]  return(option.hasOption(option))?  this  :  null;  [BUGGY]  }  [CLASS]  OptionGroup  [METHOD]  addOption  [RETURN_TYPE]  OptionGroup  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	57	57	3	replace	return(option.hasOption(option))?  this  :  null;	return  this;  	non-compiled	[CE]  cannot  find  symbol	15	None	replace
94	[BUG]  [BUGGY]  return(option.hasOption(option))?  this  :  option;  [CE]  cannot  find  symbol  [CONTEXT]  public  OptionGroup  addOption(Option  option)  {    optionMap.put(option.getKey(),  option);  [BUGGY]  return(option.hasOption(option))?  this  :  option;  [BUGGY]  }  [CLASS]  OptionGroup  [METHOD]  addOption  [RETURN_TYPE]  OptionGroup  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	57	57	3	replace	return(option.hasOption(option))?  this  :  option;	return  this;  	non-compiled	[CE]  cannot  find  symbol	15	None	replace
103	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]  public  void  setSelected(Option  option)  throws  AlreadySelectedException  {  [BUGGY]  if(option  ==  null  ||  optionMap.size()  ==  0)  {  [BUGGY]  {  selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	88	89	3	add	if(option  ==  null  ||  optionMap.size()  ==  0)  {	if  (option  ==  null)  {  	compilable	  [FE]  ComparisonFailure  testOptionGroupLong	19	3
104	[BUG]  [BUGGY]  if(option  ==  null  ||  optionMap.size()  ==  0)  {  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]  public  void  setSelected(Option  option)  throws  AlreadySelectedException  {  [BUGGY]  if(option  ==  null  ||  optionMap.size()  ==  0)  {  [BUGGY]  {  selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	88	89	3	replace	if(option  ==  null  ||  optionMap.size()  ==  0)  {	if  (option  ==  null)  {  	compilable	  [FE]  ComparisonFailure  testOptionGroupLong	19	3	replace
104	[BUG]  [BUGGY]  if(option  ==  null  ||  optionMap.hasOption(option))  {  [CE]  cannot  find  symbol  [CONTEXT]  public  void  setSelected(Option  option)  throws  AlreadySelectedException  {  [BUGGY]  if(option  ==  null  ||  optionMap.hasOption(option))  {  [BUGGY]  {  selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	88	89	3	replace	if(option  ==  null  ||  optionMap.hasOption(option))  {	if  (option  ==  null)  {  	non-compiled	[CE]  cannot  find  symbol	19	None	replace
111	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]  if  (option  ==  null)  {  selected  =  null;  return;  }      [BUGGY]    optionMap.put(option.getKey(),  option);  [BUGGY]  if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  {  selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	98	99	3	add	    optionMap.put(option.getKey(),  option);		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	2	3
112	[BUG]  [BUGGY]    optionMap.put(option.getKey(),  option);  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]  if  (option  ==  null)  {  selected  =  null;  return;  }      [BUGGY]    optionMap.put(option.getKey(),  option);  [BUGGY]  if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  {  selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	98	99	3	replace	    optionMap.put(option.getKey(),  option);		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	2	3	add
112	[BUG]  [BUGGY]    if(optionMap.containsKey(option.getKey()))  {  if(selected.equals(option.getLongOpt()))  {  return;  }  [CE]  illegal  start  of  expression  [CONTEXT]  if  (option  ==  null)  {  selected  =  null;  return;  }      [BUGGY]    if(optionMap.containsKey(option.getKey()))  {  if(selected.equals(option.getLongOpt()))  {  return;  }  [BUGGY]  if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  {  selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	98	99	3	replace	    if(optionMap.containsKey(option.getKey()))  {  if(selected.equals(option.getLongOpt()))  {  return;  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
113	[BUG]  [BUGGY]    if(optionMap.containsKey(option.getKey()))  {  if(!selected.equals(option.getLongOpt()))  {  return;  }  [CE]  illegal  start  of  expression  [CONTEXT]  if  (option  ==  null)  {  selected  =  null;  return;  }      [BUGGY]    if(optionMap.containsKey(option.getKey()))  {  if(!selected.equals(option.getLongOpt()))  {  return;  }  [BUGGY]  if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  {  selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	98	99	3	replace	    if(optionMap.containsKey(option.getKey()))  {  if(!selected.equals(option.getLongOpt()))  {  return;  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
114	[BUG]  [BUGGY]    if(optionMap.containsKey(option.getKey()))  {  if(selected.equals(option.getValue()))  {  return;  }  [CE]  illegal  start  of  expression  [CONTEXT]  if  (option  ==  null)  {  selected  =  null;  return;  }      [BUGGY]    if(optionMap.containsKey(option.getKey()))  {  if(selected.equals(option.getValue()))  {  return;  }  [BUGGY]  if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  {  selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	98	99	3	replace	    if(optionMap.containsKey(option.getKey()))  {  if(selected.equals(option.getValue()))  {  return;  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
115	[BUG]  [BUGGY]    if(optionMap.containsKey(option.getKey()))  {  if(!selected.equals(option.getValue()))  {  return;  }  [CE]  illegal  start  of  expression  [CONTEXT]  if  (option  ==  null)  {  selected  =  null;  return;  }      [BUGGY]    if(optionMap.containsKey(option.getKey()))  {  if(!selected.equals(option.getValue()))  {  return;  }  [BUGGY]  if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  {  selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	98	99	3	replace	    if(optionMap.containsKey(option.getKey()))  {  if(!selected.equals(option.getValue()))  {  return;  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
121	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]    selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  [BUGGY]    optionMap.put(option.getKey(),  option);  [BUGGY]  selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	    optionMap.put(option.getKey(),  option);		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	4	3
122	[BUG]  [BUGGY]    optionMap.put(option.getKey(),  option);  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]    selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  [BUGGY]    optionMap.put(option.getKey(),  option);  [BUGGY]  selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	    optionMap.put(option.getKey(),  option);		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	4	3	add
122	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]    selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  [BUGGY]    optionMap.put(option.getLongOpt(),  selected);  [BUGGY]  selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	    optionMap.put(option.getLongOpt(),  selected);		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	4	3
123	[BUG]  [BUGGY]    optionMap.put(option.getLongOpt(),  selected);  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]    selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  [BUGGY]    optionMap.put(option.getLongOpt(),  selected);  [BUGGY]  selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	    optionMap.put(option.getLongOpt(),  selected);		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	4	3	add
123	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]    selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  [BUGGY]    optionMap.remove(selected);  [BUGGY]  selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	    optionMap.remove(selected);		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	4	3
124	[BUG]  [BUGGY]    optionMap.remove(selected);  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]    selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  [BUGGY]    optionMap.remove(selected);  [BUGGY]  selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	    optionMap.remove(selected);		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	4	3	add
124	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]    selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  [BUGGY]    optionMap.put(option.getLongOpt(),  option);  [BUGGY]  selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	    optionMap.put(option.getLongOpt(),  option);		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	4	3
125	[BUG]  [BUGGY]    optionMap.put(option.getLongOpt(),  option);  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]    selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  [BUGGY]    optionMap.put(option.getLongOpt(),  option);  [BUGGY]  selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	    optionMap.put(option.getLongOpt(),  option);		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	4	3	add
125	[BUG]  [BUGGY]    Option  optionMap.put(option.getKey(),  option);  [CE]  ';'  expected  [CONTEXT]    selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  [BUGGY]    Option  optionMap.put(option.getKey(),  option);  [BUGGY]  selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	    Option  optionMap.put(option.getKey(),  option);		non-compiled	[CE]  ';'  expected	4	None	add
131	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]    [BUGGY]  private  final  Map  optionMap  =  new  HashMap();  [BUGGY]    [CLASS]  OptionGroup  [VARIABLES]  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	37	37	3	add	private  final  Map  optionMap  =  new  HashMap();	private  Map  optionMap  =  new  HashMap();  	compilable	  [FE]  ComparisonFailure  testOptionGroupLong	11	3
132	[BUG]  [BUGGY]  private  final  Map  optionMap  =  new  HashMap();  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]    [BUGGY]  private  final  Map  optionMap  =  new  HashMap();  [BUGGY]    [CLASS]  OptionGroup  [VARIABLES]  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	37	37	3	replace	private  final  Map  optionMap  =  new  HashMap();	private  Map  optionMap  =  new  HashMap();  	compilable	  [FE]  ComparisonFailure  testOptionGroupLong	11	3	replace
133	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]    [BUGGY]  public  Map  optionMap  =  new  HashMap();  [BUGGY]    [CLASS]  OptionGroup  [VARIABLES]  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	37	37	3	add	public  Map  optionMap  =  new  HashMap();	private  Map  optionMap  =  new  HashMap();  	compilable	  [FE]  ComparisonFailure  testOptionGroupLong	11	3
134	[BUG]  [BUGGY]  public  Map  optionMap  =  new  HashMap();  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]    [BUGGY]  public  Map  optionMap  =  new  HashMap();  [BUGGY]    [CLASS]  OptionGroup  [VARIABLES]  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	37	37	3	replace	public  Map  optionMap  =  new  HashMap();	private  Map  optionMap  =  new  HashMap();  	compilable	  [FE]  ComparisonFailure  testOptionGroupLong	11	3	replace
134	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]    [BUGGY]  protected  Map  optionMap  =  new  HashMap();  [BUGGY]    [CLASS]  OptionGroup  [VARIABLES]  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	37	37	3	add	protected  Map  optionMap  =  new  HashMap();	private  Map  optionMap  =  new  HashMap();  	compilable	  [FE]  ComparisonFailure  testOptionGroupLong	11	3
135	[BUG]  [BUGGY]  protected  Map  optionMap  =  new  HashMap();  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]    [BUGGY]  protected  Map  optionMap  =  new  HashMap();  [BUGGY]    [CLASS]  OptionGroup  [VARIABLES]  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	37	37	3	replace	protected  Map  optionMap  =  new  HashMap();	private  Map  optionMap  =  new  HashMap();  	compilable	  [FE]  ComparisonFailure  testOptionGroupLong	11	3	replace
135	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  optionMap  [CONTEXT]    [BUGGY]    [BUGGY]    [CLASS]  OptionGroup  [VARIABLES]  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	37	37	3	replace	  	private  Map  optionMap  =  new  HashMap();  	non-compiled	[CE]  cannot  find  symbol  optionMap	11	None	replace
141	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]  public  OptionGroup  addOption(Option  option)  {    [BUGGY]    optionMap.put(option.getValue(),  option);  [BUGGY]  optionMap.put(option.getKey(),  option);  return  this;  }  [CLASS]  OptionGroup  [METHOD]  addOption  [RETURN_TYPE]  OptionGroup  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	55	55	3	add	    optionMap.put(option.getValue(),  option);		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	14	3
142	[BUG]  [BUGGY]    optionMap.put(option.getValue(),  option);  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]  public  OptionGroup  addOption(Option  option)  {    [BUGGY]    optionMap.put(option.getValue(),  option);  [BUGGY]  optionMap.put(option.getKey(),  option);  return  this;  }  [CLASS]  OptionGroup  [METHOD]  addOption  [RETURN_TYPE]  OptionGroup  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	55	55	3	replace	    optionMap.put(option.getValue(),  option);		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	14	3	add
142	[BUG]  [BUGGY]    OptionMap.put(option.getValue(),  option);  [CE]  cannot  find  symbol  OptionMap  [CONTEXT]  public  OptionGroup  addOption(Option  option)  {    [BUGGY]    OptionMap.put(option.getValue(),  option);  [BUGGY]  optionMap.put(option.getKey(),  option);  return  this;  }  [CLASS]  OptionGroup  [METHOD]  addOption  [RETURN_TYPE]  OptionGroup  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	55	55	3	replace	    OptionMap.put(option.getValue(),  option);		non-compiled	[CE]  cannot  find  symbol  OptionMap	14	None	add
143	[BUG]  [BUGGY]    optionMap.put(option.getLongValue(),  option);  [CE]  cannot  find  symbol  [CONTEXT]  public  OptionGroup  addOption(Option  option)  {    [BUGGY]    optionMap.put(option.getLongValue(),  option);  [BUGGY]  optionMap.put(option.getKey(),  option);  return  this;  }  [CLASS]  OptionGroup  [METHOD]  addOption  [RETURN_TYPE]  OptionGroup  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	55	55	3	replace	    optionMap.put(option.getLongValue(),  option);		non-compiled	[CE]  cannot  find  symbol	14	None	add
144	[BUG]  [BUGGY]    option  =  option.getValue();  [CE]  incompatible  types  [CONTEXT]  public  OptionGroup  addOption(Option  option)  {    [BUGGY]    option  =  option.getValue();  [BUGGY]  optionMap.put(option.getKey(),  option);  return  this;  }  [CLASS]  OptionGroup  [METHOD]  addOption  [RETURN_TYPE]  OptionGroup  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	55	55	3	replace	    option  =  option.getValue();		non-compiled	[CE]  incompatible  types	14	None	add
145	[BUG]  [BUGGY]    option  =  option.getOption();  [CE]  cannot  find  symbol  [CONTEXT]  public  OptionGroup  addOption(Option  option)  {    [BUGGY]    option  =  option.getOption();  [BUGGY]  optionMap.put(option.getKey(),  option);  return  this;  }  [CLASS]  OptionGroup  [METHOD]  addOption  [RETURN_TYPE]  OptionGroup  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	55	55	3	replace	    option  =  option.getOption();		non-compiled	[CE]  cannot  find  symbol	14	None	add
151	[BUG]  [BUGGY]    optionMap  =  new  HashMap();  [CE]  <identifier>  expected  [CONTEXT]    [BUGGY]    optionMap  =  new  HashMap();  [BUGGY]  private  Map  optionMap  =  new  HashMap();  [CLASS]  OptionGroup  [VARIABLES]  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	37	37	3	replace	    optionMap  =  new  HashMap();		non-compiled	[CE]  <identifier>  expected	12	None	add
152	[BUG]  [BUGGY]    optionMap.put(OptionGroup.LONG,  true);  [CE]  <identifier>  expected  [CONTEXT]    [BUGGY]    optionMap.put(OptionGroup.LONG,  true);  [BUGGY]  private  Map  optionMap  =  new  HashMap();  [CLASS]  OptionGroup  [VARIABLES]  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	37	37	3	replace	    optionMap.put(OptionGroup.LONG,  true);		non-compiled	[CE]  <identifier>  expected	12	None	add
153	[BUG]  [BUGGY]    return  new  HashMap();  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    return  new  HashMap();  [BUGGY]  private  Map  optionMap  =  new  HashMap();  [CLASS]  OptionGroup  [VARIABLES]  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	37	37	3	replace	    return  new  HashMap();		non-compiled	[CE]  illegal  start  of  type	12	None	add
154	[BUG]  [BUGGY]    optionMap.put(OptionGroup.LONG_ROOT,  true);  [CE]  <identifier>  expected  [CONTEXT]    [BUGGY]    optionMap.put(OptionGroup.LONG_ROOT,  true);  [BUGGY]  private  Map  optionMap  =  new  HashMap();  [CLASS]  OptionGroup  [VARIABLES]  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	37	37	3	replace	    optionMap.put(OptionGroup.LONG_ROOT,  true);		non-compiled	[CE]  <identifier>  expected	12	None	add
155	[BUG]  [BUGGY]    return  optionMap.values();  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    return  optionMap.values();  [BUGGY]  private  Map  optionMap  =  new  HashMap();  [CLASS]  OptionGroup  [VARIABLES]  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	37	37	3	replace	    return  optionMap.values();		non-compiled	[CE]  illegal  start  of  type	12	None	add
163	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]  public  Collection  getOptions()  {    [BUGGY]  return  this.optionMap.values();  [BUGGY]  }  [CLASS]  OptionGroup  [METHOD]  getOptions  [RETURN_TYPE]  Collection  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	76	76	3	add	return  this.optionMap.values();	return  optionMap.values();  	compilable	  [FE]  ComparisonFailure  testOptionGroupLong	17	3
164	[BUG]  [BUGGY]  return  this.optionMap.values();  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]  public  Collection  getOptions()  {    [BUGGY]  return  this.optionMap.values();  [BUGGY]  }  [CLASS]  OptionGroup  [METHOD]  getOptions  [RETURN_TYPE]  Collection  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	76	76	3	replace	return  this.optionMap.values();	return  optionMap.values();  	compilable	  [FE]  ComparisonFailure  testOptionGroupLong	17	3	replace
164	[BUG]  [BUGGY]  return  optionMap.size();  [CE]  incompatible  types  [CONTEXT]  public  Collection  getOptions()  {    [BUGGY]  return  optionMap.size();  [BUGGY]  }  [CLASS]  OptionGroup  [METHOD]  getOptions  [RETURN_TYPE]  Collection  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	76	76	3	replace	return  optionMap.size();	return  optionMap.values();  	non-compiled	[CE]  incompatible  types	17	None	replace
173	[BUG]  [BUGGY]  optionMap.put(option.getLongKey(),  option);  [CE]  cannot  find  symbol  [CONTEXT]  public  OptionGroup  addOption(Option  option)  {    [BUGGY]  optionMap.put(option.getLongKey(),  option);  [BUGGY]    return  this;  }  [CLASS]  OptionGroup  [METHOD]  addOption  [RETURN_TYPE]  OptionGroup  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	55	55	3	replace	optionMap.put(option.getLongKey(),  option);	optionMap.put(option.getKey(),  option);  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
174	[BUG]  [BUGGY]  optionMap.put(option.getName(),  option);  [CE]  cannot  find  symbol  [CONTEXT]  public  OptionGroup  addOption(Option  option)  {    [BUGGY]  optionMap.put(option.getName(),  option);  [BUGGY]    return  this;  }  [CLASS]  OptionGroup  [METHOD]  addOption  [RETURN_TYPE]  OptionGroup  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	55	55	3	replace	optionMap.put(option.getName(),  option);	optionMap.put(option.getKey(),  option);  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
184	[BUG]  [BUGGY]  options.put(option.getKey(),  option);  [CE]  illegal  start  of  expression  [CONTEXT]    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]  options.put(option.getKey(),  option);  [BUGGY]    [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	106	106	3	replace	options.put(option.getKey(),  option);	}  	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
4	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]    optionMap.remove(selected);  [BUGGY]  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	106	106	3	add	    optionMap.remove(selected);		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	6	3
5	[BUG]  [BUGGY]    optionMap.remove(selected);  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]    optionMap.remove(selected);  [BUGGY]  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	106	106	3	replace	    optionMap.remove(selected);		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	6	3	add
5	[BUG]  [BUGGY]    optionMap.put(option.getKey(),  selection);  [CE]  cannot  find  symbol  selection  [CONTEXT]    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]    optionMap.put(option.getKey(),  selection);  [BUGGY]  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	106	106	3	replace	    optionMap.put(option.getKey(),  selection);		non-compiled	[CE]  cannot  find  symbol  selection	6	None	add
42	[BUG]  [BUGGY]  selected  =  option.next();  [CE]  cannot  find  symbol  [CONTEXT]    selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  [BUGGY]  selected  =  option.next();  [BUGGY]  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  option.next();	selected  =  option.getOpt();  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
43	[BUG]  [BUGGY]  selected  =  option.removeOpt();  [CE]  cannot  find  symbol  [CONTEXT]    selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  [BUGGY]  selected  =  option.removeOpt();  [BUGGY]  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  option.removeOpt();	selected  =  option.getOpt();  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
44	[BUG]  [BUGGY]  selected  =  option.selected();  [CE]  cannot  find  symbol  [CONTEXT]    selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  [BUGGY]  selected  =  option.selected();  [BUGGY]  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  option.selected();	selected  =  option.getOpt();  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
63	[BUG]  [BUGGY]    optionMap.put(option.getValue(),  true);  [CE]  method  put  in  interface  Map  cannot  be  applied  to  given  types;  [CONTEXT]  public  OptionGroup  addOption(Option  option)  {    optionMap.put(option.getKey(),  option);  [BUGGY]    optionMap.put(option.getValue(),  true);  [BUGGY]  return  this;  }  [CLASS]  OptionGroup  [METHOD]  addOption  [RETURN_TYPE]  OptionGroup  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	57	57	3	replace	    optionMap.put(option.getValue(),  true);		non-compiled	[CE]  method  put  in  interface  Map  cannot  be  applied  to  given  types;	16	None	add
65	[BUG]  [BUGGY]    optionMap.put(option.getValue(),  Option.longValue());  [CE]  cannot  find  symbol  [CONTEXT]  public  OptionGroup  addOption(Option  option)  {    optionMap.put(option.getKey(),  option);  [BUGGY]    optionMap.put(option.getValue(),  Option.longValue());  [BUGGY]  return  this;  }  [CLASS]  OptionGroup  [METHOD]  addOption  [RETURN_TYPE]  OptionGroup  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	57	57	3	replace	    optionMap.put(option.getValue(),  Option.longValue());		non-compiled	[CE]  cannot  find  symbol	16	None	add
83	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]  public  void  setSelected(Option  option)  throws  AlreadySelectedException  {  [BUGGY]    optionMap.clear();  [BUGGY]  if  (option  ==  null)  {  {  selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	88	89	3	add	    optionMap.clear();		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	20	3
84	[BUG]  [BUGGY]    optionMap.clear();  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]  public  void  setSelected(Option  option)  throws  AlreadySelectedException  {  [BUGGY]    optionMap.clear();  [BUGGY]  if  (option  ==  null)  {  {  selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	88	89	3	replace	    optionMap.clear();		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	20	3	add
84	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]  public  void  setSelected(Option  option)  throws  AlreadySelectedException  {  [BUGGY]    this.optionMap.clear();  [BUGGY]  if  (option  ==  null)  {  {  selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	88	89	3	add	    this.optionMap.clear();		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	20	3
85	[BUG]  [BUGGY]    this.optionMap.clear();  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]  public  void  setSelected(Option  option)  throws  AlreadySelectedException  {  [BUGGY]    this.optionMap.clear();  [BUGGY]  if  (option  ==  null)  {  {  selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	88	89	3	replace	    this.optionMap.clear();		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	20	3	add
85	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]  public  void  setSelected(Option  option)  throws  AlreadySelectedException  {  [BUGGY]    optionMap.remove(selected);  [BUGGY]  if  (option  ==  null)  {  {  selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	88	89	3	add	    optionMap.remove(selected);		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	20	3
86	[BUG]  [BUGGY]    optionMap.remove(selected);  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]  public  void  setSelected(Option  option)  throws  AlreadySelectedException  {  [BUGGY]    optionMap.remove(selected);  [BUGGY]  if  (option  ==  null)  {  {  selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	88	89	3	replace	    optionMap.remove(selected);		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	20	3	add
142	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]  public  OptionGroup  addOption(Option  option)  {    [BUGGY]    optionMap.remove(option.getKey());  [BUGGY]  optionMap.put(option.getKey(),  option);  return  this;  }  [CLASS]  OptionGroup  [METHOD]  addOption  [RETURN_TYPE]  OptionGroup  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	55	55	3	add	    optionMap.remove(option.getKey());		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	14	3
143	[BUG]  [BUGGY]    optionMap.remove(option.getKey());  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]  public  OptionGroup  addOption(Option  option)  {    [BUGGY]    optionMap.remove(option.getKey());  [BUGGY]  optionMap.put(option.getKey(),  option);  return  this;  }  [CLASS]  OptionGroup  [METHOD]  addOption  [RETURN_TYPE]  OptionGroup  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	55	55	3	replace	    optionMap.remove(option.getKey());		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	14	3	add
143	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]  public  OptionGroup  addOption(Option  option)  {    [BUGGY]    this.optionMap.put(option.getValue(),  option);  [BUGGY]  optionMap.put(option.getKey(),  option);  return  this;  }  [CLASS]  OptionGroup  [METHOD]  addOption  [RETURN_TYPE]  OptionGroup  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	55	55	3	add	    this.optionMap.put(option.getValue(),  option);		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	14	3
144	[BUG]  [BUGGY]    this.optionMap.put(option.getValue(),  option);  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]  public  OptionGroup  addOption(Option  option)  {    [BUGGY]    this.optionMap.put(option.getValue(),  option);  [BUGGY]  optionMap.put(option.getKey(),  option);  return  this;  }  [CLASS]  OptionGroup  [METHOD]  addOption  [RETURN_TYPE]  OptionGroup  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	55	55	3	replace	    this.optionMap.put(option.getValue(),  option);		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	14	3	add
145	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]  public  OptionGroup  addOption(Option  option)  {    [BUGGY]    this.optionMap.remove(option.getKey());  [BUGGY]  optionMap.put(option.getKey(),  option);  return  this;  }  [CLASS]  OptionGroup  [METHOD]  addOption  [RETURN_TYPE]  OptionGroup  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	55	55	3	add	    this.optionMap.remove(option.getKey());		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	14	3
146	[BUG]  [BUGGY]    this.optionMap.remove(option.getKey());  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]  public  OptionGroup  addOption(Option  option)  {    [BUGGY]    this.optionMap.remove(option.getKey());  [BUGGY]  optionMap.put(option.getKey(),  option);  return  this;  }  [CLASS]  OptionGroup  [METHOD]  addOption  [RETURN_TYPE]  OptionGroup  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	55	55	3	replace	    this.optionMap.remove(option.getKey());		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	14	3	add
182	[BUG]  [BUGGY]    private  final  Map.Entry  <  K,  V>  optionMap  =  new  HashMap();  [CE]  generics  are  not  supported  in  -source  1.4  [CONTEXT]    [BUGGY]    private  final  Map.Entry  <  K,  V>  optionMap  =  new  HashMap();  [BUGGY]  private  Map  optionMap  =  new  HashMap();  [CLASS]  OptionGroup  [VARIABLES]  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	37	37	3	replace	    private  final  Map.Entry  <  K,  V>  optionMap  =  new  HashMap();		non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	12	None	add
183	[BUG]  [BUGGY]    return(OptionGroup)optionMap.clone();  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    return(OptionGroup)optionMap.clone();  [BUGGY]  private  Map  optionMap  =  new  HashMap();  [CLASS]  OptionGroup  [VARIABLES]  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	37	37	3	replace	    return(OptionGroup)optionMap.clone();		non-compiled	[CE]  illegal  start  of  type	12	None	add
184	[BUG]  [BUGGY]    return(OptionGroup)optionMap.get();  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    return(OptionGroup)optionMap.get();  [BUGGY]  private  Map  optionMap  =  new  HashMap();  [CLASS]  OptionGroup  [VARIABLES]  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	37	37	3	replace	    return(OptionGroup)optionMap.get();		non-compiled	[CE]  illegal  start  of  type	12	None	add
185	[BUG]  [BUGGY]    return(OptionGroup)optionMap.get(new  OptionGroup());  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    return(OptionGroup)optionMap.get(new  OptionGroup());  [BUGGY]  private  Map  optionMap  =  new  HashMap();  [CLASS]  OptionGroup  [VARIABLES]  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	37	37	3	replace	    return(OptionGroup)optionMap.get(new  OptionGroup());		non-compiled	[CE]  illegal  start  of  type	12	None	add
201	[BUG]  [BUGGY]    String  selected  =(OptionGroup)this.optionMap.getSelected();  [CE]  cannot  find  symbol  [CONTEXT]  public  String  getSelected()  {  [BUGGY]    String  selected  =(OptionGroup)this.optionMap.getSelected();  [BUGGY]  return  selected;  }  [CLASS]  OptionGroup  [METHOD]  getSelected  [RETURN_TYPE]  String  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	113	113	3	replace	    String  selected  =(OptionGroup)this.optionMap.getSelected();		non-compiled	[CE]  cannot  find  symbol	8	None	add
202	[BUG]  [BUGGY]    String  selected  =(OptionGroup)this.optionMap.get(selected);  [CE]  incompatible  types  [CONTEXT]  public  String  getSelected()  {  [BUGGY]    String  selected  =(OptionGroup)this.optionMap.get(selected);  [BUGGY]  return  selected;  }  [CLASS]  OptionGroup  [METHOD]  getSelected  [RETURN_TYPE]  String  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	113	113	3	replace	    String  selected  =(OptionGroup)this.optionMap.get(selected);		non-compiled	[CE]  incompatible  types	8	None	add
204	[BUG]  [BUGGY]    String  selected  =(OptionMap)this.optionMap.get(selected);  [CE]  cannot  find  symbol  [CONTEXT]  public  String  getSelected()  {  [BUGGY]    String  selected  =(OptionMap)this.optionMap.get(selected);  [BUGGY]  return  selected;  }  [CLASS]  OptionGroup  [METHOD]  getSelected  [RETURN_TYPE]  String  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	113	113	3	replace	    String  selected  =(OptionMap)this.optionMap.get(selected);		non-compiled	[CE]  cannot  find  symbol	8	None	add
205	[BUG]  [BUGGY]    String  selected  =(OptionMap)this.optionMap.get();  [CE]  cannot  find  symbol  [CONTEXT]  public  String  getSelected()  {  [BUGGY]    String  selected  =(OptionMap)this.optionMap.get();  [BUGGY]  return  selected;  }  [CLASS]  OptionGroup  [METHOD]  getSelected  [RETURN_TYPE]  String  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	113	113	3	replace	    String  selected  =(OptionMap)this.optionMap.get();		non-compiled	[CE]  cannot  find  symbol	8	None	add
224	[BUG]  [BUGGY]  [FE]  NullPointerException  testOptionGroupLong  [CONTEXT]  public  String  getSelected()  {  [BUGGY]  return  selected.toString();  [BUGGY]  }  [CLASS]  OptionGroup  [METHOD]  getSelected  [RETURN_TYPE]  String  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	113	113	3	add	return  selected.toString();	return  selected;  	compilable	  [FE]  NullPointerException  testOptionGroupLong	7	3
225	[BUG]  [BUGGY]  return  selected.toString();  [FE]  NullPointerException  testOptionGroupLong  [CONTEXT]  public  String  getSelected()  {  [BUGGY]  return  selected.toString();  [BUGGY]  }  [CLASS]  OptionGroup  [METHOD]  getSelected  [RETURN_TYPE]  String  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	113	113	3	replace	return  selected.toString();	return  selected;  	compilable	  [FE]  NullPointerException  testOptionGroupLong	7	3	replace
243	[BUG]  [BUGGY]    option  =  optionMap.get(selected);  [CE]  incompatible  types  [CONTEXT]    selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  [BUGGY]    option  =  optionMap.get(selected);  [BUGGY]  selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	    option  =  optionMap.get(selected);		non-compiled	[CE]  incompatible  types	4	None	add
244	[BUG]  [BUGGY]    option  =  optionMap.select(selected);  [CE]  cannot  find  symbol  [CONTEXT]    selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  [BUGGY]    option  =  optionMap.select(selected);  [BUGGY]  selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	    option  =  optionMap.select(selected);		non-compiled	[CE]  cannot  find  symbol	4	None	add
245	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]    selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  [BUGGY]    optionMap.put(option.getKey(),  selected);  [BUGGY]  selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	    optionMap.put(option.getKey(),  selected);		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	4	3
246	[BUG]  [BUGGY]    optionMap.put(option.getKey(),  selected);  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]    selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  [BUGGY]    optionMap.put(option.getKey(),  selected);  [BUGGY]  selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	    optionMap.put(option.getKey(),  selected);		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	4	3	add
262	[BUG]  [BUGGY]    OptionMap  optionMap  =(OptionMap)optionMap.keySet();  [CE]  cannot  find  symbol  [CONTEXT]  public  Collection  getOptions()  {    [BUGGY]    OptionMap  optionMap  =(OptionMap)optionMap.keySet();  [BUGGY]  return  optionMap.values();  }  [CLASS]  OptionGroup  [METHOD]  getOptions  [RETURN_TYPE]  Collection  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	76	76	3	replace	    OptionMap  optionMap  =(OptionMap)optionMap.keySet();		non-compiled	[CE]  cannot  find  symbol	18	None	add
263	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]  public  Collection  getOptions()  {    [BUGGY]    optionMap.remove(optionMap.keySet());  [BUGGY]  return  optionMap.values();  }  [CLASS]  OptionGroup  [METHOD]  getOptions  [RETURN_TYPE]  Collection  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	76	76	3	add	    optionMap.remove(optionMap.keySet());		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	18	3
264	[BUG]  [BUGGY]    optionMap.remove(optionMap.keySet());  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]  public  Collection  getOptions()  {    [BUGGY]    optionMap.remove(optionMap.keySet());  [BUGGY]  return  optionMap.values();  }  [CLASS]  OptionGroup  [METHOD]  getOptions  [RETURN_TYPE]  Collection  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	76	76	3	replace	    optionMap.remove(optionMap.keySet());		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	18	3	add
264	[BUG]  [BUGGY]    OptionMap  optionMap  =(Option)optionMap.keySet();  [CE]  cannot  find  symbol  [CONTEXT]  public  Collection  getOptions()  {    [BUGGY]    OptionMap  optionMap  =(Option)optionMap.keySet();  [BUGGY]  return  optionMap.values();  }  [CLASS]  OptionGroup  [METHOD]  getOptions  [RETURN_TYPE]  Collection  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	76	76	3	replace	    OptionMap  optionMap  =(Option)optionMap.keySet();		non-compiled	[CE]  cannot  find  symbol	18	None	add
265	[BUG]  [BUGGY]    OptionMap  optionMap  =(OptionMap)this.optionMap.keySet();  [CE]  cannot  find  symbol  [CONTEXT]  public  Collection  getOptions()  {    [BUGGY]    OptionMap  optionMap  =(OptionMap)this.optionMap.keySet();  [BUGGY]  return  optionMap.values();  }  [CLASS]  OptionGroup  [METHOD]  getOptions  [RETURN_TYPE]  Collection  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	76	76	3	replace	    OptionMap  optionMap  =(OptionMap)this.optionMap.keySet();		non-compiled	[CE]  cannot  find  symbol	18	None	add
284	[BUG]  [BUGGY]  return  optionMap.values()  /(optionMap.size()  ==  0)?  optionMap.keySet()  :  null;  [CE]  bad  operand  types  for  binary  operator  '/'  [CONTEXT]  public  Collection  getOptions()  {    [BUGGY]  return  optionMap.values()  /(optionMap.size()  ==  0)?  optionMap.keySet()  :  null;  [BUGGY]  }  [CLASS]  OptionGroup  [METHOD]  getOptions  [RETURN_TYPE]  Collection  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	76	76	3	replace	return  optionMap.values()  /(optionMap.size()  ==  0)?  optionMap.keySet()  :  null;	return  optionMap.values();  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	17	None	replace
302	[BUG]  [BUGGY]  return(option  ==  null)?  this  :  optionMap.get(option.getValue());  [CE]  incompatible  types  [CONTEXT]  public  OptionGroup  addOption(Option  option)  {    optionMap.put(option.getKey(),  option);  [BUGGY]  return(option  ==  null)?  this  :  optionMap.get(option.getValue());  [BUGGY]  }  [CLASS]  OptionGroup  [METHOD]  addOption  [RETURN_TYPE]  OptionGroup  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	57	57	3	replace	return(option  ==  null)?  this  :  optionMap.get(option.getValue());	return  this;  	non-compiled	[CE]  incompatible  types	15	None	replace
303	[BUG]  [BUGGY]  return(option  ==  null)?  null  :  optionMap.get(option.getValue());  [CE]  incompatible  types  [CONTEXT]  public  OptionGroup  addOption(Option  option)  {    optionMap.put(option.getKey(),  option);  [BUGGY]  return(option  ==  null)?  null  :  optionMap.get(option.getValue());  [BUGGY]  }  [CLASS]  OptionGroup  [METHOD]  addOption  [RETURN_TYPE]  OptionGroup  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	57	57	3	replace	return(option  ==  null)?  null  :  optionMap.get(option.getValue());	return  this;  	non-compiled	[CE]  incompatible  types	15	None	replace
304	[BUG]  [BUGGY]  return(option  ==  null)?  this  :  optionMap.keySet().addOption(option);  [CE]  cannot  find  symbol  [CONTEXT]  public  OptionGroup  addOption(Option  option)  {    optionMap.put(option.getKey(),  option);  [BUGGY]  return(option  ==  null)?  this  :  optionMap.keySet().addOption(option);  [BUGGY]  }  [CLASS]  OptionGroup  [METHOD]  addOption  [RETURN_TYPE]  OptionGroup  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	57	57	3	replace	return(option  ==  null)?  this  :  optionMap.keySet().addOption(option);	return  this;  	non-compiled	[CE]  cannot  find  symbol	15	None	replace
342	[BUG]  [BUGGY]    Option  option  =(Option)optionMap.get(option.getKey());  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [CONTEXT]  if  (option  ==  null)  {  selected  =  null;  return;  }      [BUGGY]    Option  option  =(Option)optionMap.get(option.getKey());  [BUGGY]  if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  {  selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	98	99	3	replace	    Option  option  =(Option)optionMap.get(option.getKey());		non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	2	None	add
343	[BUG]  [BUGGY]    if(!hasArg())  {  if(selected.equals(option.getArg()))  {  return;  }  [CE]  illegal  start  of  expression  [CONTEXT]  if  (option  ==  null)  {  selected  =  null;  return;  }      [BUGGY]    if(!hasArg())  {  if(selected.equals(option.getArg()))  {  return;  }  [BUGGY]  if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  {  selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	98	99	3	replace	    if(!hasArg())  {  if(selected.equals(option.getArg()))  {  return;  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
344	[BUG]  [BUGGY]    if(!hasArg())  {  if(selected.equals(option.getArg()))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  if  (option  ==  null)  {  selected  =  null;  return;  }      [BUGGY]    if(!hasArg())  {  if(selected.equals(option.getArg()))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  {  selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	98	99	3	replace	    if(!hasArg())  {  if(selected.equals(option.getArg()))  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
345	[BUG]  [BUGGY]    if(!hasArg())  {  if(selected.equals(option.getArg()))  {  throw  new  MissingException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  if  (option  ==  null)  {  selected  =  null;  return;  }      [BUGGY]    if(!hasArg())  {  if(selected.equals(option.getArg()))  {  throw  new  MissingException( " ");  }  [BUGGY]  if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  {  selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	98	99	3	replace	    if(!hasArg())  {  if(selected.equals(option.getArg()))  {  throw  new  MissingException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
364	[BUG]  [BUGGY]  if(selected!=  null  &&  select.equals(option.getOpt()))  {  [CE]  cannot  find  symbol  select  [CONTEXT]  if  (option  ==  null)  {  selected  =  null;  return;  }      [BUGGY]  if(selected!=  null  &&  select.equals(option.getOpt()))  {  [BUGGY]  {  selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	98	99	3	replace	if(selected!=  null  &&  select.equals(option.getOpt()))  {	if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  	non-compiled	[CE]  cannot  find  symbol  select	1	None	replace
384	[BUG]  [BUGGY]  optionMap.put(option.getRequired(),  option);  [CE]  cannot  find  symbol  [CONTEXT]  public  OptionGroup  addOption(Option  option)  {    [BUGGY]  optionMap.put(option.getRequired(),  option);  [BUGGY]    return  this;  }  [CLASS]  OptionGroup  [METHOD]  addOption  [RETURN_TYPE]  OptionGroup  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	55	55	3	replace	optionMap.put(option.getRequired(),  option);	optionMap.put(option.getKey(),  option);  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
2	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]  public  OptionGroup  addOption(Option  option)  {    [BUGGY]    optionMap.remove(option.getValue());  [BUGGY]  optionMap.put(option.getKey(),  option);  return  this;  }  [CLASS]  OptionGroup  [METHOD]  addOption  [RETURN_TYPE]  OptionGroup  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	55	55	3	add	    optionMap.remove(option.getValue());		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	14	3
3	[BUG]  [BUGGY]    optionMap.remove(option.getValue());  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]  public  OptionGroup  addOption(Option  option)  {    [BUGGY]    optionMap.remove(option.getValue());  [BUGGY]  optionMap.put(option.getKey(),  option);  return  this;  }  [CLASS]  OptionGroup  [METHOD]  addOption  [RETURN_TYPE]  OptionGroup  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	55	55	3	replace	    optionMap.remove(option.getValue());		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	14	3	add
5	[BUG]  [BUGGY]    OptionGroup  optionMap  =(OptionGroup)optionMap.get(option.getValue());  [CE]  cannot  find  symbol  [CONTEXT]  public  OptionGroup  addOption(Option  option)  {    [BUGGY]    OptionGroup  optionMap  =(OptionGroup)optionMap.get(option.getValue());  [BUGGY]  optionMap.put(option.getKey(),  option);  return  this;  }  [CLASS]  OptionGroup  [METHOD]  addOption  [RETURN_TYPE]  OptionGroup  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	55	55	3	replace	    OptionGroup  optionMap  =(OptionGroup)optionMap.get(option.getValue());		non-compiled	[CE]  cannot  find  symbol	14	None	add
122	[BUG]  [BUGGY]    optionMap.put(option.getValue(),  new  OptionGroup(this,  option));  [CE]  constructor  OptionGroup  in  class  OptionGroup  cannot  be  applied  to  given  types;  [CONTEXT]  public  OptionGroup  addOption(Option  option)  {    optionMap.put(option.getKey(),  option);  [BUGGY]    optionMap.put(option.getValue(),  new  OptionGroup(this,  option));  [BUGGY]  return  this;  }  [CLASS]  OptionGroup  [METHOD]  addOption  [RETURN_TYPE]  OptionGroup  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	57	57	3	replace	    optionMap.put(option.getValue(),  new  OptionGroup(this,  option));		non-compiled	[CE]  constructor  OptionGroup  in  class  OptionGroup  cannot  be  applied  to  given  types;	16	None	add
123	[BUG]  [BUGGY]    optionMap.put(option.getValue(),  Option.None.forOption(option));  [CE]  cannot  find  symbol  None  [CONTEXT]  public  OptionGroup  addOption(Option  option)  {    optionMap.put(option.getKey(),  option);  [BUGGY]    optionMap.put(option.getValue(),  Option.None.forOption(option));  [BUGGY]  return  this;  }  [CLASS]  OptionGroup  [METHOD]  addOption  [RETURN_TYPE]  OptionGroup  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	57	57	3	replace	    optionMap.put(option.getValue(),  Option.None.forOption(option));		non-compiled	[CE]  cannot  find  symbol  None	16	None	add
124	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]  public  OptionGroup  addOption(Option  option)  {    optionMap.put(option.getKey(),  option);  [BUGGY]    optionMap.remove(option.getValue());  [BUGGY]  return  this;  }  [CLASS]  OptionGroup  [METHOD]  addOption  [RETURN_TYPE]  OptionGroup  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	57	57	3	add	    optionMap.remove(option.getValue());		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	16	3
125	[BUG]  [BUGGY]    optionMap.remove(option.getValue());  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]  public  OptionGroup  addOption(Option  option)  {    optionMap.put(option.getKey(),  option);  [BUGGY]    optionMap.remove(option.getValue());  [BUGGY]  return  this;  }  [CLASS]  OptionGroup  [METHOD]  addOption  [RETURN_TYPE]  OptionGroup  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	57	57	3	replace	    optionMap.remove(option.getValue());		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	16	3	add
151	[BUG]  [BUGGY]  optionMap.put(selected,  true);  [CE]  illegal  start  of  expression  [CONTEXT]    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]  optionMap.put(selected,  true);  [BUGGY]    [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	106	106	3	replace	optionMap.put(selected,  true);	}  	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
153	[BUG]  [BUGGY]  this.optionMap.put(selected,  option);  [CE]  illegal  start  of  expression  [CONTEXT]    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]  this.optionMap.put(selected,  option);  [BUGGY]    [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	106	106	3	replace	this.optionMap.put(selected,  option);	}  	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
213	[BUG]  [BUGGY]  [FE]  NullPointerException  testOptionGroupLong  [CONTEXT]  public  String  getSelected()  {  [BUGGY]  return(this.selected  ==  null?  this.selected.toString()  :  selected);  [BUGGY]  }  [CLASS]  OptionGroup  [METHOD]  getSelected  [RETURN_TYPE]  String  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	113	113	3	add	return(this.selected  ==  null?  this.selected.toString()  :  selected);	return  selected;  	compilable	  [FE]  NullPointerException  testOptionGroupLong	7	3
214	[BUG]  [BUGGY]  return(this.selected  ==  null?  this.selected.toString()  :  selected);  [FE]  NullPointerException  testOptionGroupLong  [CONTEXT]  public  String  getSelected()  {  [BUGGY]  return(this.selected  ==  null?  this.selected.toString()  :  selected);  [BUGGY]  }  [CLASS]  OptionGroup  [METHOD]  getSelected  [RETURN_TYPE]  String  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	113	113	3	replace	return(this.selected  ==  null?  this.selected.toString()  :  selected);	return  selected;  	compilable	  [FE]  NullPointerException  testOptionGroupLong	7	3	replace
241	[BUG]  [BUGGY]    OptionMap  optionMap  =(OptionGroup)optionMap.keySet();  [CE]  cannot  find  symbol  [CONTEXT]  public  Collection  getOptions()  {    [BUGGY]    OptionMap  optionMap  =(OptionGroup)optionMap.keySet();  [BUGGY]  return  optionMap.values();  }  [CLASS]  OptionGroup  [METHOD]  getOptions  [RETURN_TYPE]  Collection  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	76	76	3	replace	    OptionMap  optionMap  =(OptionGroup)optionMap.keySet();		non-compiled	[CE]  cannot  find  symbol	18	None	add
242	[BUG]  [BUGGY]    final  Map  optionMap  =  getOptions();  [CE]  incompatible  types  [CONTEXT]  public  Collection  getOptions()  {    [BUGGY]    final  Map  optionMap  =  getOptions();  [BUGGY]  return  optionMap.values();  }  [CLASS]  OptionGroup  [METHOD]  getOptions  [RETURN_TYPE]  Collection  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	76	76	3	replace	    final  Map  optionMap  =  getOptions();		non-compiled	[CE]  incompatible  types	18	None	add
243	[BUG]  [BUGGY]    optionMap  =(Map)optionMap.keySet();  [CE]  types  Collection  and  Map  are  incompatible;  both  define  remove(java.lang.Object),  but  with  unrelated  return  types  [CONTEXT]  public  Collection  getOptions()  {    [BUGGY]    optionMap  =(Map)optionMap.keySet();  [BUGGY]  return  optionMap.values();  }  [CLASS]  OptionGroup  [METHOD]  getOptions  [RETURN_TYPE]  Collection  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	76	76	3	replace	    optionMap  =(Map)optionMap.keySet();		non-compiled	[CE]  types  Collection  and  Map  are  incompatible;  both  define  remove(java.lang.Object),  but  with  unrelated  return  types	18	None	add
271	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]    selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  [BUGGY]    optionMap.put(option.getKey(),  option.getValue());  [BUGGY]  selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	    optionMap.put(option.getKey(),  option.getValue());		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	4	3
272	[BUG]  [BUGGY]    optionMap.put(option.getKey(),  option.getValue());  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]    selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  [BUGGY]    optionMap.put(option.getKey(),  option.getValue());  [BUGGY]  selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	    optionMap.put(option.getKey(),  option.getValue());		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	4	3	add
273	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]    selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  [BUGGY]    optionMap.put(option.getOpt(),  null);  [BUGGY]  selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	    optionMap.put(option.getOpt(),  null);		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	4	3
274	[BUG]  [BUGGY]    optionMap.put(option.getOpt(),  null);  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]    selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  [BUGGY]    optionMap.put(option.getOpt(),  null);  [BUGGY]  selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	    optionMap.put(option.getOpt(),  null);		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	4	3	add
275	[BUG]  [BUGGY]    optionMap.put(option.getOpt(),  true);  [CE]  method  put  in  interface  Map  cannot  be  applied  to  given  types;  [CONTEXT]    selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  [BUGGY]    optionMap.put(option.getOpt(),  true);  [BUGGY]  selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	    optionMap.put(option.getOpt(),  true);		non-compiled	[CE]  method  put  in  interface  Map  cannot  be  applied  to  given  types;	4	None	add
304	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]    [BUGGY]  private  HashMap  optionMap  =  new  HashMap();  [BUGGY]    [CLASS]  OptionGroup  [VARIABLES]  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	37	37	3	add	private  HashMap  optionMap  =  new  HashMap();	private  Map  optionMap  =  new  HashMap();  	compilable	  [FE]  ComparisonFailure  testOptionGroupLong	11	3
305	[BUG]  [BUGGY]  private  HashMap  optionMap  =  new  HashMap();  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]    [BUGGY]  private  HashMap  optionMap  =  new  HashMap();  [BUGGY]    [CLASS]  OptionGroup  [VARIABLES]  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	37	37	3	replace	private  HashMap  optionMap  =  new  HashMap();	private  Map  optionMap  =  new  HashMap();  	compilable	  [FE]  ComparisonFailure  testOptionGroupLong	11	3	replace
332	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]  if  (option  ==  null)  {  selected  =  null;  return;  }      [BUGGY]    optionMap.put(option.getKey(),  selected);  [BUGGY]  if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  {  selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	98	99	3	add	    optionMap.put(option.getKey(),  selected);		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	2	3
333	[BUG]  [BUGGY]    optionMap.put(option.getKey(),  selected);  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]  if  (option  ==  null)  {  selected  =  null;  return;  }      [BUGGY]    optionMap.put(option.getKey(),  selected);  [BUGGY]  if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  {  selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	98	99	3	replace	    optionMap.put(option.getKey(),  selected);		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	2	3	add
333	[BUG]  [BUGGY]    optionMap.put(option.getKey(),  options.getValue());  [CE]  cannot  find  symbol  options  [CONTEXT]  if  (option  ==  null)  {  selected  =  null;  return;  }      [BUGGY]    optionMap.put(option.getKey(),  options.getValue());  [BUGGY]  if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  {  selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	98	99	3	replace	    optionMap.put(option.getKey(),  options.getValue());		non-compiled	[CE]  cannot  find  symbol  options	2	None	add
334	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]  if  (option  ==  null)  {  selected  =  null;  return;  }      [BUGGY]    optionMap.put(option.getKey(),  option.getValue());  [BUGGY]  if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  {  selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	98	99	3	add	    optionMap.put(option.getKey(),  option.getValue());		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	2	3
335	[BUG]  [BUGGY]    optionMap.put(option.getKey(),  option.getValue());  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]  if  (option  ==  null)  {  selected  =  null;  return;  }      [BUGGY]    optionMap.put(option.getKey(),  option.getValue());  [BUGGY]  if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  {  selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	98	99	3	replace	    optionMap.put(option.getKey(),  option.getValue());		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	2	3	add
335	[BUG]  [BUGGY]    optionMap.putAll(option.getKey());  [CE]  method  putAll  in  interface  Map  cannot  be  applied  to  given  types;  [CONTEXT]  if  (option  ==  null)  {  selected  =  null;  return;  }      [BUGGY]    optionMap.putAll(option.getKey());  [BUGGY]  if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  {  selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	98	99	3	replace	    optionMap.putAll(option.getKey());		non-compiled	[CE]  method  putAll  in  interface  Map  cannot  be  applied  to  given  types;	2	None	add
363	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]    optionMap.put(selected,  option);  [BUGGY]  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	106	106	3	add	    optionMap.put(selected,  option);		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	6	3
364	[BUG]  [BUGGY]    optionMap.put(selected,  option);  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]    optionMap.put(selected,  option);  [BUGGY]  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	106	106	3	replace	    optionMap.put(selected,  option);		compilable	  [FE]  ComparisonFailure  testOptionGroupLong	6	3	add
394	[BUG]  [BUGGY]    return(OptionGroup)OptionMap.clone();  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    return(OptionGroup)OptionMap.clone();  [BUGGY]  private  Map  optionMap  =  new  HashMap();  [CLASS]  OptionGroup  [VARIABLES]  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	37	37	3	replace	    return(OptionGroup)OptionMap.clone();		non-compiled	[CE]  illegal  start  of  type	12	None	add
395	[BUG]  [BUGGY]    return  new  HashMap(OptionGroup.Long.getValue(optionMap));  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    return  new  HashMap(OptionGroup.Long.getValue(optionMap));  [BUGGY]  private  Map  optionMap  =  new  HashMap();  [CLASS]  OptionGroup  [VARIABLES]  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	37	37	3	replace	    return  new  HashMap(OptionGroup.Long.getValue(optionMap));		non-compiled	[CE]  illegal  start  of  type	12	None	add
451	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]  public  void  setSelected(Option  option)  throws  AlreadySelectedException  {  [BUGGY]  if(option  ==  null  ||(option.getOpt()  ==  null))  {  [BUGGY]  {  selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	88	89	3	add	if(option  ==  null  ||(option.getOpt()  ==  null))  {	if  (option  ==  null)  {  	compilable	  [FE]  ComparisonFailure  testOptionGroupLong	19	3
452	[BUG]  [BUGGY]  if(option  ==  null  ||(option.getOpt()  ==  null))  {  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]  public  void  setSelected(Option  option)  throws  AlreadySelectedException  {  [BUGGY]  if(option  ==  null  ||(option.getOpt()  ==  null))  {  [BUGGY]  {  selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	88	89	3	replace	if(option  ==  null  ||(option.getOpt()  ==  null))  {	if  (option  ==  null)  {  	compilable	  [FE]  ComparisonFailure  testOptionGroupLong	19	3	replace
453	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]  public  void  setSelected(Option  option)  throws  AlreadySelectedException  {  [BUGGY]  if(option  ==  null  ||  option.getOpt()  ==  null)  {  [BUGGY]  {  selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	88	89	3	add	if(option  ==  null  ||  option.getOpt()  ==  null)  {	if  (option  ==  null)  {  	compilable	  [FE]  ComparisonFailure  testOptionGroupLong	19	3
454	[BUG]  [BUGGY]  if(option  ==  null  ||  option.getOpt()  ==  null)  {  [FE]  ComparisonFailure  testOptionGroupLong  [CONTEXT]  public  void  setSelected(Option  option)  throws  AlreadySelectedException  {  [BUGGY]  if(option  ==  null  ||  option.getOpt()  ==  null)  {  [BUGGY]  {  selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	88	89	3	replace	if(option  ==  null  ||  option.getOpt()  ==  null)  {	if  (option  ==  null)  {  	compilable	  [FE]  ComparisonFailure  testOptionGroupLong	19	3	replace
483	[BUG]  [BUGGY]  return(option  ==  null)?  null  :  optionMap.containsKey(option.getValue());  [CE]  incompatible  types  for  ?:  neither  is  a  subtype  of  the  other  [CONTEXT]  public  OptionGroup  addOption(Option  option)  {    optionMap.put(option.getKey(),  option);  [BUGGY]  return(option  ==  null)?  null  :  optionMap.containsKey(option.getValue());  [BUGGY]  }  [CLASS]  OptionGroup  [METHOD]  addOption  [RETURN_TYPE]  OptionGroup  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	57	57	3	replace	return(option  ==  null)?  null  :  optionMap.containsKey(option.getValue());	return  this;  	non-compiled	[CE]  incompatible  types  for  ?:  neither  is  a  subtype  of  the  other	15	None	replace
484	[BUG]  [BUGGY]  return(option  ==  null)?  this  :  OptionGroup.valueOf(option.getValue());  [CE]  cannot  find  symbol  [CONTEXT]  public  OptionGroup  addOption(Option  option)  {    optionMap.put(option.getKey(),  option);  [BUGGY]  return(option  ==  null)?  this  :  OptionGroup.valueOf(option.getValue());  [BUGGY]  }  [CLASS]  OptionGroup  [METHOD]  addOption  [RETURN_TYPE]  OptionGroup  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	57	57	3	replace	return(option  ==  null)?  this  :  OptionGroup.valueOf(option.getValue());	return  this;  	non-compiled	[CE]  cannot  find  symbol	15	None	replace
514	[BUG]  [BUGGY]  return(OptionGroup)optionMap.values();  [CE]  incompatible  types  [CONTEXT]  public  Collection  getOptions()  {    [BUGGY]  return(OptionGroup)optionMap.values();  [BUGGY]  }  [CLASS]  OptionGroup  [METHOD]  getOptions  [RETURN_TYPE]  Collection  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	76	76	3	replace	return(OptionGroup)optionMap.values();	return  optionMap.values();  	non-compiled	[CE]  incompatible  types	17	None	replace
541	[BUG]  [BUGGY]    final  String  selected  =(String)optionMap.get(selected);  [CE]  variable  selected  might  not  have  been  initialized  [CONTEXT]  public  String  getSelected()  {  [BUGGY]    final  String  selected  =(String)optionMap.get(selected);  [BUGGY]  return  selected;  }  [CLASS]  OptionGroup  [METHOD]  getSelected  [RETURN_TYPE]  String  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	113	113	3	replace	    final  String  selected  =(String)optionMap.get(selected);		non-compiled	[CE]  variable  selected  might  not  have  been  initialized	8	None	add
542	[BUG]  [BUGGY]    String  selected  =(String)optionMap.get(selected);  required  =  true;  [CE]  variable  selected  might  not  have  been  initialized  [CONTEXT]  public  String  getSelected()  {  [BUGGY]    String  selected  =(String)optionMap.get(selected);  required  =  true;  [BUGGY]  return  selected;  }  [CLASS]  OptionGroup  [METHOD]  getSelected  [RETURN_TYPE]  String  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	113	113	3	replace	    String  selected  =(String)optionMap.get(selected);  required  =  true;		non-compiled	[CE]  variable  selected  might  not  have  been  initialized	8	None	add
543	[BUG]  [BUGGY]    final  String  selected  =(String)optionMap.get(selected);  required  =  true;  [CE]  variable  selected  might  not  have  been  initialized  [CONTEXT]  public  String  getSelected()  {  [BUGGY]    final  String  selected  =(String)optionMap.get(selected);  required  =  true;  [BUGGY]  return  selected;  }  [CLASS]  OptionGroup  [METHOD]  getSelected  [RETURN_TYPE]  String  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	113	113	3	replace	    final  String  selected  =(String)optionMap.get(selected);  required  =  true;		non-compiled	[CE]  variable  selected  might  not  have  been  initialized	8	None	add
544	[BUG]  [BUGGY]    String  selected  =(String)optionMap.get(selected);  if(selected!=  null)  {  required  =  true;  }  [CE]  variable  selected  might  not  have  been  initialized  [CONTEXT]  public  String  getSelected()  {  [BUGGY]    String  selected  =(String)optionMap.get(selected);  if(selected!=  null)  {  required  =  true;  }  [BUGGY]  return  selected;  }  [CLASS]  OptionGroup  [METHOD]  getSelected  [RETURN_TYPE]  String  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	113	113	3	replace	    String  selected  =(String)optionMap.get(selected);  if(selected!=  null)  {  required  =  true;  }		non-compiled	[CE]  variable  selected  might  not  have  been  initialized	8	None	add
545	[BUG]  [BUGGY]    String  selected  =(String)optionMap.get(selected);  [CE]  variable  selected  might  not  have  been  initialized  [CONTEXT]  public  String  getSelected()  {  [BUGGY]    String  selected  =(String)optionMap.get(selected);  [BUGGY]  return  selected;  }  [CLASS]  OptionGroup  [METHOD]  getSelected  [RETURN_TYPE]  String  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	113	113	3	replace	    String  selected  =(String)optionMap.get(selected);		non-compiled	[CE]  variable  selected  might  not  have  been  initialized	8	None	add
572	[BUG]  [BUGGY]  selected  =  option.select(option.getOpt());  [CE]  cannot  find  symbol  [CONTEXT]    selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  [BUGGY]  selected  =  option.select(option.getOpt());  [BUGGY]  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  option.select(option.getOpt());	selected  =  option.getOpt();  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
574	[BUG]  [BUGGY]  selected  =  option.select(option.getLongOpt());  [CE]  cannot  find  symbol  [CONTEXT]    selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {  [BUGGY]  selected  =  option.select(option.getLongOpt());  [BUGGY]  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  option.select(option.getLongOpt());	selected  =  option.getOpt();  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
