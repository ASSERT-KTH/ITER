bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testForOffsetHoursMinutes_int_int  [CONTEXT]  throw  new  IllegalArgumentException( "Minutes  out  of  range:   "  +  minutesOffset);  }  int  offset  =  0;  try  {  int  hoursInMinutes  =  hoursOffset  *  60;  if  (hoursInMinutes  <  0)  {  minutesOffset  =  hoursInMinutes  -  minutesOffset;  }  else  {  minutesOffset  =  hoursInMinutes  +  minutesOffset;  }  [BUGGY]  offset  =  FieldUtils.safeMultiply(hoursInMinutes,  DateTimeConstants.MILLIS_PER_MINUTE);  [BUGGY]  }  catch  (ArithmeticException  ex)  {  throw  new  IllegalArgumentException( "Offset  is  too  large ");  }  return  forOffsetMillis(offset);  }  [CLASS]  DateTimeZone  1  Stub  [METHOD]  forOffsetHoursMinutes  [RETURN_TYPE]  DateTimeZone  int  hoursOffset  int  minutesOffset  [VARIABLES]  Set  cAvailableIDs  ArithmeticException  ex  boolean  NameProvider  cNameProvider  String  iID  id  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  long  serialVersionUID  DateTimeZone  UTC  cDefault  temp  zone  int  MAX_MILLIS  hoursInMinutes  hoursOffset  minutesOffset  offset  Provider  cProvider  	projects/Time8/src/main/java/org/joda/time/DateTimeZone.java	0.7071067811865475	290	290	1	add	offset  =  FieldUtils.safeMultiply(hoursInMinutes,  DateTimeConstants.MILLIS_PER_MINUTE);	offset  =  FieldUtils.safeMultiply(minutesOffset,  DateTimeConstants.MILLIS_PER_MINUTE);  	compilable	  [FE]  AssertionFailedError  testForOffsetHoursMinutes_int_int	21	1	replace
4	[BUG]  [BUGGY]  offset  =  FieldUtils.safeMultiply(hoursInMinutes,  DateTimeConstants.MILLIS_PER_MINUTE);  [FE]  AssertionFailedError  testForOffsetHoursMinutes_int_int  [CONTEXT]  throw  new  IllegalArgumentException( "Minutes  out  of  range:   "  +  minutesOffset);  }  int  offset  =  0;  try  {  int  hoursInMinutes  =  hoursOffset  *  60;  if  (hoursInMinutes  <  0)  {  minutesOffset  =  hoursInMinutes  -  minutesOffset;  }  else  {  minutesOffset  =  hoursInMinutes  +  minutesOffset;  }  [BUGGY]  offset  =  FieldUtils.safeMultiply(hoursInMinutes,  DateTimeConstants.MILLIS_PER_MINUTE);  [BUGGY]  }  catch  (ArithmeticException  ex)  {  throw  new  IllegalArgumentException( "Offset  is  too  large ");  }  return  forOffsetMillis(offset);  }  [CLASS]  DateTimeZone  1  Stub  [METHOD]  forOffsetHoursMinutes  [RETURN_TYPE]  DateTimeZone  int  hoursOffset  int  minutesOffset  [VARIABLES]  Set  cAvailableIDs  ArithmeticException  ex  boolean  NameProvider  cNameProvider  String  iID  id  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  long  serialVersionUID  DateTimeZone  UTC  cDefault  temp  zone  int  MAX_MILLIS  hoursInMinutes  hoursOffset  minutesOffset  offset  Provider  cProvider  	projects/Time8/src/main/java/org/joda/time/DateTimeZone.java	0.7071067811865475	290	290	1	replace	offset  =  FieldUtils.safeMultiply(hoursInMinutes,  DateTimeConstants.MILLIS_PER_MINUTE);	offset  =  FieldUtils.safeMultiply(minutesOffset,  DateTimeConstants.MILLIS_PER_MINUTE);  	compilable	  [FE]  AssertionFailedError  testForOffsetHoursMinutes_int_int	21	1	replace
61	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testForOffsetHoursMinutes_int_int  [CONTEXT]  }  if  (minutesOffset  <  0  ||  minutesOffset  >  59)  {  throw  new  IllegalArgumentException( "Minutes  out  of  range:   "  +  minutesOffset);  }  int  offset  =  0;  try  {  int  hoursInMinutes  =  hoursOffset  *  60;  if  (hoursInMinutes  <  0)  {  minutesOffset  =  hoursInMinutes  -  minutesOffset;  }  else  {  [BUGGY]    offset  =  FieldUtils.safeMultiply(hoursInMinutes,  DateTimeConstants.MILLIS_PER_MINUTE);  [BUGGY]  minutesOffset  =  hoursInMinutes  +  minutesOffset;  }  offset  =  FieldUtils.safeMultiply(minutesOffset,  DateTimeConstants.MILLIS_PER_MINUTE);  }  catch  (ArithmeticException  ex)  {  throw  new  IllegalArgumentException( "Offset  is  too  large ");  }  return  forOffsetMillis(offset);  }  [CLASS]  DateTimeZone  1  Stub  [METHOD]  forOffsetHoursMinutes  [RETURN_TYPE]  DateTimeZone  int  hoursOffset  int  minutesOffset  [VARIABLES]  Set  cAvailableIDs  ArithmeticException  ex  boolean  NameProvider  cNameProvider  String  iID  id  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  long  serialVersionUID  DateTimeZone  UTC  cDefault  temp  zone  int  MAX_MILLIS  hoursInMinutes  hoursOffset  minutesOffset  offset  Provider  cProvider  	projects/Time8/src/main/java/org/joda/time/DateTimeZone.java	0.7071067811865475	288	288	1	add	    offset  =  FieldUtils.safeMultiply(hoursInMinutes,  DateTimeConstants.MILLIS_PER_MINUTE);		compilable	  [FE]  IllegalArgumentException  testForOffsetHoursMinutes_int_int	20	1	add
62	[BUG]  [BUGGY]    offset  =  FieldUtils.safeMultiply(hoursInMinutes,  DateTimeConstants.MILLIS_PER_MINUTE);  [FE]  IllegalArgumentException  testForOffsetHoursMinutes_int_int  [CONTEXT]  }  if  (minutesOffset  <  0  ||  minutesOffset  >  59)  {  throw  new  IllegalArgumentException( "Minutes  out  of  range:   "  +  minutesOffset);  }  int  offset  =  0;  try  {  int  hoursInMinutes  =  hoursOffset  *  60;  if  (hoursInMinutes  <  0)  {  minutesOffset  =  hoursInMinutes  -  minutesOffset;  }  else  {  [BUGGY]    offset  =  FieldUtils.safeMultiply(hoursInMinutes,  DateTimeConstants.MILLIS_PER_MINUTE);  [BUGGY]  minutesOffset  =  hoursInMinutes  +  minutesOffset;  }  offset  =  FieldUtils.safeMultiply(minutesOffset,  DateTimeConstants.MILLIS_PER_MINUTE);  }  catch  (ArithmeticException  ex)  {  throw  new  IllegalArgumentException( "Offset  is  too  large ");  }  return  forOffsetMillis(offset);  }  [CLASS]  DateTimeZone  1  Stub  [METHOD]  forOffsetHoursMinutes  [RETURN_TYPE]  DateTimeZone  int  hoursOffset  int  minutesOffset  [VARIABLES]  Set  cAvailableIDs  ArithmeticException  ex  boolean  NameProvider  cNameProvider  String  iID  id  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  long  serialVersionUID  DateTimeZone  UTC  cDefault  temp  zone  int  MAX_MILLIS  hoursInMinutes  hoursOffset  minutesOffset  offset  Provider  cProvider  	projects/Time8/src/main/java/org/joda/time/DateTimeZone.java	0.7071067811865475	288	288	1	replace	    offset  =  FieldUtils.safeMultiply(hoursInMinutes,  DateTimeConstants.MILLIS_PER_MINUTE);		compilable	  [FE]  IllegalArgumentException  testForOffsetHoursMinutes_int_int	20	1	add
65	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testForOffsetHoursMinutes_int_int  [CONTEXT]  }  if  (minutesOffset  <  0  ||  minutesOffset  >  59)  {  throw  new  IllegalArgumentException( "Minutes  out  of  range:   "  +  minutesOffset);  }  int  offset  =  0;  try  {  int  hoursInMinutes  =  hoursOffset  *  60;  if  (hoursInMinutes  <  0)  {  minutesOffset  =  hoursInMinutes  -  minutesOffset;  }  else  {  [BUGGY]    offset  =  FieldUtils.safeMultiply(hoursInMinutes,  DateTimeConstants.MILLIS_PER_MINUTE);  if(hoursInMinutes  <  0)  {  minutesOffset  =  hoursInMinutes  -  minutesOffset;  }  [BUGGY]  minutesOffset  =  hoursInMinutes  +  minutesOffset;  }  offset  =  FieldUtils.safeMultiply(minutesOffset,  DateTimeConstants.MILLIS_PER_MINUTE);  }  catch  (ArithmeticException  ex)  {  throw  new  IllegalArgumentException( "Offset  is  too  large ");  }  return  forOffsetMillis(offset);  }  [CLASS]  DateTimeZone  1  Stub  [METHOD]  forOffsetHoursMinutes  [RETURN_TYPE]  DateTimeZone  int  hoursOffset  int  minutesOffset  [VARIABLES]  Set  cAvailableIDs  ArithmeticException  ex  boolean  NameProvider  cNameProvider  String  iID  id  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  long  serialVersionUID  DateTimeZone  UTC  cDefault  temp  zone  int  MAX_MILLIS  hoursInMinutes  hoursOffset  minutesOffset  offset  Provider  cProvider  	projects/Time8/src/main/java/org/joda/time/DateTimeZone.java	0.7071067811865475	288	288	1	add	    offset  =  FieldUtils.safeMultiply(hoursInMinutes,  DateTimeConstants.MILLIS_PER_MINUTE);  if(hoursInMinutes  <  0)  {  minutesOffset  =  hoursInMinutes  -  minutesOffset;  }		compilable	  [FE]  IllegalArgumentException  testForOffsetHoursMinutes_int_int	20	1	add
66	[BUG]  [BUGGY]    offset  =  FieldUtils.safeMultiply(hoursInMinutes,  DateTimeConstants.MILLIS_PER_MINUTE);  if(hoursInMinutes  <  0)  {  minutesOffset  =  hoursInMinutes  -  minutesOffset;  }  [FE]  IllegalArgumentException  testForOffsetHoursMinutes_int_int  [CONTEXT]  }  if  (minutesOffset  <  0  ||  minutesOffset  >  59)  {  throw  new  IllegalArgumentException( "Minutes  out  of  range:   "  +  minutesOffset);  }  int  offset  =  0;  try  {  int  hoursInMinutes  =  hoursOffset  *  60;  if  (hoursInMinutes  <  0)  {  minutesOffset  =  hoursInMinutes  -  minutesOffset;  }  else  {  [BUGGY]    offset  =  FieldUtils.safeMultiply(hoursInMinutes,  DateTimeConstants.MILLIS_PER_MINUTE);  if(hoursInMinutes  <  0)  {  minutesOffset  =  hoursInMinutes  -  minutesOffset;  }  [BUGGY]  minutesOffset  =  hoursInMinutes  +  minutesOffset;  }  offset  =  FieldUtils.safeMultiply(minutesOffset,  DateTimeConstants.MILLIS_PER_MINUTE);  }  catch  (ArithmeticException  ex)  {  throw  new  IllegalArgumentException( "Offset  is  too  large ");  }  return  forOffsetMillis(offset);  }  [CLASS]  DateTimeZone  1  Stub  [METHOD]  forOffsetHoursMinutes  [RETURN_TYPE]  DateTimeZone  int  hoursOffset  int  minutesOffset  [VARIABLES]  Set  cAvailableIDs  ArithmeticException  ex  boolean  NameProvider  cNameProvider  String  iID  id  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  long  serialVersionUID  DateTimeZone  UTC  cDefault  temp  zone  int  MAX_MILLIS  hoursInMinutes  hoursOffset  minutesOffset  offset  Provider  cProvider  	projects/Time8/src/main/java/org/joda/time/DateTimeZone.java	0.7071067811865475	288	288	1	replace	    offset  =  FieldUtils.safeMultiply(hoursInMinutes,  DateTimeConstants.MILLIS_PER_MINUTE);  if(hoursInMinutes  <  0)  {  minutesOffset  =  hoursInMinutes  -  minutesOffset;  }		compilable	  [FE]  IllegalArgumentException  testForOffsetHoursMinutes_int_int	20	1	add
81	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testForOffsetHoursMinutes_int_int  [CONTEXT]  public  static  DateTimeZone  forOffsetHoursMinutes(int  hoursOffset,  int  minutesOffset)  throws  IllegalArgumentException  {  if  (hoursOffset  ==  0  &&  minutesOffset  ==  0)  {  return  DateTimeZone.UTC;  }  if  (hoursOffset  <  -23  ||  hoursOffset  >  23)  {  throw  new  IllegalArgumentException( "Hours  out  of  range:   "  +  hoursOffset);  }  [BUGGY]  if(minutesOffset  <  -59  ||  minutesOffset  >  59)  {  [BUGGY]  throw  new  IllegalArgumentException( "Minutes  out  of  range:   "  +  minutesOffset);  }  int  offset  =  0;  try  {  int  hoursInMinutes  =  hoursOffset  *  60;  if  (hoursInMinutes  <  0)  {  minutesOffset  =  hoursInMinutes  -  minutesOffset;  }  else  {  minutesOffset  =  hoursInMinutes  +  minutesOffset;  }  [CLASS]  DateTimeZone  1  Stub  [METHOD]  forOffsetHoursMinutes  [RETURN_TYPE]  DateTimeZone  int  hoursOffset  int  minutesOffset  [VARIABLES]  Set  cAvailableIDs  ArithmeticException  ex  boolean  NameProvider  cNameProvider  String  iID  id  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  long  serialVersionUID  DateTimeZone  UTC  cDefault  temp  zone  int  MAX_MILLIS  hoursInMinutes  hoursOffset  minutesOffset  offset  Provider  cProvider  	projects/Time8/src/main/java/org/joda/time/DateTimeZone.java	0.7071067811865475	279	279	1	add	if(minutesOffset  <  -59  ||  minutesOffset  >  59)  {	if  (minutesOffset  <  0  ||  minutesOffset  >  59)  {  	compilable	  [FE]  AssertionFailedError  testForOffsetHoursMinutes_int_int	11	1	replace
82	[BUG]  [BUGGY]  if(minutesOffset  <  -59  ||  minutesOffset  >  59)  {  [FE]  AssertionFailedError  testForOffsetHoursMinutes_int_int  [CONTEXT]  public  static  DateTimeZone  forOffsetHoursMinutes(int  hoursOffset,  int  minutesOffset)  throws  IllegalArgumentException  {  if  (hoursOffset  ==  0  &&  minutesOffset  ==  0)  {  return  DateTimeZone.UTC;  }  if  (hoursOffset  <  -23  ||  hoursOffset  >  23)  {  throw  new  IllegalArgumentException( "Hours  out  of  range:   "  +  hoursOffset);  }  [BUGGY]  if(minutesOffset  <  -59  ||  minutesOffset  >  59)  {  [BUGGY]  throw  new  IllegalArgumentException( "Minutes  out  of  range:   "  +  minutesOffset);  }  int  offset  =  0;  try  {  int  hoursInMinutes  =  hoursOffset  *  60;  if  (hoursInMinutes  <  0)  {  minutesOffset  =  hoursInMinutes  -  minutesOffset;  }  else  {  minutesOffset  =  hoursInMinutes  +  minutesOffset;  }  [CLASS]  DateTimeZone  1  Stub  [METHOD]  forOffsetHoursMinutes  [RETURN_TYPE]  DateTimeZone  int  hoursOffset  int  minutesOffset  [VARIABLES]  Set  cAvailableIDs  ArithmeticException  ex  boolean  NameProvider  cNameProvider  String  iID  id  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  long  serialVersionUID  DateTimeZone  UTC  cDefault  temp  zone  int  MAX_MILLIS  hoursInMinutes  hoursOffset  minutesOffset  offset  Provider  cProvider  	projects/Time8/src/main/java/org/joda/time/DateTimeZone.java	0.7071067811865475	279	279	1	replace	if(minutesOffset  <  -59  ||  minutesOffset  >  59)  {	if  (minutesOffset  <  0  ||  minutesOffset  >  59)  {  	compilable	  [FE]  AssertionFailedError  testForOffsetHoursMinutes_int_int	11	1	replace
82	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testForOffsetHoursMinutes_int_int  [CONTEXT]  public  static  DateTimeZone  forOffsetHoursMinutes(int  hoursOffset,  int  minutesOffset)  throws  IllegalArgumentException  {  if  (hoursOffset  ==  0  &&  minutesOffset  ==  0)  {  return  DateTimeZone.UTC;  }  if  (hoursOffset  <  -23  ||  hoursOffset  >  23)  {  throw  new  IllegalArgumentException( "Hours  out  of  range:   "  +  hoursOffset);  }  [BUGGY]  if(minutesOffset  <  -45  ||  minutesOffset  >  59)  {  [BUGGY]  throw  new  IllegalArgumentException( "Minutes  out  of  range:   "  +  minutesOffset);  }  int  offset  =  0;  try  {  int  hoursInMinutes  =  hoursOffset  *  60;  if  (hoursInMinutes  <  0)  {  minutesOffset  =  hoursInMinutes  -  minutesOffset;  }  else  {  minutesOffset  =  hoursInMinutes  +  minutesOffset;  }  [CLASS]  DateTimeZone  1  Stub  [METHOD]  forOffsetHoursMinutes  [RETURN_TYPE]  DateTimeZone  int  hoursOffset  int  minutesOffset  [VARIABLES]  Set  cAvailableIDs  ArithmeticException  ex  boolean  NameProvider  cNameProvider  String  iID  id  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  long  serialVersionUID  DateTimeZone  UTC  cDefault  temp  zone  int  MAX_MILLIS  hoursInMinutes  hoursOffset  minutesOffset  offset  Provider  cProvider  	projects/Time8/src/main/java/org/joda/time/DateTimeZone.java	0.7071067811865475	279	279	1	add	if(minutesOffset  <  -45  ||  minutesOffset  >  59)  {	if  (minutesOffset  <  0  ||  minutesOffset  >  59)  {  	compilable	  [FE]  AssertionFailedError  testForOffsetHoursMinutes_int_int	11	1	replace
83	[BUG]  [BUGGY]  if(minutesOffset  <  -45  ||  minutesOffset  >  59)  {  [FE]  AssertionFailedError  testForOffsetHoursMinutes_int_int  [CONTEXT]  public  static  DateTimeZone  forOffsetHoursMinutes(int  hoursOffset,  int  minutesOffset)  throws  IllegalArgumentException  {  if  (hoursOffset  ==  0  &&  minutesOffset  ==  0)  {  return  DateTimeZone.UTC;  }  if  (hoursOffset  <  -23  ||  hoursOffset  >  23)  {  throw  new  IllegalArgumentException( "Hours  out  of  range:   "  +  hoursOffset);  }  [BUGGY]  if(minutesOffset  <  -45  ||  minutesOffset  >  59)  {  [BUGGY]  throw  new  IllegalArgumentException( "Minutes  out  of  range:   "  +  minutesOffset);  }  int  offset  =  0;  try  {  int  hoursInMinutes  =  hoursOffset  *  60;  if  (hoursInMinutes  <  0)  {  minutesOffset  =  hoursInMinutes  -  minutesOffset;  }  else  {  minutesOffset  =  hoursInMinutes  +  minutesOffset;  }  [CLASS]  DateTimeZone  1  Stub  [METHOD]  forOffsetHoursMinutes  [RETURN_TYPE]  DateTimeZone  int  hoursOffset  int  minutesOffset  [VARIABLES]  Set  cAvailableIDs  ArithmeticException  ex  boolean  NameProvider  cNameProvider  String  iID  id  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  long  serialVersionUID  DateTimeZone  UTC  cDefault  temp  zone  int  MAX_MILLIS  hoursInMinutes  hoursOffset  minutesOffset  offset  Provider  cProvider  	projects/Time8/src/main/java/org/joda/time/DateTimeZone.java	0.7071067811865475	279	279	1	replace	if(minutesOffset  <  -45  ||  minutesOffset  >  59)  {	if  (minutesOffset  <  0  ||  minutesOffset  >  59)  {  	compilable	  [FE]  AssertionFailedError  testForOffsetHoursMinutes_int_int	11	1	replace
83	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testForOffsetHoursMinutes_int_int  [CONTEXT]  public  static  DateTimeZone  forOffsetHoursMinutes(int  hoursOffset,  int  minutesOffset)  throws  IllegalArgumentException  {  if  (hoursOffset  ==  0  &&  minutesOffset  ==  0)  {  return  DateTimeZone.UTC;  }  if  (hoursOffset  <  -23  ||  hoursOffset  >  23)  {  throw  new  IllegalArgumentException( "Hours  out  of  range:   "  +  hoursOffset);  }  [BUGGY]  if(minutesOffset  <  -31  ||  minutesOffset  >  31)  {  [BUGGY]  throw  new  IllegalArgumentException( "Minutes  out  of  range:   "  +  minutesOffset);  }  int  offset  =  0;  try  {  int  hoursInMinutes  =  hoursOffset  *  60;  if  (hoursInMinutes  <  0)  {  minutesOffset  =  hoursInMinutes  -  minutesOffset;  }  else  {  minutesOffset  =  hoursInMinutes  +  minutesOffset;  }  [CLASS]  DateTimeZone  1  Stub  [METHOD]  forOffsetHoursMinutes  [RETURN_TYPE]  DateTimeZone  int  hoursOffset  int  minutesOffset  [VARIABLES]  Set  cAvailableIDs  ArithmeticException  ex  boolean  NameProvider  cNameProvider  String  iID  id  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  long  serialVersionUID  DateTimeZone  UTC  cDefault  temp  zone  int  MAX_MILLIS  hoursInMinutes  hoursOffset  minutesOffset  offset  Provider  cProvider  	projects/Time8/src/main/java/org/joda/time/DateTimeZone.java	0.7071067811865475	279	279	1	add	if(minutesOffset  <  -31  ||  minutesOffset  >  31)  {	if  (minutesOffset  <  0  ||  minutesOffset  >  59)  {  	compilable	  [FE]  IllegalArgumentException  testForOffsetHoursMinutes_int_int	11	1	replace
84	[BUG]  [BUGGY]  if(minutesOffset  <  -31  ||  minutesOffset  >  31)  {  [FE]  IllegalArgumentException  testForOffsetHoursMinutes_int_int  [CONTEXT]  public  static  DateTimeZone  forOffsetHoursMinutes(int  hoursOffset,  int  minutesOffset)  throws  IllegalArgumentException  {  if  (hoursOffset  ==  0  &&  minutesOffset  ==  0)  {  return  DateTimeZone.UTC;  }  if  (hoursOffset  <  -23  ||  hoursOffset  >  23)  {  throw  new  IllegalArgumentException( "Hours  out  of  range:   "  +  hoursOffset);  }  [BUGGY]  if(minutesOffset  <  -31  ||  minutesOffset  >  31)  {  [BUGGY]  throw  new  IllegalArgumentException( "Minutes  out  of  range:   "  +  minutesOffset);  }  int  offset  =  0;  try  {  int  hoursInMinutes  =  hoursOffset  *  60;  if  (hoursInMinutes  <  0)  {  minutesOffset  =  hoursInMinutes  -  minutesOffset;  }  else  {  minutesOffset  =  hoursInMinutes  +  minutesOffset;  }  [CLASS]  DateTimeZone  1  Stub  [METHOD]  forOffsetHoursMinutes  [RETURN_TYPE]  DateTimeZone  int  hoursOffset  int  minutesOffset  [VARIABLES]  Set  cAvailableIDs  ArithmeticException  ex  boolean  NameProvider  cNameProvider  String  iID  id  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  long  serialVersionUID  DateTimeZone  UTC  cDefault  temp  zone  int  MAX_MILLIS  hoursInMinutes  hoursOffset  minutesOffset  offset  Provider  cProvider  	projects/Time8/src/main/java/org/joda/time/DateTimeZone.java	0.7071067811865475	279	279	1	replace	if(minutesOffset  <  -31  ||  minutesOffset  >  31)  {	if  (minutesOffset  <  0  ||  minutesOffset  >  59)  {  	compilable	  [FE]  IllegalArgumentException  testForOffsetHoursMinutes_int_int	11	1	replace
123	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testForOffsetHoursMinutes_int_int  [CONTEXT]  public  static  DateTimeZone  forOffsetHoursMinutes(int  hoursOffset,  int  minutesOffset)  throws  IllegalArgumentException  {  if  (hoursOffset  ==  0  &&  minutesOffset  ==  0)  {  return  DateTimeZone.UTC;  }  if  (hoursOffset  <  -23  ||  hoursOffset  >  23)  {  throw  new  IllegalArgumentException( "Hours  out  of  range:   "  +  hoursOffset);  }  if  (minutesOffset  <  0  ||  minutesOffset  >  59)  {  [BUGGY]  throw  new  IllegalArgumentException( "Millis  out  of  range: "  +  minutesOffset);  [BUGGY]  }  int  offset  =  0;  try  {  int  hoursInMinutes  =  hoursOffset  *  60;  if  (hoursInMinutes  <  0)  {  minutesOffset  =  hoursInMinutes  -  minutesOffset;  }  else  {  minutesOffset  =  hoursInMinutes  +  minutesOffset;  }  offset  =  FieldUtils.safeMultiply(minutesOffset,  DateTimeConstants.MILLIS_PER_MINUTE);  [CLASS]  DateTimeZone  1  Stub  [METHOD]  forOffsetHoursMinutes  [RETURN_TYPE]  DateTimeZone  int  hoursOffset  int  minutesOffset  [VARIABLES]  Set  cAvailableIDs  ArithmeticException  ex  boolean  NameProvider  cNameProvider  String  iID  id  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  long  serialVersionUID  DateTimeZone  UTC  cDefault  temp  zone  int  MAX_MILLIS  hoursInMinutes  hoursOffset  minutesOffset  offset  Provider  cProvider  	projects/Time8/src/main/java/org/joda/time/DateTimeZone.java	1.0	280	280	1	add	throw  new  IllegalArgumentException( "Millis  out  of  range: "  +  minutesOffset);	throw  new  IllegalArgumentException( "Minutes  out  of  range:   "  +  minutesOffset);  	compilable	  [FE]  IllegalArgumentException  testForOffsetHoursMinutes_int_int	1	1	replace
124	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Millis  out  of  range: "  +  minutesOffset);  [FE]  IllegalArgumentException  testForOffsetHoursMinutes_int_int  [CONTEXT]  public  static  DateTimeZone  forOffsetHoursMinutes(int  hoursOffset,  int  minutesOffset)  throws  IllegalArgumentException  {  if  (hoursOffset  ==  0  &&  minutesOffset  ==  0)  {  return  DateTimeZone.UTC;  }  if  (hoursOffset  <  -23  ||  hoursOffset  >  23)  {  throw  new  IllegalArgumentException( "Hours  out  of  range:   "  +  hoursOffset);  }  if  (minutesOffset  <  0  ||  minutesOffset  >  59)  {  [BUGGY]  throw  new  IllegalArgumentException( "Millis  out  of  range: "  +  minutesOffset);  [BUGGY]  }  int  offset  =  0;  try  {  int  hoursInMinutes  =  hoursOffset  *  60;  if  (hoursInMinutes  <  0)  {  minutesOffset  =  hoursInMinutes  -  minutesOffset;  }  else  {  minutesOffset  =  hoursInMinutes  +  minutesOffset;  }  offset  =  FieldUtils.safeMultiply(minutesOffset,  DateTimeConstants.MILLIS_PER_MINUTE);  [CLASS]  DateTimeZone  1  Stub  [METHOD]  forOffsetHoursMinutes  [RETURN_TYPE]  DateTimeZone  int  hoursOffset  int  minutesOffset  [VARIABLES]  Set  cAvailableIDs  ArithmeticException  ex  boolean  NameProvider  cNameProvider  String  iID  id  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  long  serialVersionUID  DateTimeZone  UTC  cDefault  temp  zone  int  MAX_MILLIS  hoursInMinutes  hoursOffset  minutesOffset  offset  Provider  cProvider  	projects/Time8/src/main/java/org/joda/time/DateTimeZone.java	1.0	280	280	1	replace	throw  new  IllegalArgumentException( "Millis  out  of  range: "  +  minutesOffset);	throw  new  IllegalArgumentException( "Minutes  out  of  range:   "  +  minutesOffset);  	compilable	  [FE]  IllegalArgumentException  testForOffsetHoursMinutes_int_int	1	1	replace
124	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testForOffsetHoursMinutes_int_int  [CONTEXT]  public  static  DateTimeZone  forOffsetHoursMinutes(int  hoursOffset,  int  minutesOffset)  throws  IllegalArgumentException  {  if  (hoursOffset  ==  0  &&  minutesOffset  ==  0)  {  return  DateTimeZone.UTC;  }  if  (hoursOffset  <  -23  ||  hoursOffset  >  23)  {  throw  new  IllegalArgumentException( "Hours  out  of  range:   "  +  hoursOffset);  }  if  (minutesOffset  <  0  ||  minutesOffset  >  59)  {  [BUGGY]  throw  new  IllegalArgumentException( "Minutes  out  of  range: "  +  hoursOffset);  [BUGGY]  }  int  offset  =  0;  try  {  int  hoursInMinutes  =  hoursOffset  *  60;  if  (hoursInMinutes  <  0)  {  minutesOffset  =  hoursInMinutes  -  minutesOffset;  }  else  {  minutesOffset  =  hoursInMinutes  +  minutesOffset;  }  offset  =  FieldUtils.safeMultiply(minutesOffset,  DateTimeConstants.MILLIS_PER_MINUTE);  [CLASS]  DateTimeZone  1  Stub  [METHOD]  forOffsetHoursMinutes  [RETURN_TYPE]  DateTimeZone  int  hoursOffset  int  minutesOffset  [VARIABLES]  Set  cAvailableIDs  ArithmeticException  ex  boolean  NameProvider  cNameProvider  String  iID  id  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  long  serialVersionUID  DateTimeZone  UTC  cDefault  temp  zone  int  MAX_MILLIS  hoursInMinutes  hoursOffset  minutesOffset  offset  Provider  cProvider  	projects/Time8/src/main/java/org/joda/time/DateTimeZone.java	1.0	280	280	1	add	throw  new  IllegalArgumentException( "Minutes  out  of  range: "  +  hoursOffset);	throw  new  IllegalArgumentException( "Minutes  out  of  range:   "  +  minutesOffset);  	compilable	  [FE]  IllegalArgumentException  testForOffsetHoursMinutes_int_int	1	1	replace
125	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Minutes  out  of  range: "  +  hoursOffset);  [FE]  IllegalArgumentException  testForOffsetHoursMinutes_int_int  [CONTEXT]  public  static  DateTimeZone  forOffsetHoursMinutes(int  hoursOffset,  int  minutesOffset)  throws  IllegalArgumentException  {  if  (hoursOffset  ==  0  &&  minutesOffset  ==  0)  {  return  DateTimeZone.UTC;  }  if  (hoursOffset  <  -23  ||  hoursOffset  >  23)  {  throw  new  IllegalArgumentException( "Hours  out  of  range:   "  +  hoursOffset);  }  if  (minutesOffset  <  0  ||  minutesOffset  >  59)  {  [BUGGY]  throw  new  IllegalArgumentException( "Minutes  out  of  range: "  +  hoursOffset);  [BUGGY]  }  int  offset  =  0;  try  {  int  hoursInMinutes  =  hoursOffset  *  60;  if  (hoursInMinutes  <  0)  {  minutesOffset  =  hoursInMinutes  -  minutesOffset;  }  else  {  minutesOffset  =  hoursInMinutes  +  minutesOffset;  }  offset  =  FieldUtils.safeMultiply(minutesOffset,  DateTimeConstants.MILLIS_PER_MINUTE);  [CLASS]  DateTimeZone  1  Stub  [METHOD]  forOffsetHoursMinutes  [RETURN_TYPE]  DateTimeZone  int  hoursOffset  int  minutesOffset  [VARIABLES]  Set  cAvailableIDs  ArithmeticException  ex  boolean  NameProvider  cNameProvider  String  iID  id  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  long  serialVersionUID  DateTimeZone  UTC  cDefault  temp  zone  int  MAX_MILLIS  hoursInMinutes  hoursOffset  minutesOffset  offset  Provider  cProvider  	projects/Time8/src/main/java/org/joda/time/DateTimeZone.java	1.0	280	280	1	replace	throw  new  IllegalArgumentException( "Minutes  out  of  range: "  +  hoursOffset);	throw  new  IllegalArgumentException( "Minutes  out  of  range:   "  +  minutesOffset);  	compilable	  [FE]  IllegalArgumentException  testForOffsetHoursMinutes_int_int	1	1	replace
125	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testForOffsetHoursMinutes_int_int  [CONTEXT]  public  static  DateTimeZone  forOffsetHoursMinutes(int  hoursOffset,  int  minutesOffset)  throws  IllegalArgumentException  {  if  (hoursOffset  ==  0  &&  minutesOffset  ==  0)  {  return  DateTimeZone.UTC;  }  if  (hoursOffset  <  -23  ||  hoursOffset  >  23)  {  throw  new  IllegalArgumentException( "Hours  out  of  range:   "  +  hoursOffset);  }  if  (minutesOffset  <  0  ||  minutesOffset  >  59)  {  [BUGGY]    [BUGGY]  }  int  offset  =  0;  try  {  int  hoursInMinutes  =  hoursOffset  *  60;  if  (hoursInMinutes  <  0)  {  minutesOffset  =  hoursInMinutes  -  minutesOffset;  }  else  {  minutesOffset  =  hoursInMinutes  +  minutesOffset;  }  offset  =  FieldUtils.safeMultiply(minutesOffset,  DateTimeConstants.MILLIS_PER_MINUTE);  [CLASS]  DateTimeZone  1  Stub  [METHOD]  forOffsetHoursMinutes  [RETURN_TYPE]  DateTimeZone  int  hoursOffset  int  minutesOffset  [VARIABLES]  Set  cAvailableIDs  ArithmeticException  ex  boolean  NameProvider  cNameProvider  String  iID  id  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  long  serialVersionUID  DateTimeZone  UTC  cDefault  temp  zone  int  MAX_MILLIS  hoursInMinutes  hoursOffset  minutesOffset  offset  Provider  cProvider  	projects/Time8/src/main/java/org/joda/time/DateTimeZone.java	1.0	280	280	1	add	  	throw  new  IllegalArgumentException( "Minutes  out  of  range:   "  +  minutesOffset);  	compilable	  [FE]  AssertionFailedError  testForOffsetHoursMinutes_int_int	1	1	replace
126	[BUG]  [BUGGY]    [FE]  AssertionFailedError  testForOffsetHoursMinutes_int_int  [CONTEXT]  public  static  DateTimeZone  forOffsetHoursMinutes(int  hoursOffset,  int  minutesOffset)  throws  IllegalArgumentException  {  if  (hoursOffset  ==  0  &&  minutesOffset  ==  0)  {  return  DateTimeZone.UTC;  }  if  (hoursOffset  <  -23  ||  hoursOffset  >  23)  {  throw  new  IllegalArgumentException( "Hours  out  of  range:   "  +  hoursOffset);  }  if  (minutesOffset  <  0  ||  minutesOffset  >  59)  {  [BUGGY]    [BUGGY]  }  int  offset  =  0;  try  {  int  hoursInMinutes  =  hoursOffset  *  60;  if  (hoursInMinutes  <  0)  {  minutesOffset  =  hoursInMinutes  -  minutesOffset;  }  else  {  minutesOffset  =  hoursInMinutes  +  minutesOffset;  }  offset  =  FieldUtils.safeMultiply(minutesOffset,  DateTimeConstants.MILLIS_PER_MINUTE);  [CLASS]  DateTimeZone  1  Stub  [METHOD]  forOffsetHoursMinutes  [RETURN_TYPE]  DateTimeZone  int  hoursOffset  int  minutesOffset  [VARIABLES]  Set  cAvailableIDs  ArithmeticException  ex  boolean  NameProvider  cNameProvider  String  iID  id  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  long  serialVersionUID  DateTimeZone  UTC  cDefault  temp  zone  int  MAX_MILLIS  hoursInMinutes  hoursOffset  minutesOffset  offset  Provider  cProvider  	projects/Time8/src/main/java/org/joda/time/DateTimeZone.java	1.0	280	280	1	replace	  	throw  new  IllegalArgumentException( "Minutes  out  of  range:   "  +  minutesOffset);  	compilable	  [FE]  AssertionFailedError  testForOffsetHoursMinutes_int_int	1	1	replace
131	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testForOffsetHoursMinutes_int_int  [CONTEXT]  }  if  (hoursOffset  <  -23  ||  hoursOffset  >  23)  {  throw  new  IllegalArgumentException( "Hours  out  of  range:   "  +  hoursOffset);  }  if  (minutesOffset  <  0  ||  minutesOffset  >  59)  {  throw  new  IllegalArgumentException( "Minutes  out  of  range:   "  +  minutesOffset);  }  int  offset  =  0;  try  {  int  hoursInMinutes  =  hoursOffset  *  60;  [BUGGY]    offset  =  FieldUtils.safeMultiply(hoursInMinutes,  DateTimeConstants.MILLIS_PER_MINUTE);  [BUGGY]  if  (hoursInMinutes  <  0)  {  minutesOffset  =  hoursInMinutes  -  minutesOffset;  }  else  {  minutesOffset  =  hoursInMinutes  +  minutesOffset;  }  offset  =  FieldUtils.safeMultiply(minutesOffset,  DateTimeConstants.MILLIS_PER_MINUTE);  }  catch  (ArithmeticException  ex)  {  throw  new  IllegalArgumentException( "Offset  is  too  large ");  }  return  forOffsetMillis(offset);  }  [CLASS]  DateTimeZone  1  Stub  [METHOD]  forOffsetHoursMinutes  [RETURN_TYPE]  DateTimeZone  int  hoursOffset  int  minutesOffset  [VARIABLES]  Set  cAvailableIDs  ArithmeticException  ex  boolean  NameProvider  cNameProvider  String  iID  id  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  long  serialVersionUID  DateTimeZone  UTC  cDefault  temp  zone  int  MAX_MILLIS  hoursInMinutes  hoursOffset  minutesOffset  offset  Provider  cProvider  	projects/Time8/src/main/java/org/joda/time/DateTimeZone.java	0.7071067811865475	285	285	1	add	    offset  =  FieldUtils.safeMultiply(hoursInMinutes,  DateTimeConstants.MILLIS_PER_MINUTE);		compilable	  [FE]  IllegalArgumentException  testForOffsetHoursMinutes_int_int	18	1	add
132	[BUG]  [BUGGY]    offset  =  FieldUtils.safeMultiply(hoursInMinutes,  DateTimeConstants.MILLIS_PER_MINUTE);  [FE]  IllegalArgumentException  testForOffsetHoursMinutes_int_int  [CONTEXT]  }  if  (hoursOffset  <  -23  ||  hoursOffset  >  23)  {  throw  new  IllegalArgumentException( "Hours  out  of  range:   "  +  hoursOffset);  }  if  (minutesOffset  <  0  ||  minutesOffset  >  59)  {  throw  new  IllegalArgumentException( "Minutes  out  of  range:   "  +  minutesOffset);  }  int  offset  =  0;  try  {  int  hoursInMinutes  =  hoursOffset  *  60;  [BUGGY]    offset  =  FieldUtils.safeMultiply(hoursInMinutes,  DateTimeConstants.MILLIS_PER_MINUTE);  [BUGGY]  if  (hoursInMinutes  <  0)  {  minutesOffset  =  hoursInMinutes  -  minutesOffset;  }  else  {  minutesOffset  =  hoursInMinutes  +  minutesOffset;  }  offset  =  FieldUtils.safeMultiply(minutesOffset,  DateTimeConstants.MILLIS_PER_MINUTE);  }  catch  (ArithmeticException  ex)  {  throw  new  IllegalArgumentException( "Offset  is  too  large ");  }  return  forOffsetMillis(offset);  }  [CLASS]  DateTimeZone  1  Stub  [METHOD]  forOffsetHoursMinutes  [RETURN_TYPE]  DateTimeZone  int  hoursOffset  int  minutesOffset  [VARIABLES]  Set  cAvailableIDs  ArithmeticException  ex  boolean  NameProvider  cNameProvider  String  iID  id  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  long  serialVersionUID  DateTimeZone  UTC  cDefault  temp  zone  int  MAX_MILLIS  hoursInMinutes  hoursOffset  minutesOffset  offset  Provider  cProvider  	projects/Time8/src/main/java/org/joda/time/DateTimeZone.java	0.7071067811865475	285	285	1	replace	    offset  =  FieldUtils.safeMultiply(hoursInMinutes,  DateTimeConstants.MILLIS_PER_MINUTE);		compilable	  [FE]  IllegalArgumentException  testForOffsetHoursMinutes_int_int	18	1	add
152	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testForOffsetHoursMinutes_int_int  [CONTEXT]  }  if  (hoursOffset  <  -23  ||  hoursOffset  >  23)  {  throw  new  IllegalArgumentException( "Hours  out  of  range:   "  +  hoursOffset);  }  if  (minutesOffset  <  0  ||  minutesOffset  >  59)  {  throw  new  IllegalArgumentException( "Minutes  out  of  range:   "  +  minutesOffset);  }  int  offset  =  0;  try  {  int  hoursInMinutes  =  hoursOffset  *  60;  [BUGGY]  if(hoursInMinutes  <  0  ||  hoursOffset  >  59)  {  [BUGGY]  minutesOffset  =  hoursInMinutes  -  minutesOffset;  }  else  {  minutesOffset  =  hoursInMinutes  +  minutesOffset;  }  offset  =  FieldUtils.safeMultiply(minutesOffset,  DateTimeConstants.MILLIS_PER_MINUTE);  }  catch  (ArithmeticException  ex)  {  throw  new  IllegalArgumentException( "Offset  is  too  large ");  }  return  forOffsetMillis(offset);  }  [CLASS]  DateTimeZone  1  Stub  [METHOD]  forOffsetHoursMinutes  [RETURN_TYPE]  DateTimeZone  int  hoursOffset  int  minutesOffset  [VARIABLES]  Set  cAvailableIDs  ArithmeticException  ex  boolean  NameProvider  cNameProvider  String  iID  id  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  long  serialVersionUID  DateTimeZone  UTC  cDefault  temp  zone  int  MAX_MILLIS  hoursInMinutes  hoursOffset  minutesOffset  offset  Provider  cProvider  	projects/Time8/src/main/java/org/joda/time/DateTimeZone.java	0.7071067811865475	285	285	1	add	if(hoursInMinutes  <  0  ||  hoursOffset  >  59)  {	if  (hoursInMinutes  <  0)  {  	compilable	  [FE]  IllegalArgumentException  testForOffsetHoursMinutes_int_int	17	1	replace
153	[BUG]  [BUGGY]  if(hoursInMinutes  <  0  ||  hoursOffset  >  59)  {  [FE]  IllegalArgumentException  testForOffsetHoursMinutes_int_int  [CONTEXT]  }  if  (hoursOffset  <  -23  ||  hoursOffset  >  23)  {  throw  new  IllegalArgumentException( "Hours  out  of  range:   "  +  hoursOffset);  }  if  (minutesOffset  <  0  ||  minutesOffset  >  59)  {  throw  new  IllegalArgumentException( "Minutes  out  of  range:   "  +  minutesOffset);  }  int  offset  =  0;  try  {  int  hoursInMinutes  =  hoursOffset  *  60;  [BUGGY]  if(hoursInMinutes  <  0  ||  hoursOffset  >  59)  {  [BUGGY]  minutesOffset  =  hoursInMinutes  -  minutesOffset;  }  else  {  minutesOffset  =  hoursInMinutes  +  minutesOffset;  }  offset  =  FieldUtils.safeMultiply(minutesOffset,  DateTimeConstants.MILLIS_PER_MINUTE);  }  catch  (ArithmeticException  ex)  {  throw  new  IllegalArgumentException( "Offset  is  too  large ");  }  return  forOffsetMillis(offset);  }  [CLASS]  DateTimeZone  1  Stub  [METHOD]  forOffsetHoursMinutes  [RETURN_TYPE]  DateTimeZone  int  hoursOffset  int  minutesOffset  [VARIABLES]  Set  cAvailableIDs  ArithmeticException  ex  boolean  NameProvider  cNameProvider  String  iID  id  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  long  serialVersionUID  DateTimeZone  UTC  cDefault  temp  zone  int  MAX_MILLIS  hoursInMinutes  hoursOffset  minutesOffset  offset  Provider  cProvider  	projects/Time8/src/main/java/org/joda/time/DateTimeZone.java	0.7071067811865475	285	285	1	replace	if(hoursInMinutes  <  0  ||  hoursOffset  >  59)  {	if  (hoursInMinutes  <  0)  {  	compilable	  [FE]  IllegalArgumentException  testForOffsetHoursMinutes_int_int	17	1	replace
222	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testForOffsetHoursMinutes_int_int  [CONTEXT]  public  static  DateTimeZone  forOffsetHoursMinutes(int  hoursOffset,  int  minutesOffset)  throws  IllegalArgumentException  {  if  (hoursOffset  ==  0  &&  minutesOffset  ==  0)  {  return  DateTimeZone.UTC;  }  if  (hoursOffset  <  -23  ||  hoursOffset  >  23)  {  throw  new  IllegalArgumentException( "Hours  out  of  range:   "  +  hoursOffset);  }  if  (minutesOffset  <  0  ||  minutesOffset  >  59)  {  throw  new  IllegalArgumentException( "Minutes  out  of  range:   "  +  minutesOffset);  }  [BUGGY]  int  offset  =(int)FieldUtils.safeMultiply(hoursOffset,  DateTimeConstants.MILLIS_PER_MINUTE);  [BUGGY]  try  {  int  hoursInMinutes  =  hoursOffset  *  60;  if  (hoursInMinutes  <  0)  {  minutesOffset  =  hoursInMinutes  -  minutesOffset;  }  else  {  minutesOffset  =  hoursInMinutes  +  minutesOffset;  }  offset  =  FieldUtils.safeMultiply(minutesOffset,  DateTimeConstants.MILLIS_PER_MINUTE);  }  catch  (ArithmeticException  ex)  {  throw  new  IllegalArgumentException( "Offset  is  too  large ");  [CLASS]  DateTimeZone  1  Stub  [METHOD]  forOffsetHoursMinutes  [RETURN_TYPE]  DateTimeZone  int  hoursOffset  int  minutesOffset  [VARIABLES]  Set  cAvailableIDs  ArithmeticException  ex  boolean  NameProvider  cNameProvider  String  iID  id  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  long  serialVersionUID  DateTimeZone  UTC  cDefault  temp  zone  int  MAX_MILLIS  hoursInMinutes  hoursOffset  minutesOffset  offset  Provider  cProvider  	projects/Time8/src/main/java/org/joda/time/DateTimeZone.java	0.7071067811865475	282	282	1	add	int  offset  =(int)FieldUtils.safeMultiply(hoursOffset,  DateTimeConstants.MILLIS_PER_MINUTE);	int  offset  =  0;  	compilable	  [FE]  IllegalArgumentException  testForOffsetHoursMinutes_int_int	13	1	replace
223	[BUG]  [BUGGY]  int  offset  =(int)FieldUtils.safeMultiply(hoursOffset,  DateTimeConstants.MILLIS_PER_MINUTE);  [FE]  IllegalArgumentException  testForOffsetHoursMinutes_int_int  [CONTEXT]  public  static  DateTimeZone  forOffsetHoursMinutes(int  hoursOffset,  int  minutesOffset)  throws  IllegalArgumentException  {  if  (hoursOffset  ==  0  &&  minutesOffset  ==  0)  {  return  DateTimeZone.UTC;  }  if  (hoursOffset  <  -23  ||  hoursOffset  >  23)  {  throw  new  IllegalArgumentException( "Hours  out  of  range:   "  +  hoursOffset);  }  if  (minutesOffset  <  0  ||  minutesOffset  >  59)  {  throw  new  IllegalArgumentException( "Minutes  out  of  range:   "  +  minutesOffset);  }  [BUGGY]  int  offset  =(int)FieldUtils.safeMultiply(hoursOffset,  DateTimeConstants.MILLIS_PER_MINUTE);  [BUGGY]  try  {  int  hoursInMinutes  =  hoursOffset  *  60;  if  (hoursInMinutes  <  0)  {  minutesOffset  =  hoursInMinutes  -  minutesOffset;  }  else  {  minutesOffset  =  hoursInMinutes  +  minutesOffset;  }  offset  =  FieldUtils.safeMultiply(minutesOffset,  DateTimeConstants.MILLIS_PER_MINUTE);  }  catch  (ArithmeticException  ex)  {  throw  new  IllegalArgumentException( "Offset  is  too  large ");  [CLASS]  DateTimeZone  1  Stub  [METHOD]  forOffsetHoursMinutes  [RETURN_TYPE]  DateTimeZone  int  hoursOffset  int  minutesOffset  [VARIABLES]  Set  cAvailableIDs  ArithmeticException  ex  boolean  NameProvider  cNameProvider  String  iID  id  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  long  serialVersionUID  DateTimeZone  UTC  cDefault  temp  zone  int  MAX_MILLIS  hoursInMinutes  hoursOffset  minutesOffset  offset  Provider  cProvider  	projects/Time8/src/main/java/org/joda/time/DateTimeZone.java	0.7071067811865475	282	282	1	replace	int  offset  =(int)FieldUtils.safeMultiply(hoursOffset,  DateTimeConstants.MILLIS_PER_MINUTE);	int  offset  =  0;  	compilable	  [FE]  IllegalArgumentException  testForOffsetHoursMinutes_int_int	13	1	replace
223	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testForOffsetHoursMinutes_int_int  [CONTEXT]  public  static  DateTimeZone  forOffsetHoursMinutes(int  hoursOffset,  int  minutesOffset)  throws  IllegalArgumentException  {  if  (hoursOffset  ==  0  &&  minutesOffset  ==  0)  {  return  DateTimeZone.UTC;  }  if  (hoursOffset  <  -23  ||  hoursOffset  >  23)  {  throw  new  IllegalArgumentException( "Hours  out  of  range:   "  +  hoursOffset);  }  if  (minutesOffset  <  0  ||  minutesOffset  >  59)  {  throw  new  IllegalArgumentException( "Minutes  out  of  range:   "  +  minutesOffset);  }  [BUGGY]  int  offset  =(int)FieldUtils.safeMultiply(minutesOffset,  DateTimeConstants.MILLIS_PER_MINUTE);  [BUGGY]  try  {  int  hoursInMinutes  =  hoursOffset  *  60;  if  (hoursInMinutes  <  0)  {  minutesOffset  =  hoursInMinutes  -  minutesOffset;  }  else  {  minutesOffset  =  hoursInMinutes  +  minutesOffset;  }  offset  =  FieldUtils.safeMultiply(minutesOffset,  DateTimeConstants.MILLIS_PER_MINUTE);  }  catch  (ArithmeticException  ex)  {  throw  new  IllegalArgumentException( "Offset  is  too  large ");  [CLASS]  DateTimeZone  1  Stub  [METHOD]  forOffsetHoursMinutes  [RETURN_TYPE]  DateTimeZone  int  hoursOffset  int  minutesOffset  [VARIABLES]  Set  cAvailableIDs  ArithmeticException  ex  boolean  NameProvider  cNameProvider  String  iID  id  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  long  serialVersionUID  DateTimeZone  UTC  cDefault  temp  zone  int  MAX_MILLIS  hoursInMinutes  hoursOffset  minutesOffset  offset  Provider  cProvider  	projects/Time8/src/main/java/org/joda/time/DateTimeZone.java	0.7071067811865475	282	282	1	add	int  offset  =(int)FieldUtils.safeMultiply(minutesOffset,  DateTimeConstants.MILLIS_PER_MINUTE);	int  offset  =  0;  	compilable	  [FE]  IllegalArgumentException  testForOffsetHoursMinutes_int_int	13	1	replace
224	[BUG]  [BUGGY]  int  offset  =(int)FieldUtils.safeMultiply(minutesOffset,  DateTimeConstants.MILLIS_PER_MINUTE);  [FE]  IllegalArgumentException  testForOffsetHoursMinutes_int_int  [CONTEXT]  public  static  DateTimeZone  forOffsetHoursMinutes(int  hoursOffset,  int  minutesOffset)  throws  IllegalArgumentException  {  if  (hoursOffset  ==  0  &&  minutesOffset  ==  0)  {  return  DateTimeZone.UTC;  }  if  (hoursOffset  <  -23  ||  hoursOffset  >  23)  {  throw  new  IllegalArgumentException( "Hours  out  of  range:   "  +  hoursOffset);  }  if  (minutesOffset  <  0  ||  minutesOffset  >  59)  {  throw  new  IllegalArgumentException( "Minutes  out  of  range:   "  +  minutesOffset);  }  [BUGGY]  int  offset  =(int)FieldUtils.safeMultiply(minutesOffset,  DateTimeConstants.MILLIS_PER_MINUTE);  [BUGGY]  try  {  int  hoursInMinutes  =  hoursOffset  *  60;  if  (hoursInMinutes  <  0)  {  minutesOffset  =  hoursInMinutes  -  minutesOffset;  }  else  {  minutesOffset  =  hoursInMinutes  +  minutesOffset;  }  offset  =  FieldUtils.safeMultiply(minutesOffset,  DateTimeConstants.MILLIS_PER_MINUTE);  }  catch  (ArithmeticException  ex)  {  throw  new  IllegalArgumentException( "Offset  is  too  large ");  [CLASS]  DateTimeZone  1  Stub  [METHOD]  forOffsetHoursMinutes  [RETURN_TYPE]  DateTimeZone  int  hoursOffset  int  minutesOffset  [VARIABLES]  Set  cAvailableIDs  ArithmeticException  ex  boolean  NameProvider  cNameProvider  String  iID  id  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  long  serialVersionUID  DateTimeZone  UTC  cDefault  temp  zone  int  MAX_MILLIS  hoursInMinutes  hoursOffset  minutesOffset  offset  Provider  cProvider  	projects/Time8/src/main/java/org/joda/time/DateTimeZone.java	0.7071067811865475	282	282	1	replace	int  offset  =(int)FieldUtils.safeMultiply(minutesOffset,  DateTimeConstants.MILLIS_PER_MINUTE);	int  offset  =  0;  	compilable	  [FE]  IllegalArgumentException  testForOffsetHoursMinutes_int_int	13	1	replace
224	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testForOffsetHoursMinutes_int_int  [CONTEXT]  public  static  DateTimeZone  forOffsetHoursMinutes(int  hoursOffset,  int  minutesOffset)  throws  IllegalArgumentException  {  if  (hoursOffset  ==  0  &&  minutesOffset  ==  0)  {  return  DateTimeZone.UTC;  }  if  (hoursOffset  <  -23  ||  hoursOffset  >  23)  {  throw  new  IllegalArgumentException( "Hours  out  of  range:   "  +  hoursOffset);  }  if  (minutesOffset  <  0  ||  minutesOffset  >  59)  {  throw  new  IllegalArgumentException( "Minutes  out  of  range:   "  +  minutesOffset);  }  [BUGGY]  int  offset  =(int)FieldUtils.safeMultiply(hoursOffset,  DateTimeConstants.MILLIS_PER_MINUTE);  if(hoursOffset  >  59)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  try  {  int  hoursInMinutes  =  hoursOffset  *  60;  if  (hoursInMinutes  <  0)  {  minutesOffset  =  hoursInMinutes  -  minutesOffset;  }  else  {  minutesOffset  =  hoursInMinutes  +  minutesOffset;  }  offset  =  FieldUtils.safeMultiply(minutesOffset,  DateTimeConstants.MILLIS_PER_MINUTE);  }  catch  (ArithmeticException  ex)  {  throw  new  IllegalArgumentException( "Offset  is  too  large ");  [CLASS]  DateTimeZone  1  Stub  [METHOD]  forOffsetHoursMinutes  [RETURN_TYPE]  DateTimeZone  int  hoursOffset  int  minutesOffset  [VARIABLES]  Set  cAvailableIDs  ArithmeticException  ex  boolean  NameProvider  cNameProvider  String  iID  id  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  long  serialVersionUID  DateTimeZone  UTC  cDefault  temp  zone  int  MAX_MILLIS  hoursInMinutes  hoursOffset  minutesOffset  offset  Provider  cProvider  	projects/Time8/src/main/java/org/joda/time/DateTimeZone.java	0.7071067811865475	282	282	1	add	int  offset  =(int)FieldUtils.safeMultiply(hoursOffset,  DateTimeConstants.MILLIS_PER_MINUTE);  if(hoursOffset  >  59)  {  throw  new  IllegalArgumentException( " ");  }	int  offset  =  0;  	compilable	  [FE]  IllegalArgumentException  testForOffsetHoursMinutes_int_int	13	1	replace
225	[BUG]  [BUGGY]  int  offset  =(int)FieldUtils.safeMultiply(hoursOffset,  DateTimeConstants.MILLIS_PER_MINUTE);  if(hoursOffset  >  59)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  testForOffsetHoursMinutes_int_int  [CONTEXT]  public  static  DateTimeZone  forOffsetHoursMinutes(int  hoursOffset,  int  minutesOffset)  throws  IllegalArgumentException  {  if  (hoursOffset  ==  0  &&  minutesOffset  ==  0)  {  return  DateTimeZone.UTC;  }  if  (hoursOffset  <  -23  ||  hoursOffset  >  23)  {  throw  new  IllegalArgumentException( "Hours  out  of  range:   "  +  hoursOffset);  }  if  (minutesOffset  <  0  ||  minutesOffset  >  59)  {  throw  new  IllegalArgumentException( "Minutes  out  of  range:   "  +  minutesOffset);  }  [BUGGY]  int  offset  =(int)FieldUtils.safeMultiply(hoursOffset,  DateTimeConstants.MILLIS_PER_MINUTE);  if(hoursOffset  >  59)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  try  {  int  hoursInMinutes  =  hoursOffset  *  60;  if  (hoursInMinutes  <  0)  {  minutesOffset  =  hoursInMinutes  -  minutesOffset;  }  else  {  minutesOffset  =  hoursInMinutes  +  minutesOffset;  }  offset  =  FieldUtils.safeMultiply(minutesOffset,  DateTimeConstants.MILLIS_PER_MINUTE);  }  catch  (ArithmeticException  ex)  {  throw  new  IllegalArgumentException( "Offset  is  too  large ");  [CLASS]  DateTimeZone  1  Stub  [METHOD]  forOffsetHoursMinutes  [RETURN_TYPE]  DateTimeZone  int  hoursOffset  int  minutesOffset  [VARIABLES]  Set  cAvailableIDs  ArithmeticException  ex  boolean  NameProvider  cNameProvider  String  iID  id  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  long  serialVersionUID  DateTimeZone  UTC  cDefault  temp  zone  int  MAX_MILLIS  hoursInMinutes  hoursOffset  minutesOffset  offset  Provider  cProvider  	projects/Time8/src/main/java/org/joda/time/DateTimeZone.java	0.7071067811865475	282	282	1	replace	int  offset  =(int)FieldUtils.safeMultiply(hoursOffset,  DateTimeConstants.MILLIS_PER_MINUTE);  if(hoursOffset  >  59)  {  throw  new  IllegalArgumentException( " ");  }	int  offset  =  0;  	compilable	  [FE]  IllegalArgumentException  testForOffsetHoursMinutes_int_int	13	1	replace
242	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testForOffsetHoursMinutes_int_int  [CONTEXT]  }  if  (minutesOffset  <  0  ||  minutesOffset  >  59)  {  throw  new  IllegalArgumentException( "Minutes  out  of  range:   "  +  minutesOffset);  }  int  offset  =  0;  try  {  int  hoursInMinutes  =  hoursOffset  *  60;  if  (hoursInMinutes  <  0)  {  minutesOffset  =  hoursInMinutes  -  minutesOffset;  }  else  {  [BUGGY]  minutesOffset  =  hoursInMinutes  -  minutesOffset;  [BUGGY]  }  offset  =  FieldUtils.safeMultiply(minutesOffset,  DateTimeConstants.MILLIS_PER_MINUTE);  }  catch  (ArithmeticException  ex)  {  throw  new  IllegalArgumentException( "Offset  is  too  large ");  }  return  forOffsetMillis(offset);  }  [CLASS]  DateTimeZone  1  Stub  [METHOD]  forOffsetHoursMinutes  [RETURN_TYPE]  DateTimeZone  int  hoursOffset  int  minutesOffset  [VARIABLES]  Set  cAvailableIDs  ArithmeticException  ex  boolean  NameProvider  cNameProvider  String  iID  id  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  long  serialVersionUID  DateTimeZone  UTC  cDefault  temp  zone  int  MAX_MILLIS  hoursInMinutes  hoursOffset  minutesOffset  offset  Provider  cProvider  	projects/Time8/src/main/java/org/joda/time/DateTimeZone.java	0.7071067811865475	288	288	1	add	minutesOffset  =  hoursInMinutes  -  minutesOffset;	minutesOffset  =  hoursInMinutes  +  minutesOffset;  	compilable	  [FE]  AssertionFailedError  testForOffsetHoursMinutes_int_int	19	1	replace
243	[BUG]  [BUGGY]  minutesOffset  =  hoursInMinutes  -  minutesOffset;  [FE]  AssertionFailedError  testForOffsetHoursMinutes_int_int  [CONTEXT]  }  if  (minutesOffset  <  0  ||  minutesOffset  >  59)  {  throw  new  IllegalArgumentException( "Minutes  out  of  range:   "  +  minutesOffset);  }  int  offset  =  0;  try  {  int  hoursInMinutes  =  hoursOffset  *  60;  if  (hoursInMinutes  <  0)  {  minutesOffset  =  hoursInMinutes  -  minutesOffset;  }  else  {  [BUGGY]  minutesOffset  =  hoursInMinutes  -  minutesOffset;  [BUGGY]  }  offset  =  FieldUtils.safeMultiply(minutesOffset,  DateTimeConstants.MILLIS_PER_MINUTE);  }  catch  (ArithmeticException  ex)  {  throw  new  IllegalArgumentException( "Offset  is  too  large ");  }  return  forOffsetMillis(offset);  }  [CLASS]  DateTimeZone  1  Stub  [METHOD]  forOffsetHoursMinutes  [RETURN_TYPE]  DateTimeZone  int  hoursOffset  int  minutesOffset  [VARIABLES]  Set  cAvailableIDs  ArithmeticException  ex  boolean  NameProvider  cNameProvider  String  iID  id  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  long  serialVersionUID  DateTimeZone  UTC  cDefault  temp  zone  int  MAX_MILLIS  hoursInMinutes  hoursOffset  minutesOffset  offset  Provider  cProvider  	projects/Time8/src/main/java/org/joda/time/DateTimeZone.java	0.7071067811865475	288	288	1	replace	minutesOffset  =  hoursInMinutes  -  minutesOffset;	minutesOffset  =  hoursInMinutes  +  minutesOffset;  	compilable	  [FE]  AssertionFailedError  testForOffsetHoursMinutes_int_int	19	1	replace
244	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testForOffsetHoursMinutes_int_int  [CONTEXT]  }  if  (minutesOffset  <  0  ||  minutesOffset  >  59)  {  throw  new  IllegalArgumentException( "Minutes  out  of  range:   "  +  minutesOffset);  }  int  offset  =  0;  try  {  int  hoursInMinutes  =  hoursOffset  *  60;  if  (hoursInMinutes  <  0)  {  minutesOffset  =  hoursInMinutes  -  minutesOffset;  }  else  {  [BUGGY]  minutesOffset  =  hoursInMinutes  +  offset;  [BUGGY]  }  offset  =  FieldUtils.safeMultiply(minutesOffset,  DateTimeConstants.MILLIS_PER_MINUTE);  }  catch  (ArithmeticException  ex)  {  throw  new  IllegalArgumentException( "Offset  is  too  large ");  }  return  forOffsetMillis(offset);  }  [CLASS]  DateTimeZone  1  Stub  [METHOD]  forOffsetHoursMinutes  [RETURN_TYPE]  DateTimeZone  int  hoursOffset  int  minutesOffset  [VARIABLES]  Set  cAvailableIDs  ArithmeticException  ex  boolean  NameProvider  cNameProvider  String  iID  id  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  long  serialVersionUID  DateTimeZone  UTC  cDefault  temp  zone  int  MAX_MILLIS  hoursInMinutes  hoursOffset  minutesOffset  offset  Provider  cProvider  	projects/Time8/src/main/java/org/joda/time/DateTimeZone.java	0.7071067811865475	288	288	1	add	minutesOffset  =  hoursInMinutes  +  offset;	minutesOffset  =  hoursInMinutes  +  minutesOffset;  	compilable	  [FE]  AssertionFailedError  testForOffsetHoursMinutes_int_int	19	1	replace
245	[BUG]  [BUGGY]  minutesOffset  =  hoursInMinutes  +  offset;  [FE]  AssertionFailedError  testForOffsetHoursMinutes_int_int  [CONTEXT]  }  if  (minutesOffset  <  0  ||  minutesOffset  >  59)  {  throw  new  IllegalArgumentException( "Minutes  out  of  range:   "  +  minutesOffset);  }  int  offset  =  0;  try  {  int  hoursInMinutes  =  hoursOffset  *  60;  if  (hoursInMinutes  <  0)  {  minutesOffset  =  hoursInMinutes  -  minutesOffset;  }  else  {  [BUGGY]  minutesOffset  =  hoursInMinutes  +  offset;  [BUGGY]  }  offset  =  FieldUtils.safeMultiply(minutesOffset,  DateTimeConstants.MILLIS_PER_MINUTE);  }  catch  (ArithmeticException  ex)  {  throw  new  IllegalArgumentException( "Offset  is  too  large ");  }  return  forOffsetMillis(offset);  }  [CLASS]  DateTimeZone  1  Stub  [METHOD]  forOffsetHoursMinutes  [RETURN_TYPE]  DateTimeZone  int  hoursOffset  int  minutesOffset  [VARIABLES]  Set  cAvailableIDs  ArithmeticException  ex  boolean  NameProvider  cNameProvider  String  iID  id  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  long  serialVersionUID  DateTimeZone  UTC  cDefault  temp  zone  int  MAX_MILLIS  hoursInMinutes  hoursOffset  minutesOffset  offset  Provider  cProvider  	projects/Time8/src/main/java/org/joda/time/DateTimeZone.java	0.7071067811865475	288	288	1	replace	minutesOffset  =  hoursInMinutes  +  offset;	minutesOffset  =  hoursInMinutes  +  minutesOffset;  	compilable	  [FE]  AssertionFailedError  testForOffsetHoursMinutes_int_int	19	1	replace
263	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testForOffsetHoursMinutes_int_int  [CONTEXT]  public  static  DateTimeZone  forOffsetHoursMinutes(int  hoursOffset,  int  minutesOffset)  throws  IllegalArgumentException  {  [BUGGY]  if(hoursOffset  ==  0  &&  minutesOffset  <  0)  {  [BUGGY]  return  DateTimeZone.UTC;  }  if  (hoursOffset  <  -23  ||  hoursOffset  >  23)  {  throw  new  IllegalArgumentException( "Hours  out  of  range:   "  +  hoursOffset);  }  if  (minutesOffset  <  0  ||  minutesOffset  >  59)  {  throw  new  IllegalArgumentException( "Minutes  out  of  range:   "  +  minutesOffset);  }  int  offset  =  0;  try  {  [CLASS]  DateTimeZone  1  Stub  [METHOD]  forOffsetHoursMinutes  [RETURN_TYPE]  DateTimeZone  int  hoursOffset  int  minutesOffset  [VARIABLES]  Set  cAvailableIDs  ArithmeticException  ex  boolean  NameProvider  cNameProvider  String  iID  id  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  long  serialVersionUID  DateTimeZone  UTC  cDefault  temp  zone  int  MAX_MILLIS  hoursInMinutes  hoursOffset  minutesOffset  offset  Provider  cProvider  	projects/Time8/src/main/java/org/joda/time/DateTimeZone.java	0.7071067811865475	273	273	1	add	if(hoursOffset  ==  0  &&  minutesOffset  <  0)  {	if  (hoursOffset  ==  0  &&  minutesOffset  ==  0)  {  	compilable	  [FE]  AssertionFailedError  testForOffsetHoursMinutes_int_int	5	1	replace
264	[BUG]  [BUGGY]  if(hoursOffset  ==  0  &&  minutesOffset  <  0)  {  [FE]  AssertionFailedError  testForOffsetHoursMinutes_int_int  [CONTEXT]  public  static  DateTimeZone  forOffsetHoursMinutes(int  hoursOffset,  int  minutesOffset)  throws  IllegalArgumentException  {  [BUGGY]  if(hoursOffset  ==  0  &&  minutesOffset  <  0)  {  [BUGGY]  return  DateTimeZone.UTC;  }  if  (hoursOffset  <  -23  ||  hoursOffset  >  23)  {  throw  new  IllegalArgumentException( "Hours  out  of  range:   "  +  hoursOffset);  }  if  (minutesOffset  <  0  ||  minutesOffset  >  59)  {  throw  new  IllegalArgumentException( "Minutes  out  of  range:   "  +  minutesOffset);  }  int  offset  =  0;  try  {  [CLASS]  DateTimeZone  1  Stub  [METHOD]  forOffsetHoursMinutes  [RETURN_TYPE]  DateTimeZone  int  hoursOffset  int  minutesOffset  [VARIABLES]  Set  cAvailableIDs  ArithmeticException  ex  boolean  NameProvider  cNameProvider  String  iID  id  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  long  serialVersionUID  DateTimeZone  UTC  cDefault  temp  zone  int  MAX_MILLIS  hoursInMinutes  hoursOffset  minutesOffset  offset  Provider  cProvider  	projects/Time8/src/main/java/org/joda/time/DateTimeZone.java	0.7071067811865475	273	273	1	replace	if(hoursOffset  ==  0  &&  minutesOffset  <  0)  {	if  (hoursOffset  ==  0  &&  minutesOffset  ==  0)  {  	compilable	  [FE]  AssertionFailedError  testForOffsetHoursMinutes_int_int	5	1	replace
264	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testForOffsetHoursMinutes_int_int  [CONTEXT]  public  static  DateTimeZone  forOffsetHoursMinutes(int  hoursOffset,  int  minutesOffset)  throws  IllegalArgumentException  {  [BUGGY]  if(hoursOffset  ==  0  &&  minutesOffset  <=  0)  {  [BUGGY]  return  DateTimeZone.UTC;  }  if  (hoursOffset  <  -23  ||  hoursOffset  >  23)  {  throw  new  IllegalArgumentException( "Hours  out  of  range:   "  +  hoursOffset);  }  if  (minutesOffset  <  0  ||  minutesOffset  >  59)  {  throw  new  IllegalArgumentException( "Minutes  out  of  range:   "  +  minutesOffset);  }  int  offset  =  0;  try  {  [CLASS]  DateTimeZone  1  Stub  [METHOD]  forOffsetHoursMinutes  [RETURN_TYPE]  DateTimeZone  int  hoursOffset  int  minutesOffset  [VARIABLES]  Set  cAvailableIDs  ArithmeticException  ex  boolean  NameProvider  cNameProvider  String  iID  id  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  long  serialVersionUID  DateTimeZone  UTC  cDefault  temp  zone  int  MAX_MILLIS  hoursInMinutes  hoursOffset  minutesOffset  offset  Provider  cProvider  	projects/Time8/src/main/java/org/joda/time/DateTimeZone.java	0.7071067811865475	273	273	1	add	if(hoursOffset  ==  0  &&  minutesOffset  <=  0)  {	if  (hoursOffset  ==  0  &&  minutesOffset  ==  0)  {  	compilable	  [FE]  AssertionFailedError  testForOffsetHoursMinutes_int_int	5	1	replace
265	[BUG]  [BUGGY]  if(hoursOffset  ==  0  &&  minutesOffset  <=  0)  {  [FE]  AssertionFailedError  testForOffsetHoursMinutes_int_int  [CONTEXT]  public  static  DateTimeZone  forOffsetHoursMinutes(int  hoursOffset,  int  minutesOffset)  throws  IllegalArgumentException  {  [BUGGY]  if(hoursOffset  ==  0  &&  minutesOffset  <=  0)  {  [BUGGY]  return  DateTimeZone.UTC;  }  if  (hoursOffset  <  -23  ||  hoursOffset  >  23)  {  throw  new  IllegalArgumentException( "Hours  out  of  range:   "  +  hoursOffset);  }  if  (minutesOffset  <  0  ||  minutesOffset  >  59)  {  throw  new  IllegalArgumentException( "Minutes  out  of  range:   "  +  minutesOffset);  }  int  offset  =  0;  try  {  [CLASS]  DateTimeZone  1  Stub  [METHOD]  forOffsetHoursMinutes  [RETURN_TYPE]  DateTimeZone  int  hoursOffset  int  minutesOffset  [VARIABLES]  Set  cAvailableIDs  ArithmeticException  ex  boolean  NameProvider  cNameProvider  String  iID  id  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  long  serialVersionUID  DateTimeZone  UTC  cDefault  temp  zone  int  MAX_MILLIS  hoursInMinutes  hoursOffset  minutesOffset  offset  Provider  cProvider  	projects/Time8/src/main/java/org/joda/time/DateTimeZone.java	0.7071067811865475	273	273	1	replace	if(hoursOffset  ==  0  &&  minutesOffset  <=  0)  {	if  (hoursOffset  ==  0  &&  minutesOffset  ==  0)  {  	compilable	  [FE]  AssertionFailedError  testForOffsetHoursMinutes_int_int	5	1	replace
271	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testForOffsetHoursMinutes_int_int  [CONTEXT]  public  static  DateTimeZone  forOffsetHoursMinutes(int  hoursOffset,  int  minutesOffset)  throws  IllegalArgumentException  {  if  (hoursOffset  ==  0  &&  minutesOffset  ==  0)  {  return  DateTimeZone.UTC;  }  if  (hoursOffset  <  -23  ||  hoursOffset  >  23)  {  throw  new  IllegalArgumentException( "Hours  out  of  range:   "  +  hoursOffset);  }  if  (minutesOffset  <  0  ||  minutesOffset  >  59)  {  [BUGGY]    minutesOffset  =  FieldUtils.safeMultiply(minutesOffset,  DateTimeConstants.MILLIS_PER_MINUTE);  [BUGGY]  throw  new  IllegalArgumentException( "Minutes  out  of  range:   "  +  minutesOffset);  }  int  offset  =  0;  try  {  int  hoursInMinutes  =  hoursOffset  *  60;  if  (hoursInMinutes  <  0)  {  minutesOffset  =  hoursInMinutes  -  minutesOffset;  }  else  {  minutesOffset  =  hoursInMinutes  +  minutesOffset;  }  offset  =  FieldUtils.safeMultiply(minutesOffset,  DateTimeConstants.MILLIS_PER_MINUTE);  [CLASS]  DateTimeZone  1  Stub  [METHOD]  forOffsetHoursMinutes  [RETURN_TYPE]  DateTimeZone  int  hoursOffset  int  minutesOffset  [VARIABLES]  Set  cAvailableIDs  ArithmeticException  ex  boolean  NameProvider  cNameProvider  String  iID  id  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  long  serialVersionUID  DateTimeZone  UTC  cDefault  temp  zone  int  MAX_MILLIS  hoursInMinutes  hoursOffset  minutesOffset  offset  Provider  cProvider  	projects/Time8/src/main/java/org/joda/time/DateTimeZone.java	1.0	280	280	1	add	    minutesOffset  =  FieldUtils.safeMultiply(minutesOffset,  DateTimeConstants.MILLIS_PER_MINUTE);		compilable	  [FE]  IllegalArgumentException  testForOffsetHoursMinutes_int_int	2	1	add
272	[BUG]  [BUGGY]    minutesOffset  =  FieldUtils.safeMultiply(minutesOffset,  DateTimeConstants.MILLIS_PER_MINUTE);  [FE]  IllegalArgumentException  testForOffsetHoursMinutes_int_int  [CONTEXT]  public  static  DateTimeZone  forOffsetHoursMinutes(int  hoursOffset,  int  minutesOffset)  throws  IllegalArgumentException  {  if  (hoursOffset  ==  0  &&  minutesOffset  ==  0)  {  return  DateTimeZone.UTC;  }  if  (hoursOffset  <  -23  ||  hoursOffset  >  23)  {  throw  new  IllegalArgumentException( "Hours  out  of  range:   "  +  hoursOffset);  }  if  (minutesOffset  <  0  ||  minutesOffset  >  59)  {  [BUGGY]    minutesOffset  =  FieldUtils.safeMultiply(minutesOffset,  DateTimeConstants.MILLIS_PER_MINUTE);  [BUGGY]  throw  new  IllegalArgumentException( "Minutes  out  of  range:   "  +  minutesOffset);  }  int  offset  =  0;  try  {  int  hoursInMinutes  =  hoursOffset  *  60;  if  (hoursInMinutes  <  0)  {  minutesOffset  =  hoursInMinutes  -  minutesOffset;  }  else  {  minutesOffset  =  hoursInMinutes  +  minutesOffset;  }  offset  =  FieldUtils.safeMultiply(minutesOffset,  DateTimeConstants.MILLIS_PER_MINUTE);  [CLASS]  DateTimeZone  1  Stub  [METHOD]  forOffsetHoursMinutes  [RETURN_TYPE]  DateTimeZone  int  hoursOffset  int  minutesOffset  [VARIABLES]  Set  cAvailableIDs  ArithmeticException  ex  boolean  NameProvider  cNameProvider  String  iID  id  DateTimeFormatter  cOffsetFormatter  Map  cZoneIdConversion  iFixedOffsetCache  long  serialVersionUID  DateTimeZone  UTC  cDefault  temp  zone  int  MAX_MILLIS  hoursInMinutes  hoursOffset  minutesOffset  offset  Provider  cProvider  	projects/Time8/src/main/java/org/joda/time/DateTimeZone.java	1.0	280	280	1	replace	    minutesOffset  =  FieldUtils.safeMultiply(minutesOffset,  DateTimeConstants.MILLIS_PER_MINUTE);		compilable	  [FE]  IllegalArgumentException  testForOffsetHoursMinutes_int_int	2	1	add
