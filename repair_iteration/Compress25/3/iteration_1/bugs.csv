bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]    arrays  first  differed  [CONTEXT]  private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  [BUGGY]  if(!allowStoredEntriesWithDataDescriptor)  {  [BUGGY]  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	404	404	1	replace	if(!allowStoredEntriesWithDataDescriptor)  {	if  (current.hasDataDescriptor)  {  	non-compiled	[CE]  illegal  start  of  type	5	None	replace
2	[BUG]  [BUGGY]  if(current.allowStoredEntriesWithDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]      arrays  first  differed  [CONTEXT]  private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  [BUGGY]  if(current.allowStoredEntriesWithDataDescriptor)  {  [BUGGY]  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	404	404	1	replace	if(current.allowStoredEntriesWithDataDescriptor)  {	if  (current.hasDataDescriptor)  {  	non-compiled	[CE]  illegal  start  of  type	5	None	replace
3	[BUG]  [BUGGY]  if(allowStoredEntriesWithDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]        arrays  first  differed  [CONTEXT]  private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  [BUGGY]  if(allowStoredEntriesWithDataDescriptor)  {  [BUGGY]  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	404	404	1	replace	if(allowStoredEntriesWithDataDescriptor)  {	if  (current.hasDataDescriptor)  {  	non-compiled	[CE]  illegal  start  of  type	5	None	replace
4	[BUG]  [BUGGY]  if(current.entry!=  null)  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed  [CONTEXT]  private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  [BUGGY]  if(current.entry!=  null)  {  [BUGGY]  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	404	404	1	replace	if(current.entry!=  null)  {	if  (current.hasDataDescriptor)  {  	non-compiled	[CE]  illegal  start  of  type	5	None	replace
5	[BUG]  [BUGGY]  if(current.hasUTF8Flag)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed  [CONTEXT]  private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  [BUGGY]  if(current.hasUTF8Flag)  {  [BUGGY]  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	404	404	1	replace	if(current.hasUTF8Flag)  {	if  (current.hasDataDescriptor)  {  	non-compiled	[CE]  illegal  start  of  type	5	None	replace
6	[BUG]  [BUGGY]  if(current.entry  ==  null)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed  [CONTEXT]  private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  [BUGGY]  if(current.entry  ==  null)  {  [BUGGY]  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	404	404	1	replace	if(current.entry  ==  null)  {	if  (current.hasDataDescriptor)  {  	non-compiled	[CE]  illegal  start  of  type	5	None	replace
7	[BUG]  [BUGGY]  if(hasUTF8Flag)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed  [CONTEXT]  private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  [BUGGY]  if(hasUTF8Flag)  {  [BUGGY]  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	404	404	1	replace	if(hasUTF8Flag)  {	if  (current.hasDataDescriptor)  {  	non-compiled	[CE]  illegal  start  of  type	5	None	replace
8	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]                  arrays  first  differed  [CONTEXT]  private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  [BUGGY]    [BUGGY]  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	404	404	1	replace	  	if  (current.hasDataDescriptor)  {  	non-compiled	[CE]  illegal  start  of  type	5	None	replace
9	[BUG]  [BUGGY]  if(!current.allowStoredEntriesWithDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]    arrays  first  differed  [CONTEXT]  private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  [BUGGY]  if(!current.allowStoredEntriesWithDataDescriptor)  {  [BUGGY]  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	404	404	1	replace	if(!current.allowStoredEntriesWithDataDescriptor)  {	if  (current.hasDataDescriptor)  {  	non-compiled	[CE]  illegal  start  of  type	5	None	replace
10	[BUG]  [BUGGY]  if(current.closed)  {  [CE]  illegal  start  of  type  [FE]      arrays  first  differed  [CONTEXT]  private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  [BUGGY]  if(current.closed)  {  [BUGGY]  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	404	404	1	replace	if(current.closed)  {	if  (current.hasDataDescriptor)  {  	non-compiled	[CE]  illegal  start  of  type	5	None	replace
11	[BUG]  [BUGGY]  if(this.allowStoredEntriesWithDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]    arrays  first  differed  [CONTEXT]  private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  [BUGGY]  if(this.allowStoredEntriesWithDataDescriptor)  {  [BUGGY]  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	404	404	1	replace	if(this.allowStoredEntriesWithDataDescriptor)  {	if  (current.hasDataDescriptor)  {  	non-compiled	[CE]  illegal  start  of  type	5	None	replace
12	[BUG]  [BUGGY]  if(current.entry.hasDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]      arrays  first  differed  [CONTEXT]  private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  [BUGGY]  if(current.entry.hasDataDescriptor)  {  [BUGGY]  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	404	404	1	replace	if(current.entry.hasDataDescriptor)  {	if  (current.hasDataDescriptor)  {  	non-compiled	[CE]  illegal  start  of  type	5	None	replace
13	[BUG]  [BUGGY]  if(lastStoredEntry  ==  null)  {  [CE]  illegal  start  of  type  [FE]        arrays  first  differed  [CONTEXT]  private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  [BUGGY]  if(lastStoredEntry  ==  null)  {  [BUGGY]  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	404	404	1	replace	if(lastStoredEntry  ==  null)  {	if  (current.hasDataDescriptor)  {  	non-compiled	[CE]  illegal  start  of  type	5	None	replace
