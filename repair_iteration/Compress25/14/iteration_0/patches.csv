bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(current.entry  ==  null)  {  [CE]  illegal  start  of  type  [FE]    arrays  first  differed  [CONTEXT]  public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException( "The  stream  is  closed ");  }  [BUGGY]  if(current.entry  ==  null)  {  [BUGGY]  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current.entry  ==  null)  {	if  (current  ==  null)  {  	non-compiled	[CE]  illegal  start  of  type	27	None	replace
2	[BUG]  [BUGGY]  if(current!=  null)  {  [CE]  illegal  start  of  type  [FE]      arrays  first  differed  [CONTEXT]  public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException( "The  stream  is  closed ");  }  [BUGGY]  if(current!=  null)  {  [BUGGY]  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current!=  null)  {	if  (current  ==  null)  {  	non-compiled	[CE]  illegal  start  of  type	27	None	replace
3	[BUG]  [BUGGY]  if(current  ==  null  ||  buffer.length!=  length)  {  [CE]  illegal  start  of  type  [FE]        arrays  first  differed  [CONTEXT]  public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException( "The  stream  is  closed ");  }  [BUGGY]  if(current  ==  null  ||  buffer.length!=  length)  {  [BUGGY]  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current  ==  null  ||  buffer.length!=  length)  {	if  (current  ==  null)  {  	non-compiled	[CE]  illegal  start  of  type	27	None	replace
4	[BUG]  [BUGGY]  if(current  ==  null  ||  buffer.length  <  0  ||  length  >  current.entry.length)  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed  [CONTEXT]  public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException( "The  stream  is  closed ");  }  [BUGGY]  if(current  ==  null  ||  buffer.length  <  0  ||  length  >  current.entry.length)  {  [BUGGY]  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current  ==  null  ||  buffer.length  <  0  ||  length  >  current.entry.length)  {	if  (current  ==  null)  {  	non-compiled	[CE]  illegal  start  of  type	27	None	replace
5	[BUG]  [BUGGY]  if(current.entry!=  null)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed  [CONTEXT]  public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException( "The  stream  is  closed ");  }  [BUGGY]  if(current.entry!=  null)  {  [BUGGY]  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current.entry!=  null)  {	if  (current  ==  null)  {  	non-compiled	[CE]  illegal  start  of  type	27	None	replace
6	[BUG]  [BUGGY]  if(current  ==  null  ||  buffer.length  <  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed  [CONTEXT]  public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException( "The  stream  is  closed ");  }  [BUGGY]  if(current  ==  null  ||  buffer.length  <  0)  {  [BUGGY]  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current  ==  null  ||  buffer.length  <  0)  {	if  (current  ==  null)  {  	non-compiled	[CE]  illegal  start  of  type	27	None	replace
7	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]                arrays  first  differed  [CONTEXT]  public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException( "The  stream  is  closed ");  }  [BUGGY]    [BUGGY]  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	  	if  (current  ==  null)  {  	non-compiled	[CE]  illegal  start  of  type	27	None	replace
8	[BUG]  [BUGGY]  if(current  ==  null  ||  buffer.length!=  0)  {  [CE]  illegal  start  of  type  [FE]    arrays  first  differed  [CONTEXT]  public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException( "The  stream  is  closed ");  }  [BUGGY]  if(current  ==  null  ||  buffer.length!=  0)  {  [BUGGY]  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current  ==  null  ||  buffer.length!=  0)  {	if  (current  ==  null)  {  	non-compiled	[CE]  illegal  start  of  type	27	None	replace
9	[BUG]  [BUGGY]  if(current  ==  null  ||  buffer.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]      arrays  first  differed  [CONTEXT]  public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException( "The  stream  is  closed ");  }  [BUGGY]  if(current  ==  null  ||  buffer.length  ==  0)  {  [BUGGY]  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current  ==  null  ||  buffer.length  ==  0)  {	if  (current  ==  null)  {  	non-compiled	[CE]  illegal  start  of  type	27	None	replace
10	[BUG]  [BUGGY]  if(current  ==  null  ||  buffer.length  >=  0)  {  [CE]  illegal  start  of  type  [FE]        arrays  first  differed  [CONTEXT]  public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException( "The  stream  is  closed ");  }  [BUGGY]  if(current  ==  null  ||  buffer.length  >=  0)  {  [BUGGY]  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current  ==  null  ||  buffer.length  >=  0)  {	if  (current  ==  null)  {  	non-compiled	[CE]  illegal  start  of  type	27	None	replace
11	[BUG]  [BUGGY]  if(current!=  null  ||  buffer.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed  [CONTEXT]  public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException( "The  stream  is  closed ");  }  [BUGGY]  if(current!=  null  ||  buffer.length  ==  0)  {  [BUGGY]  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current!=  null  ||  buffer.length  ==  0)  {	if  (current  ==  null)  {  	non-compiled	[CE]  illegal  start  of  type	27	None	replace
12	[BUG]  [BUGGY]  if(current  ==  null  ||  buffer.length  <  0  ||  length  >  current.length)  {  [CE]  illegal  start  of  type  [FE]    arrays  first  differed  [CONTEXT]  public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException( "The  stream  is  closed ");  }  [BUGGY]  if(current  ==  null  ||  buffer.length  <  0  ||  length  >  current.length)  {  [BUGGY]  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current  ==  null  ||  buffer.length  <  0  ||  length  >  current.length)  {	if  (current  ==  null)  {  	non-compiled	[CE]  illegal  start  of  type	27	None	replace
13	[BUG]  [BUGGY]  if(current  ==  null  ||  buffer.length  <  =  length)  {  [CE]  illegal  start  of  type  [FE]      arrays  first  differed  [CONTEXT]  public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException( "The  stream  is  closed ");  }  [BUGGY]  if(current  ==  null  ||  buffer.length  <  =  length)  {  [BUGGY]  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current  ==  null  ||  buffer.length  <  =  length)  {	if  (current  ==  null)  {  	non-compiled	[CE]  illegal  start  of  type	27	None	replace
14	[BUG]  [BUGGY]  if(buffer  ==  null)  {  [CE]  illegal  start  of  type  [FE]        arrays  first  differed  [CONTEXT]  public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException( "The  stream  is  closed ");  }  [BUGGY]  if(buffer  ==  null)  {  [BUGGY]  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null)  {	if  (current  ==  null)  {  	non-compiled	[CE]  illegal  start  of  type	27	None	replace
