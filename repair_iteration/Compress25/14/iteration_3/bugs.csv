bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  length  =  buffer.length;  i  <  offset;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buffer,  offset+i);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  length  =  buffer.length;  i  <  offset;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buffer,  offset+i);  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(length  >  0)  {  for(int  i  =  0,  length  =  buffer.length;  i  <  offset;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buffer,  offset+i);  }	  if(length    >    0)    {    for(int    i    =    0,    length    =    buffer.length;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buffer,    offset+i);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
2	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  length  =  buffer.length;  i  <  offset  +  length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buffer,  offset+i);  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  length  =  buffer.length;  i  <  offset  +  length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buffer,  offset+i);  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(length  >  0)  {  for(int  i  =  0,  length  =  buffer.length;  i  <  offset  +  length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buffer,  offset+i);  }	  if(length    >    0)    {    for(int    i    =    0,    length    =    buffer.length;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buffer,    offset+i);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
3	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  length  =  buffer.length;  i  <  offset++;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buffer,  offset+i);  }  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  length  =  buffer.length;  i  <  offset++;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buffer,  offset+i);  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(length  >  0)  {  for(int  i  =  0,  length  =  buffer.length;  i  <  offset++;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buffer,  offset+i);  }	  if(length    >    0)    {    for(int    i    =    0,    length    =    buffer.length;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buffer,    offset+i);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
4	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  length  =  buffer.length;  i  <  offset-length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buffer,  offset+i);  }  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  length  =  buffer.length;  i  <  offset-length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buffer,  offset+i);  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(length  >  0)  {  for(int  i  =  0,  length  =  buffer.length;  i  <  offset-length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buffer,  offset+i);  }	  if(length    >    0)    {    for(int    i    =    0,    length    =    buffer.length;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buffer,    offset+i);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
5	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  length  =  buffer.length;  i  <  offset;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buffer,  offset+1);  }  [CE]  illegal  start  of  type  [FE]                                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  length  =  buffer.length;  i  <  offset;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buffer,  offset+1);  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(length  >  0)  {  for(int  i  =  0,  length  =  buffer.length;  i  <  offset;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buffer,  offset+1);  }	  if(length    >    0)    {    for(int    i    =    0,    length    =    buffer.length;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buffer,    offset+i);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
6	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  =  current.length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  offset  <  =  current.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  offset  <  =  current.length)  {	  if(buffer    ==    null    ||    length    <    =    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
7	[BUG]  [BUGGY]  if(buffer  ==  null  ||  length  <  current.length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  length  <  current.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  length  <  current.length)  {	  if(buffer    ==    null    ||    length    <    =    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
8	[BUG]  [BUGGY]  if(current  ==  null  ||  length  <  =  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current  ==  null  ||  length  <  =  buffer.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current  ==  null  ||  length  <  =  buffer.length)  {	  if(buffer    ==    null    ||    length    <    =    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
9	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  =  current.length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  =  current.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  <  =  current.length)  {	  if(buffer    ==    null    ||    length    <    =    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
10	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  offset)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  offset)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  <  offset)  {	  if(buffer    ==    null    ||    buffer.length    <    =    offset)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
11	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  off)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  off)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  <  off)  {	  if(buffer    ==    null    ||    buffer.length    <    =    offset)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
12	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  >=  offset)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  >=  offset)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  >=  offset)  {	  if(buffer    ==    null    ||    buffer.length    <    =    offset)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
13	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  offset  <  =  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  offset  <  =  0)  {	  if(buffer!=    null    ||    offset    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
14	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  ==  length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  offset  ==  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  offset  ==  length)  {	  if(current!=    null    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
15	[BUG]  [BUGGY]  if(buffer!=  null  ||  offset  ==  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer!=  null  ||  offset  ==  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer!=  null  ||  offset  ==  length)  {	  if(current!=    null    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
16	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  ==  offset)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  ==  offset)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  ==  offset)  {	  if(current!=    null    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
17	[BUG]  [BUGGY]  if(buffer  ==  null  ||  length  ==  current.length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  length  ==  current.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  length  ==  current.length)  {	  if(current!=    null    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
18	[BUG]  [BUGGY]  if(current.entry  ==  null  ||  length  <  0  ||  buffer.length  >  length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current.entry  ==  null  ||  length  <  0  ||  buffer.length  >  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current.entry  ==  null  ||  length  <  0  ||  buffer.length  >  length)  {	  if(buffer    ==    null    ||    length    <    0    ||    buffer.length    >    current.entry.length)    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
19	[BUG]  [BUGGY]  if(length  ==  0  ||  buffer.length  <  0  ||  buffer.length  >  current.entry.length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(length  ==  0  ||  buffer.length  <  0  ||  buffer.length  >  current.entry.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(length  ==  0  ||  buffer.length  <  0  ||  buffer.length  >  current.entry.length)  {	  if(buffer    ==    null    ||    length    <    0    ||    buffer.length    >    current.entry.length)    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
20	[BUG]  [BUGGY]  if(length  <  0  ||  buffer.length  >  current.entry.length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(length  <  0  ||  buffer.length  >  current.entry.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(length  <  0  ||  buffer.length  >  current.entry.length)  {	  if(buffer    ==    null    ||    length    <    0    ||    buffer.length    >    current.entry.length)    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
21	[BUG]  [BUGGY]  if(offset  ==  null  ||  buffer.length  <  0  ||  offset  >  current.entry.length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(offset  ==  null  ||  buffer.length  <  0  ||  offset  >  current.entry.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(offset  ==  null  ||  buffer.length  <  0  ||  offset  >  current.entry.length)  {	  if(current    ==    null    ||    buffer.length    <    0    ||    offset    >    current.entry.length)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
22	[BUG]  [BUGGY]  if(offset  ==  0  ||  buffer.length  <  0  ||  offset  >  current.entry.length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(offset  ==  0  ||  buffer.length  <  0  ||  offset  >  current.entry.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(offset  ==  0  ||  buffer.length  <  0  ||  offset  >  current.entry.length)  {	  if(current    ==    null    ||    buffer.length    <    0    ||    offset    >    current.entry.length)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
23	[BUG]  [BUGGY]  if(current  ==  null  ||  buffer.length  <  0  ||  offset  >=  current.entry.length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current  ==  null  ||  buffer.length  <  0  ||  offset  >=  current.entry.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current  ==  null  ||  buffer.length  <  0  ||  offset  >=  current.entry.length)  {	  if(current    ==    null    ||    buffer.length    <    0    ||    offset    >    current.entry.length)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
24	[BUG]  [BUGGY]  if(offset  <  0  ||  buffer.length  >  current.entry.length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(offset  <  0  ||  buffer.length  >  current.entry.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(offset  <  0  ||  buffer.length  >  current.entry.length)  {	  if(current    ==    null    ||    buffer.length    <    0    ||    offset    >    current.entry.length)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
25	[BUG]  [BUGGY]  if(buffer  ==  null  ||  current.sentry  ==  null)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  current.sentry  ==  null)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  current.sentry  ==  null)  {	  if(current.sentry    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
26	[BUG]  [BUGGY]  if(current.sentry  ==  null  ||  buffer.length!=  length)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current.sentry  ==  null  ||  buffer.length!=  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current.sentry  ==  null  ||  buffer.length!=  length)  {	  if(current.sentry    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
27	[BUG]  [BUGGY]  if(current.sentry!=  null)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current.sentry!=  null)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current.sentry!=  null)  {	  if(current.sentry    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
28	[BUG]  [BUGGY]  if(current.entry  ==  null  ||  buffer.length  ==  length)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current.entry  ==  null  ||  buffer.length  ==  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current.entry  ==  null  ||  buffer.length  ==  length)  {	  if(current.sentry    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
29	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  >>  0)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  >>  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  >>  0)  {	  if(buffer!=    null    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
30	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  >>  0)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  offset  >>  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  offset  >>  0)  {	  if(buffer    ==    null    ||    length!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
31	[BUG]  [BUGGY]  InputStream  in  =  new  BoundedInputStream(buffer,  0,  buffer.length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  InputStream  in  =  new  BoundedInputStream(buffer,  0,  buffer.length);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	InputStream  in  =  new  BoundedInputStream(buffer,  0,  buffer.length);	  InputStream    in    =    new    BoundedInputStream(buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
32	[BUG]  [BUGGY]  InputStream  in  =  new  BoundedInputStream(buffer,  0,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  InputStream  in  =  new  BoundedInputStream(buffer,  0,  offset,  length);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	InputStream  in  =  new  BoundedInputStream(buffer,  0,  offset,  length);	  InputStream    in    =    new    BoundedInputStream(buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
33	[BUG]  [BUGGY]  InputStream  in  =  new  BoundedInputStream(buffer,  off,  length);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  InputStream  in  =  new  BoundedInputStream(buffer,  off,  length);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	InputStream  in  =  new  BoundedInputStream(buffer,  off,  length);	  InputStream    in    =    new    BoundedInputStream(buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
34	[BUG]  [BUGGY]  InputStream  in  =  new  BoundedInputStream(buffer,  0,  length,  buffer.length);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  InputStream  in  =  new  BoundedInputStream(buffer,  0,  length,  buffer.length);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	InputStream  in  =  new  BoundedInputStream(buffer,  0,  length,  buffer.length);	  InputStream    in    =    new    BoundedInputStream(buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
35	[BUG]  [BUGGY]  InputStream  in  =  new  BoundedInputStream(buffer,  offset,  0,  length);  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  InputStream  in  =  new  BoundedInputStream(buffer,  offset,  0,  length);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	InputStream  in  =  new  BoundedInputStream(buffer,  offset,  0,  length);	  InputStream    in    =    new    BoundedInputStream(buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
36	[BUG]  [BUGGY]  InputStream  in  =  new  BoundedInputStream(buffer,  0,  buffer.length  -  length);  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  InputStream  in  =  new  BoundedInputStream(buffer,  0,  buffer.length  -  length);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	InputStream  in  =  new  BoundedInputStream(buffer,  0,  buffer.length  -  length);	  InputStream    in    =    new    BoundedInputStream(buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
37	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  >  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  >  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  >  length)  {	  if(buffer    ==    null    ||    offset    <    0    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
38	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  buffer.length  >  length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  buffer.length  >  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  offset  <  0  ||  buffer.length  >  length)  {	  if(buffer    ==    null    ||    offset    <    0    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
39	[BUG]  [BUGGY]  if(buffer  ==  null  ||  length  <  0  ||  offset  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  length  <  0  ||  offset  >  buffer.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  length  <  0  ||  offset  >  buffer.length)  {	  if(buffer    ==    null    ||    offset    <    0    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
40	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  length  >=  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  length  >=  buffer.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  offset  <  0  ||  length  >=  buffer.length)  {	  if(buffer    ==    null    ||    offset    <    0    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
41	[BUG]  [BUGGY]  if(buffer  ==  null  ||  length  <  0  ||  buffer.length  >  offset)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  length  <  0  ||  buffer.length  >  offset)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  length  <  0  ||  buffer.length  >  offset)  {	  if(buffer    ==    null    ||    offset    <    0    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
42	[BUG]  [BUGGY]  if(current  ==  null  ||  offset  <  0  ||  buffer.length  >  length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current  ==  null  ||  offset  <  0  ||  buffer.length  >  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current  ==  null  ||  offset  <  0  ||  buffer.length  >  length)  {	  if(current    ==    null    ||    offset    <    0    ||    length    >    current.entry.length)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
43	[BUG]  [BUGGY]  if(current!=  null  ||  offset  <  0  ||  length  >  current.entry.length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current!=  null  ||  offset  <  0  ||  length  >  current.entry.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current!=  null  ||  offset  <  0  ||  length  >  current.entry.length)  {	  if(current    ==    null    ||    offset    <    0    ||    length    >    current.entry.length)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
44	[BUG]  [BUGGY]  if(offset  <  0  ||  offset  >  current.entry.length)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(offset  <  0  ||  offset  >  current.entry.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(offset  <  0  ||  offset  >  current.entry.length)  {	  if(current    ==    null    ||    offset    <    0    ||    length    >    current.entry.length)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
45	[BUG]  [BUGGY]  if(current  ==  null  ||  offset  <  0  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current  ==  null  ||  offset  <  0  ||  length  >  buffer.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current  ==  null  ||  offset  <  0  ||  length  >  buffer.length)  {	  if(current    ==    null    ||    offset    <    0    ||    length    >    current.entry.length)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
46	[BUG]  [BUGGY]  if(current.entry  ==  null  ||  offset  <  0  ||  length  >  current.length)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current.entry  ==  null  ||  offset  <  0  ||  length  >  current.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current.entry  ==  null  ||  offset  <  0  ||  length  >  current.length)  {	  if(current    ==    null    ||    offset    <    0    ||    length    >    current.entry.length)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
47	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  offset  <  buffer.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  offset  <  buffer.length)  {	  if(buffer    ==    null    ||    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
48	[BUG]  [BUGGY]  if(buffer  ==  null  ||  length  <  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  length  <  buffer.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  length  <  buffer.length)  {	  if(buffer    ==    null    ||    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
49	[BUG]  [BUGGY]  if(offset  <  0  ||  offset  >  current.length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(offset  <  0  ||  offset  >  current.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(offset  <  0  ||  offset  >  current.length)  {	  if(current    ==    null    ||    offset    <    0    ||    length    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
50	[BUG]  [BUGGY]  if(length  ==  0  ||  offset  <  0  ||  length  >  current.length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(length  ==  0  ||  offset  <  0  ||  length  >  current.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(length  ==  0  ||  offset  <  0  ||  length  >  current.length)  {	  if(current    ==    null    ||    offset    <    0    ||    length    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
51	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  >  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  >  0)  {	  if(buffer    ==    null    ||    buffer.length    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
52	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  >>  length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  >>  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  >>  length)  {	  if(buffer    ==    null    ||    buffer.length    >=    length)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
53	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length!=  off)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length!=  off)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length!=  off)  {	  if(buffer    ==    null    ||    buffer.length    >=    length)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
54	[BUG]  [BUGGY]  if(buffered  ==  null  ||  buffer.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffered  ==  null  ||  buffer.length  <  =  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffered  ==  null  ||  buffer.length  <  =  0)  {	  if(current    ==    null    ||    buffer.length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
55	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer!=  null  ||  buffer.length  <  =  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer!=  null  ||  buffer.length  <  =  0)  {	  if(current    ==    null    ||    buffer.length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
56	[BUG]  [BUGGY]  if(buffer  ==  null  ||  length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  length  <  =  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  length  <  =  0)  {	  if(current    ==    null    ||    buffer.length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
57	[BUG]  [BUGGY]  for(int  i  =  0,  length  =  buffer.length;  i  <  length;  ++i)  {  current.getEntry(i);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  for(int  i  =  0,  length  =  buffer.length;  i  <  length;  ++i)  {  current.getEntry(i);  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	for(int  i  =  0,  length  =  buffer.length;  i  <  length;  ++i)  {  current.getEntry(i);  }	  if(length    >    0)    {    for(int    i    =    0,    length    =    buffer.length;    i    <    length;    ++i)    {    current.getEntry(i);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
58	[BUG]  [BUGGY]  while(offset  <  length)  {  for(int  i  =  0,  length  =  buffer.length;  i  <  length;  ++i)  {  current.getEntry(i);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  while(offset  <  length)  {  for(int  i  =  0,  length  =  buffer.length;  i  <  length;  ++i)  {  current.getEntry(i);  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	while(offset  <  length)  {  for(int  i  =  0,  length  =  buffer.length;  i  <  length;  ++i)  {  current.getEntry(i);  }	  if(length    >    0)    {    for(int    i    =    0,    length    =    buffer.length;    i    <    length;    ++i)    {    current.getEntry(i);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
59	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  length  =  current.length;  i  <  length;  ++i)  {  current.getEntry(i);  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  length  =  current.length;  i  <  length;  ++i)  {  current.getEntry(i);  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(length  >  0)  {  for(int  i  =  0,  length  =  current.length;  i  <  length;  ++i)  {  current.getEntry(i);  }	  if(length    >    0)    {    for(int    i    =    0,    length    =    buffer.length;    i    <    length;    ++i)    {    current.getEntry(i);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
60	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  length  =  buffer.length;  i  <  offset  +  length;  ++i)  {  current.getEntry(i);  }  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  length  =  buffer.length;  i  <  offset  +  length;  ++i)  {  current.getEntry(i);  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(length  >  0)  {  for(int  i  =  0,  length  =  buffer.length;  i  <  offset  +  length;  ++i)  {  current.getEntry(i);  }	  if(length    >    0)    {    for(int    i    =    0,    length    =    buffer.length;    i    <    length;    ++i)    {    current.getEntry(i);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
61	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  length  =  buffer.length;  i  <  offset;  ++i)  {  current.getEntry(i);  }  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  length  =  buffer.length;  i  <  offset;  ++i)  {  current.getEntry(i);  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(length  >  0)  {  for(int  i  =  0,  length  =  buffer.length;  i  <  offset;  ++i)  {  current.getEntry(i);  }	  if(length    >    0)    {    for(int    i    =    0,    length    =    buffer.length;    i    <    length;    ++i)    {    current.getEntry(i);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
62	[BUG]  [BUGGY]  for(int  i  =  0,  length  =  current.length;  i  <  length;  ++i)  {  current.getEntry(i);  }  [CE]  illegal  start  of  type  [FE]                                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  for(int  i  =  0,  length  =  current.length;  i  <  length;  ++i)  {  current.getEntry(i);  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	for(int  i  =  0,  length  =  current.length;  i  <  length;  ++i)  {  current.getEntry(i);  }	  if(length    >    0)    {    for(int    i    =    0,    length    =    buffer.length;    i    <    length;    ++i)    {    current.getEntry(i);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
63	[BUG]  [BUGGY]  InputStream  in  =  getOutputStream(buffer);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  InputStream  in  =  getOutputStream(buffer);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	InputStream  in  =  getOutputStream(buffer);	  InputStream    in    =    getOutputStream();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
64	[BUG]  [BUGGY]  InputStream  in  =  getOutputStream(),  buffer.length);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  InputStream  in  =  getOutputStream(),  buffer.length);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	InputStream  in  =  getOutputStream(),  buffer.length);	  InputStream    in    =    getOutputStream();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
65	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  InputStream  in  =  getInputStream(buffer,  offset,  length);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	InputStream  in  =  getInputStream(buffer,  offset,  length);	  InputStream    in    =    getOutputStream();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
66	[BUG]  [BUGGY]  InputStream  in  =  getOutputStream(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  InputStream  in  =  getOutputStream(buffer,  offset,  length);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	InputStream  in  =  getOutputStream(buffer,  offset,  length);	  InputStream    in    =    getOutputStream();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
67	[BUG]  [BUGGY]  InputStream  in  =  getOutputStream(buffer,  offset);  [CE]  illegal  start  of  type  [FE]                                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  InputStream  in  =  getOutputStream(buffer,  offset);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	InputStream  in  =  getOutputStream(buffer,  offset);	  InputStream    in    =    getOutputStream();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
68	[BUG]  [BUGGY]  if(current  ==  null  ||  buffer.length  <  0  ||  offset  >=  current.length)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current  ==  null  ||  buffer.length  <  0  ||  offset  >=  current.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current  ==  null  ||  buffer.length  <  0  ||  offset  >=  current.length)  {	  if(current    ==    null    ||    buffer.length    <    0    ||    offset    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
69	[BUG]  [BUGGY]  if(offset  ==  0  ||  buffer.length  <  0  ||  offset  >  current.length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(offset  ==  0  ||  buffer.length  <  0  ||  offset  >  current.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(offset  ==  0  ||  buffer.length  <  0  ||  offset  >  current.length)  {	  if(current    ==    null    ||    buffer.length    <    0    ||    offset    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
70	[BUG]  [BUGGY]  if(current  ==  null  ||  buffer.length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current  ==  null  ||  buffer.length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current  ==  null  ||  buffer.length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {	  if(current    ==    null    ||    buffer.length    <    0    ||    offset    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
71	[BUG]  [BUGGY]  if(offset  ==  null  ||  buffer.length  <  0  ||  offset  >  current.length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(offset  ==  null  ||  buffer.length  <  0  ||  offset  >  current.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(offset  ==  null  ||  buffer.length  <  0  ||  offset  >  current.length)  {	  if(current    ==    null    ||    buffer.length    <    0    ||    offset    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
72	[BUG]  [BUGGY]  if(current!=  null  ||  buffer.length  <  0  ||  offset  >  current.length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current!=  null  ||  buffer.length  <  0  ||  offset  >  current.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current!=  null  ||  buffer.length  <  0  ||  offset  >  current.length)  {	  if(current!=    null    ||    buffer.length    <    0    ||    length    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
73	[BUG]  [BUGGY]  if(current!=  null  ||  buffer.length  <  0  ||  offset  >  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current!=  null  ||  buffer.length  <  0  ||  offset  >  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current!=  null  ||  buffer.length  <  0  ||  offset  >  length)  {	  if(current!=    null    ||    buffer.length    <    0    ||    length    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
74	[BUG]  [BUGGY]  Inflater  inf  =  openInputStream(buffer,  offset,  length,  buffer.length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  openInputStream(buffer,  offset,  length,  buffer.length);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  openInputStream(buffer,  offset,  length,  buffer.length);	  Inflater    inf    =    openInputStream(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
75	[BUG]  [BUGGY]  Inflater  inf  =  openInputStream(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  openInputStream(buffer,  offset,  length  -  1);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  openInputStream(buffer,  offset,  length  -  1);	  Inflater    inf    =    openInputStream(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
76	[BUG]  [BUGGY]  Inflater  inf  =  openInputStream(buffer,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  openInputStream(buffer,  offset,  length  +  1);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  openInputStream(buffer,  offset,  length  +  1);	  Inflater    inf    =    openInputStream(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
77	[BUG]  [BUGGY]  Inflater  inf  =  openInputStream(buffer,  offset,  length,  fileNameLen);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  openInputStream(buffer,  offset,  length,  fileNameLen);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  openInputStream(buffer,  offset,  length,  fileNameLen);	  Inflater    inf    =    openInputStream(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
78	[BUG]  [BUGGY]  Inflater  inf  =  openInputStream(buffer,  offset,  length,  0);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  openInputStream(buffer,  offset,  length,  0);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  openInputStream(buffer,  offset,  length,  0);	  Inflater    inf    =    openInputStream(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
79	[BUG]  [BUGGY]  Inflater  inf  =  openInputStream(buffer,  offset,  length,  size);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  openInputStream(buffer,  offset,  length,  size);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  openInputStream(buffer,  offset,  length,  size);	  Inflater    inf    =    openInputStream(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
80	[BUG]  [BUGGY]  Inflater  inf  =  openInputStream(buffer,  offset,  length,  current.length);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  openInputStream(buffer,  offset,  length,  current.length);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  openInputStream(buffer,  offset,  length,  current.length);	  Inflater    inf    =    openInputStream(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
81	[BUG]  [BUGGY]  if(length  ==  0  ||  buffer.length!=  offset)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(length  ==  0  ||  buffer.length!=  offset)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(length  ==  0  ||  buffer.length!=  offset)  {	  if(length    ==    0    ||    buffer.length!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
82	[BUG]  [BUGGY]  if(offset  ==  0  ||  buffer.length!=  length)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(offset  ==  0  ||  buffer.length!=  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(offset  ==  0  ||  buffer.length!=  length)  {	  if(length    ==    0    ||    buffer.length!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
83	[BUG]  [BUGGY]  if(length  ==  0  ||  buffer.length  >=  offset)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(length  ==  0  ||  buffer.length  >=  offset)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(length  ==  0  ||  buffer.length  >=  offset)  {	  if(length    ==    0    ||    buffer.length!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
84	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset!=  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(offset  ==  0  ||  offset!=  buffer.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(offset  ==  0  ||  offset!=  buffer.length)  {	  if(length    ==    0    ||    buffer.length!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
85	[BUG]  [BUGGY]  if(length  ==  0  ||  buffer.length  >  length)  {  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(length  ==  0  ||  buffer.length  >  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(length  ==  0  ||  buffer.length  >  length)  {	  if(length    ==    0    ||    buffer.length!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
86	[BUG]  [BUGGY]  if(offset  ==  0  ||  length!=  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(offset  ==  0  ||  length!=  buffer.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(offset  ==  0  ||  length!=  buffer.length)  {	  if(length    ==    0    ||    buffer.length!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
87	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  <  0  ||  length  >  current.length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(offset  ==  0  ||  offset  <  0  ||  length  >  current.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(offset  ==  0  ||  offset  <  0  ||  length  >  current.length)  {	  if(buffer    ==    null    ||    offset    <    0    ||    length    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
88	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  1)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  1)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  <  1)  {	  if(buffer    ==    null    ||    buffer.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
89	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  =  2)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  =  2)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  <  =  2)  {	  if(buffer    ==    null    ||    buffer.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
90	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  1  ||  length  <  2)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  1  ||  length  <  2)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  <  1  ||  length  <  2)  {	  if(buffer    ==    null    ||    buffer.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
91	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  buffer.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  buffer.length  >  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  offset  <  0  ||  buffer.length  >  0)  {	  if(buffer    ==    null    ||    offset    <    0    ||    buffer.length    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
92	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  >=  0)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  >=  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  >=  0)  {	  if(buffer    ==    null    ||    offset    <    0    ||    buffer.length    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
93	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  buffer.length!=  0)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  buffer.length!=  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  offset  <  0  ||  buffer.length!=  0)  {	  if(buffer    ==    null    ||    offset    <    0    ||    buffer.length    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
94	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  buffer.length  >>  0)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  buffer.length  >>  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  offset  <  0  ||  buffer.length  >>  0)  {	  if(buffer    ==    null    ||    offset    <    0    ||    buffer.length    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
95	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  length  ||  buffer.length  >=  0)  {  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  offset  <  length  ||  buffer.length  >=  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  offset  <  length  ||  buffer.length  >=  0)  {	  if(buffer    ==    null    ||    offset    <    0    ||    buffer.length    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
96	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  buffer.length  [Delete]  0)  {  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  buffer.length  [Delete]  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  offset  <  0  ||  buffer.length  [Delete]  0)  {	  if(buffer    ==    null    ||    offset    <    0    ||    buffer.length    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
97	[BUG]  [BUGGY]  in.skipChildren();  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  in.skipChildren();  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	in.skipChildren();	  in.close();    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
98	[BUG]  [BUGGY]  in.write(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  in.write(buffer,  offset,  length);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	in.write(buffer,  offset,  length);	  in.close();    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
99	[BUG]  [BUGGY]  in.defaultRead(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  in.defaultRead(buffer,  offset,  length);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	in.defaultRead(buffer,  offset,  length);	  in.close();    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
100	[BUG]  [BUGGY]  in.flush();  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  in.flush();  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	in.flush();	  in.close();    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
101	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  buffer.length);  if(inf!=  null)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  buffer.length);  if(inf!=  null)  {  return  0;  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  buffer.length);  if(inf!=  null)  {  return  0;  }	  Inflater    inf    =    entryEncoding.encode(buffer,    offset,    length);    if(inf!=    null)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
102	[BUG]  [BUGGY]  Inflater  inf  =  zipEncoding.encode(buffer,  offset,  length);  if(inf!=  null)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  zipEncoding.encode(buffer,  offset,  length);  if(inf!=  null)  {  return  0;  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  zipEncoding.encode(buffer,  offset,  length);  if(inf!=  null)  {  return  0;  }	  Inflater    inf    =    entryEncoding.encode(buffer,    offset,    length);    if(inf!=    null)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
103	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  buffer.length);  if(inf  ==  null)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  buffer.length);  if(inf  ==  null)  {  return  0;  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  buffer.length);  if(inf  ==  null)  {  return  0;  }	  Inflater    inf    =    entryEncoding.encode(buffer,    offset,    length);    if(inf!=    null)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
104	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  buffer.length);  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  buffer.length);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  buffer.length);	  Inflater    inf    =    entryEncoding.encode(buffer,    offset,    length);    if(inf!=    null)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
105	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  current.length);  if(inf!=  null)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  current.length);  if(inf!=  null)  {  return  0;  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  current.length);  if(inf!=  null)  {  return  0;  }	  Inflater    inf    =    entryEncoding.encode(buffer,    offset,    length);    if(inf!=    null)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
106	[BUG]  [BUGGY]  Inflater  inf  =  zipEncoding.encode(buffer,  offset,  length);  if(inf  ==  null)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  zipEncoding.encode(buffer,  offset,  length);  if(inf  ==  null)  {  return  0;  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  zipEncoding.encode(buffer,  offset,  length);  if(inf  ==  null)  {  return  0;  }	  Inflater    inf    =    entryEncoding.encode(buffer,    offset,    length);    if(inf!=    null)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
107	[BUG]  [BUGGY]  Inflater  inf  =  current.entryEncoding.encode(buffer,  offset,  length);  if(inf!=  null)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  current.entryEncoding.encode(buffer,  offset,  length);  if(inf!=  null)  {  return  0;  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  current.entryEncoding.encode(buffer,  offset,  length);  if(inf!=  null)  {  return  0;  }	  Inflater    inf    =    entryEncoding.encode(buffer,    offset,    length);    if(inf!=    null)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
108	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  length  >  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  length  >  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  offset  <  0  ||  length  >  0)  {	  if(buffer    ==    null    ||    offset    <    0    ||    length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
109	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  length  ==  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  <  0  ||  length  ==  0)  {	  if(buffer    ==    null    ||    offset    <    0    ||    length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
110	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  length  >=  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  length  >=  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  offset  <  0  ||  length  >=  0)  {	  if(buffer    ==    null    ||    offset    <    0    ||    length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
111	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  length  ||  length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  offset  <  length  ||  length  ==  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  offset  <  length  ||  length  ==  0)  {	  if(buffer    ==    null    ||    offset    <    0    ||    length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
112	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  length!=  0)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  length!=  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  offset  <  0  ||  length!=  0)  {	  if(buffer    ==    null    ||    offset    <    0    ||    length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
113	[BUG]  [BUGGY]  if(buffer  ==  null  ||  length  <  0  ||  buffer.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  length  <  0  ||  buffer.length  ==  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  length  <  0  ||  buffer.length  ==  0)  {	  if(buffer    ==    null    ||    offset    <    0    ||    length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
114	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  >=  current.entry.length)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  >=  current.entry.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  >=  current.entry.length)  {	  if(buffer    ==    null    ||    buffer.length    <    0    ||    offset    >    current.entry.length)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
115	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  <  current.entry.length)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  <  current.entry.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  <  current.entry.length)  {	  if(buffer    ==    null    ||    buffer.length    <    0    ||    offset    >    current.entry.length)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
116	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {	  if(buffer    ==    null    ||    buffer.length    <    0    ||    offset    >    current.entry.length)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
117	[BUG]  [BUGGY]  if(offset  <  0  ||  buffer.length  <  0  ||  offset  >  current.entry.length)  {  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(offset  <  0  ||  buffer.length  <  0  ||  offset  >  current.entry.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(offset  <  0  ||  buffer.length  <  0  ||  offset  >  current.entry.length)  {	  if(buffer    ==    null    ||    buffer.length    <    0    ||    offset    >    current.entry.length)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
118	[BUG]  [BUGGY]  if(current.entry  ==  null  ||  buffer.length  <  0  ||  offset  >  current.entry.length)  {  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current.entry  ==  null  ||  buffer.length  <  0  ||  offset  >  current.entry.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current.entry  ==  null  ||  buffer.length  <  0  ||  offset  >  current.entry.length)  {	  if(buffer    ==    null    ||    buffer.length    <    0    ||    offset    >    current.entry.length)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
119	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length!=  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer!=  null  ||  buffer.length!=  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer!=  null  ||  buffer.length!=  length)  {	  if(buffer    ==    null    ||    buffer.length!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
120	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length!=  off  +  length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length!=  off  +  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length!=  off  +  length)  {	  if(buffer    ==    null    ||    buffer.length!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
121	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset!=  current.length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  offset!=  current.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  offset!=  current.length)  {	  if(buffer    ==    null    ||    length!=    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
122	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  >=  current.length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  offset  >=  current.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  offset  >=  current.length)  {	  if(buffer    ==    null    ||    length!=    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
123	[BUG]  [BUGGY]  if(current  ==  null  ||  length!=  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current  ==  null  ||  length!=  buffer.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current  ==  null  ||  length!=  buffer.length)  {	  if(buffer    ==    null    ||    length!=    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
124	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length!=  current.length)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length!=  current.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length!=  current.length)  {	  if(buffer    ==    null    ||    length!=    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
125	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  <  0)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  <  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  <  0)  {	  if(buffer    ==    null    ||    offset    <    0    ||    buffer.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
126	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  <  0  ||  buffer.length  <  0)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  <  0  ||  buffer.length  <  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  <  0  ||  buffer.length  <  0)  {	  if(buffer    ==    null    ||    offset    <    0    ||    buffer.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
127	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  length  ||  buffer.length  <  0)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  offset  <  length  ||  buffer.length  <  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  offset  <  length  ||  buffer.length  <  0)  {	  if(buffer    ==    null    ||    offset    <    0    ||    buffer.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
128	[BUG]  [BUGGY]  if(buffer  ==  null  ||  length  <  0  ||  buffer.length  <  0)  {  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  length  <  0  ||  buffer.length  <  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  length  <  0  ||  buffer.length  <  0)  {	  if(buffer    ==    null    ||    offset    <    0    ||    buffer.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
129	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  buffer.length  <  =  length)  {  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  buffer.length  <  =  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  offset  <  0  ||  buffer.length  <  =  length)  {	  if(buffer    ==    null    ||    offset    <    0    ||    buffer.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
130	[BUG]  [BUGGY]  if(buffer  ==  null  ||  current.entry!=  0)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  current.entry!=  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  current.entry!=  0)  {	  if(current.entry    ==    null    ||    buffer.length!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
131	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length!=  0)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer!=  null  ||  buffer.length!=  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer!=  null  ||  buffer.length!=  0)  {	  if(current.entry    ==    null    ||    buffer.length!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
132	[BUG]  [BUGGY]  if(buffer  ==  null  ||  current.entry.length  <  0)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  current.entry.length  <  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  current.entry.length  <  0)  {	  if(current.entry    ==    null    ||    buffer.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
133	[BUG]  [BUGGY]  if(current.entry  ==  null  ||  buffer.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current.entry  ==  null  ||  buffer.length  <  =  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current.entry  ==  null  ||  buffer.length  <  =  0)  {	  if(current.entry    ==    null    ||    buffer.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
134	[BUG]  [BUGGY]  if(current  ==  null  ||  buffer.length  <  offset)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current  ==  null  ||  buffer.length  <  offset)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current  ==  null  ||  buffer.length  <  offset)  {	  if(current    ==    null    ||    buffer.length    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
135	[BUG]  [BUGGY]  if(length  ==  0  ||  buffer.length  <  length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(length  ==  0  ||  buffer.length  <  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(length  ==  0  ||  buffer.length  <  length)  {	  if(current    ==    null    ||    buffer.length    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
136	[BUG]  [BUGGY]  if(buffered  ==  null  ||  buffer.length  <  length)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffered  ==  null  ||  buffer.length  <  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffered  ==  null  ||  buffer.length  <  length)  {	  if(current    ==    null    ||    buffer.length    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
137	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  >=  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  offset  >=  buffer.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  offset  >=  buffer.length)  {	  if(buffer    ==    null    ||    offset!=    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
138	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  >>  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  offset  >>  buffer.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  offset  >>  buffer.length)  {	  if(buffer    ==    null    ||    offset!=    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
139	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  ==  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  offset  ==  buffer.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  offset  ==  buffer.length)  {	  if(buffer    ==    null    ||    offset!=    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
140	[BUG]  [BUGGY]  if(buffer  ==  null  ||  current.entry.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  current.entry.length  ==  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  current.entry.length  ==  0)  {	  if(current.entry!=    null    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
141	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  =  0  ||  length  >  current.length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  offset  <  =  0  ||  length  >  current.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  offset  <  =  0  ||  length  >  current.length)  {	  if(current    ==    null    ||    buffer.length    <    =    0    ||    length    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
142	[BUG]  [BUGGY]  if(current  ==  null  ||  buffer.length  <  =  0  ||  offset  >  current.length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current  ==  null  ||  buffer.length  <  =  0  ||  offset  >  current.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current  ==  null  ||  buffer.length  <  =  0  ||  offset  >  current.length)  {	  if(current    ==    null    ||    buffer.length    <    =    0    ||    length    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
143	[BUG]  [BUGGY]  if(current  ==  null  ||  offset  <  =  0  ||  length  >  current.length)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current  ==  null  ||  offset  <  =  0  ||  length  >  current.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current  ==  null  ||  offset  <  =  0  ||  length  >  current.length)  {	  if(current    ==    null    ||    buffer.length    <    =    0    ||    length    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
144	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  =  0  ||  length  >  current.length)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  =  0  ||  length  >  current.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  <  =  0  ||  length  >  current.length)  {	  if(current    ==    null    ||    buffer.length    <    =    0    ||    length    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
145	[BUG]  [BUGGY]  if(current.entry  ==  null  ||  buffer.length  <  0  ||  offset  >  current.length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current.entry  ==  null  ||  buffer.length  <  0  ||  offset  >  current.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current.entry  ==  null  ||  buffer.length  <  0  ||  offset  >  current.length)  {	  if(current.entry!=    null    ||    buffer.length    <    0    ||    length    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
146	[BUG]  [BUGGY]  if(current.entry!=  null  ||  buffer.length  <  0  ||  offset  >  current.length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current.entry!=  null  ||  buffer.length  <  0  ||  offset  >  current.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current.entry!=  null  ||  buffer.length  <  0  ||  offset  >  current.length)  {	  if(current.entry!=    null    ||    buffer.length    <    0    ||    length    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
147	[BUG]  [BUGGY]  if(current.entry  ==  null  ||  buffer.length  <  0  ||  offset  >  length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current.entry  ==  null  ||  buffer.length  <  0  ||  offset  >  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current.entry  ==  null  ||  buffer.length  <  0  ||  offset  >  length)  {	  if(current.entry!=    null    ||    buffer.length    <    0    ||    length    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
148	[BUG]  [BUGGY]  if(current  ==  null  ||  length  <  0  ||  buffer.length  >  length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current  ==  null  ||  length  <  0  ||  buffer.length  >  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current  ==  null  ||  length  <  0  ||  buffer.length  >  length)  {	  if(buffer    ==    null    ||    length    <    0    ||    buffer.length    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
149	[BUG]  [BUGGY]  if(current  ==  null  ||  buffer.length  <  0  ||  buffer.length  >  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current  ==  null  ||  buffer.length  <  0  ||  buffer.length  >  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current  ==  null  ||  buffer.length  <  0  ||  buffer.length  >  length)  {	  if(buffer    ==    null    ||    length    <    0    ||    buffer.length    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
150	[BUG]  [BUGGY]  Inflater  inf  =  this.in.read(buffer,  offset,  length,  buffer.length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  this.in.read(buffer,  offset,  length,  buffer.length);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  this.in.read(buffer,  offset,  length,  buffer.length);	  Inflater    inf    =    this.in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
151	[BUG]  [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  current.in.read(buffer,  offset,  length);	  Inflater    inf    =    this.in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
152	[BUG]  [BUGGY]  Inflater  inf  =  this.in.read(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  this.in.read(buffer,  offset,  length  -  1);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  this.in.read(buffer,  offset,  length  -  1);	  Inflater    inf    =    this.in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
153	[BUG]  [BUGGY]  Inflater  inf  =  this.in.read(buffer,  offset,  buffer.length);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  this.in.read(buffer,  offset,  buffer.length);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  this.in.read(buffer,  offset,  buffer.length);	  Inflater    inf    =    this.in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
154	[BUG]  [BUGGY]  Inflater  inf  =  this.in.read(buffer,  offset,  length,  0);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  this.in.read(buffer,  offset,  length,  0);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  this.in.read(buffer,  offset,  length,  0);	  Inflater    inf    =    this.in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
155	[BUG]  [BUGGY]  Inflater  inf  =  this.in.read(buffer,  offset,  length,  this.fileNameLen);  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  this.in.read(buffer,  offset,  length,  this.fileNameLen);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  this.in.read(buffer,  offset,  length,  this.fileNameLen);	  Inflater    inf    =    this.in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
156	[BUG]  [BUGGY]  Inflater  inf  =  this.in.read(buffer,  offset,  length,  current.length);  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  this.in.read(buffer,  offset,  length,  current.length);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  this.in.read(buffer,  offset,  length,  current.length);	  Inflater    inf    =    this.in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
157	[BUG]  [BUGGY]  if(buffer  ==  null  ||  current.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  current.length  <  =  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  current.length  <  =  0)  {	  if(buffer    ==    null    ||    current.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
158	[BUG]  [BUGGY]  if(buffer  ==  null  ||  current.length  <  =  length)  {  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  current.length  <  =  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  current.length  <  =  length)  {	  if(buffer    ==    null    ||    current.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
159	[BUG]  [BUGGY]  if(current!=  null  ||  buffer.length  <  0  ||  offset  >=  current.entry.length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current!=  null  ||  buffer.length  <  0  ||  offset  >=  current.entry.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current!=  null  ||  buffer.length  <  0  ||  offset  >=  current.entry.length)  {	  if(current!=    null    ||    buffer.length    <    0    ||    offset    >    current.entry.length)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
160	[BUG]  [BUGGY]  if(length  >  0)  {  init();  }  else  {  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(length  >  0)  {  init();  }  else  {  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(length  >  0)  {  init();  }  else  {  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  }	  init();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
161	[BUG]  [BUGGY]  if(length  >  0)  {  init();  }  else  {  System.arraycopy(buffer,  offset,  buffer,  length);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(length  >  0)  {  init();  }  else  {  System.arraycopy(buffer,  offset,  buffer,  length);  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(length  >  0)  {  init();  }  else  {  System.arraycopy(buffer,  offset,  buffer,  length);  }	  init();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
162	[BUG]  [BUGGY]  if(length  >  0)  {  init();  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(length  >  0)  {  init();  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(length  >  0)  {  init();  }	  init();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
163	[BUG]  [BUGGY]  if(length  >  0)  {  init();  }  else  {  System.arraycopy(buffer,  offset,  buffer,  off,  length);  }  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(length  >  0)  {  init();  }  else  {  System.arraycopy(buffer,  offset,  buffer,  off,  length);  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(length  >  0)  {  init();  }  else  {  System.arraycopy(buffer,  offset,  buffer,  off,  length);  }	  init();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
164	[BUG]  [BUGGY]  if(length  >  0)  {  init();  }  else  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(length  >  0)  {  init();  }  else  {  throw  new  IOException( " ");  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(length  >  0)  {  init();  }  else  {  throw  new  IOException( " ");  }	  init();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
165	[BUG]  [BUGGY]  if(length  >  0)  {  init();  }  else  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  }  [CE]  illegal  start  of  type  [FE]                                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(length  >  0)  {  init();  }  else  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(length  >  0)  {  init();  }  else  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  }	  init();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
166	[BUG]  [BUGGY]  if(current.entry  ==  null  ||  buffer.length!=  offset)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current.entry  ==  null  ||  buffer.length!=  offset)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current.entry  ==  null  ||  buffer.length!=  offset)  {	  if(current.entry    ==    null    ||    buffer.length!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
167	[BUG]  [BUGGY]  if(buffer  ==  null  ||  length!=  current.entry.length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  length!=  current.entry.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  length!=  current.entry.length)  {	  if(current.entry    ==    null    ||    buffer.length!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
168	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length!=  current.entry.length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length!=  current.entry.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length!=  current.entry.length)  {	  if(current.entry    ==    null    ||    buffer.length!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
169	[BUG]  [BUGGY]  if(current!=  null  ||  buffer.length!=  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current!=  null  ||  buffer.length!=  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current!=  null  ||  buffer.length!=  0)  {	  if(buffer    ==    null    ||    current.length!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
170	[BUG]  [BUGGY]  if(buffer  ==  null  ||  current.length  >=  0)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  current.length  >=  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  current.length  >=  0)  {	  if(buffer    ==    null    ||    current.length!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
171	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(buffer);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  InputStream  in  =  getInputStream(buffer);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	InputStream  in  =  getInputStream(buffer);	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
172	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(buffer,  offset);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  InputStream  in  =  getInputStream(buffer,  offset);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	InputStream  in  =  getInputStream(buffer,  offset);	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
173	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(buffer,  offset  +  length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  InputStream  in  =  getInputStream(buffer,  offset  +  length);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	InputStream  in  =  getInputStream(buffer,  offset  +  length);	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
174	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(),  buffer.length);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  InputStream  in  =  getInputStream(),  buffer.length);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	InputStream  in  =  getInputStream(),  buffer.length);	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
175	[BUG]  [BUGGY]  InputStream  in  =  this.getInputStream();  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  InputStream  in  =  this.getInputStream();  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	InputStream  in  =  this.getInputStream();	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
176	[BUG]  [BUGGY]  if(current  ==  null  ||  buffer.length  <  =  0  ||  offset  >  current.entry.length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current  ==  null  ||  buffer.length  <  =  0  ||  offset  >  current.entry.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current  ==  null  ||  buffer.length  <  =  0  ||  offset  >  current.entry.length)  {	  if(current    ==    null    ||    buffer.length    <    =    0    ||    length    >    current.entry.length)    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
177	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  =  0  ||  length  >  current.entry.length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  offset  <  =  0  ||  length  >  current.entry.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  offset  <  =  0  ||  length  >  current.entry.length)  {	  if(current    ==    null    ||    buffer.length    <    =    0    ||    length    >    current.entry.length)    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
178	[BUG]  [BUGGY]  if(current  ==  null  ||  offset  <  =  0  ||  length  >  current.entry.length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current  ==  null  ||  offset  <  =  0  ||  length  >  current.entry.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current  ==  null  ||  offset  <  =  0  ||  length  >  current.entry.length)  {	  if(current    ==    null    ||    buffer.length    <    =    0    ||    length    >    current.entry.length)    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
179	[BUG]  [BUGGY]  if(current.entry!=  null  ||  buffer.length  <  0  ||  length  >  current.entry.length)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current.entry!=  null  ||  buffer.length  <  0  ||  length  >  current.entry.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current.entry!=  null  ||  buffer.length  <  0  ||  length  >  current.entry.length)  {	  if(current!=    null    ||    buffer.length    <    0    ||    length    >    current.entry.length)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
180	[BUG]  [BUGGY]  InputStream  in  =  read(buffer,  offset,  length,  buffer.length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  InputStream  in  =  read(buffer,  offset,  length,  buffer.length);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	InputStream  in  =  read(buffer,  offset,  length,  buffer.length);	  InputStream    in    =    read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
181	[BUG]  [BUGGY]  InputStream  in  =  read(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  InputStream  in  =  read(buffer,  offset,  length  -  1);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	InputStream  in  =  read(buffer,  offset,  length  -  1);	  InputStream    in    =    read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
182	[BUG]  [BUGGY]  InputStream  in  =  read(buffer,  offset,  length,  fileNameLen);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  InputStream  in  =  read(buffer,  offset,  length,  fileNameLen);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	InputStream  in  =  read(buffer,  offset,  length,  fileNameLen);	  InputStream    in    =    read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
183	[BUG]  [BUGGY]  InputStream  in  =  read(buffer,  offset,  length,  0);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  InputStream  in  =  read(buffer,  offset,  length,  0);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	InputStream  in  =  read(buffer,  offset,  length,  0);	  InputStream    in    =    read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
184	[BUG]  [BUGGY]  InputStream  in  =  read(buffer,  offset,  length,  current.length);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  InputStream  in  =  read(buffer,  offset,  length,  current.length);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	InputStream  in  =  read(buffer,  offset,  length,  current.length);	  InputStream    in    =    read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
185	[BUG]  [BUGGY]  InputStream  in  =  read(buffer,  offset,  length,  inputStream);  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  InputStream  in  =  read(buffer,  offset,  length,  inputStream);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	InputStream  in  =  read(buffer,  offset,  length,  inputStream);	  InputStream    in    =    read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
186	[BUG]  [BUGGY]  InputStream  in  =  read(buffer,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  InputStream  in  =  read(buffer,  offset,  length  +  1);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	InputStream  in  =  read(buffer,  offset,  length  +  1);	  InputStream    in    =    read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
187	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  =  0  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  =  0  ||  length  >  buffer.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  <  =  0  ||  length  >  buffer.length)  {	  if(buffer    ==    null    ||    buffer.length    <    0    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
188	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  1  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  1  ||  length  >  buffer.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  <  1  ||  length  >  buffer.length)  {	  if(buffer    ==    null    ||    buffer.length    <    0    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
189	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  length  >  offset)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  length  >  offset)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  <  0  ||  length  >  offset)  {	  if(buffer    ==    null    ||    buffer.length    <    0    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
190	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  +  length  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  +  length  >  buffer.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  +  length  >  buffer.length)  {	  if(buffer    ==    null    ||    buffer.length    <    0    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
191	[BUG]  [BUGGY]  if(current.entry  ==  null  ||  buffer.length  ==  offset)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current.entry  ==  null  ||  buffer.length  ==  offset)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current.entry  ==  null  ||  buffer.length  ==  offset)  {	  if(current.entry!=    null    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
192	[BUG]  [BUGGY]  if(buffer  ==  null  ||  length  ==  current.entry.length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  length  ==  current.entry.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  length  ==  current.entry.length)  {	  if(current.entry!=    null    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
193	[BUG]  [BUGGY]  if(current  ==  null  ||  offset  <  0  ||  buffer.length  >  offset)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current  ==  null  ||  offset  <  0  ||  buffer.length  >  offset)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current  ==  null  ||  offset  <  0  ||  buffer.length  >  offset)  {	  if(buffer    ==    null    ||    offset    <    0    ||    buffer.length    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
194	[BUG]  [BUGGY]  if(offset  <  0  ||  offset  <  0  ||  buffer.length  >  current.length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(offset  <  0  ||  offset  <  0  ||  buffer.length  >  current.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(offset  <  0  ||  offset  <  0  ||  buffer.length  >  current.length)  {	  if(buffer    ==    null    ||    offset    <    0    ||    buffer.length    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
195	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  buffer.length  >  off  +  length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  buffer.length  >  off  +  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  offset  <  0  ||  buffer.length  >  off  +  length)  {	  if(buffer    ==    null    ||    offset    <    0    ||    buffer.length    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
196	[BUG]  [BUGGY]  if(buffer!=  null  ||  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer!=  null  ||  offset  <  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer!=  null  ||  offset  <  length)  {	  if(buffer    ==    null    ||    offset    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
197	[BUG]  [BUGGY]  if(buffer  ==  null  ||  off  <  length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  off  <  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  off  <  length)  {	  if(buffer    ==    null    ||    offset    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
198	[BUG]  [BUGGY]  if(length  ==  0  ||  buffer.length  <  0  ||  offset  >  length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(length  ==  0  ||  buffer.length  <  0  ||  offset  >  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(length  ==  0  ||  buffer.length  <  0  ||  offset  >  length)  {	  if(current    ==    null    ||    buffer.length    <    0    ||    offset    >    length)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
199	[BUG]  [BUGGY]  if(offset  ==  0  ||  buffer.length  <  0  ||  offset  >  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(offset  ==  0  ||  buffer.length  <  0  ||  offset  >  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(offset  ==  0  ||  buffer.length  <  0  ||  offset  >  length)  {	  if(current    ==    null    ||    buffer.length    <    0    ||    offset    >    length)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
200	[BUG]  [BUGGY]  if(offset  ==  null  ||  buffer.length  <  0  ||  offset  >  length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(offset  ==  null  ||  buffer.length  <  0  ||  offset  >  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(offset  ==  null  ||  buffer.length  <  0  ||  offset  >  length)  {	  if(current    ==    null    ||    buffer.length    <    0    ||    offset    >    length)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
201	[BUG]  [BUGGY]  if(length  <  0  ||  buffer.length  <  0  ||  offset  >  length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(length  <  0  ||  buffer.length  <  0  ||  offset  >  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(length  <  0  ||  buffer.length  <  0  ||  offset  >  length)  {	  if(current    ==    null    ||    buffer.length    <    0    ||    offset    >    length)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
202	[BUG]  [BUGGY]  if(current  ==  null  ||  buffer.length  <  0  ||  length  >  length)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current  ==  null  ||  buffer.length  <  0  ||  length  >  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current  ==  null  ||  buffer.length  <  0  ||  length  >  length)  {	  if(buffer    ==    null    ||    buffer.length    <    0    ||    length    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
203	[BUG]  [BUGGY]  if(buffer  ==  null  ||  current.length  <  0  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  current.length  <  0  ||  length  >  buffer.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  current.length  <  0  ||  length  >  buffer.length)  {	  if(buffer    ==    null    ||    buffer.length    <    0    ||    length    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
204	[BUG]  [BUGGY]  if(length  ==  0  ||  buffer.length  <  0  ||  buffer.length  >  current.length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(length  ==  0  ||  buffer.length  <  0  ||  buffer.length  >  current.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(length  ==  0  ||  buffer.length  <  0  ||  buffer.length  >  current.length)  {	  if(buffer    ==    null    ||    buffer.length    <    0    ||    length    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
205	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  1  ||  length  >  current.length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  1  ||  length  >  current.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  <  1  ||  length  >  current.length)  {	  if(buffer    ==    null    ||    buffer.length    <    0    ||    length    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
206	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  >>  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  offset  >>  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  offset  >>  length)  {	  if(buffer    ==    null    ||    offset!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
207	[BUG]  [BUGGY]  if(current.entry  ==  null  ||  buffer.length  <  0  ||  length  >  current.entry.length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current.entry  ==  null  ||  buffer.length  <  0  ||  length  >  current.entry.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current.entry  ==  null  ||  buffer.length  <  0  ||  length  >  current.entry.length)  {	  if(buffer    ==    null    ||    buffer.length    <    0    ||    length    >    current.entry.length)    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
208	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  =  0  ||  length  >  current.entry.length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  =  0  ||  length  >  current.entry.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  <  =  0  ||  length  >  current.entry.length)  {	  if(buffer    ==    null    ||    buffer.length    <    0    ||    length    >    current.entry.length)    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
209	[BUG]  [BUGGY]  if(buffer  ==  null  ||  current.entry.length  <  0  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  current.entry.length  <  0  ||  length  >  buffer.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  current.entry.length  <  0  ||  length  >  buffer.length)  {	  if(buffer    ==    null    ||    buffer.length    <    0    ||    length    >    current.entry.length)    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
210	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  1  ||  length  >  current.entry.length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  1  ||  length  >  current.entry.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  <  1  ||  length  >  current.entry.length)  {	  if(buffer    ==    null    ||    buffer.length    <    0    ||    length    >    current.entry.length)    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
211	[BUG]  [BUGGY]  in.defaultRead(buffer,  offset  +  length);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  in.defaultRead(buffer,  offset  +  length);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	in.defaultRead(buffer,  offset  +  length);	  in.defaultRead();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
212	[BUG]  [BUGGY]  if(current.entry  ==  null  ||  buffer  ==  null)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current.entry  ==  null  ||  buffer  ==  null)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current.entry  ==  null  ||  buffer  ==  null)  {	  if(buffer    ==    null    ||    current.entry!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
213	[BUG]  [BUGGY]  if(current.entry  ==  null  ||  buffer!=  null)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current.entry  ==  null  ||  buffer!=  null)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current.entry  ==  null  ||  buffer!=  null)  {	  if(buffer    ==    null    ||    current.entry!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
214	[BUG]  [BUGGY]  if(current  ==  null  ||  buffer  ==  null)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current  ==  null  ||  buffer  ==  null)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current  ==  null  ||  buffer  ==  null)  {	  if(buffer    ==    null    ||    current.entry!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
215	[BUG]  [BUGGY]  if(current!=  null  ||  buffer  ==  null)  {  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current!=  null  ||  buffer  ==  null)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current!=  null  ||  buffer  ==  null)  {	  if(buffer    ==    null    ||    current.entry!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
216	[BUG]  [BUGGY]  InputStream  in  =  new  BoundedInputStream(buffer,  offset,  length,  buffer.length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  InputStream  in  =  new  BoundedInputStream(buffer,  offset,  length,  buffer.length);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	InputStream  in  =  new  BoundedInputStream(buffer,  offset,  length,  buffer.length);	  InputStream    in    =    new    BoundedInputStream(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
217	[BUG]  [BUGGY]  InputStream  in  =  new  BoundedInputStream(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  InputStream  in  =  new  BoundedInputStream(buffer,  offset,  length  -  1);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	InputStream  in  =  new  BoundedInputStream(buffer,  offset,  length  -  1);	  InputStream    in    =    new    BoundedInputStream(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
218	[BUG]  [BUGGY]  InputStream  in  =  new  BoundedInputStream(buffer,  offset,  length,  fileNameLen);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  InputStream  in  =  new  BoundedInputStream(buffer,  offset,  length,  fileNameLen);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	InputStream  in  =  new  BoundedInputStream(buffer,  offset,  length,  fileNameLen);	  InputStream    in    =    new    BoundedInputStream(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
219	[BUG]  [BUGGY]  InputStream  in  =  new  BoundedInputStream(buffer,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  InputStream  in  =  new  BoundedInputStream(buffer,  offset,  length  +  1);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	InputStream  in  =  new  BoundedInputStream(buffer,  offset,  length  +  1);	  InputStream    in    =    new    BoundedInputStream(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
220	[BUG]  [BUGGY]  InputStream  in  =  new  BoundedInputStream(buffer,  offset,  length,  0);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  InputStream  in  =  new  BoundedInputStream(buffer,  offset,  length,  0);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	InputStream  in  =  new  BoundedInputStream(buffer,  offset,  length,  0);	  InputStream    in    =    new    BoundedInputStream(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
221	[BUG]  [BUGGY]  InputStream  in  =  new  BoundedInputStream(buffer,  offset,  length,  size);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  InputStream  in  =  new  BoundedInputStream(buffer,  offset,  length,  size);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	InputStream  in  =  new  BoundedInputStream(buffer,  offset,  length,  size);	  InputStream    in    =    new    BoundedInputStream(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
222	[BUG]  [BUGGY]  InputStream  in  =  new  BoundedInputStream(buffer,  offset,  length,  inputStream);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  InputStream  in  =  new  BoundedInputStream(buffer,  offset,  length,  inputStream);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	InputStream  in  =  new  BoundedInputStream(buffer,  offset,  length,  inputStream);	  InputStream    in    =    new    BoundedInputStream(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
223	[BUG]  [BUGGY]  if(offset  <  0  ||  offset  <  0  ||  buffer.length  >  current.entry.length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(offset  <  0  ||  offset  <  0  ||  buffer.length  >  current.entry.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(offset  <  0  ||  offset  <  0  ||  buffer.length  >  current.entry.length)  {	  if(buffer    ==    null    ||    offset    <    0    ||    buffer.length    >    current.entry.length)    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
224	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  <  0  ||  buffer.length  >  current.entry.length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(offset  ==  0  ||  offset  <  0  ||  buffer.length  >  current.entry.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(offset  ==  0  ||  offset  <  0  ||  buffer.length  >  current.entry.length)  {	  if(buffer    ==    null    ||    offset    <    0    ||    buffer.length    >    current.entry.length)    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
225	[BUG]  [BUGGY]  if(current.entry  ==  null  ||  offset  <  0  ||  buffer.length  >  offset)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current.entry  ==  null  ||  offset  <  0  ||  buffer.length  >  offset)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current.entry  ==  null  ||  offset  <  0  ||  buffer.length  >  offset)  {	  if(buffer    ==    null    ||    offset    <    0    ||    buffer.length    >    current.entry.length)    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
226	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  buffer.length  +  length  >  current.entry.length)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  buffer.length  +  length  >  current.entry.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  offset  <  0  ||  buffer.length  +  length  >  current.entry.length)  {	  if(buffer    ==    null    ||    offset    <    0    ||    buffer.length    >    current.entry.length)    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
227	[BUG]  [BUGGY]  if(buffer  ==  null  ||  off  <  0  ||  length  <  0)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  off  <  0  ||  length  <  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  off  <  0  ||  length  <  0)  {	  if(buffer    ==    null    ||    length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
228	[BUG]  [BUGGY]  if(buffer!=  null  ||  offset  <  0)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer!=  null  ||  offset  <  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer!=  null  ||  offset  <  0)  {	  if(buffer    ==    null    ||    length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
229	[BUG]  [BUGGY]  if(offset  ==  null  ||  offset  ==  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(offset  ==  null  ||  offset  ==  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(offset  ==  null  ||  offset  ==  0)  {	  if(buffered    ==    null    ||    offset    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
230	[BUG]  [BUGGY]  if(length  ==  0  ||  buffer.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(length  ==  0  ||  buffer.length  ==  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(length  ==  0  ||  buffer.length  ==  0)  {	  if(buffered    ==    null    ||    offset    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
231	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  length);  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  length);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
232	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  length);  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  length);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
233	[BUG]  [BUGGY]  read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  read(buffer,  offset,  length);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	read(buffer,  offset,  length);	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
234	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer[i]  =  in.read(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer[i]  =  in.read(buffer,  offset,  length);  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer[i]  =  in.read(buffer,  offset,  length);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
235	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buffer[i]  =  in.read(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buffer[i]  =  in.read(buffer,  offset,  length);  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buffer[i]  =  in.read(buffer,  offset,  length);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
236	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  in.read(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  in.read(buffer,  offset,  length);  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  in.read(buffer,  offset,  length);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
237	[BUG]  [BUGGY]  Inflater  inf  =  zipEncoding.encode(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  zipEncoding.encode(buffer,  offset,  length);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  zipEncoding.encode(buffer,  offset,  length);	  Inflater    inf    =    entryEncoding.encode(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
238	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  fileNameLen);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  fileNameLen);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  fileNameLen);	  Inflater    inf    =    entryEncoding.encode(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
239	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length  -  1);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length  -  1);	  Inflater    inf    =    entryEncoding.encode(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
240	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  current.length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  current.length);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  current.length);	  Inflater    inf    =    entryEncoding.encode(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
241	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  size);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  size);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  size);	  Inflater    inf    =    entryEncoding.encode(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
242	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length  +  1);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length  +  1);	  Inflater    inf    =    entryEncoding.encode(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
243	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  <  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer!=  null  ||  buffer.length  <  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer!=  null  ||  buffer.length  <  0)  {	  if(current!=    null    ||    buffer.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
244	[BUG]  [BUGGY]  if(offset  ==  null  ||  buffer.length!=  length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(offset  ==  null  ||  buffer.length!=  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(offset  ==  null  ||  buffer.length!=  length)  {	  if(current    ==    null    ||    buffer.length!=    offset)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
245	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  ==  0  ||  buffer.length!=  0)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  offset  ==  0  ||  buffer.length!=  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  offset  ==  0  ||  buffer.length!=  0)  {	  if(buffer    ==    null    ||    offset    ==    0    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
246	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  ==  0  ||  offset  ==  length)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  ==  0  ||  offset  ==  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  ==  0  ||  offset  ==  length)  {	  if(buffer    ==    null    ||    offset    ==    0    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
247	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  >=  0  ||  buffer.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  offset  >=  0  ||  buffer.length  ==  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  offset  >=  0  ||  buffer.length  ==  0)  {	  if(buffer    ==    null    ||    offset    ==    0    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
248	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  ==  0  ||  buffer.length  >=  0)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  offset  ==  0  ||  buffer.length  >=  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  offset  ==  0  ||  buffer.length  >=  0)  {	  if(buffer    ==    null    ||    offset    ==    0    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
249	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  ==  length  ||  buffer.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  offset  ==  length  ||  buffer.length  ==  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  offset  ==  length  ||  buffer.length  ==  0)  {	  if(buffer    ==    null    ||    offset    ==    0    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
250	[BUG]  [BUGGY]  if(buffered  ==  null  ||  buffer.length  <  =  offset)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffered  ==  null  ||  buffer.length  <  =  offset)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffered  ==  null  ||  buffer.length  <  =  offset)  {	  if(buffered    ==    null    ||    buffer.length    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
251	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  <  =  length)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer!=  null  ||  buffer.length  <  =  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer!=  null  ||  buffer.length  <  =  length)  {	  if(current.entry    ==    null    ||    buffer.length    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
252	[BUG]  [BUGGY]  if(buffer  ==  null  ||  length  <  =  current.entry.length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  length  <  =  current.entry.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  length  <  =  current.entry.length)  {	  if(current.entry    ==    null    ||    buffer.length    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
253	[BUG]  [BUGGY]  if(buffer  ==  null  ||  current.entry.length  <  =  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  current.entry.length  <  =  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  current.entry.length  <  =  length)  {	  if(current.entry    ==    null    ||    buffer.length    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
254	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream(buffer);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  getInputStream(buffer);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  getInputStream(buffer);	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
255	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  getInputStream(buffer,  offset,  length);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  getInputStream(buffer,  offset,  length);	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
256	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream(buffer,  offset);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  getInputStream(buffer,  offset);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  getInputStream(buffer,  offset);	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
257	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream(buffer,  offset  +  length);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  getInputStream(buffer,  offset  +  length);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  getInputStream(buffer,  offset  +  length);	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
258	[BUG]  [BUGGY]  Inflater  inf  =  getOutputStream();  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  getOutputStream();  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  getOutputStream();	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
259	[BUG]  [BUGGY]  Inflater  inf  =  getReadInputStream();  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  getReadInputStream();  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  getReadInputStream();	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
260	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  ==  offset)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer!=  null  ||  buffer.length  ==  offset)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer!=  null  ||  buffer.length  ==  offset)  {	  if(buffer!=    null    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
261	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  ==  off)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  ==  off)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  ==  off)  {	  if(buffer!=    null    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
262	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  buffer.length);  if(inf!=  null)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  buffer.length);  if(inf!=  null)  {  return  -1;  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  buffer.length);  if(inf!=  null)  {  return  -1;  }	  Inflater    inf    =    entryEncoding.encode(buffer,    offset,    length);    if(inf!=    null)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
263	[BUG]  [BUGGY]  Inflater  inf  =  zipEncoding.encode(buffer,  offset,  length);  if(inf!=  null)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  zipEncoding.encode(buffer,  offset,  length);  if(inf!=  null)  {  return  -1;  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  zipEncoding.encode(buffer,  offset,  length);  if(inf!=  null)  {  return  -1;  }	  Inflater    inf    =    entryEncoding.encode(buffer,    offset,    length);    if(inf!=    null)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
264	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  buffer.length);  if(inf  ==  null)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  buffer.length);  if(inf  ==  null)  {  return  -1;  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  buffer.length);  if(inf  ==  null)  {  return  -1;  }	  Inflater    inf    =    entryEncoding.encode(buffer,    offset,    length);    if(inf!=    null)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
265	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  current.length);  if(inf!=  null)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  current.length);  if(inf!=  null)  {  return  -1;  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  current.length);  if(inf!=  null)  {  return  -1;  }	  Inflater    inf    =    entryEncoding.encode(buffer,    offset,    length);    if(inf!=    null)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
266	[BUG]  [BUGGY]  Inflater  inf  =  zipEncoding.encode(buffer,  offset,  length);  if(inf  ==  null)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  zipEncoding.encode(buffer,  offset,  length);  if(inf  ==  null)  {  return  -1;  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  zipEncoding.encode(buffer,  offset,  length);  if(inf  ==  null)  {  return  -1;  }	  Inflater    inf    =    entryEncoding.encode(buffer,    offset,    length);    if(inf!=    null)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
267	[BUG]  [BUGGY]  Inflater  inf  =  current.entryEncoding.encode(buffer,  offset,  length);  if(inf!=  null)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  current.entryEncoding.encode(buffer,  offset,  length);  if(inf!=  null)  {  return  -1;  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  current.entryEncoding.encode(buffer,  offset,  length);  if(inf!=  null)  {  return  -1;  }	  Inflater    inf    =    entryEncoding.encode(buffer,    offset,    length);    if(inf!=    null)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
268	[BUG]  [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  IOException( " ");  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  current.in.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  IOException( " ");  }	  Inflater    inf    =    this.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
269	[BUG]  [BUGGY]  Inflater  inf  =  this.in.read(buffer,  offset,  length,  buffer.length);  if(inf!=  null)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  this.in.read(buffer,  offset,  length,  buffer.length);  if(inf!=  null)  {  throw  new  IOException( " ");  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  this.in.read(buffer,  offset,  length,  buffer.length);  if(inf!=  null)  {  throw  new  IOException( " ");  }	  Inflater    inf    =    this.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
270	[BUG]  [BUGGY]  Inflater  inf  =  this.in.read(buffer,  offset,  length,  buffer.length);  if(inf  ==  null)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  this.in.read(buffer,  offset,  length,  buffer.length);  if(inf  ==  null)  {  throw  new  IOException( " ");  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  this.in.read(buffer,  offset,  length,  buffer.length);  if(inf  ==  null)  {  throw  new  IOException( " ");  }	  Inflater    inf    =    this.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
271	[BUG]  [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length);  if(inf  ==  null)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length);  if(inf  ==  null)  {  throw  new  IOException( " ");  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  current.in.read(buffer,  offset,  length);  if(inf  ==  null)  {  throw  new  IOException( " ");  }	  Inflater    inf    =    this.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
272	[BUG]  [BUGGY]  Inflater  inf  =  this.in.read(buffer,  offset,  length,  current.length);  if(inf!=  null)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  this.in.read(buffer,  offset,  length,  current.length);  if(inf!=  null)  {  throw  new  IOException( " ");  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  this.in.read(buffer,  offset,  length,  current.length);  if(inf!=  null)  {  throw  new  IOException( " ");  }	  Inflater    inf    =    this.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
273	[BUG]  [BUGGY]  Inflater  inf  =  this.in.read(buffer,  offset,  length  -  1);  if(inf!=  null)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  this.in.read(buffer,  offset,  length  -  1);  if(inf!=  null)  {  throw  new  IOException( " ");  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  this.in.read(buffer,  offset,  length  -  1);  if(inf!=  null)  {  throw  new  IOException( " ");  }	  Inflater    inf    =    this.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
274	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  >=  current.length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  >=  current.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  >=  current.length)  {	  if(buffer    ==    null    ||    buffer.length    <    0    ||    offset    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
275	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  <  current.length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  <  current.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  <  current.length)  {	  if(buffer    ==    null    ||    buffer.length    <    0    ||    offset    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
276	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  <  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  <  length)  {	  if(buffer    ==    null    ||    buffer.length    <    0    ||    offset    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
277	[BUG]  [BUGGY]  if(buffered  ==  null  ||  buffer.length!=  offset)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffered  ==  null  ||  buffer.length!=  offset)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffered  ==  null  ||  buffer.length!=  offset)  {	  if(buffered    ==    null    ||    buffer.length!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
278	[BUG]  [BUGGY]  if(buffered  ==  null  ||  offset!=  length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffered  ==  null  ||  offset!=  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffered  ==  null  ||  offset!=  length)  {	  if(buffered    ==    null    ||    buffer.length!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
279	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  >  0)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  offset  >  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  offset  >  0)  {	  if(buffer    ==    null    ||    offset    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
280	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  <  length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer!=  null  ||  buffer.length  <  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer!=  null  ||  buffer.length  <  length)  {	  if(buffer    ==    null    ||    buffer.length    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
281	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  =  offset  +  length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  =  offset  +  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  <  =  offset  +  length)  {	  if(buffer    ==    null    ||    buffer.length    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
282	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  length  ||  buffer.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  offset  <  length  ||  buffer.length  ==  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  offset  <  length  ||  buffer.length  ==  0)  {	  if(buffer    ==    null    ||    offset    <    0    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
283	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  buffer.length);  if(inf!=  null)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  buffer.length);  if(inf!=  null)  {  throw  new  IOException( " ");  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  buffer.length);  if(inf!=  null)  {  throw  new  IOException( " ");  }	  Inflater    inf    =    entryEncoding.encode(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
284	[BUG]  [BUGGY]  Inflater  inf  =  zipEncoding.encode(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  zipEncoding.encode(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  IOException( " ");  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  zipEncoding.encode(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  IOException( " ");  }	  Inflater    inf    =    entryEncoding.encode(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
285	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  buffer.length);  if(inf  ==  null)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  buffer.length);  if(inf  ==  null)  {  throw  new  IOException( " ");  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  buffer.length);  if(inf  ==  null)  {  throw  new  IOException( " ");  }	  Inflater    inf    =    entryEncoding.encode(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
286	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  current.length);  if(inf!=  null)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  current.length);  if(inf!=  null)  {  throw  new  IOException( " ");  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  current.length);  if(inf!=  null)  {  throw  new  IOException( " ");  }	  Inflater    inf    =    entryEncoding.encode(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
287	[BUG]  [BUGGY]  Inflater  inf  =  current.entryEncoding.encode(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  current.entryEncoding.encode(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  IOException( " ");  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  current.entryEncoding.encode(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  IOException( " ");  }	  Inflater    inf    =    entryEncoding.encode(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
288	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  fileNameLen);  if(inf!=  null)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  fileNameLen);  if(inf!=  null)  {  throw  new  IOException( " ");  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  fileNameLen);  if(inf!=  null)  {  throw  new  IOException( " ");  }	  Inflater    inf    =    entryEncoding.encode(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
289	[BUG]  [BUGGY]  if(current.entry  ==  null  ||  offset  <  0  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current.entry  ==  null  ||  offset  <  0  ||  length  >  buffer.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current.entry  ==  null  ||  offset  <  0  ||  length  >  buffer.length)  {	  if(buffer    ==    null    ||    offset    <    0    ||    length    >    current.entry.length)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
290	[BUG]  [BUGGY]  if(offset  <  0  ||  offset  <  0  ||  length  >  current.entry.length)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(offset  <  0  ||  offset  <  0  ||  length  >  current.entry.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(offset  <  0  ||  offset  <  0  ||  length  >  current.entry.length)  {	  if(buffer    ==    null    ||    offset    <    0    ||    length    >    current.entry.length)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
291	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  <  0  ||  length  >  current.entry.length)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(offset  ==  0  ||  offset  <  0  ||  length  >  current.entry.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(offset  ==  0  ||  offset  <  0  ||  length  >  current.entry.length)  {	  if(buffer    ==    null    ||    offset    <    0    ||    length    >    current.entry.length)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
292	[BUG]  [BUGGY]  if(length  ==  0  ||  buffer.length  <  0  ||  offset  >  current.entry.length)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(length  ==  0  ||  buffer.length  <  0  ||  offset  >  current.entry.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(length  ==  0  ||  buffer.length  <  0  ||  offset  >  current.entry.length)  {	  if(buffer    ==    null    ||    offset    <    0    ||    length    >    current.entry.length)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
293	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  inputStream.length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  inputStream.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  <  inputStream.length)  {	  if(buffer    ==    null    ||    buffer.length    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
294	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  len)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  len)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  <  len)  {	  if(buffer    ==    null    ||    buffer.length    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
295	[BUG]  [BUGGY]  if(current.entry  ==  null  ||  buffer.length  <  offset)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current.entry  ==  null  ||  buffer.length  <  offset)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current.entry  ==  null  ||  buffer.length  <  offset)  {	  if(current.entry    ==    null    ||    buffer.length    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
296	[BUG]  [BUGGY]  if(buffer  ==  null  ||  current.entry.length  <  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  current.entry.length  <  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  current.entry.length  <  length)  {	  if(current.entry    ==    null    ||    buffer.length    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
297	[BUG]  [BUGGY]  if(current.entry  ==  null  ||  buffer.length  >=  length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current.entry  ==  null  ||  buffer.length  >=  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current.entry  ==  null  ||  buffer.length  >=  length)  {	  if(current.entry    ==    null    ||    buffer.length    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
298	[BUG]  [BUGGY]  if(buffer  ==  null  ||  length  >  0)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  length  >  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  length  >  0)  {	  if(buffer    ==    null    ||    length    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
299	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  >  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  offset  >  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  offset  >  length)  {	  if(buffer    ==    null    ||    offset!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
300	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  [Delete]  0)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  [Delete]  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  [Delete]  0)  {	  if(buffer    ==    null    ||    buffer.length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
301	[BUG]  [BUGGY]  if(buffer  ==  null  ||  length  <  =  0  ||  buffer.length  >  current.entry.length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  length  <  =  0  ||  buffer.length  >  current.entry.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  length  <  =  0  ||  buffer.length  >  current.entry.length)  {	  if(current    ==    null    ||    buffer.length    <    =    0    ||    length    >    current.entry.length)    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
302	[BUG]  [BUGGY]  if(current  ==  null  ||  offset  <  0  ||  buffer.length  >  current.length)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current  ==  null  ||  offset  <  0  ||  buffer.length  >  current.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current  ==  null  ||  offset  <  0  ||  buffer.length  >  current.length)  {	  if(current    ==    null    ||    buffer.length    <    0    ||    offset    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
303	[BUG]  [BUGGY]  if(current  ==  null  ||  buffer.length  <  0  ||  offset  +  length  >  current.length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current  ==  null  ||  buffer.length  <  0  ||  offset  +  length  >  current.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current  ==  null  ||  buffer.length  <  0  ||  offset  +  length  >  current.length)  {	  if(current    ==    null    ||    buffer.length    <    0    ||    offset    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
304	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  =  0  ||  buffer.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  offset  <  =  0  ||  buffer.length  ==  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  offset  <  =  0  ||  buffer.length  ==  0)  {	  if(buffer    ==    null    ||    offset    ==    0    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
305	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  >  0  ||  buffer.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  offset  >  0  ||  buffer.length  ==  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  offset  >  0  ||  buffer.length  ==  0)  {	  if(buffer    ==    null    ||    offset    ==    0    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
306	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  ==  0  ||  offset  ==  0)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  ==  0  ||  offset  ==  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  ==  0  ||  offset  ==  0)  {	  if(buffer    ==    null    ||    offset    ==    0    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
307	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset!=  0  ||  buffer.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  offset!=  0  ||  buffer.length  ==  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  offset!=  0  ||  buffer.length  ==  0)  {	  if(buffer    ==    null    ||    offset    ==    0    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
308	[BUG]  [BUGGY]  if(buffer!=  null  ||  offset!=  0)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer!=  null  ||  offset!=  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer!=  null  ||  offset!=  0)  {	  if(buffer    ==    null    ||    length!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
309	[BUG]  [BUGGY]  init(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  init(buffer,  offset,  length);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	init(buffer,  offset,  length);	  init();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
310	[BUG]  [BUGGY]  Inflater  inf  =  this.readInflater(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  this.readInflater(buffer,  offset,  length);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  this.readInflater(buffer,  offset,  length);	  init();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
311	[BUG]  [BUGGY]  Inflater  inf  =  createInflater(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  createInflater(buffer,  offset,  length);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  createInflater(buffer,  offset,  length);	  init();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
312	[BUG]  [BUGGY]  Inflater  inf  =  new  Inflater(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  new  Inflater(buffer,  offset,  length);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  new  Inflater(buffer,  offset,  length);	  init();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
313	[BUG]  [BUGGY]  Inflater  inf  =  createInflater(buffer);  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  createInflater(buffer);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  createInflater(buffer);	  init();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
314	[BUG]  [BUGGY]  if(buffered  ==  null  ||  offset!=  0)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffered  ==  null  ||  offset!=  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffered  ==  null  ||  offset!=  0)  {	  if(buffered    ==    null    ||    buffer.length!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
315	[BUG]  [BUGGY]  if(current  ==  null  ||  buffer.length  ==  length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current  ==  null  ||  buffer.length  ==  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current  ==  null  ||  buffer.length  ==  length)  {	  if(current!=    null    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
316	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  offset  >  buffer.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  offset  >  buffer.length)  {	  if(buffer    ==    null    ||    offset!=    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
317	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  =  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  offset  <  =  buffer.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  offset  <  =  buffer.length)  {	  if(buffer    ==    null    ||    offset!=    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
318	[BUG]  [BUGGY]  Inflater  inf  =  this.in.read(buffer,  offset,  length);  if(inf  ==  null)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  this.in.read(buffer,  offset,  length);  if(inf  ==  null)  {  throw  new  IOException( " ");  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  this.in.read(buffer,  offset,  length);  if(inf  ==  null)  {  throw  new  IOException( " ");  }	  Inflater    inf    =    this.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
319	[BUG]  [BUGGY]  Inflater  inf  =  this.in.read(buffer,  offset,  length  +  1);  if(inf!=  null)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  this.in.read(buffer,  offset,  length  +  1);  if(inf!=  null)  {  throw  new  IOException( " ");  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  this.in.read(buffer,  offset,  length  +  1);  if(inf!=  null)  {  throw  new  IOException( " ");  }	  Inflater    inf    =    this.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
320	[BUG]  [BUGGY]  Inflater  inf  =  this.in.read(buffer,  offset,  length  -  1);  if(inf  ==  null)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  this.in.read(buffer,  offset,  length  -  1);  if(inf  ==  null)  {  throw  new  IOException( " ");  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  this.in.read(buffer,  offset,  length  -  1);  if(inf  ==  null)  {  throw  new  IOException( " ");  }	  Inflater    inf    =    this.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
321	[BUG]  [BUGGY]  if(buffer  ==  null  ||  current.entry  <  0  ||  buffer.length  >  length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  current.entry  <  0  ||  buffer.length  >  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  current.entry  <  0  ||  buffer.length  >  length)  {	  if(buffer    ==    null    ||    length    <    0    ||    buffer.length    >    current.entry.length)    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
322	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  >  buffer.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  >  buffer.length)  {	  if(buffer    ==    null    ||    offset    <    0    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
323	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  buffer.length  =  offset;  i  <  length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buffer,  offset+i);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  buffer.length  =  offset;  i  <  length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buffer,  offset+i);  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(length  >  0)  {  for(int  i  =  0,  buffer.length  =  offset;  i  <  length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buffer,  offset+i);  }	  if(length    >    0)    {    for(int    i    =    0,    length    =    buffer.length;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buffer,    offset+i);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
324	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  length  =  buffer.length;  i  <  length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buffer,  offset+1);  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  length  =  buffer.length;  i  <  length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buffer,  offset+1);  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(length  >  0)  {  for(int  i  =  0,  length  =  buffer.length;  i  <  length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buffer,  offset+1);  }	  if(length    >    0)    {    for(int    i    =    0,    length    =    buffer.length;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buffer,    offset+i);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
325	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  buffer  =  offset;  i  <  length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buffer,  offset+i);  }  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  buffer  =  offset;  i  <  length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buffer,  offset+i);  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(length  >  0)  {  for(int  i  =  0,  buffer  =  offset;  i  <  length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buffer,  offset+i);  }	  if(length    >    0)    {    for(int    i    =    0,    length    =    buffer.length;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buffer,    offset+i);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
326	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  bufferLength  =  buffer.length;  i  <  length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buffer,  offset+i);  }  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  bufferLength  =  buffer.length;  i  <  length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buffer,  offset+i);  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(length  >  0)  {  for(int  i  =  0,  bufferLength  =  buffer.length;  i  <  length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buffer,  offset+i);  }	  if(length    >    0)    {    for(int    i    =    0,    length    =    buffer.length;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buffer,    offset+i);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
327	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  >=  0  ||  buffer.length!=  0)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  offset  >=  0  ||  buffer.length!=  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  offset  >=  0  ||  buffer.length!=  0)  {	  if(buffer    ==    null    ||    offset    <    0    ||    buffer.length    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
328	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  >=  0  ||  buffer.length  >=  0)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  offset  >=  0  ||  buffer.length  >=  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  offset  >=  0  ||  buffer.length  >=  0)  {	  if(buffer    ==    null    ||    offset    <    0    ||    buffer.length    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
329	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  >  0)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  >  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  >  0)  {	  if(buffer    ==    null    ||    offset    <    0    ||    buffer.length    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
330	[BUG]  [BUGGY]  InputStream  in  =  readInputStream(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  InputStream  in  =  readInputStream(buffer,  offset,  length);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	InputStream  in  =  readInputStream(buffer,  offset,  length);	  InputStream    in    =    getOutputStream();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
331	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length  -  1);  if(inf!=  null)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length  -  1);  if(inf!=  null)  {  throw  new  IOException( " ");  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length  -  1);  if(inf!=  null)  {  throw  new  IOException( " ");  }	  Inflater    inf    =    entryEncoding.encode(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
332	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length  +  1);  if(inf!=  null)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length  +  1);  if(inf!=  null)  {  throw  new  IOException( " ");  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length  +  1);  if(inf!=  null)  {  throw  new  IOException( " ");  }	  Inflater    inf    =    entryEncoding.encode(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
333	[BUG]  [BUGGY]  Inflater  inf  =  zipEncoding.encode(buffer,  offset,  length);  if(inf  ==  null)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  zipEncoding.encode(buffer,  offset,  length);  if(inf  ==  null)  {  throw  new  IOException( " ");  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  zipEncoding.encode(buffer,  offset,  length);  if(inf  ==  null)  {  throw  new  IOException( " ");  }	  Inflater    inf    =    entryEncoding.encode(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
334	[BUG]  [BUGGY]  if(buffer  ==  null  ||  off  <  0)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  off  <  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  off  <  0)  {	  if(buffer    ==    null    ||    length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
335	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  >=  0  ||  length  ==  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  offset  >=  0  ||  length  ==  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  offset  >=  0  ||  length  ==  0)  {	  if(buffer    ==    null    ||    offset    <    0    ||    length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
336	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  =  0  ||  length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  offset  <  =  0  ||  length  ==  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  offset  <  =  0  ||  length  ==  0)  {	  if(buffer    ==    null    ||    offset    <    0    ||    length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
337	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  current.length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  offset  <  current.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  offset  <  current.length)  {	  if(buffer    ==    null    ||    length    <    =    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
338	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  zipEncoding);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  zipEncoding);	  Inflater    inf    =    entryEncoding.encode(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
339	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  ze);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  ze);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  ze);	  Inflater    inf    =    entryEncoding.encode(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
340	[BUG]  [BUGGY]  if(current  ==  null  ||  buffer.length  <  0  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current  ==  null  ||  buffer.length  <  0  ||  length  >  buffer.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current  ==  null  ||  buffer.length  <  0  ||  length  >  buffer.length)  {	  if(buffer    ==    null    ||    length    <    0    ||    buffer.length    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
341	[BUG]  [BUGGY]  if(current  ==  null  ||  offset  <  0  ||  buffer.length  >  current.entry.length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current  ==  null  ||  offset  <  0  ||  buffer.length  >  current.entry.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current  ==  null  ||  offset  <  0  ||  buffer.length  >  current.entry.length)  {	  if(current!=    null    ||    buffer.length    <    0    ||    offset    >    current.entry.length)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
342	[BUG]  [BUGGY]  if(buffer  ==  null  ||  current.entry  <  0  ||  offset  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  current.entry  <  0  ||  offset  >  buffer.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  current.entry  <  0  ||  offset  >  buffer.length)  {	  if(buffer    ==    null    ||    buffer.length    <    0    ||    offset    >    current.entry.length)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
343	[BUG]  [BUGGY]  InputStream  in  =  readInputStream();  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  InputStream  in  =  readInputStream();  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	InputStream  in  =  readInputStream();	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
344	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  buffer.length  +  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  buffer.length  +  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  offset  <  0  ||  buffer.length  +  length)  {	  if(buffer    ==    null    ||    offset    <    0    ||    buffer.length    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
345	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  buffer.length  >  end)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  buffer.length  >  end)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  offset  <  0  ||  buffer.length  >  end)  {	  if(buffer    ==    null    ||    offset    <    0    ||    buffer.length    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
346	[BUG]  [BUGGY]  if(buffer  ==  null  ||  current.length  <  0  ||  offset  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  current.length  <  0  ||  offset  >  buffer.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  current.length  <  0  ||  offset  >  buffer.length)  {	  if(buffer    ==    null    ||    buffer.length    <    0    ||    offset    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
347	[BUG]  [BUGGY]  if(current  ==  null  ||  buffer.length  <  0  ||  offset  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current  ==  null  ||  buffer.length  <  0  ||  offset  >  buffer.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current  ==  null  ||  buffer.length  <  0  ||  offset  >  buffer.length)  {	  if(buffer    ==    null    ||    buffer.length    <    0    ||    offset    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
348	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  >=  0  ||  buffer.length  <  0)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  offset  >=  0  ||  buffer.length  <  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  offset  >=  0  ||  buffer.length  <  0)  {	  if(buffer    ==    null    ||    offset    <    0    ||    buffer.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
349	[BUG]  [BUGGY]  if(buffer  ==  null  ||  current.entry  >=  null)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  current.entry  >=  null)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  current.entry  >=  null)  {	  if(current.entry    ==    null    ||    buffer.length    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
350	[BUG]  [BUGGY]  if(buffer  ==  null  ||  length  <  =  0  ||  buffer.length  >  current.length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  length  <  =  0  ||  buffer.length  >  current.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  length  <  =  0  ||  buffer.length  >  current.length)  {	  if(current    ==    null    ||    buffer.length    <    =    0    ||    length    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
351	[BUG]  [BUGGY]  Inflater  inf  =  this.in.read(buffer,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  this.in.read(buffer,  offset,  length  +  1);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  this.in.read(buffer,  offset,  length  +  1);	  Inflater    inf    =    this.in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
352	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  >  length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  >  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  >  length)  {	  if(buffer    ==    null    ||    buffer.length    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
353	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length  -  1);  if(inf!=  null)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length  -  1);  if(inf!=  null)  {  return  0;  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length  -  1);  if(inf!=  null)  {  return  0;  }	  Inflater    inf    =    entryEncoding.encode(buffer,    offset,    length);    if(inf!=    null)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
354	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length  +  1);  if(inf!=  null)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length  +  1);  if(inf!=  null)  {  return  0;  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length  +  1);  if(inf!=  null)  {  return  0;  }	  Inflater    inf    =    entryEncoding.encode(buffer,    offset,    length);    if(inf!=    null)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
355	[BUG]  [BUGGY]  InputStream  in  =  new  BoundedInputStream(buffer,  offset,  length  -  buffer.length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  InputStream  in  =  new  BoundedInputStream(buffer,  offset,  length  -  buffer.length);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	InputStream  in  =  new  BoundedInputStream(buffer,  offset,  length  -  buffer.length);	  InputStream    in    =    new    BoundedInputStream(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
356	[BUG]  [BUGGY]  InputStream  in  =  new  BoundedInputStream(buffer,  offset,  length  -  2);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  InputStream  in  =  new  BoundedInputStream(buffer,  offset,  length  -  2);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	InputStream  in  =  new  BoundedInputStream(buffer,  offset,  length  -  2);	  InputStream    in    =    new    BoundedInputStream(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
357	[BUG]  [BUGGY]  InputStream  in  =  new  BoundedInputStream(buffer,  0,  offset  +  length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  InputStream  in  =  new  BoundedInputStream(buffer,  0,  offset  +  length);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	InputStream  in  =  new  BoundedInputStream(buffer,  0,  offset  +  length);	  InputStream    in    =    new    BoundedInputStream(buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
358	[BUG]  [BUGGY]  InputStream  in  =  new  BoundedInputStream(buffer,  0,  offset);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  InputStream  in  =  new  BoundedInputStream(buffer,  0,  offset);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	InputStream  in  =  new  BoundedInputStream(buffer,  0,  offset);	  InputStream    in    =    new    BoundedInputStream(buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
359	[BUG]  [BUGGY]  InputStream  in  =  new  BoundedInputStream(buffer,  0,  inputStream.length);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  InputStream  in  =  new  BoundedInputStream(buffer,  0,  inputStream.length);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	InputStream  in  =  new  BoundedInputStream(buffer,  0,  inputStream.length);	  InputStream    in    =    new    BoundedInputStream(buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
360	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  len  =  buffer.length;  i  <  len;  ++i)  {  current.getEntry(i);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  len  =  buffer.length;  i  <  len;  ++i)  {  current.getEntry(i);  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(length  >  0)  {  for(int  i  =  0,  len  =  buffer.length;  i  <  len;  ++i)  {  current.getEntry(i);  }	  if(length    >    0)    {    for(int    i    =    0,    length    =    buffer.length;    i    <    length;    ++i)    {    current.getEntry(i);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
361	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  size  =  buffer.length;  i  <  size;  ++i)  {  current.getEntry(i);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  size  =  buffer.length;  i  <  size;  ++i)  {  current.getEntry(i);  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(length  >  0)  {  for(int  i  =  0,  size  =  buffer.length;  i  <  size;  ++i)  {  current.getEntry(i);  }	  if(length    >    0)    {    for(int    i    =    0,    length    =    buffer.length;    i    <    length;    ++i)    {    current.getEntry(i);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
362	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  length  =  buffer.length;  i  <  length;  ++i)  {  current.setEntry(i);  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  length  =  buffer.length;  i  <  length;  ++i)  {  current.setEntry(i);  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(length  >  0)  {  for(int  i  =  0,  length  =  buffer.length;  i  <  length;  ++i)  {  current.setEntry(i);  }	  if(length    >    0)    {    for(int    i    =    0,    length    =    buffer.length;    i    <    length;    ++i)    {    current.getEntry(i);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
363	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  2  ||  offset  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  2  ||  offset  >  buffer.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  <  2  ||  offset  >  buffer.length)  {	  if(buffer    ==    null    ||    buffer.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
364	[BUG]  [BUGGY]  if(buffer!=  null  ||  current.entry.length  <  0)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer!=  null  ||  current.entry.length  <  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer!=  null  ||  current.entry.length  <  0)  {	  if(current.entry!=    null    ||    buffer.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
365	[BUG]  [BUGGY]  if(current  ==  null  ||  buffer.length  <  0  ||  offset  +  length  >  current.entry.length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current  ==  null  ||  buffer.length  <  0  ||  offset  +  length  >  current.entry.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current  ==  null  ||  buffer.length  <  0  ||  offset  +  length  >  current.entry.length)  {	  if(current    ==    null    ||    buffer.length    <    0    ||    offset    >    current.entry.length)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
366	[BUG]  [BUGGY]  InputStream  in  =  inputStream.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  InputStream  in  =  inputStream.read(buffer,  offset,  length);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	InputStream  in  =  inputStream.read(buffer,  offset,  length);	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
367	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  offset  +  length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  offset  +  length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  length);  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  offset  +  length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  length);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
368	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  length);  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  length);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
369	[BUG]  [BUGGY]  if(buffered  ==  null  ||  offset  <  0)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffered  ==  null  ||  offset  <  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffered  ==  null  ||  offset  <  0)  {	  if(buffered    ==    null    ||    buffer.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
370	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  +  length  >  current.length)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  +  length  >  current.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  +  length  >  current.length)  {	  if(buffer    ==    null    ||    buffer.length    <    0    ||    length    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
371	[BUG]  [BUGGY]  if(buffer  ==  null  ||  current.entry  <  0)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  current.entry  <  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  current.entry  <  0)  {	  if(current.entry    ==    null    ||    buffer.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
372	[BUG]  [BUGGY]  if(current.sentry  ==  null  ||  buffer.length!=  0)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current.sentry  ==  null  ||  buffer.length!=  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current.sentry  ==  null  ||  buffer.length!=  0)  {	  if(current.sentry    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
373	[BUG]  [BUGGY]  if(current.sentry  ==  null  ||  buffer.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current.sentry  ==  null  ||  buffer.length  ==  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current.sentry  ==  null  ||  buffer.length  ==  0)  {	  if(current.sentry    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
374	[BUG]  [BUGGY]  if(current.sentry  ==  null  ||  buffer.length  <  0)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current.sentry  ==  null  ||  buffer.length  <  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current.sentry  ==  null  ||  buffer.length  <  0)  {	  if(current.sentry    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
375	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  >=  0  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  offset  >=  0  ||  length  >  buffer.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  offset  >=  0  ||  length  >  buffer.length)  {	  if(buffer    ==    null    ||    offset    <    0    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
376	[BUG]  [BUGGY]  InputStream  in  =  read(buffer,  offset,  length  -  buffer.length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  InputStream  in  =  read(buffer,  offset,  length  -  buffer.length);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	InputStream  in  =  read(buffer,  offset,  length  -  buffer.length);	  InputStream    in    =    read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
377	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length  -  1);  if(inf!=  null)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length  -  1);  if(inf!=  null)  {  return  -1;  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length  -  1);  if(inf!=  null)  {  return  -1;  }	  Inflater    inf    =    entryEncoding.encode(buffer,    offset,    length);    if(inf!=    null)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
378	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length  +  1);  if(inf!=  null)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length  +  1);  if(inf!=  null)  {  return  -1;  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length  +  1);  if(inf!=  null)  {  return  -1;  }	  Inflater    inf    =    entryEncoding.encode(buffer,    offset,    length);    if(inf!=    null)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
379	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  zipEncoding);  if(inf!=  null)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  zipEncoding);  if(inf!=  null)  {  return  -1;  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  zipEncoding);  if(inf!=  null)  {  return  -1;  }	  Inflater    inf    =    entryEncoding.encode(buffer,    offset,    length);    if(inf!=    null)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
380	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream(in);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  getInputStream(in);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  getInputStream(in);	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
381	[BUG]  [BUGGY]  if(current  ==  null  ||  offset!=  length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current  ==  null  ||  offset!=  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current  ==  null  ||  offset!=  length)  {	  if(buffer    ==    null    ||    length!=    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
382	[BUG]  [BUGGY]  in.close(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  in.close(buffer,  offset,  length);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	in.close(buffer,  offset,  length);	  in.close();    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
383	[BUG]  [BUGGY]  in.skipChild(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  in.skipChild(buffer,  offset,  length);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	in.skipChild(buffer,  offset,  length);	  in.close();    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
384	[BUG]  [BUGGY]  if(buffer  ==  null  ||  current.entry  <  0  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  current.entry  <  0  ||  length  >  buffer.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  current.entry  <  0  ||  length  >  buffer.length)  {	  if(buffer    ==    null    ||    buffer.length    <    0    ||    length    >    current.entry.length)    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
385	[BUG]  [BUGGY]  if(buffer!=  null  ||  current.entry  ==  null)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer!=  null  ||  current.entry  ==  null)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer!=  null  ||  current.entry  ==  null)  {	  if(buffer    ==    null    ||    current.entry    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
386	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  >=  0  ||  buffer.length  >  current.entry.length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  offset  >=  0  ||  buffer.length  >  current.entry.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  offset  >=  0  ||  buffer.length  >  current.entry.length)  {	  if(buffer    ==    null    ||    offset    <    0    ||    buffer.length    >    current.entry.length)    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
387	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  current.entry.length  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  current.entry.length  >  buffer.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  offset  <  0  ||  current.entry.length  >  buffer.length)  {	  if(buffer    ==    null    ||    offset    <    0    ||    buffer.length    >    current.entry.length)    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
388	[BUG]  [BUGGY]  Inflater  inf  =  openInputStream(buffer,  offset,  length  -  buffer.length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  openInputStream(buffer,  offset,  length  -  buffer.length);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  openInputStream(buffer,  offset,  length  -  buffer.length);	  Inflater    inf    =    openInputStream(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
389	[BUG]  [BUGGY]  Inflater  inf  =  openInputStream(buffer,  offset,  length,  inputStream);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  openInputStream(buffer,  offset,  length,  inputStream);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  openInputStream(buffer,  offset,  length,  inputStream);	  Inflater    inf    =    openInputStream(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
390	[BUG]  [BUGGY]  if(length  ==  0  ||  buffer.length  ==  offset)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(length  ==  0  ||  buffer.length  ==  offset)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(length  ==  0  ||  buffer.length  ==  offset)  {	  if(length    ==    0    ||    buffer.length!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
391	[BUG]  [BUGGY]  if(length  ==  0  ||  buffer.length  >=  length)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(length  ==  0  ||  buffer.length  >=  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(length  ==  0  ||  buffer.length  >=  length)  {	  if(length    ==    0    ||    buffer.length!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
392	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  current.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  current.length  ==  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  offset  <  0  ||  current.length  ==  0)  {	  if(buffer    ==    null    ||    current.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
393	[BUG]  [BUGGY]  InputStream  in  =  new  BoundedInputStream(buffer,  0,  length  -  1);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  InputStream  in  =  new  BoundedInputStream(buffer,  0,  length  -  1);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	InputStream  in  =  new  BoundedInputStream(buffer,  0,  length  -  1);	  InputStream    in    =    new    BoundedInputStream(buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
394	[BUG]  [BUGGY]  InputStream  in  =  new  BoundedInputStream(buffer,  offset  +  length);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  InputStream  in  =  new  BoundedInputStream(buffer,  offset  +  length);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	InputStream  in  =  new  BoundedInputStream(buffer,  offset  +  length);	  InputStream    in    =    new    BoundedInputStream(buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
395	[BUG]  [BUGGY]  if(buffer  ==  null  ||  current.entry!=  length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  current.entry!=  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  current.entry!=  length)  {	  if(current.entry    ==    null    ||    buffer.length!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
396	[BUG]  [BUGGY]  if(current.entry  ==  null  ||  buffer.length  ==  null)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current.entry  ==  null  ||  buffer.length  ==  null)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current.entry  ==  null  ||  buffer.length  ==  null)  {	  if(buffer    ==    null    ||    current.entry    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
397	[BUG]  [BUGGY]  if(current  ==  null  ||  buffer.entry  ==  null)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current  ==  null  ||  buffer.entry  ==  null)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current  ==  null  ||  buffer.entry  ==  null)  {	  if(buffer    ==    null    ||    current.entry    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
398	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  ==  current.entry)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  ==  current.entry)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  ==  current.entry)  {	  if(buffer    ==    null    ||    current.entry    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
399	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  ==  current.entry.length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  ==  current.entry.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  ==  current.entry.length)  {	  if(current.entry!=    null    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
400	[BUG]  [BUGGY]  Inflater  inf  =  this.in.read(buffer,  offset,  length,  this.length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  this.in.read(buffer,  offset,  length,  this.length);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  this.in.read(buffer,  offset,  length,  this.length);	  Inflater    inf    =    this.in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
401	[BUG]  [BUGGY]  if(buffer  ==  null  ||  length!=  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  length!=  buffer.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  length!=  buffer.length)  {	  if(current    ==    null    ||    buffer.length!=    offset)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
402	[BUG]  [BUGGY]  if(buffer  ==  null  ||  off  >=  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  off  >=  buffer.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  off  >=  buffer.length)  {	  if(current    ==    null    ||    buffer.length!=    offset)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
403	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  zipEncoding);  if(inf!=  null)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  zipEncoding);  if(inf!=  null)  {  throw  new  IOException( " ");  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  zipEncoding);  if(inf!=  null)  {  throw  new  IOException( " ");  }	  Inflater    inf    =    entryEncoding.encode(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
404	[BUG]  [BUGGY]  Inflater  inf  =  this.entryEncoding.encode(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  this.entryEncoding.encode(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  IOException( " ");  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  this.entryEncoding.encode(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  IOException( " ");  }	  Inflater    inf    =    entryEncoding.encode(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
405	[BUG]  [BUGGY]  InputStream  in  =  getOutputStream().readInt();  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  InputStream  in  =  getOutputStream().readInt();  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	InputStream  in  =  getOutputStream().readInt();	  InputStream    in    =    getOutputStream();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
406	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  length  <  0)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  length  <  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  <  0  ||  length  <  0)  {	  if(buffer    ==    null    ||    offset    <    0    ||    buffer.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
407	[BUG]  [BUGGY]  if(buffer  ==  null  ||  length  ==  0  ||  buffer.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  length  ==  0  ||  buffer.length  ==  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  length  ==  0  ||  buffer.length  ==  0)  {	  if(buffer    ==    null    ||    offset    ==    0    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
408	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  ==  0  ||  length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  ==  0  ||  length  ==  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  ==  0  ||  length  ==  0)  {	  if(buffer    ==    null    ||    offset    ==    0    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
409	[BUG]  [BUGGY]  if(buffer.length  ==  0  ||  offset!=  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer.length  ==  0  ||  offset!=  buffer.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer.length  ==  0  ||  offset!=  buffer.length)  {	  if(length    ==    0    ||    buffer.length!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
410	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  buffer.length  >  current.length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  buffer.length  >  current.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  <  0  ||  buffer.length  >  current.length)  {	  if(buffer    ==    null    ||    length    <    0    ||    buffer.length    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
411	[BUG]  [BUGGY]  if(buffer  ==  null  ||  current.length  <  0  ||  buffer.length  >  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  current.length  <  0  ||  buffer.length  >  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  current.length  <  0  ||  buffer.length  >  length)  {	  if(buffer    ==    null    ||    length    <    0    ||    buffer.length    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
412	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  buffer.length  >  length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  buffer.length  >  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  <  0  ||  buffer.length  >  length)  {	  if(buffer    ==    null    ||    length    <    0    ||    buffer.length    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
413	[BUG]  [BUGGY]  if(buffer  ==  null  ||  length  <  =  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  length  <  =  buffer.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  length  <  =  buffer.length)  {	  if(buffered    ==    null    ||    buffer.length    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
414	[BUG]  [BUGGY]  if(buffer!=  null  ||  current.entry  <  0)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer!=  null  ||  current.entry  <  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer!=  null  ||  current.entry  <  0)  {	  if(current.entry!=    null    ||    buffer.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
415	[BUG]  [BUGGY]  Inflater  inf  =  this.in.read(buffer,  offset,  length,  0);  if(inf!=  null)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  this.in.read(buffer,  offset,  length,  0);  if(inf!=  null)  {  throw  new  IOException( " ");  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  this.in.read(buffer,  offset,  length,  0);  if(inf!=  null)  {  throw  new  IOException( " ");  }	  Inflater    inf    =    this.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
416	[BUG]  [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(in!=  null)  {  in.close();  }  else  {  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  }	  in.close();    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
417	[BUG]  [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(in!=  null)  {  in.close();  }  else  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  }	  in.close();    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
418	[BUG]  [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  return  -1;  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(in!=  null)  {  in.close();  }  else  {  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  return  -1;  }	  in.close();    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
419	[BUG]  [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  return  0;  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  return  0;  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(in!=  null)  {  in.close();  }  else  {  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  return  0;  }	  in.close();    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
420	[BUG]  [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  System.arraycopy(buffer,  offset,  buffer,  off,  length);  }  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  System.arraycopy(buffer,  offset,  buffer,  off,  length);  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(in!=  null)  {  in.close();  }  else  {  System.arraycopy(buffer,  offset,  buffer,  off,  length);  }	  in.close();    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
421	[BUG]  [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(in!=  null)  {  in.close();  }  else  {  throw  new  IOException( " ");  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(in!=  null)  {  in.close();  }  else  {  throw  new  IOException( " ");  }	  in.close();    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
422	[BUG]  [BUGGY]  if(buffer  ==  null  ||  current.entry  <  length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  current.entry  <  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  current.entry  <  length)  {	  if(current.entry    ==    null    ||    buffer.length    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
423	[BUG]  [BUGGY]  if(buffer  ==  null  ||  off  <  0  ||  buffer.length  >  current.entry.length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  off  <  0  ||  buffer.length  >  current.entry.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  off  <  0  ||  buffer.length  >  current.entry.length)  {	  if(buffer    ==    null    ||    offset    <    0    ||    buffer.length    >    current.entry.length)    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
424	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  buffer.length  >  current.entry.length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  buffer.length  >  current.entry.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  <  0  ||  buffer.length  >  current.entry.length)  {	  if(buffer    ==    null    ||    offset    <    0    ||    buffer.length    >    current.entry.length)    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
425	[BUG]  [BUGGY]  this.entryEncoding  =  entryEncoding.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  this.entryEncoding  =  entryEncoding.read(buffer,  offset,  length);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	this.entryEncoding  =  entryEncoding.read(buffer,  offset,  length);	  init();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
426	[BUG]  [BUGGY]  this.entryEncoding  =  entryEncoding.encode(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  this.entryEncoding  =  entryEncoding.encode(buffer,  offset,  length);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	this.entryEncoding  =  entryEncoding.encode(buffer,  offset,  length);	  init();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
427	[BUG]  [BUGGY]  this.entryEncoding  =  entryEncoding.readEntry(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  this.entryEncoding  =  entryEncoding.readEntry(buffer,  offset,  length);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	this.entryEncoding  =  entryEncoding.readEntry(buffer,  offset,  length);	  init();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
428	[BUG]  [BUGGY]  this.entryEncoding  =  entryEncoding.readUTF();  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  this.entryEncoding  =  entryEncoding.readUTF();  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	this.entryEncoding  =  entryEncoding.readUTF();	  init();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
429	[BUG]  [BUGGY]  this.entryEncoding  =  entryEncoding.decode(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  this.entryEncoding  =  entryEncoding.decode(buffer,  offset,  length);  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	this.entryEncoding  =  entryEncoding.decode(buffer,  offset,  length);	  init();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
430	[BUG]  [BUGGY]  this.entryEncoding  =  entryEncoding.read();  [CE]  illegal  start  of  type  [FE]                                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  this.entryEncoding  =  entryEncoding.read();  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	this.entryEncoding  =  entryEncoding.read();	  init();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
431	[BUG]  [BUGGY]  if(current.sentry  ==  null  ||  buffer.length  <  0  ||  length  >  current.length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current.sentry  ==  null  ||  buffer.length  <  0  ||  length  >  current.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current.sentry  ==  null  ||  buffer.length  <  0  ||  length  >  current.length)  {	  if(current.sentry    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
432	[BUG]  [BUGGY]  if(current  ==  null  ||  length  <  0  ||  buffer.length  >  current.entry.length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current  ==  null  ||  length  <  0  ||  buffer.length  >  current.entry.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current  ==  null  ||  length  <  0  ||  buffer.length  >  current.entry.length)  {	  if(current    ==    null    ||    offset    <    0    ||    length    >    current.entry.length)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
433	[BUG]  [BUGGY]  Inflater  inf  =  readInputStream();  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  readInputStream();  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  readInputStream();	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
434	[BUG]  [BUGGY]  if(buffer  ==  null  ||  length  <  0  ||  buffer.length  >  length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  length  <  0  ||  buffer.length  >  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  length  <  0  ||  buffer.length  >  length)  {	  if(current    ==    null    ||    buffer.length    <    0    ||    offset    >    length)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
435	[BUG]  [BUGGY]  if(length  <  =  0)  {  for(int  i  =  0,  length  =  buffer.length;  i  <  length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buffer,  offset+i);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(length  <  =  0)  {  for(int  i  =  0,  length  =  buffer.length;  i  <  length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buffer,  offset+i);  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(length  <  =  0)  {  for(int  i  =  0,  length  =  buffer.length;  i  <  length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buffer,  offset+i);  }	  if(length    >    0)    {    for(int    i    =    0,    length    =    buffer.length;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buffer,    offset+i);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
436	[BUG]  [BUGGY]  for(int  i  =  0,  length  =  buffer.length;  i  <  length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buffer,  offset+i);  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  for(int  i  =  0,  length  =  buffer.length;  i  <  length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buffer,  offset+i);  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	for(int  i  =  0,  length  =  buffer.length;  i  <  length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buffer,  offset+i);  }	  if(length    >    0)    {    for(int    i    =    0,    length    =    buffer.length;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buffer,    offset+i);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
437	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  buffer.length;  i  <  length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buffer,  offset+i);  }  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  buffer.length;  i  <  length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buffer,  offset+i);  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(length  >  0)  {  for(int  i  =  0,  buffer.length;  i  <  length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buffer,  offset+i);  }	  if(length    >    0)    {    for(int    i    =    0,    length    =    buffer.length;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buffer,    offset+i);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
438	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  2  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  2  ||  length  >  buffer.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  <  2  ||  length  >  buffer.length)  {	  if(buffer    ==    null    ||    buffer.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
439	[BUG]  [BUGGY]  if(buffered  ==  null  ||  length  ==  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffered  ==  null  ||  length  ==  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffered  ==  null  ||  length  ==  0)  {	  if(buffered    ==    null    ||    offset    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
440	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  current.length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  current.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  <  current.length)  {	  if(buffer    ==    null    ||    length    <    =    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
441	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  buffer.length  +  length  >  current.length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  buffer.length  +  length  >  current.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  offset  <  0  ||  buffer.length  +  length  >  current.length)  {	  if(buffer    ==    null    ||    offset    <    0    ||    buffer.length    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
442	[BUG]  [BUGGY]  if(buffer  ==  null  ||  off  <  0  ||  buffer.length  >  current.length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  off  <  0  ||  buffer.length  >  current.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  off  <  0  ||  buffer.length  >  current.length)  {	  if(buffer    ==    null    ||    offset    <    0    ||    buffer.length    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
443	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  end)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  end)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  <  end)  {	  if(buffer    ==    null    ||    buffer.length    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
444	[BUG]  [BUGGY]  Inflater  inf  =  current.getInputStream();  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  current.getInputStream();  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  current.getInputStream();	  in.defaultRead();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
445	[BUG]  [BUGGY]  Inflater  inf  =  this.in.read();  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  this.in.read();  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  this.in.read();	  in.defaultRead();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
446	[BUG]  [BUGGY]  if(current.entry!=  null  ||  buffer.length  <  0  ||  offset  >  current.entry.length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current.entry!=  null  ||  buffer.length  <  0  ||  offset  >  current.entry.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current.entry!=  null  ||  buffer.length  <  0  ||  offset  >  current.entry.length)  {	  if(current!=    null    ||    buffer.length    <    0    ||    offset    >    current.entry.length)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
447	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  length);  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  length);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
448	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  +  length  >  current.entry.length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  +  length  >  current.entry.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  +  length  >  current.entry.length)  {	  if(buffer    ==    null    ||    buffer.length    <    0    ||    length    >    current.entry.length)    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
449	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  length  >  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  length  >  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  <  0  ||  length  >  length)  {	  if(buffer    ==    null    ||    buffer.length    <    0    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
450	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  current.length  >  length)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  current.length  >  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  <  0  ||  current.length  >  length)  {	  if(buffer    ==    null    ||    buffer.length    <    0    ||    length    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
451	[BUG]  [BUGGY]  if(buffer  ==  null  ||  length  ==  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  length  ==  buffer.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  length  ==  buffer.length)  {	  if(buffer!=    null    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
452	[BUG]  [BUGGY]  if(buffered!=  null  ||  buffer.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffered!=  null  ||  buffer.length  ==  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffered!=  null  ||  buffer.length  ==  0)  {	  if(buffer!=    null    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
453	[BUG]  [BUGGY]  if(buffer  ==  null  ||  off  <  0  ||  buffer.length  <  0)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  off  <  0  ||  buffer.length  <  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  off  <  0  ||  buffer.length  <  0)  {	  if(buffer    ==    null    ||    length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
454	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  >=  length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  >=  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  >=  length)  {	  if(buffer    ==    null    ||    offset    <    0    ||    buffer.length    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
455	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  length  >  0)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  length  >  0)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  <  0  ||  length  >  0)  {	  if(buffer    ==    null    ||    offset    <    0    ||    buffer.length    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
456	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  >>  current.entry.length)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  >>  current.entry.length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  >>  current.entry.length)  {	  if(buffer    ==    null    ||    buffer.length    <    0    ||    offset    >    current.entry.length)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
457	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  zipEncoding);  if(inf!=  null)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  zipEncoding);  if(inf!=  null)  {  return  0;  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  zipEncoding);  if(inf!=  null)  {  return  0;  }	  Inflater    inf    =    entryEncoding.encode(buffer,    offset,    length);    if(inf!=    null)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
458	[BUG]  [BUGGY]  Inflater  inf  =  this.entryEncoding.encode(buffer,  offset,  length);  if(inf!=  null)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  Inflater  inf  =  this.entryEncoding.encode(buffer,  offset,  length);  if(inf!=  null)  {  return  0;  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	Inflater  inf  =  this.entryEncoding.encode(buffer,  offset,  length);  if(inf!=  null)  {  return  0;  }	  Inflater    inf    =    entryEncoding.encode(buffer,    offset,    length);    if(inf!=    null)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
459	[BUG]  [BUGGY]  if(current  ==  null  ||  buffer.entry!=  null)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(current  ==  null  ||  buffer.entry!=  null)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(current  ==  null  ||  buffer.entry!=  null)  {	  if(buffer    ==    null    ||    current.entry!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
460	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0,  length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0,  length)  {  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	if(buffer  ==  null  ||  buffer.length  <  0,  length)  {	  if(buffer    ==    null    ||    buffer.length    <    =    offset)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
461	[BUG]  [BUGGY]  while(length  >  0)  {  for(int  i  =  0,  length  =  buffer.length;  i  <  length;  ++i)  {  current.getEntry(i);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  while(length  >  0)  {  for(int  i  =  0,  length  =  buffer.length;  i  <  length;  ++i)  {  current.getEntry(i);  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	while(length  >  0)  {  for(int  i  =  0,  length  =  buffer.length;  i  <  length;  ++i)  {  current.getEntry(i);  }	  if(length    >    0)    {    for(int    i    =    0,    length    =    buffer.length;    i    <    length;    ++i)    {    current.getEntry(i);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
462	[BUG]  [BUGGY]  while(current.entrySet().size()  >  0)  {  for(int  i  =  0,  length  =  buffer.length;  i  <  length;  ++i)  {  current.getEntry(i);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(     "The  stream  is  closed     ");  }      [BUGGY]  while(current.entrySet().size()  >  0)  {  for(int  i  =  0,  length  =  buffer.length;  i  <  length;  ++i)  {  current.getEntry(i);  }  [BUGGY]      return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	while(current.entrySet().size()  >  0)  {  for(int  i  =  0,  length  =  buffer.length;  i  <  length;  ++i)  {  current.getEntry(i);  }	  if(length    >    0)    {    for(int    i    =    0,    length    =    buffer.length;    i    <    length;    ++i)    {    current.getEntry(i);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
