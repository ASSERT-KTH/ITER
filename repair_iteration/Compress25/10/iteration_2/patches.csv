bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  new  ByteBuffer(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  new  ByteBuffer(buf[i]);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  new  ByteBuffer(buf[i]);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteBuffer(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
2	[BUG]  [BUGGY]  ||  length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  new  ByteBuffer(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  ||  length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  new  ByteBuffer(buf[i]);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	||  length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  new  ByteBuffer(buf[i]);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteBuffer(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
3	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  new  ByteBuffer(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  new  ByteBuffer(buf[i]);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  new  ByteBuffer(buf[i]);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteBuffer(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
4	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer[i]  =  new  ByteBuffer(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer[i]  =  new  ByteBuffer(buf[i]);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer[i]  =  new  ByteBuffer(buf[i]);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteBuffer(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
5	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buffer[i]  =  new  ByteBuffer(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buffer[i]  =  new  ByteBuffer(buf[i]);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buffer[i]  =  new  ByteBuffer(buf[i]);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteBuffer(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
6	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  current.bytesRead[i]  =  new  ByteBuffer(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  current.bytesRead[i]  =  new  ByteBuffer(buf[i]);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  current.bytesRead[i]  =  new  ByteBuffer(buf[i]);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteBuffer(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
7	[BUG]  [BUGGY]  buffer.remove(buffer,  offset,  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.remove(buffer,  offset,  length,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.remove(buffer,  offset,  length,  current.bytesRead);	  buffer.remove(buffer,    offset,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
8	[BUG]  [BUGGY]  buffer.remove(buffer,  offset,  toRead,  length  -  1);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.remove(buffer,  offset,  toRead,  length  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.remove(buffer,  offset,  toRead,  length  -  1);	  buffer.remove(buffer,    offset,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
9	[BUG]  [BUGGY]  buffer.remove(buffer,  offset,  toRead,  length  +  1);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.remove(buffer,  offset,  toRead,  length  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.remove(buffer,  offset,  toRead,  length  +  1);	  buffer.remove(buffer,    offset,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
10	[BUG]  [BUGGY]  buffer.remove(current.bytesRead,  offset,  toRead,  length);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.remove(current.bytesRead,  offset,  toRead,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.remove(current.bytesRead,  offset,  toRead,  length);	  buffer.remove(buffer,    offset,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
11	[BUG]  [BUGGY]  buffer.remove(buffer,  offset,  toRead,  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.remove(buffer,  offset,  toRead,  length,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.remove(buffer,  offset,  toRead,  length,  current.bytesRead);	  buffer.remove(buffer,    offset,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
12	[BUG]  [BUGGY]  buffer.remove(buffer,  offset,  length,  toRead);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.remove(buffer,  offset,  length,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.remove(buffer,  offset,  length,  toRead);	  buffer.remove(buffer,    offset,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
13	[BUG]  [BUGGY]  buf.get(buffer,  offset,  toRead,  0,  current.length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  toRead,  0,  current.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  toRead,  0,  current.length);	  buf.get(buffer,    offset,    toRead,    length,    current.length);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
14	[BUG]  [BUGGY]  buf.get(buffer,  offset,  toRead,  length,  current.length  +  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  toRead,  length,  current.length  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  toRead,  length,  current.length  +  1);	  buf.get(buffer,    offset,    toRead,    length,    current.length);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
15	[BUG]  [BUGGY]  buf.get(buffer,  offset,  toRead,  length,  current.length  -  toRead);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  toRead,  length,  current.length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  toRead,  length,  current.length  -  toRead);	  buf.get(buffer,    offset,    toRead,    length,    current.length);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
16	[BUG]  [BUGGY]  buf.get(buffer,  offset,  toRead,  csize,  current.length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  toRead,  csize,  current.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  toRead,  csize,  current.length);	  buf.get(buffer,    offset,    toRead,    length,    current.length);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
17	[BUG]  [BUGGY]  buf.get(buffer,  offset,  toRead,  buffer.length,  current.length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  toRead,  buffer.length,  current.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  toRead,  buffer.length,  current.length);	  buf.get(buffer,    offset,    toRead,    length,    current.length);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
18	[BUG]  [BUGGY]  buf.get(buffer,  offset,  toRead,  current.length,  length);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  toRead,  current.length,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  toRead,  current.length,  length);	  buf.get(buffer,    offset,    toRead,    length,    current.length);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
19	[BUG]  [BUGGY]  buf.put(buf,  toRead,  csize);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  toRead,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  toRead,  csize);	  buf.put(buf,    toRead);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
20	[BUG]  [BUGGY]  buf.put(buf,  toRead,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  toRead,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  toRead,  current.bytesRead);	  buf.put(buf,    toRead);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
21	[BUG]  [BUGGY]  System.arraycopy(buf,  off,  current.bytesRead,  0,  toRead);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  System.arraycopy(buf,  off,  current.bytesRead,  0,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	System.arraycopy(buf,  off,  current.bytesRead,  0,  toRead);	  System.arraycopy(buf,    offset,    current.bytesRead,    0,    toRead);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
22	[BUG]  [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buffer.bytesRead,  0,  toRead);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buffer.bytesRead,  0,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	System.arraycopy(current.bytesRead,  offset,  buffer.bytesRead,  0,  toRead);	  System.arraycopy(buf,    offset,    current.bytesRead,    0,    toRead);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
23	[BUG]  [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buf.offset,  toRead);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buf.offset,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	System.arraycopy(current.bytesRead,  offset,  buf.offset,  toRead);	  System.arraycopy(buf,    offset,    current.bytesRead,    0,    toRead);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
24	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead  +  1);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead  +  1);	  System.arraycopy(buf,    offset,    current.bytesRead,    0,    toRead);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
25	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  toRead,  0,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  System.arraycopy(buf,  offset,  toRead,  0,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	System.arraycopy(buf,  offset,  toRead,  0,  current.bytesRead);	  System.arraycopy(buf,    offset,    current.bytesRead,    0,    toRead);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
26	[BUG]  [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buffer,  0,  toRead);  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buffer,  0,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	System.arraycopy(current.bytesRead,  offset,  buffer,  0,  toRead);	  System.arraycopy(buf,    offset,    current.bytesRead,    0,    toRead);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
27	[BUG]  [BUGGY]  buf.set(toRead,  buffer,  off);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(toRead,  buffer,  off);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(toRead,  buffer,  off);	  buf.set(buffer,    toRead,    off);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
28	[BUG]  [BUGGY]  buf.set(buffer,  toRead,  length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  toRead,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  toRead,  length);	  buf.set(buffer,    toRead,    off);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
29	[BUG]  [BUGGY]  buffer.set(buffer,  off,  toRead);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.set(buffer,  off,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.set(buffer,  off,  toRead);	  buf.set(buffer,    toRead,    off);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
30	[BUG]  [BUGGY]  buffer.set(toRead,  buffer,  off);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.set(toRead,  buffer,  off);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.set(toRead,  buffer,  off);	  buf.set(buffer,    toRead,    off);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
31	[BUG]  [BUGGY]  buf.put(toRead,  csize);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(toRead,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(toRead,  csize);	  buf.put(buf,    csize);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
32	[BUG]  [BUGGY]  buf.put(csize,  buffer);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(csize,  buffer);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(csize,  buffer);	  buf.put(buf,    csize);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
33	[BUG]  [BUGGY]  buf.put(lastStoredEntry,  csize);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(lastStoredEntry,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(lastStoredEntry,  csize);	  buf.put(buf,    csize);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
34	[BUG]  [BUGGY]  buf.put(current.bytesRead,  csize);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(current.bytesRead,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(current.bytesRead,  csize);	  buf.put(buf,    csize);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
35	[BUG]  [BUGGY]  buf.put(length,  csize);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(length,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(length,  csize);	  buf.put(buf,    csize);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
36	[BUG]  [BUGGY]  buf.put(0,  csize);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(0,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(0,  csize);	  buf.put(buf,    csize);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
37	[BUG]  [BUGGY]  buffer.put(buf,  toRead,  offset);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.put(buf,  toRead,  offset);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.put(buf,  toRead,  offset);	  buffer.put(buf,    offset,    toRead);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
38	[BUG]  [BUGGY]  buffer.put(buf,  off,  toRead);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.put(buf,  off,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.put(buf,  off,  toRead);	  buffer.put(buf,    offset,    toRead);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
39	[BUG]  [BUGGY]  buffer.put(buf,  offset,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.put(buf,  offset,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.put(buf,  offset,  length);	  buffer.put(buf,    offset,    toRead);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
40	[BUG]  [BUGGY]  buffer.put(buf,  offset,  toRead,  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.put(buf,  offset,  toRead,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.put(buf,  offset,  toRead,  length);	  buffer.put(buf,    offset,    toRead);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
41	[BUG]  [BUGGY]  buffer.put(buf,  offset,  length  -  toRead);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.put(buf,  offset,  length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.put(buf,  offset,  length  -  toRead);	  buffer.put(buf,    offset,    toRead);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
42	[BUG]  [BUGGY]  buffer.put(buf,  offset,  length,  toRead);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.put(buf,  offset,  length,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.put(buf,  offset,  length,  toRead);	  buffer.put(buf,    offset,    toRead);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
43	[BUG]  [BUGGY]  buffer.put(toRead,  offset,  buffer);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.put(toRead,  offset,  buffer);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.put(toRead,  offset,  buffer);	  buffer.put(buf,    offset,    toRead);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
44	[BUG]  [BUGGY]  buf.put(buffer,  offset,  toRead,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  offset,  toRead,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  offset,  toRead,  current.bytesRead);	  buf.put(buffer,    offset,    length,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
45	[BUG]  [BUGGY]  buf.put(buffer,  toRead,  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  toRead,  length,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  toRead,  length,  current.bytesRead);	  buf.put(buffer,    offset,    length,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
46	[BUG]  [BUGGY]  buf.put(buffer,  off,  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  off,  length,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  off,  length,  current.bytesRead);	  buf.put(buffer,    offset,    length,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
47	[BUG]  [BUGGY]  buf.put(current.bytesRead,  offset,  length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(current.bytesRead,  offset,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(current.bytesRead,  offset,  length);	  buf.put(buffer,    offset,    length,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
48	[BUG]  [BUGGY]  buffer.put(buffer,  offset,  toRead,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.put(buffer,  offset,  toRead,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.put(buffer,  offset,  toRead,  current.bytesRead);	  buf.put(buffer,    offset,    length,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
49	[BUG]  [BUGGY]  buffer.put(buffer,  toRead,  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.put(buffer,  toRead,  length,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.put(buffer,  toRead,  length,  current.bytesRead);	  buf.put(buffer,    offset,    length,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
50	[BUG]  [BUGGY]  buffer.remove(buffer,  offset,  toRead);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.remove(buffer,  offset,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.remove(buffer,  offset,  toRead);	  buf.remove(buffer,    length,    toRead);    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
51	[BUG]  [BUGGY]  buf.remove(current.bytesRead,  length,  toRead);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.remove(current.bytesRead,  length,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.remove(current.bytesRead,  length,  toRead);	  buf.remove(buffer,    length,    toRead);    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
52	[BUG]  [BUGGY]  buf.remove(current.bytesRead,  length,  buffer);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.remove(current.bytesRead,  length,  buffer);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.remove(current.bytesRead,  length,  buffer);	  buf.remove(buffer,    length,    toRead);    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
53	[BUG]  [BUGGY]  buf.remove(toRead,  length,  buffer);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.remove(toRead,  length,  buffer);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.remove(toRead,  length,  buffer);	  buf.remove(buffer,    length,    toRead);    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
54	[BUG]  [BUGGY]  Buffer  buf.remove(buffer,  offset,  toRead);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  Buffer  buf.remove(buffer,  offset,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	Buffer  buf.remove(buffer,  offset,  toRead);	  buf.remove(buffer,    length,    toRead);    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
55	[BUG]  [BUGGY]  buf.remove(buffer,  toRead,  length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.remove(buffer,  toRead,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.remove(buffer,  toRead,  length);	  buf.remove(buffer,    length,    toRead);    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
56	[BUG]  [BUGGY]  buf.put(buffer,  toRead,  buffer.offset);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  toRead,  buffer.offset);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  toRead,  buffer.offset);	  buf.put(toRead,    buffer,    offset);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
57	[BUG]  [BUGGY]  buf.put(buffer,  toRead,  buffer.length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  toRead,  buffer.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  toRead,  buffer.length);	  buf.put(toRead,    buffer,    offset);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
58	[BUG]  [BUGGY]  buf.put(offset,  buffer,  toRead);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(offset,  buffer,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(offset,  buffer,  toRead);	  buf.put(toRead,    buffer,    offset);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
59	[BUG]  [BUGGY]  buf.put(toRead,  buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(toRead,  buffer,  offset,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(toRead,  buffer,  offset,  length);	  buf.put(toRead,    buffer,    offset);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
60	[BUG]  [BUGGY]  buf.put(buffer,  toRead,  buffer,  offset);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  toRead,  buffer,  offset);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  toRead,  buffer,  offset);	  buf.put(toRead,    buffer,    offset);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
61	[BUG]  [BUGGY]  buf.delete(buffer,  offset,  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.delete(buffer,  offset,  length,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.delete(buffer,  offset,  length,  current.bytesRead);	  buf.delete(buffer,    offset,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
62	[BUG]  [BUGGY]  buf.delete(buffer,  offset,  toRead,  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.delete(buffer,  offset,  toRead,  length,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.delete(buffer,  offset,  toRead,  length,  current.bytesRead);	  buf.delete(buffer,    offset,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
63	[BUG]  [BUGGY]  buf.delete(buffer,  offset,  toRead,  length,  csize);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.delete(buffer,  offset,  toRead,  length,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.delete(buffer,  offset,  toRead,  length,  csize);	  buf.delete(buffer,    offset,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
64	[BUG]  [BUGGY]  buf.delete(buffer,  offset,  toRead,  length,  current.length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.delete(buffer,  offset,  toRead,  length,  current.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.delete(buffer,  offset,  toRead,  length,  current.length);	  buf.delete(buffer,    offset,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
65	[BUG]  [BUGGY]  buf.delete(buffer,  offset,  toRead,  length  -  1);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.delete(buffer,  offset,  toRead,  length  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.delete(buffer,  offset,  toRead,  length  -  1);	  buf.delete(buffer,    offset,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
66	[BUG]  [BUGGY]  buf.delete(buffer,  offset,  toRead,  length,  size);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.delete(buffer,  offset,  toRead,  length,  size);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.delete(buffer,  offset,  toRead,  length,  size);	  buf.delete(buffer,    offset,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
67	[BUG]  [BUGGY]  buf.put(toRead,  lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(toRead,  lastStoredEntry);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(toRead,  lastStoredEntry);	  buf.put(lastStoredEntry,    toRead);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
68	[BUG]  [BUGGY]  buf.put(lastStoredEntry,  toRead,  length);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(lastStoredEntry,  toRead,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(lastStoredEntry,  toRead,  length);	  buf.put(lastStoredEntry,    toRead);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
69	[BUG]  [BUGGY]  buf.put(lastStoredEntry,  toRead,  csize);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(lastStoredEntry,  toRead,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(lastStoredEntry,  toRead,  csize);	  buf.put(lastStoredEntry,    toRead);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
70	[BUG]  [BUGGY]  buf.put(lastStoredEntry,  toRead,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(lastStoredEntry,  toRead,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(lastStoredEntry,  toRead,  current.bytesRead);	  buf.put(lastStoredEntry,    toRead);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
71	[BUG]  [BUGGY]  buf.set(toRead,  buffer,  offset);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(toRead,  buffer,  offset);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(toRead,  buffer,  offset);	  buf.set(buffer,    toRead,    offset);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
72	[BUG]  [BUGGY]  buffer.set(buffer,  offset,  toRead);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.set(buffer,  offset,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.set(buffer,  offset,  toRead);	  buf.set(buffer,    toRead,    offset);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
73	[BUG]  [BUGGY]  buf.set(offset,  toRead,  buffer);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(offset,  toRead,  buffer);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(offset,  toRead,  buffer);	  buf.set(buffer,    toRead,    offset);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
74	[BUG]  [BUGGY]  buf.get(buffer,  offset,  toRead,  csize);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  toRead,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  toRead,  csize);	  buf.get(buffer,    offset,    csize,    toRead);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
75	[BUG]  [BUGGY]  buf.get(buffer,  off,  toRead,  csize);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  off,  toRead,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  off,  toRead,  csize);	  buf.get(buffer,    offset,    csize,    toRead);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
76	[BUG]  [BUGGY]  buf.get(buffer,  offset,  csize,  toRead,  length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  csize,  toRead,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  csize,  toRead,  length);	  buf.get(buffer,    offset,    csize,    toRead);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
77	[BUG]  [BUGGY]  buf.get(buffer,  off,  csize,  toRead);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  off,  csize,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  off,  csize,  toRead);	  buf.get(buffer,    offset,    csize,    toRead);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
78	[BUG]  [BUGGY]  buffer.get(buffer,  offset,  toRead,  csize);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.get(buffer,  offset,  toRead,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.get(buffer,  offset,  toRead,  csize);	  buf.get(buffer,    offset,    csize,    toRead);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
79	[BUG]  [BUGGY]  buffer.get(buffer,  offset,  length,  toRead);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.get(buffer,  offset,  length,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.get(buffer,  offset,  length,  toRead);	  buf.get(buffer,    offset,    csize,    toRead);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
80	[BUG]  [BUGGY]  buf.set(buffer,  offset,  toRead,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  toRead,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  toRead,  current.bytesRead);	  buf.set(buffer,    offset,    length,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
81	[BUG]  [BUGGY]  buf.set(buffer,  offset,  length,  current.bytesRead,  toRead);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  length,  current.bytesRead,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  length,  current.bytesRead,  toRead);	  buf.set(buffer,    offset,    length,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
82	[BUG]  [BUGGY]  buf.set(buffer,  off,  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  off,  length,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  off,  length,  current.bytesRead);	  buf.set(buffer,    offset,    length,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
83	[BUG]  [BUGGY]  buffer.set(buffer,  offset,  toRead,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.set(buffer,  offset,  toRead,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.set(buffer,  offset,  toRead,  current.bytesRead);	  buf.set(buffer,    offset,    length,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
84	[BUG]  [BUGGY]  buf.set(buffer,  offset,  csize,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  csize,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  csize,  current.bytesRead);	  buf.set(buffer,    offset,    length,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
85	[BUG]  [BUGGY]  buf.set(buffer,  offset,  length,  current.bytesRead,  csize);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  length,  current.bytesRead,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  length,  current.bytesRead,  csize);	  buf.set(buffer,    offset,    length,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
86	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  size);  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  size);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  size);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buf.remaining(),    size);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
87	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  size);  }  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  size);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  size);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buf.remaining(),    size);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
88	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  size);  }  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  size);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  size);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buf.remaining(),    size);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
89	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  length);  }  [CE]  illegal  start  of  type  [FE]                                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  length);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  length);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buf.remaining(),    size);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
90	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  toRead);  }  [CE]  illegal  start  of  type  [FE]                                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  toRead);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buf.remaining(),    size);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
91	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  toRead);  }  [CE]  illegal  start  of  type  [FE]                                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  toRead);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buf.remaining(),    size);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
92	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  current.bytesRead);  }  [CE]  illegal  start  of  type  [FE]                                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  current.bytesRead);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  current.bytesRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buf.remaining(),    size);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
93	[BUG]  [BUGGY]  buf.put(buffer,  toRead,  length  -  1);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  toRead,  length  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  toRead,  length  -  1);	  buf.put(buffer,    offset,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
94	[BUG]  [BUGGY]  buf.put(buffer,  offset,  toRead,  length  -  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  offset,  toRead,  length  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  offset,  toRead,  length  -  1);	  buf.put(buffer,    offset,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
95	[BUG]  [BUGGY]  buf.put(buffer,  offset,  toRead  -  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  offset,  toRead  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  offset,  toRead  -  1);	  buf.put(buffer,    offset,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
96	[BUG]  [BUGGY]  buf.put(buffer,  off,  length  -  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  off,  length  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  off,  length  -  1);	  buf.put(buffer,    offset,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
97	[BUG]  [BUGGY]  buf.put(buffer,  offset,  length,  toRead  -  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  offset,  length,  toRead  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  offset,  length,  toRead  -  1);	  buf.put(buffer,    offset,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
98	[BUG]  [BUGGY]  buf.put(buffer,  length,  buffer.length  -  1);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  length,  buffer.length  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  length,  buffer.length  -  1);	  buf.put(buffer,    offset,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
99	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.reset();  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.reset();  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.reset();  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.reset();    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
100	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.reset();  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.reset();  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.reset();  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.reset();    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
101	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.reset();  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.reset();  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.reset();  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.reset();    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
102	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  current.bytesRead  +=  buf.remaining();  }  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  current.bytesRead  +=  buf.remaining();  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  current.bytesRead  +=  buf.remaining();  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.reset();    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
103	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buf.reset();  }  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buf.reset();  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buf.reset();  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.reset();    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
104	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  current.bytesRead  +=  buf.limit();  }  [CE]  illegal  start  of  type  [FE]                                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  current.bytesRead  +=  buf.limit();  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  current.bytesRead  +=  buf.limit();  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.reset();    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
105	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining());  }  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining());  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining());  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buf.remaining());    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
106	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining());  }  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining());  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining());  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buf.remaining());    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
107	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining());  }  [CE]  illegal  start  of  type  [FE]                                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining());  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining());  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buf.remaining());    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
108	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining());  }  [CE]  illegal  start  of  type  [FE]                                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining());  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining());  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buf.remaining());    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
109	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flag)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining());  }  [CE]  illegal  start  of  type  [FE]                                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flag)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining());  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flag)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining());  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buf.remaining());    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
110	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining()  [CE]  illegal  start  of  type  [FE]                                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining()  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining()	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buf.remaining());    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
111	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  current.bytesRead  =  new  ByteArrayInputStream(buf.remaining());  }  [CE]  illegal  start  of  type  [FE]                                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  current.bytesRead  =  new  ByteArrayInputStream(buf.remaining());  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  current.bytesRead  =  new  ByteArrayInputStream(buf.remaining());  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buf.remaining());    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
112	[BUG]  [BUGGY]  buf.set(buffer,  offset,  length,  toRead,  csize);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  length,  toRead,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  length,  toRead,  csize);	  buf.set(buffer,    offset,    length,    toRead);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
113	[BUG]  [BUGGY]  buf.set(buffer,  offset,  length,  toRead,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  length,  toRead,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  length,  toRead,  current.bytesRead);	  buf.set(buffer,    offset,    length,    toRead);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
114	[BUG]  [BUGGY]  buf.set(buffer,  offset,  length,  toRead,  buffer.length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  length,  toRead,  buffer.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  length,  toRead,  buffer.length);	  buf.set(buffer,    offset,    length,    toRead);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
115	[BUG]  [BUGGY]  buf.set(buffer,  off,  length,  toRead);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  off,  length,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  off,  length,  toRead);	  buf.set(buffer,    offset,    length,    toRead);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
116	[BUG]  [BUGGY]  buf.put(buffer,  off,  toRead,  length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  off,  toRead,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  off,  toRead,  length);	  buf.put(buffer,    toRead,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
117	[BUG]  [BUGGY]  buf.put(buffer,  toRead,  offset,  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  toRead,  offset,  length,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  toRead,  offset,  length,  current.bytesRead);	  buf.put(buffer,    toRead,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
118	[BUG]  [BUGGY]  buf.put(buffer,  length,  offset,  toRead);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  length,  offset,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  length,  offset,  toRead);	  buf.put(buffer,    toRead,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
119	[BUG]  [BUGGY]  buf.put(buffer,  toRead,  offset,  length,  current.length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  toRead,  offset,  length,  current.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  toRead,  offset,  length,  current.length);	  buf.put(buffer,    toRead,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
120	[BUG]  [BUGGY]  buf.put(buffer,  toRead,  offset,  length,  csize);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  toRead,  offset,  length,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  toRead,  offset,  length,  csize);	  buf.put(buffer,    toRead,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
121	[BUG]  [BUGGY]  buf.put(toRead,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(toRead,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(toRead,  current.bytesRead);	  buf.put(current.bytesRead,    toRead);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
122	[BUG]  [BUGGY]  if(toRead  ==  0)  {  buf.put(current.bytesRead,  toRead);  }  else  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(toRead  ==  0)  {  buf.put(current.bytesRead,  toRead);  }  else  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(toRead  ==  0)  {  buf.put(current.bytesRead,  toRead);  }  else  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  }	  buf.put(current.bytesRead,    toRead);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
123	[BUG]  [BUGGY]  if(toRead!=  0)  {  buf.put(current.bytesRead,  toRead);  }  else  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(toRead!=  0)  {  buf.put(current.bytesRead,  toRead);  }  else  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(toRead!=  0)  {  buf.put(current.bytesRead,  toRead);  }  else  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  }	  buf.put(current.bytesRead,    toRead);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
124	[BUG]  [BUGGY]  if(toRead  ==  0)  {  buf.put(current.bytesRead,  toRead);  }  else  {  System.arraycopy(buf,  offset,  current.bytesRead,  length);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(toRead  ==  0)  {  buf.put(current.bytesRead,  toRead);  }  else  {  System.arraycopy(buf,  offset,  current.bytesRead,  length);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(toRead  ==  0)  {  buf.put(current.bytesRead,  toRead);  }  else  {  System.arraycopy(buf,  offset,  current.bytesRead,  length);  }	  buf.put(current.bytesRead,    toRead);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
125	[BUG]  [BUGGY]  if(toRead!=  0)  {  buf.put(current.bytesRead,  toRead);  }  else  {  System.arraycopy(buf,  offset,  current.bytesRead,  length);  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(toRead!=  0)  {  buf.put(current.bytesRead,  toRead);  }  else  {  System.arraycopy(buf,  offset,  current.bytesRead,  length);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(toRead!=  0)  {  buf.put(current.bytesRead,  toRead);  }  else  {  System.arraycopy(buf,  offset,  current.bytesRead,  length);  }	  buf.put(current.bytesRead,    toRead);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
126	[BUG]  [BUGGY]  buf.put(buf,  off,  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  off,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  off,  length);	  buf.put(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
127	[BUG]  [BUGGY]  buf.put(buf,  offset,  length,  toRead);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  offset,  length,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  offset,  length,  toRead);	  buf.put(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
128	[BUG]  [BUGGY]  buf.put(buf,  offset,  length,  csize);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  offset,  length,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  offset,  length,  csize);	  buf.put(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
129	[BUG]  [BUGGY]  buf.put(buf,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  offset,  length  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  offset,  length  +  1);	  buf.put(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
130	[BUG]  [BUGGY]  buf.put(buffer,  offset,  toRead  +  1);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  offset,  toRead  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  offset,  toRead  +  1);	  buf.put(buffer,    offset,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
131	[BUG]  [BUGGY]  buf.put(buffer,  toRead,  length  +  1);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  toRead,  length  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  toRead,  length  +  1);	  buf.put(buffer,    offset,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
132	[BUG]  [BUGGY]  buf.put(buffer,  off,  length  +  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  off,  length  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  off,  length  +  1);	  buf.put(buffer,    offset,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
133	[BUG]  [BUGGY]  buf.put(buffer,  offset,  length,  toRead  +  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  offset,  length,  toRead  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  offset,  length,  toRead  +  1);	  buf.put(buffer,    offset,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
134	[BUG]  [BUGGY]  buf.put(buffer,  offset,  length  -  toRead  +  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  offset,  length  -  toRead  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  offset,  length  -  toRead  +  1);	  buf.put(buffer,    offset,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
135	[BUG]  [BUGGY]  buf.put(toRead,  buffer,  off);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(toRead,  buffer,  off);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(toRead,  buffer,  off);	  buf.put(buffer,    toRead,    off);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
136	[BUG]  [BUGGY]  buf.put(current.bytesRead,  toRead,  off);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(current.bytesRead,  toRead,  off);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(current.bytesRead,  toRead,  off);	  buf.put(buffer,    toRead,    off);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
137	[BUG]  [BUGGY]  buf.put(buffer,  toRead,  csize);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  toRead,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  toRead,  csize);	  buf.put(buffer,    toRead,    off);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
138	[BUG]  [BUGGY]  buf.put(off,  toRead,  buffer);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(off,  toRead,  buffer);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(off,  toRead,  buffer);	  buf.put(buffer,    toRead,    off);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
139	[BUG]  [BUGGY]  buf.put(buf,  toRead,  off);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  toRead,  off);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  toRead,  off);	  buf.put(buf,    off,    toRead);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
140	[BUG]  [BUGGY]  buf.put(toRead,  off,  buffer);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(toRead,  off,  buffer);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(toRead,  off,  buffer);	  buf.put(buf,    off,    toRead);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
141	[BUG]  [BUGGY]  buf.put(buf,  off,  toRead,  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  off,  toRead,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  off,  toRead,  length);	  buf.put(buf,    off,    toRead);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
142	[BUG]  [BUGGY]  buf.put(current.bytesRead,  off,  toRead);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(current.bytesRead,  off,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(current.bytesRead,  off,  toRead);	  buf.put(buf,    off,    toRead);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
143	[BUG]  [BUGGY]  buf.put(buf,  toRead,  offset);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  toRead,  offset);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  toRead,  offset);	  buf.put(buf,    off,    toRead);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
144	[BUG]  [BUGGY]  buf.put(toRead,  buffer,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(toRead,  buffer,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(toRead,  buffer,  length);	  buf.put(buffer,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
145	[BUG]  [BUGGY]  buf.put(buffer,  offset,  toRead,  csize);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  offset,  toRead,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  offset,  toRead,  csize);	  buf.put(buffer,    offset,    length,    csize);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
146	[BUG]  [BUGGY]  buf.put(buffer,  off,  length,  csize);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  off,  length,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  off,  length,  csize);	  buf.put(buffer,    offset,    length,    csize);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
147	[BUG]  [BUGGY]  buf.put(buffer,  toRead,  length,  csize);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  toRead,  length,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  toRead,  length,  csize);	  buf.put(buffer,    offset,    length,    csize);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
148	[BUG]  [BUGGY]  buf.put(buffer,  offset,  length,  csize,  toRead);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  offset,  length,  csize,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  offset,  length,  csize,  toRead);	  buf.put(buffer,    offset,    length,    csize);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
149	[BUG]  [BUGGY]  buf.set(buffer,  offset,  length,  toRead  -  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  length,  toRead  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  length,  toRead  -  1);	  buf.set(buffer,    offset,    toRead,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
150	[BUG]  [BUGGY]  buf.set(buffer,  off,  toRead,  length  -  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  off,  toRead,  length  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  off,  toRead,  length  -  1);	  buf.set(buffer,    offset,    toRead,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
151	[BUG]  [BUGGY]  buf.set(buffer,  offset,  toRead,  length,  current.bytesRead  -  1);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  toRead,  length,  current.bytesRead  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  toRead,  length,  current.bytesRead  -  1);	  buf.set(buffer,    offset,    toRead,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
152	[BUG]  [BUGGY]  buf.set(buffer,  offset,  length,  current.bytesRead  -  1);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  length,  current.bytesRead  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  length,  current.bytesRead  -  1);	  buf.set(buffer,    offset,    toRead,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
153	[BUG]  [BUGGY]  buf.set(buffer,  offset,  toRead,  length,  current.bytesRead.length  -  1);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  toRead,  length,  current.bytesRead.length  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  toRead,  length,  current.bytesRead.length  -  1);	  buf.set(buffer,    offset,    toRead,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
154	[BUG]  [BUGGY]  buf.set(buffer,  offset,  length,  current.bytesRead,  length  -  1);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  length,  current.bytesRead,  length  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  length,  current.bytesRead,  length  -  1);	  buf.set(buffer,    offset,    toRead,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
155	[BUG]  [BUGGY]  buf.get(buffer,  offset,  toRead,  0,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  toRead,  0,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  toRead,  0,  current.bytesRead);	  buf.get(buffer,    offset,    toRead,    length,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
156	[BUG]  [BUGGY]  buf.get(buffer,  offset,  toRead,  csize,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  toRead,  csize,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  toRead,  csize,  current.bytesRead);	  buf.get(buffer,    offset,    toRead,    length,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
157	[BUG]  [BUGGY]  buf.get(buffer,  offset,  toRead,  current.bytesRead,  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  toRead,  current.bytesRead,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  toRead,  current.bytesRead,  length);	  buf.get(buffer,    offset,    toRead,    length,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
158	[BUG]  [BUGGY]  buf.get(buffer,  offset,  length,  current.bytesRead,  toRead);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  length,  current.bytesRead,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  length,  current.bytesRead,  toRead);	  buf.get(buffer,    offset,    toRead,    length,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
159	[BUG]  [BUGGY]  buf.get(buffer,  offset,  toRead,  buffer.length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  toRead,  buffer.length,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  toRead,  buffer.length,  current.bytesRead);	  buf.get(buffer,    offset,    toRead,    length,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
160	[BUG]  [BUGGY]  buf.reset(toRead,  off,  buffer);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(toRead,  off,  buffer);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(toRead,  off,  buffer);	  buf.reset(buffer,    off,    toRead);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
161	[BUG]  [BUGGY]  buf.reset(buffer,  off,  toRead,  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(buffer,  off,  toRead,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(buffer,  off,  toRead,  length);	  buf.reset(buffer,    off,    toRead);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
162	[BUG]  [BUGGY]  buffer.reset(toRead,  off,  buffer);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.reset(toRead,  off,  buffer);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.reset(toRead,  off,  buffer);	  buf.reset(buffer,    off,    toRead);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
163	[BUG]  [BUGGY]  Buffer  buf.reset(toRead,  off,  buffer);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  Buffer  buf.reset(toRead,  off,  buffer);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	Buffer  buf.reset(toRead,  off,  buffer);	  buf.reset(buffer,    off,    toRead);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
164	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  toRead  =  0;  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  toRead  =  0;  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  toRead  =  0;  }	  if(length    >    0)    {    System.arraycopy(buf,    offset,    current.bytesRead,    0,    length);    toRead    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
165	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  current.bytesRead,  0,  length);  toRead  =  0;  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  System.arraycopy(buf,  offset,  current.bytesRead,  0,  length);  toRead  =  0;  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	System.arraycopy(buf,  offset,  current.bytesRead,  0,  length);  toRead  =  0;	  if(length    >    0)    {    System.arraycopy(buf,    offset,    current.bytesRead,    0,    length);    toRead    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
166	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  toRead  =  0;  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  toRead  =  0;  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  toRead  =  0;	  if(length    >    0)    {    System.arraycopy(buf,    offset,    current.bytesRead,    0,    length);    toRead    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
167	[BUG]  [BUGGY]  read(buf,  offset,  toRead,  0,  length);  toRead  =  0;  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  read(buf,  offset,  toRead,  0,  length);  toRead  =  0;  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	read(buf,  offset,  toRead,  0,  length);  toRead  =  0;	  if(length    >    0)    {    System.arraycopy(buf,    offset,    current.bytesRead,    0,    length);    toRead    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
168	[BUG]  [BUGGY]  arraycopy(buf,  offset,  current.bytesRead,  0,  length);  toRead  =  0;  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  arraycopy(buf,  offset,  current.bytesRead,  0,  length);  toRead  =  0;  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	arraycopy(buf,  offset,  current.bytesRead,  0,  length);  toRead  =  0;	  if(length    >    0)    {    System.arraycopy(buf,    offset,    current.bytesRead,    0,    length);    toRead    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
169	[BUG]  [BUGGY]  ||  length  >  0)  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  toRead  =  0;  }  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  ||  length  >  0)  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  toRead  =  0;  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	||  length  >  0)  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  toRead  =  0;  }	  if(length    >    0)    {    System.arraycopy(buf,    offset,    current.bytesRead,    0,    length);    toRead    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
170	[BUG]  [BUGGY]  Buf.put(buf,  offset,  toRead);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  Buf.put(buf,  offset,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	Buf.put(buf,  offset,  toRead);	  buf.put(toRead,    offset,    buffer);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
171	[BUG]  [BUGGY]  buf.put(offset,  toRead);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(offset,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(offset,  toRead);	  buf.put(toRead,    offset,    buffer);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
172	[BUG]  [BUGGY]  buf.get(buffer,  offset,  length,  current.bytesRead,  csize);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  length,  current.bytesRead,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  length,  current.bytesRead,  csize);	  buf.get(buffer,    offset,    toRead,    length,    csize);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
173	[BUG]  [BUGGY]  buf.get(buffer,  offset,  length,  toRead,  csize);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  length,  toRead,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  length,  toRead,  csize);	  buf.get(buffer,    offset,    toRead,    length,    csize);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
174	[BUG]  [BUGGY]  buffer.get(buffer,  offset,  length,  current.bytesRead,  csize);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.get(buffer,  offset,  length,  current.bytesRead,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.get(buffer,  offset,  length,  current.bytesRead,  csize);	  buf.get(buffer,    offset,    toRead,    length,    csize);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
175	[BUG]  [BUGGY]  buf.get(buffer,  off,  toRead,  length,  csize);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  off,  toRead,  length,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  off,  toRead,  length,  csize);	  buf.get(buffer,    offset,    toRead,    length,    csize);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
176	[BUG]  [BUGGY]  buf.get(buffer,  offset,  toRead,  csize,  length);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  toRead,  csize,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  toRead,  csize,  length);	  buf.get(buffer,    offset,    toRead,    length,    csize);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
177	[BUG]  [BUGGY]  buf.get(buffer,  offset,  length,  csize,  toRead);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  length,  csize,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  length,  csize,  toRead);	  buf.get(buffer,    offset,    toRead,    length,    csize);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
178	[BUG]  [BUGGY]  buf.get(buffer,  offset,  length,  current.bytesRead  -  toRead);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  length,  current.bytesRead  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  length,  current.bytesRead  -  toRead);	  buf.get(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
179	[BUG]  [BUGGY]  buf.get(buffer,  off,  length  -  toRead);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  off,  length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  off,  length  -  toRead);	  buf.get(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
180	[BUG]  [BUGGY]  buf.get(buffer,  off,  toRead,  length  -  toRead);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  off,  toRead,  length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  off,  toRead,  length  -  toRead);	  buf.get(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
181	[BUG]  [BUGGY]  buf.get(buffer,  offset,  length,  current.length  -  toRead);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  length,  current.length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  length,  current.length  -  toRead);	  buf.get(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
182	[BUG]  [BUGGY]  buf.get(buffer,  offset,  csize  -  toRead);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  csize  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  csize  -  toRead);	  buf.get(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
183	[BUG]  [BUGGY]  buffer.remove(buffer,  offset,  length  -  toRead);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.remove(buffer,  offset,  length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.remove(buffer,  offset,  length  -  toRead);	  buffer.remove(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
184	[BUG]  [BUGGY]  buffer.remove(current.bytesRead,  offset,  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.remove(current.bytesRead,  offset,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.remove(current.bytesRead,  offset,  length);	  buffer.remove(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
185	[BUG]  [BUGGY]  buffer.remove(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.remove(buffer,  offset,  length  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.remove(buffer,  offset,  length  -  1);	  buffer.remove(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
186	[BUG]  [BUGGY]  buffer.remove(buffer,  offset,  length,  csize);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.remove(buffer,  offset,  length,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.remove(buffer,  offset,  length,  csize);	  buffer.remove(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
187	[BUG]  [BUGGY]  buffer.remove(buffer,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.remove(buffer,  offset,  length  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.remove(buffer,  offset,  length  +  1);	  buffer.remove(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
188	[BUG]  [BUGGY]  buf.get(buffer,  offset,  toRead,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  toRead,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  toRead,  current.bytesRead);	  buf.get(buffer,    offset,    length,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
189	[BUG]  [BUGGY]  buf.get(buffer,  off,  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  off,  length,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  off,  length,  current.bytesRead);	  buf.get(buffer,    offset,    length,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
190	[BUG]  [BUGGY]  buf.get(buffer,  offset,  csize,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  csize,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  csize,  current.bytesRead);	  buf.get(buffer,    offset,    length,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
191	[BUG]  [BUGGY]  buffer.get(buffer,  offset,  toRead,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.get(buffer,  offset,  toRead,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.get(buffer,  offset,  toRead,  current.bytesRead);	  buf.get(buffer,    offset,    length,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
192	[BUG]  [BUGGY]  buf.remove(buffer,  offset,  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.remove(buffer,  offset,  length,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.remove(buffer,  offset,  length,  current.bytesRead);	  buf.remove(buffer,    offset,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
193	[BUG]  [BUGGY]  buf.remove(buffer,  offset,  toRead,  length  -  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.remove(buffer,  offset,  toRead,  length  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.remove(buffer,  offset,  toRead,  length  -  1);	  buf.remove(buffer,    offset,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
194	[BUG]  [BUGGY]  buf.remove(buffer,  offset,  toRead,  length  +  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.remove(buffer,  offset,  toRead,  length  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.remove(buffer,  offset,  toRead,  length  +  1);	  buf.remove(buffer,    offset,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
195	[BUG]  [BUGGY]  buf.remove(buffer,  offset,  toRead,  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.remove(buffer,  offset,  toRead,  length,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.remove(buffer,  offset,  toRead,  length,  current.bytesRead);	  buf.remove(buffer,    offset,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
196	[BUG]  [BUGGY]  buf.remove(buffer,  offset,  length,  toRead);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.remove(buffer,  offset,  length,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.remove(buffer,  offset,  length,  toRead);	  buf.remove(buffer,    offset,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
197	[BUG]  [BUGGY]  buf.put(toRead,  csize,  buffer);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(toRead,  csize,  buffer);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(toRead,  csize,  buffer);	  buf.put(buffer,    csize,    toRead);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
198	[BUG]  [BUGGY]  buffer.put(buffer,  toRead,  csize);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.put(buffer,  toRead,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.put(buffer,  toRead,  csize);	  buf.put(buffer,    csize,    toRead);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
199	[BUG]  [BUGGY]  buffer.put(buf,  toRead,  csize);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.put(buf,  toRead,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.put(buf,  toRead,  csize);	  buf.put(buffer,    csize,    toRead);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
200	[BUG]  [BUGGY]  buf.put(buffer,  csize,  toRead,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  csize,  toRead,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  csize,  toRead,  length);	  buf.put(buffer,    csize,    toRead);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
201	[BUG]  [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buffer.bytesRead,  0,  length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buffer.bytesRead,  0,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	System.arraycopy(current.bytesRead,  offset,  buffer.bytesRead,  0,  length);	  System.arraycopy(buf,    offset,    current.bytesRead,    0,    length);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
202	[BUG]  [BUGGY]  System.arraycopy(buf,  off,  current.bytesRead,  0,  length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  System.arraycopy(buf,  off,  current.bytesRead,  0,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	System.arraycopy(buf,  off,  current.bytesRead,  0,  length);	  System.arraycopy(buf,    offset,    current.bytesRead,    0,    length);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
203	[BUG]  [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buf.offset,  length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buf.offset,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	System.arraycopy(current.bytesRead,  offset,  buf.offset,  length);	  System.arraycopy(buf,    offset,    current.bytesRead,    0,    length);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
204	[BUG]  [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buffer,  0,  length);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buffer,  0,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	System.arraycopy(current.bytesRead,  offset,  buffer,  0,  length);	  System.arraycopy(buf,    offset,    current.bytesRead,    0,    length);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
205	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  current.bytesRead,  0,  csize);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  System.arraycopy(buf,  offset,  current.bytesRead,  0,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	System.arraycopy(buf,  offset,  current.bytesRead,  0,  csize);	  System.arraycopy(buf,    offset,    current.bytesRead,    0,    length);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
206	[BUG]  [BUGGY]  buffer.delete(buffer,  offset,  length,  toRead);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.delete(buffer,  offset,  length,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.delete(buffer,  offset,  length,  toRead);	  buffer.delete(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
207	[BUG]  [BUGGY]  buffer.delete(buffer,  offset,  toRead);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.delete(buffer,  offset,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.delete(buffer,  offset,  toRead);	  buffer.delete(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
208	[BUG]  [BUGGY]  buffer.delete(buffer,  offset,  length,  csize);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.delete(buffer,  offset,  length,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.delete(buffer,  offset,  length,  csize);	  buffer.delete(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
209	[BUG]  [BUGGY]  buffer.delete(buffer,  offset,  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.delete(buffer,  offset,  length,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.delete(buffer,  offset,  length,  current.bytesRead);	  buffer.delete(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
210	[BUG]  [BUGGY]  buffer.delete(buffer,  offset,  length,  current.length);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.delete(buffer,  offset,  length,  current.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.delete(buffer,  offset,  length,  current.length);	  buffer.delete(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
211	[BUG]  [BUGGY]  buffer.delete(toRead,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.delete(toRead,  offset,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.delete(toRead,  offset,  length);	  buffer.delete(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
212	[BUG]  [BUGGY]  buffer.delete(buffer,  offset,  length  -  toRead);  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.delete(buffer,  offset,  length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.delete(buffer,  offset,  length  -  toRead);	  buffer.delete(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
213	[BUG]  [BUGGY]  buf.set(toRead,  offset,  length);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(toRead,  offset,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(toRead,  offset,  length);	  buf.set(toRead,    offset,    buffer);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
214	[BUG]  [BUGGY]  buf.set(0,  toRead,  buffer);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(0,  toRead,  buffer);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(0,  toRead,  buffer);	  buf.set(toRead,    offset,    buffer);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
215	[BUG]  [BUGGY]  buf.reset(toRead,  buffer,  length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(toRead,  buffer,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(toRead,  buffer,  length);	  buf.reset(length,    buffer,    toRead);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
216	[BUG]  [BUGGY]  buf.reset(buffer,  length,  toRead);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(buffer,  length,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(buffer,  length,  toRead);	  buf.reset(length,    buffer,    toRead);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
217	[BUG]  [BUGGY]  buf.reset(buf,  offset,  toRead);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(buf,  offset,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(buf,  offset,  toRead);	  buf.reset(length,    buffer,    toRead);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
218	[BUG]  [BUGGY]  Buf.reset(buf,  offset,  toRead);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  Buf.reset(buf,  offset,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	Buf.reset(buf,  offset,  toRead);	  buf.reset(length,    buffer,    toRead);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
219	[BUG]  [BUGGY]  buf.reset(length,  buffer,  offset,  toRead);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(length,  buffer,  offset,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(length,  buffer,  offset,  toRead);	  buf.reset(length,    buffer,    toRead);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
220	[BUG]  [BUGGY]  buf.set(buffer,  offset,  toRead  +  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  toRead  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  toRead  +  1);	  buf.set(buffer,    offset,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
221	[BUG]  [BUGGY]  buf.set(buffer,  offset,  length,  toRead  +  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  length,  toRead  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  length,  toRead  +  1);	  buf.set(buffer,    offset,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
222	[BUG]  [BUGGY]  buf.set(buffer,  off,  length  +  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  off,  length  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  off,  length  +  1);	  buf.set(buffer,    offset,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
223	[BUG]  [BUGGY]  buf.set(buffer,  offset,  length  +  1,  toRead);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  length  +  1,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  length  +  1,  toRead);	  buf.set(buffer,    offset,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
224	[BUG]  [BUGGY]  buf.set(offset,  buffer,  length  +  1);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(offset,  buffer,  length  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(offset,  buffer,  length  +  1);	  buf.set(buffer,    offset,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
225	[BUG]  [BUGGY]  buf.put(off,  buffer,  length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(off,  buffer,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(off,  buffer,  length);	  buf.put(buffer,    off,    length);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
226	[BUG]  [BUGGY]  buf.put(toRead,  off,  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(toRead,  off,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(toRead,  off,  length);	  buf.put(buffer,    off,    length);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
227	[BUG]  [BUGGY]  buf.put(buffer,  length,  buffer.length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  length,  buffer.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  length,  buffer.length);	  buf.put(buffer,    off,    length);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
228	[BUG]  [BUGGY]  buf.put(toRead,  toRead);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(toRead,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(toRead,  toRead);	  buf.put(toRead,    buffer);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
229	[BUG]  [BUGGY]  buffer.put(toRead,  buf);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.put(toRead,  buf);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.put(toRead,  buf);	  buf.put(toRead,    buffer);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
230	[BUG]  [BUGGY]  Buf.put(buf,  toRead);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  Buf.put(buf,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	Buf.put(buf,  toRead);	  buf.put(toRead,    buffer);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
231	[BUG]  [BUGGY]  buf.set(buffer,  offset,  toRead,  csize,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  toRead,  csize,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  toRead,  csize,  length);	  buf.set(buffer,    offset,    toRead,    length,    csize);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
232	[BUG]  [BUGGY]  buffer.set(buffer,  offset,  length,  current.bytesRead,  csize);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.set(buffer,  offset,  length,  current.bytesRead,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.set(buffer,  offset,  length,  current.bytesRead,  csize);	  buf.set(buffer,    offset,    toRead,    length,    csize);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
233	[BUG]  [BUGGY]  buf.set(buffer,  offset,  toRead,  0,  csize);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  toRead,  0,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  toRead,  0,  csize);	  buf.set(buffer,    offset,    toRead,    length,    csize);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
234	[BUG]  [BUGGY]  buf.get(buffer,  offset,  toRead,  csize  -  toRead);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  toRead,  csize  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  toRead,  csize  -  toRead);	  buf.get(buffer,    offset,    toRead,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
235	[BUG]  [BUGGY]  buf.get(buffer,  offset,  toRead,  0,  length  -  toRead);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  toRead,  0,  length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  toRead,  0,  length  -  toRead);	  buf.get(buffer,    offset,    toRead,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
236	[BUG]  [BUGGY]  buf.get(buffer,  offset,  toRead,  buffer.length  -  toRead);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  toRead,  buffer.length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  toRead,  buffer.length  -  toRead);	  buf.get(buffer,    offset,    toRead,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
237	[BUG]  [BUGGY]  buf.get(buffer,  offset,  toRead,  current.length  -  toRead);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  toRead,  current.length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  toRead,  current.length  -  toRead);	  buf.get(buffer,    offset,    toRead,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
238	[BUG]  [BUGGY]  buf.set(buffer,  offset,  toRead  -  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  toRead  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  toRead  -  1);	  buf.set(buffer,    offset,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
239	[BUG]  [BUGGY]  buf.set(buffer,  off,  length  -  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  off,  length  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  off,  length  -  1);	  buf.set(buffer,    offset,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
240	[BUG]  [BUGGY]  buf.set(offset,  buffer,  length  -  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(offset,  buffer,  length  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(offset,  buffer,  length  -  1);	  buf.set(buffer,    offset,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
241	[BUG]  [BUGGY]  buf.put(buf,  toRead,  offset,  length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  toRead,  offset,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  toRead,  offset,  length);	  buf.put(buf,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
242	[BUG]  [BUGGY]  buf.put(buf,  toRead,  length  -  1);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  toRead,  length  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  toRead,  length  -  1);	  buf.put(buf,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
243	[BUG]  [BUGGY]  buf.put(buf,  toRead,  length  +  1);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  toRead,  length  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  toRead,  length  +  1);	  buf.put(buf,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
244	[BUG]  [BUGGY]  buf.put(buf,  toRead,  0,  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  toRead,  0,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  toRead,  0,  length);	  buf.put(buf,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
245	[BUG]  [BUGGY]  buf.put(buf,  toRead,  buffer.length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  toRead,  buffer.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  toRead,  buffer.length);	  buf.put(buf,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
246	[BUG]  [BUGGY]  buf.set(buf,  off,  toRead,  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buf,  off,  toRead,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buf,  off,  toRead,  length);	  buf.set(buf,    off,    toRead);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
247	[BUG]  [BUGGY]  buf.set(buf,  offset,  toRead,  length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buf,  offset,  toRead,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buf,  offset,  toRead,  length);	  buf.set(buf,    off,    toRead);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
248	[BUG]  [BUGGY]  buf.set(buf,  toRead,  off);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buf,  toRead,  off);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buf,  toRead,  off);	  buf.set(buf,    off,    toRead);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
249	[BUG]  [BUGGY]  buf.set(buf,  off,  length,  toRead);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buf,  off,  length,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buf,  off,  length,  toRead);	  buf.set(buf,    off,    toRead);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
250	[BUG]  [BUGGY]  buf.set(buf,  off,  csize,  toRead);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buf,  off,  csize,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buf,  off,  csize,  toRead);	  buf.set(buf,    off,    toRead);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
251	[BUG]  [BUGGY]  buf.set(buf,  off,  length);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buf,  off,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buf,  off,  length);	  buf.set(buf,    off,    toRead);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
252	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  length);  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  length);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  length);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buf.remaining(),    length);    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
253	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buf.remaining(),    length);    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
254	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  current.bytesRead);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  current.bytesRead);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  current.bytesRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buf.remaining(),    length);    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
255	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buf.remaining(),    length);    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
256	[BUG]  [BUGGY]  buf.get(buffer,  offset,  length,  current.bytesRead  -  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  length,  current.bytesRead  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  length,  current.bytesRead  -  1);	  buf.get(buffer,    offset,    toRead,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
257	[BUG]  [BUGGY]  buf.get(buffer,  offset,  length,  toRead  -  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  length,  toRead  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  length,  toRead  -  1);	  buf.get(buffer,    offset,    toRead,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
258	[BUG]  [BUGGY]  buf.get(buffer,  offset,  toRead,  length,  current.bytesRead  -  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  toRead,  length,  current.bytesRead  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  toRead,  length,  current.bytesRead  -  1);	  buf.get(buffer,    offset,    toRead,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
259	[BUG]  [BUGGY]  buf.get(buffer,  offset,  toRead,  length,  current.bytesRead.length  -  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  toRead,  length,  current.bytesRead.length  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  toRead,  length,  current.bytesRead.length  -  1);	  buf.get(buffer,    offset,    toRead,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
260	[BUG]  [BUGGY]  buf.get(buffer,  off,  toRead,  length  -  1);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  off,  toRead,  length  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  off,  toRead,  length  -  1);	  buf.get(buffer,    offset,    toRead,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
261	[BUG]  [BUGGY]  buf.get(buffer,  offset,  toRead,  0,  length  -  1);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  toRead,  0,  length  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  toRead,  0,  length  -  1);	  buf.get(buffer,    offset,    toRead,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
262	[BUG]  [BUGGY]  buf.put(buf,  offset,  toRead,  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  offset,  toRead,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  offset,  toRead,  length);	  buf.put(buf,    offset,    toRead);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
263	[BUG]  [BUGGY]  buf.set(buffer,  offset,  toRead,  0,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  toRead,  0,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  toRead,  0,  current.bytesRead);	  buf.set(buffer,    offset,    toRead,    length,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
264	[BUG]  [BUGGY]  buf.set(buffer,  offset,  toRead,  csize,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  toRead,  csize,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  toRead,  csize,  current.bytesRead);	  buf.set(buffer,    offset,    toRead,    length,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
265	[BUG]  [BUGGY]  buf.set(buffer,  offset,  toRead,  current.bytesRead,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  toRead,  current.bytesRead,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  toRead,  current.bytesRead,  length);	  buf.set(buffer,    offset,    toRead,    length,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
266	[BUG]  [BUGGY]  buf.set(buffer,  offset,  toRead,  buffer.length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  toRead,  buffer.length,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  toRead,  buffer.length,  current.bytesRead);	  buf.set(buffer,    offset,    toRead,    length,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
267	[BUG]  [BUGGY]  buf.set(buffer,  offset,  length,  current.bytesRead,  buffer.length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  length,  current.bytesRead,  buffer.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  length,  current.bytesRead,  buffer.length);	  buf.set(buffer,    offset,    toRead,    length,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
268	[BUG]  [BUGGY]  buf.set(buf,  offset,  length,  toRead);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buf,  offset,  length,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buf,  offset,  length,  toRead);	  buf.set(buf,    offset,    toRead);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
269	[BUG]  [BUGGY]  buf.set(buf,  offset,  length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buf,  offset,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buf,  offset,  length);	  buf.set(buf,    offset,    toRead);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
270	[BUG]  [BUGGY]  buf.set(buf,  toRead,  offset);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buf,  toRead,  offset);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buf,  toRead,  offset);	  buf.set(buf,    offset,    toRead);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
271	[BUG]  [BUGGY]  buf.set(buf,  offset,  length  -  toRead);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buf,  offset,  length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buf,  offset,  length  -  toRead);	  buf.set(buf,    offset,    toRead);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
272	[BUG]  [BUGGY]  buf.set(buffer,  offset,  toRead,  csize);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  toRead,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  toRead,  csize);	  buf.set(buffer,    offset,    csize,    toRead);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
273	[BUG]  [BUGGY]  buf.set(buffer,  off,  toRead,  csize);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  off,  toRead,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  off,  toRead,  csize);	  buf.set(buffer,    offset,    csize,    toRead);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
274	[BUG]  [BUGGY]  buf.set(buffer,  offset,  csize,  toRead,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  csize,  toRead,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  csize,  toRead,  length);	  buf.set(buffer,    offset,    csize,    toRead);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
275	[BUG]  [BUGGY]  buf.set(buffer,  off,  csize,  toRead);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  off,  csize,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  off,  csize,  toRead);	  buf.set(buffer,    offset,    csize,    toRead);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
276	[BUG]  [BUGGY]  buffer.set(buffer,  offset,  toRead,  csize);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.set(buffer,  offset,  toRead,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.set(buffer,  offset,  toRead,  csize);	  buf.set(buffer,    offset,    csize,    toRead);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
277	[BUG]  [BUGGY]  buffer.set(buffer,  offset,  length,  toRead);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.set(buffer,  offset,  length,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.set(buffer,  offset,  length,  toRead);	  buf.set(buffer,    offset,    csize,    toRead);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
278	[BUG]  [BUGGY]  buf.put(buf,  offset,  toRead,  length  -  toRead);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  offset,  toRead,  length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  offset,  toRead,  length  -  toRead);	  buf.put(buf,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
279	[BUG]  [BUGGY]  buf.put(buf,  toRead,  length  -  toRead);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  toRead,  length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  toRead,  length  -  toRead);	  buf.put(buf,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
280	[BUG]  [BUGGY]  buf.put(buf,  off,  toRead,  length  -  toRead);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  off,  toRead,  length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  off,  toRead,  length  -  toRead);	  buf.put(buf,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
281	[BUG]  [BUGGY]  buf.put(buf,  off,  length  -  toRead);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  off,  length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  off,  length  -  toRead);	  buf.put(buf,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
282	[BUG]  [BUGGY]  buf.put(buf,  off,  toRead  -  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  off,  toRead  -  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  off,  toRead  -  length);	  buf.put(buf,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
283	[BUG]  [BUGGY]  buf.put(toRead,  offset,  length  -  toRead);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(toRead,  offset,  length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(toRead,  offset,  length  -  toRead);	  buf.put(buf,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
284	[BUG]  [BUGGY]  buf.reset(toRead,  buffer,  off);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(toRead,  buffer,  off);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(toRead,  buffer,  off);	  buf.reset(off,    buffer,    toRead);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
285	[BUG]  [BUGGY]  buf.reset(off,  toRead,  buffer);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(off,  toRead,  buffer);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(off,  toRead,  buffer);	  buf.reset(off,    buffer,    toRead);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
286	[BUG]  [BUGGY]  buf.reset(toRead,  buffer,  offset);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(toRead,  buffer,  offset);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(toRead,  buffer,  offset);	  buf.reset(off,    buffer,    toRead);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
287	[BUG]  [BUGGY]  Buffer  buf.reset(buffer,  offset,  toRead,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  Buffer  buf.reset(buffer,  offset,  toRead,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	Buffer  buf.reset(buffer,  offset,  toRead,  length);	  Buffer    buf.reset(buffer,    offset,    length,    toRead);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
288	[BUG]  [BUGGY]  Buffer  buf.reset(buffer,  offset,  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  Buffer  buf.reset(buffer,  offset,  length,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	Buffer  buf.reset(buffer,  offset,  length,  current.bytesRead);	  Buffer    buf.reset(buffer,    offset,    length,    toRead);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
289	[BUG]  [BUGGY]  Buffer  buf.reset(buffer,  offset,  length,  toRead,  csize);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  Buffer  buf.reset(buffer,  offset,  length,  toRead,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	Buffer  buf.reset(buffer,  offset,  length,  toRead,  csize);	  Buffer    buf.reset(buffer,    offset,    length,    toRead);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
290	[BUG]  [BUGGY]  Buffer  buf.reset(buffer,  offset,  length,  toRead,  buffer.length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  Buffer  buf.reset(buffer,  offset,  length,  toRead,  buffer.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	Buffer  buf.reset(buffer,  offset,  length,  toRead,  buffer.length);	  Buffer    buf.reset(buffer,    offset,    length,    toRead);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
291	[BUG]  [BUGGY]  Buffer  buf.reset(buffer,  offset,  length,  toRead,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  Buffer  buf.reset(buffer,  offset,  length,  toRead,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	Buffer  buf.reset(buffer,  offset,  length,  toRead,  current.bytesRead);	  Buffer    buf.reset(buffer,    offset,    length,    toRead);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
292	[BUG]  [BUGGY]  Buffer  buf.reset(toRead,  offset,  length,  buffer);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  Buffer  buf.reset(toRead,  offset,  length,  buffer);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	Buffer  buf.reset(toRead,  offset,  length,  buffer);	  Buffer    buf.reset(buffer,    offset,    length,    toRead);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
293	[BUG]  [BUGGY]  Buffer  buf.reset(buffer,  offset,  length,  toRead,  size);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  Buffer  buf.reset(buffer,  offset,  length,  toRead,  size);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	Buffer  buf.reset(buffer,  offset,  length,  toRead,  size);	  Buffer    buf.reset(buffer,    offset,    length,    toRead);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
294	[BUG]  [BUGGY]  buf.put(current.bytesRead,  length,  buffer,  toRead);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(current.bytesRead,  length,  buffer,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(current.bytesRead,  length,  buffer,  toRead);	  buf.put(buffer,    length,    toRead,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
295	[BUG]  [BUGGY]  buf.put(buffer,  length,  current.bytesRead,  toRead);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  length,  current.bytesRead,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  length,  current.bytesRead,  toRead);	  buf.put(buffer,    length,    toRead,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
296	[BUG]  [BUGGY]  buf.put(buffer,  off,  toRead,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  off,  toRead,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  off,  toRead,  current.bytesRead);	  buf.put(buffer,    length,    toRead,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
297	[BUG]  [BUGGY]  buf.put(toRead,  length,  buffer,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(toRead,  length,  buffer,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(toRead,  length,  buffer,  current.bytesRead);	  buf.put(buffer,    length,    toRead,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
298	[BUG]  [BUGGY]  buf.put(toRead,  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(toRead,  length,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(toRead,  length,  current.bytesRead);	  buf.put(buffer,    length,    toRead,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
299	[BUG]  [BUGGY]  read(buf,  toRead,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(0);  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  read(buf,  toRead,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(0);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	read(buf,  toRead,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(0);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(0);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
300	[BUG]  [BUGGY]  read(buf,  toRead,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(1);  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  read(buf,  toRead,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(1);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	read(buf,  toRead,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(1);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(0);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
301	[BUG]  [BUGGY]  read(buf,  toRead,  length))  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.setLength(0);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  read(buf,  toRead,  length))  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.setLength(0);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	read(buf,  toRead,  length))  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.setLength(0);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(0);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
302	[BUG]  [BUGGY]  read(buf,  toRead,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  current.bytesRead  =  buf.remaining();  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  read(buf,  toRead,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  current.bytesRead  =  buf.remaining();  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	read(buf,  toRead,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  current.bytesRead  =  buf.remaining();  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(0);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
303	[BUG]  [BUGGY]  readStored(buf,  toRead,  length);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  readStored(buf,  toRead,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	readStored(buf,  toRead,  length);	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(0);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
304	[BUG]  [BUGGY]  read(buf,  toRead,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  current.bytesRead  +=  buf.remaining();  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  read(buf,  toRead,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  current.bytesRead  +=  buf.remaining();  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	read(buf,  toRead,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  current.bytesRead  +=  buf.remaining();  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(0);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
305	[BUG]  [BUGGY]  read(buf,  toRead,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  current.bytesRead  +=  buf.limit();  }  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  read(buf,  toRead,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  current.bytesRead  +=  buf.limit();  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	read(buf,  toRead,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  current.bytesRead  +=  buf.limit();  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(0);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
306	[BUG]  [BUGGY]  buf.get(buffer,  offset,  toRead,  current.length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  toRead,  current.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  toRead,  current.length);	  buf.get(buffer,    offset,    length,    current.length);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
307	[BUG]  [BUGGY]  buf.get(buffer,  offset,  length,  current.length,  toRead);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  length,  current.length,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  length,  current.length,  toRead);	  buf.get(buffer,    offset,    length,    current.length);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
308	[BUG]  [BUGGY]  buf.get(buffer,  offset,  length,  current.length  +  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  length,  current.length  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  length,  current.length  +  1);	  buf.get(buffer,    offset,    length,    current.length);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
309	[BUG]  [BUGGY]  buf.get(buffer,  off,  length,  current.length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  off,  length,  current.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  off,  length,  current.length);	  buf.get(buffer,    offset,    length,    current.length);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
310	[BUG]  [BUGGY]  buf.set(buffer,  offset,  length,  current.bytesRead  -  toRead);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  length,  current.bytesRead  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  length,  current.bytesRead  -  toRead);	  buf.set(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
311	[BUG]  [BUGGY]  buf.set(buffer,  off,  length  -  toRead);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  off,  length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  off,  length  -  toRead);	  buf.set(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
312	[BUG]  [BUGGY]  buf.set(buffer,  offset,  length,  current.length  -  toRead);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  length,  current.length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  length,  current.length  -  toRead);	  buf.set(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
313	[BUG]  [BUGGY]  buffer.set(buffer,  offset,  toRead,  length  -  toRead);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.set(buffer,  offset,  toRead,  length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.set(buffer,  offset,  toRead,  length  -  toRead);	  buf.set(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
314	[BUG]  [BUGGY]  buf.set(buffer,  off,  toRead,  length  -  toRead);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  off,  toRead,  length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  off,  toRead,  length  -  toRead);	  buf.set(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
315	[BUG]  [BUGGY]  buffer.put(buf,  toRead,  length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.put(buf,  toRead,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.put(buf,  toRead,  length);	  buffer.put(buf,    toRead);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
316	[BUG]  [BUGGY]  buffer.put(toRead,  buffer);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.put(toRead,  buffer);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.put(toRead,  buffer);	  buffer.put(buf,    toRead);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
317	[BUG]  [BUGGY]  buffer.put(current.bytesRead,  toRead);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.put(current.bytesRead,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.put(current.bytesRead,  toRead);	  buffer.put(buf,    toRead);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
318	[BUG]  [BUGGY]  buffer.put(lastStoredEntry,  toRead);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.put(lastStoredEntry,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.put(lastStoredEntry,  toRead);	  buffer.put(buf,    toRead);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
319	[BUG]  [BUGGY]  buf.get(buffer,  offset,  toRead,  csize  -  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  toRead,  csize  -  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  toRead,  csize  -  current.bytesRead);	  buf.get(buffer,    offset,    toRead,    length    -    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
320	[BUG]  [BUGGY]  buf.get(buffer,  offset,  toRead,  buffer.length  -  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  toRead,  buffer.length  -  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  toRead,  buffer.length  -  current.bytesRead);	  buf.get(buffer,    offset,    toRead,    length    -    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
321	[BUG]  [BUGGY]  buf.get(buffer,  offset,  toRead,  current.bytesRead,  length  -  toRead);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  toRead,  current.bytesRead,  length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  toRead,  current.bytesRead,  length  -  toRead);	  buf.get(buffer,    offset,    toRead,    length    -    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
322	[BUG]  [BUGGY]  buf.get(buffer,  off,  toRead,  length  -  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  off,  toRead,  length  -  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  off,  toRead,  length  -  current.bytesRead);	  buf.get(buffer,    offset,    toRead,    length    -    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
323	[BUG]  [BUGGY]  buf.get(buffer,  offset,  toRead,  0,  length  -  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  toRead,  0,  length  -  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  toRead,  0,  length  -  current.bytesRead);	  buf.get(buffer,    offset,    toRead,    length    -    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
324	[BUG]  [BUGGY]  buf.put(buffer,  offset,  toRead,  length  -  toRead);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  offset,  toRead,  length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  offset,  toRead,  length  -  toRead);	  buf.put(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
325	[BUG]  [BUGGY]  buf.put(buffer,  toRead,  length  -  toRead);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  toRead,  length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  toRead,  length  -  toRead);	  buf.put(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
326	[BUG]  [BUGGY]  buf.put(buffer,  off,  length  -  toRead);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  off,  length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  off,  length  -  toRead);	  buf.put(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
327	[BUG]  [BUGGY]  buf.put(buffer,  offset,  length,  current.bytesRead  -  toRead);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  offset,  length,  current.bytesRead  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  offset,  length,  current.bytesRead  -  toRead);	  buf.put(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
328	[BUG]  [BUGGY]  buf.put(buffer,  off,  toRead,  length  -  toRead);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  off,  toRead,  length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  off,  toRead,  length  -  toRead);	  buf.put(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
329	[BUG]  [BUGGY]  buf.put(buffer,  offset,  toRead,  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  offset,  toRead,  length,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  offset,  toRead,  length,  current.bytesRead);	  buf.put(buffer,    offset,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
330	[BUG]  [BUGGY]  buf.put(buffer,  offset,  toRead,  length  +  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  offset,  toRead,  length  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  offset,  toRead,  length  +  1);	  buf.put(buffer,    offset,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
331	[BUG]  [BUGGY]  buf.get(buffer,  offset,  toRead,  buffer.length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  toRead,  buffer.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  toRead,  buffer.length);	  buf.get(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
332	[BUG]  [BUGGY]  buf.get(buffer,  off,  length,  buffer.length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  off,  length,  buffer.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  off,  length,  buffer.length);	  buf.get(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
333	[BUG]  [BUGGY]  buf.get(buffer,  offset,  length,  current.bytesRead,  buffer.length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  length,  current.bytesRead,  buffer.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  length,  current.bytesRead,  buffer.length);	  buf.get(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
334	[BUG]  [BUGGY]  buf.delete(toRead,  buffer,  offset);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.delete(toRead,  buffer,  offset);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.delete(toRead,  buffer,  offset);	  buf.delete(toRead,    offset,    buffer);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
335	[BUG]  [BUGGY]  buf.delete(toRead,  offset,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.delete(toRead,  offset,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.delete(toRead,  offset,  length);	  buf.delete(toRead,    offset,    buffer);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
336	[BUG]  [BUGGY]  buffer.delete(toRead,  offset,  toRead);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.delete(toRead,  offset,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.delete(toRead,  offset,  toRead);	  buf.delete(toRead,    offset,    buffer);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
337	[BUG]  [BUGGY]  Buf.delete(buf,  offset,  toRead);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  Buf.delete(buf,  offset,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	Buf.delete(buf,  offset,  toRead);	  buf.delete(toRead,    offset,    buffer);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
338	[BUG]  [BUGGY]  buf.set(offset,  toRead,  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(offset,  toRead,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(offset,  toRead,  length);	  buf.set(offset,    buffer,    length);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
339	[BUG]  [BUGGY]  buf.set(offset,  length,  buffer.length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(offset,  length,  buffer.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(offset,  length,  buffer.length);	  buf.set(offset,    buffer,    length);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
340	[BUG]  [BUGGY]  buf.set(length,  buffer,  offset);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(length,  buffer,  offset);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(length,  buffer,  offset);	  buf.set(offset,    buffer,    length);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
341	[BUG]  [BUGGY]  buf.set(offset,  length,  buffer);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(offset,  length,  buffer);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(offset,  length,  buffer);	  buf.set(offset,    buffer,    length);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
342	[BUG]  [BUGGY]  buf.set(toRead,  buffer,  length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(toRead,  buffer,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(toRead,  buffer,  length);	  buf.set(offset,    buffer,    length);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
343	[BUG]  [BUGGY]  buf.put(toRead,  buffer  +  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(toRead,  buffer  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(toRead,  buffer  +  1);	  buf.put(buf,    toRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
344	[BUG]  [BUGGY]  buf.put(buf,  toRead  +  1,  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  toRead  +  1,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  toRead  +  1,  length);	  buf.put(buf,    toRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
345	[BUG]  [BUGGY]  buf.put(current.bytesRead,  toRead  +  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(current.bytesRead,  toRead  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(current.bytesRead,  toRead  +  1);	  buf.put(buf,    toRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
346	[BUG]  [BUGGY]  buf.put(buf,  toRead  +  2);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  toRead  +  2);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  toRead  +  2);	  buf.put(buf,    toRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
347	[BUG]  [BUGGY]  buf.put(toRead,  toRead  +  1);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(toRead,  toRead  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(toRead,  toRead  +  1);	  buf.put(buf,    toRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
348	[BUG]  [BUGGY]  buf.put(buf,  toRead  +  1  -  toRead);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  toRead  +  1  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  toRead  +  1  -  toRead);	  buf.put(buf,    toRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
349	[BUG]  [BUGGY]  buf.remove(buffer,  offset,  length,  csize);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.remove(buffer,  offset,  length,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.remove(buffer,  offset,  length,  csize);	  buf.remove(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
350	[BUG]  [BUGGY]  buf.remove(buffer,  off,  length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.remove(buffer,  off,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.remove(buffer,  off,  length);	  buf.remove(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
351	[BUG]  [BUGGY]  buf.set(buffer,  toRead,  csize);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  toRead,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  toRead,  csize);	  buf.set(buffer,    csize,    toRead);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
352	[BUG]  [BUGGY]  buf.set(toRead,  csize,  buffer);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(toRead,  csize,  buffer);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(toRead,  csize,  buffer);	  buf.set(buffer,    csize,    toRead);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
353	[BUG]  [BUGGY]  buf.set(buffer,  csize,  toRead,  length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  csize,  toRead,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  csize,  toRead,  length);	  buf.set(buffer,    csize,    toRead);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
354	[BUG]  [BUGGY]  buf.set(buffer,  length,  toRead);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  length,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  length,  toRead);	  buf.set(buffer,    csize,    toRead);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
355	[BUG]  [BUGGY]  buf.set(buffer,  csize,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  csize,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  csize,  current.bytesRead);	  buf.set(buffer,    csize,    toRead);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
356	[BUG]  [BUGGY]  buf.delete(buffer,  offset,  length,  toRead,  csize);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.delete(buffer,  offset,  length,  toRead,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.delete(buffer,  offset,  length,  toRead,  csize);	  buf.delete(buffer,    offset,    length,    toRead);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
357	[BUG]  [BUGGY]  buf.delete(buffer,  offset,  length,  toRead,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.delete(buffer,  offset,  length,  toRead,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.delete(buffer,  offset,  length,  toRead,  current.bytesRead);	  buf.delete(buffer,    offset,    length,    toRead);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
358	[BUG]  [BUGGY]  buf.delete(buffer,  offset,  length,  toRead,  buffer.length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.delete(buffer,  offset,  length,  toRead,  buffer.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.delete(buffer,  offset,  length,  toRead,  buffer.length);	  buf.delete(buffer,    offset,    length,    toRead);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
359	[BUG]  [BUGGY]  buf.set(buffer,  offset,  length,  csize,  toRead);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  length,  csize,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  length,  csize,  toRead);	  buf.set(buffer,    offset,    length,    csize);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
360	[BUG]  [BUGGY]  buf.set(buffer,  off,  length,  csize);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  off,  length,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  off,  length,  csize);	  buf.set(buffer,    offset,    length,    csize);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
361	[BUG]  [BUGGY]  buf.set(buffer,  off,  toRead,  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  off,  toRead,  length,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  off,  toRead,  length,  current.bytesRead);	  buf.set(buffer,    off,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
362	[BUG]  [BUGGY]  buf.set(toRead,  off,  buffer,  length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(toRead,  off,  buffer,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(toRead,  off,  buffer,  length);	  buf.set(buffer,    off,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
363	[BUG]  [BUGGY]  buffer.set(buffer,  offset,  toRead,  length);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.set(buffer,  offset,  toRead,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.set(buffer,  offset,  toRead,  length);	  buf.set(buffer,    off,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
364	[BUG]  [BUGGY]  buf.set(off,  buffer,  toRead,  length);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(off,  buffer,  toRead,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(off,  buffer,  toRead,  length);	  buf.set(buffer,    off,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
365	[BUG]  [BUGGY]  buf.get(buf,  off,  toRead);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buf,  off,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buf,  off,  toRead);	  buf.get(buf,    offset,    toRead);    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
366	[BUG]  [BUGGY]  buf.get(buf,  offset,  length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buf,  offset,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buf,  offset,  length);	  buf.get(buf,    offset,    toRead);    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
367	[BUG]  [BUGGY]  buf.get(buf,  offset,  length,  toRead);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buf,  offset,  length,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buf,  offset,  length,  toRead);	  buf.get(buf,    offset,    toRead);    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
368	[BUG]  [BUGGY]  buf.get(buf,  offset,  toRead,  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buf,  offset,  toRead,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buf,  offset,  toRead,  length);	  buf.get(buf,    offset,    toRead);    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
369	[BUG]  [BUGGY]  buf.get(buf,  off,  toRead,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buf,  off,  toRead,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buf,  off,  toRead,  length);	  buf.get(buf,    offset,    toRead);    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
370	[BUG]  [BUGGY]  buf.get(buffer,  off,  toRead,  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  off,  toRead,  length,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  off,  toRead,  length,  current.bytesRead);	  buf.get(buffer,    off,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
371	[BUG]  [BUGGY]  buffer.get(buffer,  offset,  toRead,  length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.get(buffer,  offset,  toRead,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.get(buffer,  offset,  toRead,  length);	  buf.get(buffer,    off,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
372	[BUG]  [BUGGY]  buf.set(toRead,  offset,  toRead);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(toRead,  offset,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(toRead,  offset,  toRead);	  buf.set(toRead,    off,    buffer);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
373	[BUG]  [BUGGY]  buf.set(toRead,  toRead,  buffer);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(toRead,  toRead,  buffer);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(toRead,  toRead,  buffer);	  buf.set(toRead,    off,    buffer);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
374	[BUG]  [BUGGY]  buf.reset(buffer,  offset,  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(buffer,  offset,  length,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(buffer,  offset,  length,  current.bytesRead);	  buf.reset(buffer,    offset,    length,    toRead);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
375	[BUG]  [BUGGY]  buf.reset(buffer,  offset,  length,  toRead,  csize);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(buffer,  offset,  length,  toRead,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(buffer,  offset,  length,  toRead,  csize);	  buf.reset(buffer,    offset,    length,    toRead);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
376	[BUG]  [BUGGY]  buf.reset(buffer,  offset,  length,  toRead,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(buffer,  offset,  length,  toRead,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(buffer,  offset,  length,  toRead,  current.bytesRead);	  buf.reset(buffer,    offset,    length,    toRead);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
377	[BUG]  [BUGGY]  buf.reset(buffer,  offset,  length,  toRead,  buffer.length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(buffer,  offset,  length,  toRead,  buffer.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(buffer,  offset,  length,  toRead,  buffer.length);	  buf.reset(buffer,    offset,    length,    toRead);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
378	[BUG]  [BUGGY]  buf.reset(buffer,  offset,  length,  toRead,  size);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(buffer,  offset,  length,  toRead,  size);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(buffer,  offset,  length,  toRead,  size);	  buf.reset(buffer,    offset,    length,    toRead);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
379	[BUG]  [BUGGY]  buf.delete(buffer,  offset,  length,  csize);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.delete(buffer,  offset,  length,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.delete(buffer,  offset,  length,  csize);	  buf.delete(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
380	[BUG]  [BUGGY]  buf.delete(buffer,  offset,  length,  current.length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.delete(buffer,  offset,  length,  current.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.delete(buffer,  offset,  length,  current.length);	  buf.delete(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
381	[BUG]  [BUGGY]  buf.reset(buf,  offset,  length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(buf,  offset,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(buf,  offset,  length);	  buf.reset(in,    offset,    toRead);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
382	[BUG]  [BUGGY]  buf.reset(toRead,  offset,  in);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(toRead,  offset,  in);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(toRead,  offset,  in);	  buf.reset(in,    offset,    toRead);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
383	[BUG]  [BUGGY]  buf.reset(buf,  off,  toRead);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(buf,  off,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(buf,  off,  toRead);	  buf.reset(in,    offset,    toRead);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
384	[BUG]  [BUGGY]  buf.reset(buf,  offset,  length,  toRead);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(buf,  offset,  length,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(buf,  offset,  length,  toRead);	  buf.reset(in,    offset,    toRead);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
385	[BUG]  [BUGGY]  buf.reset(in,  offset,  length,  toRead);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(in,  offset,  length,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(in,  offset,  length,  toRead);	  buf.reset(in,    offset,    toRead);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
386	[BUG]  [BUGGY]  buf.reset(off,  toRead,  offset);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(off,  toRead,  offset);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(off,  toRead,  offset);	  buf.reset(in,    offset,    toRead);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
387	[BUG]  [BUGGY]  buf.remove(buffer,  offset,  toRead,  length  -  toRead);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.remove(buffer,  offset,  toRead,  length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.remove(buffer,  offset,  toRead,  length  -  toRead);	  buf.remove(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
388	[BUG]  [BUGGY]  buffer.remove(buffer,  offset,  toRead,  length  -  toRead);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.remove(buffer,  offset,  toRead,  length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.remove(buffer,  offset,  toRead,  length  -  toRead);	  buf.remove(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
389	[BUG]  [BUGGY]  buf.remove(buffer,  offset,  toRead  -  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.remove(buffer,  offset,  toRead  -  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.remove(buffer,  offset,  toRead  -  length);	  buf.remove(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
390	[BUG]  [BUGGY]  buf.remove(buffer,  off,  length  -  toRead);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.remove(buffer,  off,  length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.remove(buffer,  off,  length  -  toRead);	  buf.remove(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
391	[BUG]  [BUGGY]  buffer.remove(buffer,  offset,  toRead  -  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.remove(buffer,  offset,  toRead  -  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.remove(buffer,  offset,  toRead  -  length);	  buf.remove(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
392	[BUG]  [BUGGY]  buf.set(0,  toRead,  buffer.length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(0,  toRead,  buffer.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(0,  toRead,  buffer.length);	  buf.set(0,    toRead,    buffer.off);    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
393	[BUG]  [BUGGY]  buf.set(0,  toRead,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(0,  toRead,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(0,  toRead,  current.bytesRead);	  buf.set(0,    toRead,    buffer.off);    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
394	[BUG]  [BUGGY]  buf.set(0,  toRead,  buffer.off,  length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(0,  toRead,  buffer.off,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(0,  toRead,  buffer.off,  length);	  buf.set(0,    toRead,    buffer.off);    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
395	[BUG]  [BUGGY]  buf.set(0,  toRead,  buffer.off  +  length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(0,  toRead,  buffer.off  +  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(0,  toRead,  buffer.off  +  length);	  buf.set(0,    toRead,    buffer.off);    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
396	[BUG]  [BUGGY]  buf.set(0,  toRead,  0,  buffer.off);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(0,  toRead,  0,  buffer.off);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(0,  toRead,  0,  buffer.off);	  buf.set(0,    toRead,    buffer.off);    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
397	[BUG]  [BUGGY]  buf.remove(current.bytesRead,  off,  toRead);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.remove(current.bytesRead,  off,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.remove(current.bytesRead,  off,  toRead);	  buf.remove(buffer,    off,    toRead);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
398	[BUG]  [BUGGY]  buf.remove(buffer,  off,  toRead,  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.remove(buffer,  off,  toRead,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.remove(buffer,  off,  toRead,  length);	  buf.remove(buffer,    off,    toRead);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
399	[BUG]  [BUGGY]  buf.remove(toRead,  off,  buffer);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.remove(toRead,  off,  buffer);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.remove(toRead,  off,  buffer);	  buf.remove(buffer,    off,    toRead);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
400	[BUG]  [BUGGY]  buf.remove(buffer,  toRead,  off);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.remove(buffer,  toRead,  off);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.remove(buffer,  toRead,  off);	  buf.remove(buffer,    off,    toRead);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
401	[BUG]  [BUGGY]  buf.set(buffer,  offset,  toRead,  length,  current.bytesRead  +  1);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  toRead,  length,  current.bytesRead  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  toRead,  length,  current.bytesRead  +  1);	  buf.set(buffer,    offset,    toRead,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
402	[BUG]  [BUGGY]  buf.set(buffer,  offset,  toRead,  0,  length  +  1);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  toRead,  0,  length  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  toRead,  0,  length  +  1);	  buf.set(buffer,    offset,    toRead,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
403	[BUG]  [BUGGY]  buf.set(buffer,  off,  toRead,  length  +  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  off,  toRead,  length  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  off,  toRead,  length  +  1);	  buf.set(buffer,    offset,    toRead,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
404	[BUG]  [BUGGY]  buf.set(buffer,  offset,  length,  current.bytesRead  +  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  length,  current.bytesRead  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  length,  current.bytesRead  +  1);	  buf.set(buffer,    offset,    toRead,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
405	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  toRead  +=  length;  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  toRead  +=  length;  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  toRead  +=  length;  }	  if(length    >    0)    {    System.arraycopy(buf,    offset,    current.bytesRead,    0,    length);    toRead    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
406	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  toRead  +=  length;  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  toRead  +=  length;  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  toRead  +=  length;	  if(length    >    0)    {    System.arraycopy(buf,    offset,    current.bytesRead,    0,    length);    toRead    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
407	[BUG]  [BUGGY]  read(buf,  offset,  toRead,  0,  length);  toRead  +=  length;  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  read(buf,  offset,  toRead,  0,  length);  toRead  +=  length;  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	read(buf,  offset,  toRead,  0,  length);  toRead  +=  length;	  if(length    >    0)    {    System.arraycopy(buf,    offset,    current.bytesRead,    0,    length);    toRead    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
408	[BUG]  [BUGGY]  ||  length  >  0)  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  toRead  +=  length;  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  ||  length  >  0)  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  toRead  +=  length;  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	||  length  >  0)  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  toRead  +=  length;  }	  if(length    >    0)    {    System.arraycopy(buf,    offset,    current.bytesRead,    0,    length);    toRead    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
409	[BUG]  [BUGGY]  arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  toRead  +=  length;  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  toRead  +=  length;  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  toRead  +=  length;	  if(length    >    0)    {    System.arraycopy(buf,    offset,    current.bytesRead,    0,    length);    toRead    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
410	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  current.bytesRead,  0,  length);  toRead  +=  length;  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  System.arraycopy(buf,  offset,  current.bytesRead,  0,  length);  toRead  +=  length;  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	System.arraycopy(buf,  offset,  current.bytesRead,  0,  length);  toRead  +=  length;	  if(length    >    0)    {    System.arraycopy(buf,    offset,    current.bytesRead,    0,    length);    toRead    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
411	[BUG]  [BUGGY]  arraycopy(buf,  offset,  current.bytesRead,  0,  length);  toRead  +=  length;  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  arraycopy(buf,  offset,  current.bytesRead,  0,  length);  toRead  +=  length;  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	arraycopy(buf,  offset,  current.bytesRead,  0,  length);  toRead  +=  length;	  if(length    >    0)    {    System.arraycopy(buf,    offset,    current.bytesRead,    0,    length);    toRead    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
412	[BUG]  [BUGGY]  buf.reset(offset,  buffer,  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(offset,  buffer,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(offset,  buffer,  length);	  buf.reset(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
413	[BUG]  [BUGGY]  buf.reset(buffer,  offset,  length,  csize);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(buffer,  offset,  length,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(buffer,  offset,  length,  csize);	  buf.reset(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
414	[BUG]  [BUGGY]  buf.reset(buffer,  offset,  length,  current.length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(buffer,  offset,  length,  current.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(buffer,  offset,  length,  current.length);	  buf.reset(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
415	[BUG]  [BUGGY]  buffer.reset(buffer,  offset,  length,  toRead);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.reset(buffer,  offset,  length,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.reset(buffer,  offset,  length,  toRead);	  buf.reset(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
416	[BUG]  [BUGGY]  buf.put(buffer,  toRead,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  toRead,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  toRead,  current.bytesRead);	  buf.put(buffer,    length,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
417	[BUG]  [BUGGY]  buf.put(current.bytesRead,  length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(current.bytesRead,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(current.bytesRead,  length);	  buf.put(buffer,    length,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
418	[BUG]  [BUGGY]  buf.put(buffer,  offset,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  offset,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  offset,  current.bytesRead);	  buf.put(buffer,    length,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
419	[BUG]  [BUGGY]  buffer.put(buffer,  toRead,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.put(buffer,  toRead,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.put(buffer,  toRead,  current.bytesRead);	  buf.put(buffer,    length,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
420	[BUG]  [BUGGY]  buf.put(buffer,  csize,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  csize,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  csize,  current.bytesRead);	  buf.put(buffer,    length,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
421	[BUG]  [BUGGY]  buf.get(buffer,  off,  length,  csize);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  off,  length,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  off,  length,  csize);	  buf.get(buffer,    offset,    length,    csize);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
422	[BUG]  [BUGGY]  buf.delete(buffer,  off,  toRead,  length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.delete(buffer,  off,  toRead,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.delete(buffer,  off,  toRead,  length);	  buf.delete(buffer,    off,    toRead);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
423	[BUG]  [BUGGY]  buf.delete(toRead,  off,  buffer);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.delete(toRead,  off,  buffer);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.delete(toRead,  off,  buffer);	  buf.delete(buffer,    off,    toRead);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
424	[BUG]  [BUGGY]  buffer.delete(toRead,  off,  buffer);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.delete(toRead,  off,  buffer);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.delete(toRead,  off,  buffer);	  buf.delete(buffer,    off,    toRead);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
425	[BUG]  [BUGGY]  buf.delete(buffer,  toRead,  off);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.delete(buffer,  toRead,  off);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.delete(buffer,  toRead,  off);	  buf.delete(buffer,    off,    toRead);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
426	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining());  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining());  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining());  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf.remaining());    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
427	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining());  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining());  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining());  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf.remaining());    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
428	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.setLength(buf.remaining());  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.setLength(buf.remaining());  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.setLength(buf.remaining());  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf.remaining());    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
429	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  false)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining());  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  false)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining());  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	allowStoredEntriesWithDataDescriptor(current,  false)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining());  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf.remaining());    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
430	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.setLength(buf.remaining());  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.setLength(buf.remaining());  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.setLength(buf.remaining());  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf.remaining());    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
431	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  false)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining());  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  false)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining());  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	allowStoredEntriesWithDataDescriptor(current,  false)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining());  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf.remaining());    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
432	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  current.bytesRead  =  buf.remaining();  }  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  current.bytesRead  =  buf.remaining();  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  current.bytesRead  =  buf.remaining();  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf.remaining());    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
433	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  buffer.remaining();  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  buffer.remaining();  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  buffer.remaining();  }	  if(length    >    0)    {    System.arraycopy(buf,    offset,    current.bytesRead,    0,    length);    buffer.remaining();    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
434	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  current.bytesRead,  0,  length);  buffer.remaining();  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  System.arraycopy(buf,  offset,  current.bytesRead,  0,  length);  buffer.remaining();  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	System.arraycopy(buf,  offset,  current.bytesRead,  0,  length);  buffer.remaining();	  if(length    >    0)    {    System.arraycopy(buf,    offset,    current.bytesRead,    0,    length);    buffer.remaining();    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
435	[BUG]  [BUGGY]  arraycopy(buf,  offset,  current.bytesRead,  0,  length);  buffer.remaining();  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  arraycopy(buf,  offset,  current.bytesRead,  0,  length);  buffer.remaining();  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	arraycopy(buf,  offset,  current.bytesRead,  0,  length);  buffer.remaining();	  if(length    >    0)    {    System.arraycopy(buf,    offset,    current.bytesRead,    0,    length);    buffer.remaining();    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
436	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  buffer.remaining();  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  buffer.remaining();  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  buffer.remaining();	  if(length    >    0)    {    System.arraycopy(buf,    offset,    current.bytesRead,    0,    length);    buffer.remaining();    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
437	[BUG]  [BUGGY]  System.arraycopy(current.bytesRead,  offset,  current.bytesRead,  0,  length);  buffer.remaining();  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  System.arraycopy(current.bytesRead,  offset,  current.bytesRead,  0,  length);  buffer.remaining();  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	System.arraycopy(current.bytesRead,  offset,  current.bytesRead,  0,  length);  buffer.remaining();	  if(length    >    0)    {    System.arraycopy(buf,    offset,    current.bytesRead,    0,    length);    buffer.remaining();    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
438	[BUG]  [BUGGY]  readStored(buf,  offset,  toRead,  0,  length);  buffer.remaining();  [CE]  illegal  start  of  type  [FE]                                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  readStored(buf,  offset,  toRead,  0,  length);  buffer.remaining();  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	readStored(buf,  offset,  toRead,  0,  length);  buffer.remaining();	  if(length    >    0)    {    System.arraycopy(buf,    offset,    current.bytesRead,    0,    length);    buffer.remaining();    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
439	[BUG]  [BUGGY]  buf.put(buffer,  toRead,  length,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  toRead,  length,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  toRead,  length,  length);	  buf.put(buffer,    offset,    length,    toRead);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
440	[BUG]  [BUGGY]  buf.put(buffer,  off,  length,  toRead);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  off,  length,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  off,  length,  toRead);	  buf.put(buffer,    offset,    length,    toRead);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
441	[BUG]  [BUGGY]  buf.put(buffer,  toRead,  length,  offset);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  toRead,  length,  offset);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  toRead,  length,  offset);	  buf.put(buffer,    offset,    length,    toRead);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
442	[BUG]  [BUGGY]  buf.set(off,  toRead,  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(off,  toRead,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(off,  toRead,  length);	  buf.set(off,    buffer,    length);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
443	[BUG]  [BUGGY]  buf.set(length,  buffer,  off);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(length,  buffer,  off);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(length,  buffer,  off);	  buf.set(off,    buffer,    length);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
444	[BUG]  [BUGGY]  buf.set(0,  buffer,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(0,  buffer,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(0,  buffer,  length);	  buf.set(off,    buffer,    length);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
445	[BUG]  [BUGGY]  buf.remove(current.bytesRead,  buffer,  toRead);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.remove(current.bytesRead,  buffer,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.remove(current.bytesRead,  buffer,  toRead);	  buf.remove(current.bytesRead,    offset,    toRead);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
446	[BUG]  [BUGGY]  buf.remove(current.bytesRead,  offset,  length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.remove(current.bytesRead,  offset,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.remove(current.bytesRead,  offset,  length);	  buf.remove(current.bytesRead,    offset,    toRead);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
447	[BUG]  [BUGGY]  buf.remove(current.bytesRead,  toRead,  offset);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.remove(current.bytesRead,  toRead,  offset);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.remove(current.bytesRead,  toRead,  offset);	  buf.remove(current.bytesRead,    offset,    toRead);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
448	[BUG]  [BUGGY]  buf.remove(current.bytesRead,  csize,  toRead);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.remove(current.bytesRead,  csize,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.remove(current.bytesRead,  csize,  toRead);	  buf.remove(current.bytesRead,    offset,    toRead);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
449	[BUG]  [BUGGY]  Buffer  buf.remove(buffer,  offset,  length,  toRead);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  Buffer  buf.remove(buffer,  offset,  length,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	Buffer  buf.remove(buffer,  offset,  length,  toRead);	  Buffer    buf.remove(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
450	[BUG]  [BUGGY]  Buffer  buf.remove(buffer,  offset,  length  -  toRead);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  Buffer  buf.remove(buffer,  offset,  length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	Buffer  buf.remove(buffer,  offset,  length  -  toRead);	  Buffer    buf.remove(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
451	[BUG]  [BUGGY]  Buffer  buf.remove(buffer,  offset,  length,  csize);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  Buffer  buf.remove(buffer,  offset,  length,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	Buffer  buf.remove(buffer,  offset,  length,  csize);	  Buffer    buf.remove(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
452	[BUG]  [BUGGY]  Buffer  buf.remove(current.bytesRead,  offset,  length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  Buffer  buf.remove(current.bytesRead,  offset,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	Buffer  buf.remove(current.bytesRead,  offset,  length);	  Buffer    buf.remove(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
453	[BUG]  [BUGGY]  Buffer  buf.remove(buffer,  offset,  length,  current.length);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  Buffer  buf.remove(buffer,  offset,  length,  current.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	Buffer  buf.remove(buffer,  offset,  length,  current.length);	  Buffer    buf.remove(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
454	[BUG]  [BUGGY]  Buffer  buf.remove(buffer,  off,  length);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  Buffer  buf.remove(buffer,  off,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	Buffer  buf.remove(buffer,  off,  length);	  Buffer    buf.remove(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
455	[BUG]  [BUGGY]  buf.reset(toRead,  buffer,  offset.length);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(toRead,  buffer,  offset.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(toRead,  buffer,  offset.length);	  buf.reset(toRead,    offset,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
456	[BUG]  [BUGGY]  buf.reset(toRead,  offset,  length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(toRead,  offset,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(toRead,  offset,  length);	  buf.reset(toRead,    offset,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
457	[BUG]  [BUGGY]  buf.delete(buffer,  offset,  toRead,  length  -  toRead);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.delete(buffer,  offset,  toRead,  length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.delete(buffer,  offset,  toRead,  length  -  toRead);	  buf.delete(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
458	[BUG]  [BUGGY]  buf.delete(buffer,  offset,  length,  current.bytesRead  -  toRead);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.delete(buffer,  offset,  length,  current.bytesRead  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.delete(buffer,  offset,  length,  current.bytesRead  -  toRead);	  buf.delete(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
459	[BUG]  [BUGGY]  buffer.delete(buffer,  offset,  toRead,  length  -  toRead);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.delete(buffer,  offset,  toRead,  length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.delete(buffer,  offset,  toRead,  length  -  toRead);	  buf.delete(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
460	[BUG]  [BUGGY]  buf.delete(buffer,  off,  toRead,  length  -  toRead);  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.delete(buffer,  off,  toRead,  length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.delete(buffer,  off,  toRead,  length  -  toRead);	  buf.delete(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
461	[BUG]  [BUGGY]  buf.delete(buffer,  off,  length  -  toRead);  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.delete(buffer,  off,  length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.delete(buffer,  off,  length  -  toRead);	  buf.delete(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
462	[BUG]  [BUGGY]  buf.delete(buffer,  offset,  length  -  toRead,  toRead);  [CE]  illegal  start  of  type  [FE]                                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.delete(buffer,  offset,  length  -  toRead,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.delete(buffer,  offset,  length  -  toRead,  toRead);	  buf.delete(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
463	[BUG]  [BUGGY]  buffer.remove(current.bytesRead,  off,  toRead);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.remove(current.bytesRead,  off,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.remove(current.bytesRead,  off,  toRead);	  buffer.remove(buffer,    off,    toRead);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
464	[BUG]  [BUGGY]  buffer.remove(toRead,  off,  buffer);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.remove(toRead,  off,  buffer);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.remove(toRead,  off,  buffer);	  buffer.remove(buffer,    off,    toRead);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
465	[BUG]  [BUGGY]  buffer.remove(buffer,  off,  toRead,  length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.remove(buffer,  off,  toRead,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.remove(buffer,  off,  toRead,  length);	  buffer.remove(buffer,    off,    toRead);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
466	[BUG]  [BUGGY]  buffer.remove(toRead,  off,  buf);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.remove(toRead,  off,  buf);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.remove(toRead,  off,  buf);	  buffer.remove(buffer,    off,    toRead);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
467	[BUG]  [BUGGY]  buf.get(buffer,  offset,  toRead  +  1);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  toRead  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  toRead  +  1);	  buf.get(buffer,    offset,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
468	[BUG]  [BUGGY]  buf.get(buffer,  offset,  length,  toRead  +  1);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  length,  toRead  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  length,  toRead  +  1);	  buf.get(buffer,    offset,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
469	[BUG]  [BUGGY]  buf.get(buffer,  off,  length  +  1);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  off,  length  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  off,  length  +  1);	  buf.get(buffer,    offset,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
470	[BUG]  [BUGGY]  buf.get(buffer,  offset,  length,  current.bytesRead  +  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  length,  current.bytesRead  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  length,  current.bytesRead  +  1);	  buf.get(buffer,    offset,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
471	[BUG]  [BUGGY]  buf.get(buffer,  offset,  length  +  1,  toRead);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  length  +  1,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  length  +  1,  toRead);	  buf.get(buffer,    offset,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
472	[BUG]  [BUGGY]  buf.get(buffer,  offset,  length  -  toRead  +  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  length  -  toRead  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  length  -  toRead  +  1);	  buf.get(buffer,    offset,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
473	[BUG]  [BUGGY]  buf.reset(buffer,  offset,  toRead,  length  -  toRead);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(buffer,  offset,  toRead,  length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(buffer,  offset,  toRead,  length  -  toRead);	  buf.reset(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
474	[BUG]  [BUGGY]  buf.reset(buffer,  offset,  length,  current.bytesRead  -  toRead);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(buffer,  offset,  length,  current.bytesRead  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(buffer,  offset,  length,  current.bytesRead  -  toRead);	  buf.reset(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
475	[BUG]  [BUGGY]  buffer.reset(buffer,  offset,  toRead,  length  -  toRead);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.reset(buffer,  offset,  toRead,  length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.reset(buffer,  offset,  toRead,  length  -  toRead);	  buf.reset(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
476	[BUG]  [BUGGY]  buf.reset(buffer,  offset,  length,  current.length  -  toRead);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(buffer,  offset,  length,  current.length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(buffer,  offset,  length,  current.length  -  toRead);	  buf.reset(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
477	[BUG]  [BUGGY]  buf.reset(toRead,  offset,  length  -  buffer.length);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(toRead,  offset,  length  -  buffer.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(toRead,  offset,  length  -  buffer.length);	  buf.reset(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
478	[BUG]  [BUGGY]  buf.reset(buffer,  off,  length  -  toRead);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(buffer,  off,  length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(buffer,  off,  length  -  toRead);	  buf.reset(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
479	[BUG]  [BUGGY]  buf.put(buf,  csize,  toRead);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  csize,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  csize,  toRead);	  buf.put(buf,    length,    toRead);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
480	[BUG]  [BUGGY]  buf.put(buf,  length,  toRead,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  length,  toRead,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  length,  toRead,  current.bytesRead);	  buf.put(buf,    length,    toRead);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
481	[BUG]  [BUGGY]  buf.set(buffer,  offset,  toRead,  csize  -  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  toRead,  csize  -  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  toRead,  csize  -  current.bytesRead);	  buf.set(buffer,    offset,    toRead,    length    -    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
482	[BUG]  [BUGGY]  buf.set(buffer,  offset,  toRead,  current.bytesRead,  length  -  toRead);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  toRead,  current.bytesRead,  length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  toRead,  current.bytesRead,  length  -  toRead);	  buf.set(buffer,    offset,    toRead,    length    -    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
483	[BUG]  [BUGGY]  buf.set(buffer,  offset,  toRead,  buffer.length  -  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  toRead,  buffer.length  -  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  toRead,  buffer.length  -  current.bytesRead);	  buf.set(buffer,    offset,    toRead,    length    -    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
484	[BUG]  [BUGGY]  buf.set(buffer,  offset,  toRead,  0,  length  -  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  toRead,  0,  length  -  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  toRead,  0,  length  -  current.bytesRead);	  buf.set(buffer,    offset,    toRead,    length    -    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
485	[BUG]  [BUGGY]  buf.set(buffer,  off,  toRead,  length  -  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  off,  toRead,  length  -  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  off,  toRead,  length  -  current.bytesRead);	  buf.set(buffer,    offset,    toRead,    length    -    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
486	[BUG]  [BUGGY]  buf.reset(buffer,  offset,  toRead,  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(buffer,  offset,  toRead,  length,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(buffer,  offset,  toRead,  length,  current.bytesRead);	  buf.reset(buffer,    offset,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
487	[BUG]  [BUGGY]  buf.reset(buffer,  offset,  toRead,  length,  csize);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(buffer,  offset,  toRead,  length,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(buffer,  offset,  toRead,  length,  csize);	  buf.reset(buffer,    offset,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
488	[BUG]  [BUGGY]  buf.reset(buffer,  offset,  toRead,  length,  current.length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(buffer,  offset,  toRead,  length,  current.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(buffer,  offset,  toRead,  length,  current.length);	  buf.reset(buffer,    offset,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
489	[BUG]  [BUGGY]  buf.reset(buffer,  offset,  toRead,  length  -  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(buffer,  offset,  toRead,  length  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(buffer,  offset,  toRead,  length  -  1);	  buf.reset(buffer,    offset,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
490	[BUG]  [BUGGY]  buf.reset(buffer,  offset,  toRead,  length,  size);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(buffer,  offset,  toRead,  length,  size);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(buffer,  offset,  toRead,  length,  size);	  buf.reset(buffer,    offset,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
491	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf[i]);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf[i]);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
492	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf[i]);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf[i]);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
493	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf[i]);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf[i]);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
494	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf[i]);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf[i]);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
495	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf[i]);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf[i]);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
496	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  current.bytesRead[i]  =  new  ByteArrayInputStream(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  current.bytesRead[i]  =  new  ByteArrayInputStream(buf[i]);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  current.bytesRead[i]  =  new  ByteArrayInputStream(buf[i]);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
497	[BUG]  [BUGGY]  Buf.put(buf,  length,  toRead);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  Buf.put(buf,  length,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	Buf.put(buf,  length,  toRead);	  buf.put(toRead,    length,    buffer);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
498	[BUG]  [BUGGY]  buf.set(buffer,  offset,  toRead,  0,  current.length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  toRead,  0,  current.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  toRead,  0,  current.length);	  buf.set(buffer,    offset,    toRead,    length,    current.length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
499	[BUG]  [BUGGY]  buf.set(buffer,  offset,  toRead,  length,  current.length  +  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  toRead,  length,  current.length  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  toRead,  length,  current.length  +  1);	  buf.set(buffer,    offset,    toRead,    length,    current.length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
500	[BUG]  [BUGGY]  buf.set(buffer,  offset,  toRead,  csize,  current.length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  toRead,  csize,  current.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  toRead,  csize,  current.length);	  buf.set(buffer,    offset,    toRead,    length,    current.length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
501	[BUG]  [BUGGY]  buf.set(buffer,  offset,  toRead,  length,  current.length  -  toRead);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  toRead,  length,  current.length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  toRead,  length,  current.length  -  toRead);	  buf.set(buffer,    offset,    toRead,    length,    current.length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
502	[BUG]  [BUGGY]  buf.set(buffer,  offset,  toRead,  buffer.length,  current.length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  toRead,  buffer.length,  current.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  toRead,  buffer.length,  current.length);	  buf.set(buffer,    offset,    toRead,    length,    current.length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
503	[BUG]  [BUGGY]  buf.set(buffer,  offset,  toRead,  current.length,  length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  toRead,  current.length,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  toRead,  current.length,  length);	  buf.set(buffer,    offset,    toRead,    length,    current.length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
504	[BUG]  [BUGGY]  buf.reset(offset,  toRead,  buffer);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(offset,  toRead,  buffer);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(offset,  toRead,  buffer);	  buf.reset(toRead,    offset,    buffer);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
505	[BUG]  [BUGGY]  buf.get(buffer,  offset,  toRead,  length,  current.bytesRead  +  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  toRead,  length,  current.bytesRead  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  toRead,  length,  current.bytesRead  +  1);	  buf.get(buffer,    offset,    toRead,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
506	[BUG]  [BUGGY]  buf.get(buffer,  offset,  toRead,  length,  csize  +  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  toRead,  length,  csize  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  toRead,  length,  csize  +  1);	  buf.get(buffer,    offset,    toRead,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
507	[BUG]  [BUGGY]  buf.get(buffer,  off,  toRead,  length  +  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  off,  toRead,  length  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  off,  toRead,  length  +  1);	  buf.get(buffer,    offset,    toRead,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
508	[BUG]  [BUGGY]  buf.put(buffer,  length,  current.bytesRead,  csize);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  length,  current.bytesRead,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  length,  current.bytesRead,  csize);	  buf.put(buffer,    length,    toRead,    csize);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
509	[BUG]  [BUGGY]  buf.put(toRead,  length,  buffer,  csize);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(toRead,  length,  buffer,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(toRead,  length,  buffer,  csize);	  buf.put(buffer,    length,    toRead,    csize);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
510	[BUG]  [BUGGY]  buffer.put(buffer,  offset,  toRead,  csize);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.put(buffer,  offset,  toRead,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.put(buffer,  offset,  toRead,  csize);	  buf.put(buffer,    length,    toRead,    csize);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
511	[BUG]  [BUGGY]  buf.put(buffer,  off,  toRead,  csize);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  off,  toRead,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  off,  toRead,  csize);	  buf.put(buffer,    length,    toRead,    csize);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
512	[BUG]  [BUGGY]  buf.put(toRead,  buffer  -  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(toRead,  buffer  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(toRead,  buffer  -  1);	  buf.put(buf,    toRead    -    1);    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
513	[BUG]  [BUGGY]  buf.put(buf,  toRead  -  1,  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  toRead  -  1,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  toRead  -  1,  length);	  buf.put(buf,    toRead    -    1);    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
514	[BUG]  [BUGGY]  buf.put(buf,  toRead  -  2);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  toRead  -  2);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  toRead  -  2);	  buf.put(buf,    toRead    -    1);    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
515	[BUG]  [BUGGY]  buf.put(current.bytesRead,  toRead  -  1);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(current.bytesRead,  toRead  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(current.bytesRead,  toRead  -  1);	  buf.put(buf,    toRead    -    1);    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
516	[BUG]  [BUGGY]  buf.put(buf,  toRead  -  length  -  1);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  toRead  -  length  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  toRead  -  length  -  1);	  buf.put(buf,    toRead    -    1);    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
517	[BUG]  [BUGGY]  buf.put(buffer,  length  -  toRead);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  length  -  toRead);	  buf.put(buffer,    length);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
518	[BUG]  [BUGGY]  buffer.put(buffer,  toRead);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.put(buffer,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.put(buffer,  toRead);	  buf.put(buffer,    length);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
519	[BUG]  [BUGGY]  buf.get(buffer,  offset,  length,  current.bytesRead,  size);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  length,  current.bytesRead,  size);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  length,  current.bytesRead,  size);	  buf.get(buffer,    offset,    toRead,    length,    size);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
520	[BUG]  [BUGGY]  buf.get(buffer,  offset,  length,  toRead,  size);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  length,  toRead,  size);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  length,  toRead,  size);	  buf.get(buffer,    offset,    toRead,    length,    size);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
521	[BUG]  [BUGGY]  buf.get(buffer,  offset,  toRead,  0,  size);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  toRead,  0,  size);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  toRead,  0,  size);	  buf.get(buffer,    offset,    toRead,    length,    size);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
522	[BUG]  [BUGGY]  buf.get(buffer,  offset,  toRead,  csize,  size);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  toRead,  csize,  size);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  toRead,  csize,  size);	  buf.get(buffer,    offset,    toRead,    length,    size);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
523	[BUG]  [BUGGY]  buf.get(buffer,  offset,  toRead,  buffer.length,  size);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  toRead,  buffer.length,  size);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  toRead,  buffer.length,  size);	  buf.get(buffer,    offset,    toRead,    length,    size);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
524	[BUG]  [BUGGY]  buf.set(toRead,  off,  length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(toRead,  off,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(toRead,  off,  length);	  buf.set(buffer,    off,    length);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
525	[BUG]  [BUGGY]  buffer.delete(buffer,  offset,  toRead,  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.delete(buffer,  offset,  toRead,  length,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.delete(buffer,  offset,  toRead,  length,  current.bytesRead);	  buffer.delete(buffer,    offset,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
526	[BUG]  [BUGGY]  buffer.delete(buffer,  offset,  toRead,  length,  csize);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.delete(buffer,  offset,  toRead,  length,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.delete(buffer,  offset,  toRead,  length,  csize);	  buffer.delete(buffer,    offset,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
527	[BUG]  [BUGGY]  buffer.delete(buffer,  offset,  toRead,  length,  current.length);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.delete(buffer,  offset,  toRead,  length,  current.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.delete(buffer,  offset,  toRead,  length,  current.length);	  buffer.delete(buffer,    offset,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
528	[BUG]  [BUGGY]  buffer.delete(buffer,  offset,  toRead,  length  -  1);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.delete(buffer,  offset,  toRead,  length  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.delete(buffer,  offset,  toRead,  length  -  1);	  buffer.delete(buffer,    offset,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
529	[BUG]  [BUGGY]  buffer.delete(buffer,  offset,  toRead,  length,  size);  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.delete(buffer,  offset,  toRead,  length,  size);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.delete(buffer,  offset,  toRead,  length,  size);	  buffer.delete(buffer,    offset,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
530	[BUG]  [BUGGY]  buf.get(buffer,  offset,  length,  toRead,  buffer.length);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  length,  toRead,  buffer.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  length,  toRead,  buffer.length);	  buf.get(buffer,    offset,    length,    toRead);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
531	[BUG]  [BUGGY]  buf.get(buffer,  off,  length,  toRead);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  off,  length,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  off,  length,  toRead);	  buf.get(buffer,    offset,    length,    toRead);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
532	[BUG]  [BUGGY]  buf.get(buffer,  offset,  length,  toRead,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  length,  toRead,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  length,  toRead,  current.bytesRead);	  buf.get(buffer,    offset,    length,    toRead);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
533	[BUG]  [BUGGY]  buf.set(buffer,  offset,  toRead,  current.length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  toRead,  current.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  toRead,  current.length);	  buf.set(buffer,    offset,    length,    current.length);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
534	[BUG]  [BUGGY]  buf.set(buffer,  offset,  length,  current.length  +  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  length,  current.length  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  length,  current.length  +  1);	  buf.set(buffer,    offset,    length,    current.length);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
535	[BUG]  [BUGGY]  buf.set(buffer,  offset,  length,  current.length,  toRead);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  length,  current.length,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  length,  current.length,  toRead);	  buf.set(buffer,    offset,    length,    current.length);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
536	[BUG]  [BUGGY]  buf.set(buffer,  off,  length,  current.length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  off,  length,  current.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  off,  length,  current.length);	  buf.set(buffer,    offset,    length,    current.length);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
537	[BUG]  [BUGGY]  buffer.set(buffer,  offset,  toRead,  current.length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.set(buffer,  offset,  toRead,  current.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.set(buffer,  offset,  toRead,  current.length);	  buf.set(buffer,    offset,    length,    current.length);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
538	[BUG]  [BUGGY]  buffer.put(buffer,  length,  toRead);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.put(buffer,  length,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.put(buffer,  length,  toRead);	  buffer.put(buffer,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
539	[BUG]  [BUGGY]  buffer.put(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.put(buffer,  offset,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.put(buffer,  offset,  length);	  buffer.put(buffer,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
540	[BUG]  [BUGGY]  buffer.put(toRead,  buffer,  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.put(toRead,  buffer,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.put(toRead,  buffer,  length);	  buffer.put(buffer,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
541	[BUG]  [BUGGY]  buffer.put(buffer,  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.put(buffer,  length,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.put(buffer,  length,  current.bytesRead);	  buffer.put(buffer,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
542	[BUG]  [BUGGY]  buffer.put(buffer,  toRead,  length  -  1);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.put(buffer,  toRead,  length  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.put(buffer,  toRead,  length  -  1);	  buffer.put(buffer,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
543	[BUG]  [BUGGY]  readStored(buf,  offset,  length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  readStored(buf,  offset,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	readStored(buf,  offset,  length);	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
544	[BUG]  [BUGGY]  readStored(buf,  toRead,  0,  length);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  readStored(buf,  toRead,  0,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	readStored(buf,  toRead,  0,  length);	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
545	[BUG]  [BUGGY]  Integer  csize  =  in.readInt();  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  Integer  csize  =  in.readInt();  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	Integer  csize  =  in.readInt();	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
546	[BUG]  [BUGGY]  read(buf,  toRead,  length);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  read(buf,  toRead,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	read(buf,  toRead,  length);	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
547	[BUG]  [BUGGY]  read(buf,  toRead,  0,  length);  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  read(buf,  toRead,  0,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	read(buf,  toRead,  0,  length);	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
548	[BUG]  [BUGGY]  readStored(buf,  toRead);  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  readStored(buf,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	readStored(buf,  toRead);	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
549	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.remaining();  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.remaining();  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.remaining();  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remaining();    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
550	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.remaining();  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.remaining();  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.remaining();  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remaining();    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
551	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.remaining();  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.remaining();  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.remaining();  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remaining();    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
552	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buf.remaining();  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buf.remaining();  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buf.remaining();  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remaining();    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
553	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  current.bytesRead  =  buf.remaining();  }  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  current.bytesRead  =  buf.remaining();  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  current.bytesRead  =  buf.remaining();  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remaining();    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
554	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  buf,  0,  toRead.length);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  System.arraycopy(buf,  offset,  buf,  0,  toRead.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	System.arraycopy(buf,  offset,  buf,  0,  toRead.length);	  System.arraycopy(buf,    offset,    toRead,    0,    buf.length);    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
555	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  current.bytesRead,  0,  buf.length);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  System.arraycopy(buf,  offset,  current.bytesRead,  0,  buf.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	System.arraycopy(buf,  offset,  current.bytesRead,  0,  buf.length);	  System.arraycopy(buf,    offset,    toRead,    0,    buf.length);    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
556	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  toRead,  0,  current.bytesRead.length);  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  System.arraycopy(buf,  offset,  toRead,  0,  current.bytesRead.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	System.arraycopy(buf,  offset,  toRead,  0,  current.bytesRead.length);	  System.arraycopy(buf,    offset,    toRead,    0,    buf.length);    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
557	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  buffer,  0,  toRead.length);  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  System.arraycopy(buf,  offset,  buffer,  0,  toRead.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	System.arraycopy(buf,  offset,  buffer,  0,  toRead.length);	  System.arraycopy(buf,    offset,    toRead,    0,    buf.length);    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
558	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  buffer,  0,  buf.length);  [CE]  illegal  start  of  type  [FE]                                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  System.arraycopy(buf,  offset,  buffer,  0,  buf.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	System.arraycopy(buf,  offset,  buffer,  0,  buf.length);	  System.arraycopy(buf,    offset,    toRead,    0,    buf.length);    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
559	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  buf,  0,  current.bytesRead.length);  [CE]  illegal  start  of  type  [FE]                                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  System.arraycopy(buf,  offset,  buf,  0,  current.bytesRead.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	System.arraycopy(buf,  offset,  buf,  0,  current.bytesRead.length);	  System.arraycopy(buf,    offset,    toRead,    0,    buf.length);    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
560	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  toRead,  0,  buf.length  -  toRead);  [CE]  illegal  start  of  type  [FE]                                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  System.arraycopy(buf,  offset,  toRead,  0,  buf.length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	System.arraycopy(buf,  offset,  toRead,  0,  buf.length  -  toRead);	  System.arraycopy(buf,    offset,    toRead,    0,    buf.length);    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
561	[BUG]  [BUGGY]  buf.set(buffer,  offset,  toRead,  csize  -  toRead);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  toRead,  csize  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  toRead,  csize  -  toRead);	  buf.set(buffer,    offset,    toRead,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
562	[BUG]  [BUGGY]  buf.set(buffer,  offset,  toRead,  0,  length  -  toRead);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  toRead,  0,  length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  toRead,  0,  length  -  toRead);	  buf.set(buffer,    offset,    toRead,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
563	[BUG]  [BUGGY]  buf.set(buffer,  offset,  toRead,  buffer.length  -  toRead);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  toRead,  buffer.length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  toRead,  buffer.length  -  toRead);	  buf.set(buffer,    offset,    toRead,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
564	[BUG]  [BUGGY]  buf.set(buffer,  offset,  toRead,  current.length  -  toRead);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  toRead,  current.length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  toRead,  current.length  -  toRead);	  buf.set(buffer,    offset,    toRead,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
565	[BUG]  [BUGGY]  buf.get(buffer,  offset,  length,  bytesRead,  csize);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  length,  bytesRead,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  length,  bytesRead,  csize);	  buf.get(buffer,    offset,    toRead,    length,    csize);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
566	[BUG]  [BUGGY]  buf.get(buffer,  offset,  length,  buffer,  csize);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  length,  buffer,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  length,  buffer,  csize);	  buf.get(buffer,    offset,    toRead,    length,    csize);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
567	[BUG]  [BUGGY]  buf.put(length,  buffer,  offset  -  1);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(length,  buffer,  offset  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(length,  buffer,  offset  -  1);	  buf.put(buffer,    offset,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
568	[BUG]  [BUGGY]  buf.set(0,  toRead,  off);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(0,  toRead,  off);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(0,  toRead,  off);	  buf.set(buf,    off,    toRead);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
569	[BUG]  [BUGGY]  buf.set(off,  toRead);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(off,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(off,  toRead);	  buf.set(buf,    off,    toRead);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
570	[BUG]  [BUGGY]  buf.reset(length,  buffer,  offset);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(length,  buffer,  offset);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(length,  buffer,  offset);	  buf.reset(length,    buffer,    toRead);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
571	[BUG]  [BUGGY]  buf.reset(off,  length,  toRead);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(off,  length,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(off,  length,  toRead);	  buf.reset(length,    buffer,    toRead);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
572	[BUG]  [BUGGY]  buffer.get(buf,  offset,  toRead,  length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.get(buf,  offset,  toRead,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.get(buf,  offset,  toRead,  length);	  buf.get(buffer,    off,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
573	[BUG]  [BUGGY]  buf.reset(in,  offset,  length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(in,  offset,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(in,  offset,  length);	  buf.reset(in,    offset,    toRead);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
574	[BUG]  [BUGGY]  buf.reset(in,  buffer,  toRead);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(in,  buffer,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(in,  buffer,  toRead);	  buf.reset(in,    offset,    toRead);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
575	[BUG]  [BUGGY]  buf.set(off,  toRead,  buffer.length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(off,  toRead,  buffer.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(off,  toRead,  buffer.length);	  buf.set(buffer,    toRead,    offset);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
576	[BUG]  [BUGGY]  buf.set(0,  toRead,  length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(0,  toRead,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(0,  toRead,  length);	  buf.set(buffer,    toRead,    offset);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
577	[BUG]  [BUGGY]  buf.put(buffer,  toRead,  buffer);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  toRead,  buffer);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  toRead,  buffer);	  buf.put(toRead,    buffer,    offset);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
578	[BUG]  [BUGGY]  buf.get(off,  buffer,  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(off,  buffer,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(off,  buffer,  length);	  buf.get(buffer,    off,    length);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
579	[BUG]  [BUGGY]  buffer.remove(current.bytesReadFromStream,  off,  toRead);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.remove(current.bytesReadFromStream,  off,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.remove(current.bytesReadFromStream,  off,  toRead);	  buffer.remove(buffer,    off,    toRead);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
580	[BUG]  [BUGGY]  buffer.remove(current.bytesRead,  offset,  toRead);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.remove(current.bytesRead,  offset,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.remove(current.bytesRead,  offset,  toRead);	  buffer.remove(buffer,    off,    toRead);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
581	[BUG]  [BUGGY]  buffer.remove(current.bytesReadFromStream,  offset,  toRead);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.remove(current.bytesReadFromStream,  offset,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.remove(current.bytesReadFromStream,  offset,  toRead);	  buffer.remove(buffer,    off,    toRead);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
582	[BUG]  [BUGGY]  buffer.remove(current,  off,  toRead);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.remove(current,  off,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.remove(current,  off,  toRead);	  buffer.remove(buffer,    off,    toRead);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
583	[BUG]  [BUGGY]  buffer.put(buf,  length,  toRead);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.put(buf,  length,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.put(buf,  length,  toRead);	  buffer.put(buffer,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
584	[BUG]  [BUGGY]  buffer.put(buffer,  offset,  toRead);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.put(buffer,  offset,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.put(buffer,  offset,  toRead);	  buffer.put(buffer,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
585	[BUG]  [BUGGY]  buffer.put(buf,  csize,  toRead);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.put(buf,  csize,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.put(buf,  csize,  toRead);	  buffer.put(buffer,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
586	[BUG]  [BUGGY]  buf.get(buffer,  offset,  length  -  toRead,  csize);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  length  -  toRead,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  length  -  toRead,  csize);	  buf.get(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
587	[BUG]  [BUGGY]  buf.get(buffer,  offset,  toRead  -  length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  toRead  -  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  toRead  -  length);	  buf.get(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
588	[BUG]  [BUGGY]  buf.get(buffer,  offset,  length  -  toRead,  buffer.length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  length  -  toRead,  buffer.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  length  -  toRead,  buffer.length);	  buf.get(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
589	[BUG]  [BUGGY]  buf.get(buffer,  offset,  length,  current.length  -  1);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  length,  current.length  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  length,  current.length  -  1);	  buf.get(buffer,    offset,    length,    current.length);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
590	[BUG]  [BUGGY]  buf.set(length,  buffer,  toRead);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(length,  buffer,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(length,  buffer,  toRead);	  buf.set(off,    buffer,    toRead);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
591	[BUG]  [BUGGY]  buf.set(0,  buffer,  toRead);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(0,  buffer,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(0,  buffer,  toRead);	  buf.set(off,    buffer,    toRead);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
592	[BUG]  [BUGGY]  buf.delete(buffer,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.delete(buffer,  offset,  length  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.delete(buffer,  offset,  length  +  1);	  buf.delete(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
593	[BUG]  [BUGGY]  buf.delete(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.delete(buffer,  offset,  length  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.delete(buffer,  offset,  length  -  1);	  buf.delete(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
594	[BUG]  [BUGGY]  buf.get(buffer,  offset,  toRead,  length  *  2  +  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  toRead,  length  *  2  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  toRead,  length  *  2  +  1);	  buf.get(buffer,    offset,    toRead,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
595	[BUG]  [BUGGY]  buf.get(buffer,  offset,  toRead,  length  *  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  toRead,  length  *  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  toRead,  length  *  1);	  buf.get(buffer,    offset,    toRead,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
596	[BUG]  [BUGGY]  buf.get(buffer,  offset,  csize,  toRead  +  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  csize,  toRead  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  csize,  toRead  +  1);	  buf.get(buffer,    offset,    toRead,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
597	[BUG]  [BUGGY]  buf.set(buffer,  offset,  length,  current.length  -  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  length,  current.length  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  length,  current.length  -  1);	  buf.set(buffer,    offset,    length,    current.length);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
598	[BUG]  [BUGGY]  buf.set(off,  buffer,  length,  current.length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(off,  buffer,  length,  current.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(off,  buffer,  length,  current.length);	  buf.set(buffer,    offset,    length,    current.length);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
599	[BUG]  [BUGGY]  buf.set(0,  toRead,  offset);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(0,  toRead,  offset);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(0,  toRead,  offset);	  buf.set(buf,    offset,    toRead);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
600	[BUG]  [BUGGY]  buf.reset(off,  buffer,  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(off,  buffer,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(off,  buffer,  length);	  buf.reset(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
601	[BUG]  [BUGGY]  buf.reset(length,  offset,  buffer);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(length,  offset,  buffer);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(length,  offset,  buffer);	  buf.reset(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
602	[BUG]  [BUGGY]  buf.reset(buffer,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(buffer,  offset,  length  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(buffer,  offset,  length  +  1);	  buf.reset(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
603	[BUG]  [BUGGY]  buf.put(buf,  toRead  -  1  +  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  toRead  -  1  +  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  toRead  -  1  +  length);	  buf.put(buf,    toRead    -    1);    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
604	[BUG]  [BUGGY]  buf.put(buf,  length  -  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  length  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  length  -  1);	  buf.put(buf,    toRead    -    1);    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
605	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining());  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining());  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining());  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf.remaining());    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
606	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.setLength(buf.remaining());  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.setLength(buf.remaining());  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.setLength(buf.remaining());  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf.remaining());    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
607	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.setLength(buf.remaining());  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.setLength(buf.remaining());  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.setLength(buf.remaining());  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf.remaining());    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
608	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  buf.setLength(buf.remaining());  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  buf.setLength(buf.remaining());  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  buf.setLength(buf.remaining());  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf.remaining());    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
609	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buf.setLength(buf.remaining());  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buf.setLength(buf.remaining());  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buf.setLength(buf.remaining());  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf.remaining());    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
610	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buf.setLength(buf.remaining());  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buf.setLength(buf.remaining());  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buf.setLength(buf.remaining());  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf.remaining());    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
611	[BUG]  [BUGGY]  buf.delete(buf,  offset,  toRead);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.delete(buf,  offset,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.delete(buf,  offset,  toRead);	  buf.delete(buffer,    off,    toRead);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
612	[BUG]  [BUGGY]  buf.delete(buffer,  off,  length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.delete(buffer,  off,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.delete(buffer,  off,  length);	  buf.delete(buffer,    off,    toRead);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
613	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf[i]);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf[i]);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
614	[BUG]  [BUGGY]  buf.set(offset,  toRead,  buffer,  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(offset,  toRead,  buffer,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(offset,  toRead,  buffer,  length);	  buf.set(offset,    buffer,    length);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
615	[BUG]  [BUGGY]  buf.set(length,  off,  buffer);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(length,  off,  buffer);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(length,  off,  buffer);	  buf.set(buffer,    off,    length);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
616	[BUG]  [BUGGY]  buf.set(off,  buffer,  length  -  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(off,  buffer,  length  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(off,  buffer,  length  -  1);	  buf.set(buffer,    offset,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
617	[BUG]  [BUGGY]  buf.set(buffer,  offset,  length  -  1,  toRead);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  length  -  1,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  length  -  1,  toRead);	  buf.set(buffer,    offset,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
618	[BUG]  [BUGGY]  buf.set(toRead,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(toRead,  offset,  length  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(toRead,  offset,  length  -  1);	  buf.set(buffer,    offset,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
619	[BUG]  [BUGGY]  if(toRead  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.reset();  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(toRead  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.reset();  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(toRead  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.reset();  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.reset();    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
620	[BUG]  [BUGGY]  if(toRead  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.reset();  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(toRead  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.reset();  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(toRead  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.reset();  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.reset();    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
621	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  buf.reset();  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  buf.reset();  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  buf.reset();  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.reset();    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
622	[BUG]  [BUGGY]  buf.reset(off,  toRead,  buffer.length);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(off,  toRead,  buffer.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(off,  toRead,  buffer.length);	  buf.reset(toRead,    offset,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
623	[BUG]  [BUGGY]  buf.reset(length,  offset,  toRead);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(length,  offset,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(length,  offset,  toRead);	  buf.reset(toRead,    offset,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
624	[BUG]  [BUGGY]  buf.put(current,  toRead);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(current,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(current,  toRead);	  buf.put(lastStoredEntry,    toRead);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
625	[BUG]  [BUGGY]  buf.put(lastStoredEntry,  toRead  +  1);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(lastStoredEntry,  toRead  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(lastStoredEntry,  toRead  +  1);	  buf.put(lastStoredEntry,    toRead);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
626	[BUG]  [BUGGY]  buf.remove(buffer,  offset,  toRead  +  length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.remove(buffer,  offset,  toRead  +  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.remove(buffer,  offset,  toRead  +  length);	  buf.remove(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
627	[BUG]  [BUGGY]  buf.remove(buffer,  offset,  length  -  toRead  +  1);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.remove(buffer,  offset,  length  -  toRead  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.remove(buffer,  offset,  length  -  toRead  +  1);	  buf.remove(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
628	[BUG]  [BUGGY]  buf.set(off,  buffer,  length,  toRead);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(off,  buffer,  length,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(off,  buffer,  length,  toRead);	  buf.set(buffer,    offset,    length,    toRead);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
629	[BUG]  [BUGGY]  buf.set(buffer,  offset,  current.bytesRead,  length  -  toRead);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  current.bytesRead,  length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  current.bytesRead,  length  -  toRead);	  buf.set(buffer,    offset,    toRead,    length    -    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
630	[BUG]  [BUGGY]  buf.delete(buffer,  offset,  toRead,  length  +  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.delete(buffer,  offset,  toRead,  length  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.delete(buffer,  offset,  toRead,  length  +  1);	  buf.delete(buffer,    offset,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
631	[BUG]  [BUGGY]  buf.delete(buffer,  offset,  csize,  toRead);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.delete(buffer,  offset,  csize,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.delete(buffer,  offset,  csize,  toRead);	  buf.delete(buffer,    offset,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
632	[BUG]  [BUGGY]  buf.set(buffer,  offset,  toRead,  length,  current.length  -  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  toRead,  length,  current.length  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  toRead,  length,  current.length  -  1);	  buf.set(buffer,    offset,    toRead,    length,    current.length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
633	[BUG]  [BUGGY]  buf.set(off,  toRead,  buffer,  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(off,  toRead,  buffer,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(off,  toRead,  buffer,  length);	  buf.set(off,    buffer,    length);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
634	[BUG]  [BUGGY]  buf.set(off,  length,  buffer);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(off,  length,  buffer);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(off,  length,  buffer);	  buf.set(off,    buffer,    length);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
635	[BUG]  [BUGGY]  buf.set(buf,  csize,  toRead);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buf,  csize,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buf,  csize,  toRead);	  buf.set(buffer,    csize,    toRead);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
636	[BUG]  [BUGGY]  buf.set(buffer,  0,  toRead);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  0,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  0,  toRead);	  buf.set(buffer,    csize,    toRead);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
637	[BUG]  [BUGGY]  buf.put(buffer,  length,  toRead,  offset);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  length,  toRead,  offset);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  length,  toRead,  offset);	  buf.put(buffer,    offset,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
638	[BUG]  [BUGGY]  System.arraycopy(current.bytesRead,  offset,  current.bytesRead,  0,  length);  toRead  +=  length;  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  System.arraycopy(current.bytesRead,  offset,  current.bytesRead,  0,  length);  toRead  +=  length;  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	System.arraycopy(current.bytesRead,  offset,  current.bytesRead,  0,  length);  toRead  +=  length;	  if(length    >    0)    {    System.arraycopy(buf,    offset,    current.bytesRead,    0,    length);    toRead    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
639	[BUG]  [BUGGY]  buf.set(toRead,  offset,  csize,  buffer);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(toRead,  offset,  csize,  buffer);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(toRead,  offset,  csize,  buffer);	  buf.set(buffer,    offset,    csize,    toRead);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
640	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(0);  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(0);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(0);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(0);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
641	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(1);  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(1);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(1);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(0);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
642	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.setLength(0);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.setLength(0);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.setLength(0);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(0);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
643	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.setLength(0);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.setLength(0);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.setLength(0);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(0);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
644	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(1);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(1);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(1);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(0);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
645	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  buf.setLength(0);  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  buf.setLength(0);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  buf.setLength(0);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(0);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
646	[BUG]  [BUGGY]  buffer.remove(buffer,  offset  +  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.remove(buffer,  offset  +  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.remove(buffer,  offset  +  length);	  buffer.remove(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
647	[BUG]  [BUGGY]  buf.set(buffer,  offset,  length,  current.bytesRead,  toRead  -  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  length,  current.bytesRead,  toRead  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  length,  current.bytesRead,  toRead  -  1);	  buf.set(buffer,    offset,    toRead,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
648	[BUG]  [BUGGY]  if(toRead  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remaining();  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(toRead  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remaining();  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(toRead  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remaining();  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remaining();    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
649	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  buf.remaining();  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  buf.remaining();  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  buf.remaining();  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remaining();    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
650	[BUG]  [BUGGY]  if(toRead  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.remaining();  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(toRead  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.remaining();  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(toRead  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.remaining();  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remaining();    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
651	[BUG]  [BUGGY]  buf.reset(off,  buffer,  length  -  toRead);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(off,  buffer,  length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(off,  buffer,  length  -  toRead);	  buf.reset(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
652	[BUG]  [BUGGY]  buf.reset(length,  buffer,  offset  -  toRead);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(length,  buffer,  offset  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(length,  buffer,  offset  -  toRead);	  buf.reset(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
653	[BUG]  [BUGGY]  buf.reset(toRead,  offset,  length  -  toRead);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(toRead,  offset,  length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(toRead,  offset,  length  -  toRead);	  buf.reset(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
654	[BUG]  [BUGGY]  buf.reset(buffer,  offset,  csize  -  toRead);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(buffer,  offset,  csize  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(buffer,  offset,  csize  -  toRead);	  buf.reset(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
655	[BUG]  [BUGGY]  buf.reset(buffer,  offset,  toRead  -  length);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(buffer,  offset,  toRead  -  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(buffer,  offset,  toRead  -  length);	  buf.reset(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
656	[BUG]  [BUGGY]  buf.put(buf,  length  -  toRead);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  length  -  toRead);	  buf.put(buffer,    length);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
657	[BUG]  [BUGGY]  buf.put(length,  buffer);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(length,  buffer);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(length,  buffer);	  buf.put(buffer,    length);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
658	[BUG]  [BUGGY]  buf.remove(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.remove(buffer,  offset,  length  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.remove(buffer,  offset,  length  -  1);	  buf.remove(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
659	[BUG]  [BUGGY]  buf.remove(buffer,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.remove(buffer,  offset,  length  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.remove(buffer,  offset,  length  +  1);	  buf.remove(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
660	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf[i]);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf[i]);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
661	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.setLength(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.setLength(buf[i]);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.setLength(buf[i]);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
662	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.setLength(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.setLength(buf[i]);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.setLength(buf[i]);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
663	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  buf.setLength(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  buf.setLength(buf[i]);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  buf.setLength(buf[i]);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
664	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buf.setLength(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buf.setLength(buf[i]);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buf.setLength(buf[i]);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
665	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buf.setLength(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buf.setLength(buf[i]);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buf.setLength(buf[i]);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
666	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  buffer,  0,  toRead);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  System.arraycopy(buf,  offset,  buffer,  0,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	System.arraycopy(buf,  offset,  buffer,  0,  toRead);	  System.arraycopy(buf,    offset,    current.bytesRead,    0,    toRead);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
667	[BUG]  [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buf.length,  0,  toRead);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buf.length,  0,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	System.arraycopy(current.bytesRead,  offset,  buf.length,  0,  toRead);	  System.arraycopy(buf,    offset,    current.bytesRead,    0,    toRead);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
668	[BUG]  [BUGGY]  buf.remove(current.bytesRead,  offset,  toRead,  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.remove(current.bytesRead,  offset,  toRead,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.remove(current.bytesRead,  offset,  toRead,  length);	  buf.remove(buffer,    offset,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
669	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining());  }  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining());  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining());  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buf.remaining());    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
670	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining());  }  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining());  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining());  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buf.remaining());    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
671	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining());  }  [CE]  illegal  start  of  type  [FE]                                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining());  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining());  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buf.remaining());    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
672	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining());  }  [CE]  illegal  start  of  type  [FE]                                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining());  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining());  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buf.remaining());    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
673	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining());  }  [CE]  illegal  start  of  type  [FE]                                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining());  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining());  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buf.remaining());    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
674	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining());  }  [CE]  illegal  start  of  type  [FE]                                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining());  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining());  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buf.remaining());    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
675	[BUG]  [BUGGY]  buffer.remove(buf,  offset,  toRead);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.remove(buf,  offset,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.remove(buf,  offset,  toRead);	  buf.remove(buffer,    length,    toRead);    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
676	[BUG]  [BUGGY]  buf.reset(off,  length,  buffer,  toRead);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(off,  length,  buffer,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(off,  length,  buffer,  toRead);	  buf.reset(off,    buffer,    toRead);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
677	[BUG]  [BUGGY]  buf.set(0,  length,  buffer.off);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(0,  length,  buffer.off);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(0,  length,  buffer.off);	  buf.set(0,    toRead,    buffer.off);    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
678	[BUG]  [BUGGY]  buf.set(0,  toRead,  0,  buffer.length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(0,  toRead,  0,  buffer.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(0,  toRead,  0,  buffer.length);	  buf.set(0,    toRead,    buffer.off);    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
679	[BUG]  [BUGGY]  buf.set(0,  buffer.off,  toRead);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(0,  buffer.off,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(0,  buffer.off,  toRead);	  buf.set(0,    toRead,    buffer.off);    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
680	[BUG]  [BUGGY]  buf.put(buf,  offset,  toRead,  csize);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  offset,  toRead,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  offset,  toRead,  csize);	  buf.put(buffer,    length,    toRead,    csize);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
681	[BUG]  [BUGGY]  buffer.put(buf,  offset,  toRead,  csize);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.put(buf,  offset,  toRead,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.put(buf,  offset,  toRead,  csize);	  buf.put(buffer,    length,    toRead,    csize);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
682	[BUG]  [BUGGY]  buf.put(buf,  length,  toRead,  csize);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  length,  toRead,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  length,  toRead,  csize);	  buf.put(buffer,    length,    toRead,    csize);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
683	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(current.bytesRead,  offset,  current.bytesRead,  0,  length);  buffer.remaining();  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  System.arraycopy(current.bytesRead,  offset,  current.bytesRead,  0,  length);  buffer.remaining();  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  System.arraycopy(current.bytesRead,  offset,  current.bytesRead,  0,  length);  buffer.remaining();  }	  if(length    >    0)    {    System.arraycopy(buf,    offset,    current.bytesRead,    0,    length);    buffer.remaining();    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
684	[BUG]  [BUGGY]  System.arraycopy(current.bytesRead,  offset,  current.length,  0,  length);  buffer.remaining();  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  System.arraycopy(current.bytesRead,  offset,  current.length,  0,  length);  buffer.remaining();  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	System.arraycopy(current.bytesRead,  offset,  current.length,  0,  length);  buffer.remaining();	  if(length    >    0)    {    System.arraycopy(buf,    offset,    current.bytesRead,    0,    length);    buffer.remaining();    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
685	[BUG]  [BUGGY]  buf.get(buffer,  offset,  length,  current.bytesRead,  csize  -  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  length,  current.bytesRead,  csize  -  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  length,  current.bytesRead,  csize  -  current.bytesRead);	  buf.get(buffer,    offset,    toRead,    length    -    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
686	[BUG]  [BUGGY]  buf.put(buffer,  offset,  csize,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  offset,  csize,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  offset,  csize,  current.bytesRead);	  buf.put(buffer,    offset,    length,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
687	[BUG]  [BUGGY]  buffer.put(buf,  toRead  +  1);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.put(buf,  toRead  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.put(buf,  toRead  +  1);	  buffer.put(buf,    toRead);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
688	[BUG]  [BUGGY]  buffer.put(buf,  toRead  -  1);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.put(buf,  toRead  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.put(buf,  toRead  -  1);	  buffer.put(buf,    toRead);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
689	[BUG]  [BUGGY]  buffer.put(buf,  new  ByteBuffer(toRead));  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.put(buf,  new  ByteBuffer(toRead));  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.put(buf,  new  ByteBuffer(toRead));	  buffer.put(buf,    toRead);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
690	[BUG]  [BUGGY]  buffer.put(buf,  csize);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.put(buf,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.put(buf,  csize);	  buffer.put(buf,    toRead);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
691	[BUG]  [BUGGY]  buf.put(buffer,  offset,  length  +  1,  toRead);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  offset,  length  +  1,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  offset,  length  +  1,  toRead);	  buf.put(buffer,    offset,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
692	[BUG]  [BUGGY]  buf.put(buffer,  offset,  length  +  1  -  toRead);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  offset,  length  +  1  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  offset,  length  +  1  -  toRead);	  buf.put(buffer,    offset,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
693	[BUG]  [BUGGY]  buf.set(off,  buffer,  length  +  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(off,  buffer,  length  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(off,  buffer,  length  +  1);	  buf.set(buffer,    offset,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
694	[BUG]  [BUGGY]  buf.set(buffer,  offset,  length  -  toRead  +  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  length  -  toRead  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  length  -  toRead  +  1);	  buf.set(buffer,    offset,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
695	[BUG]  [BUGGY]  buf.set(buffer,  offset,  length  +  1  -  toRead);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  length  +  1  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  length  +  1  -  toRead);	  buf.set(buffer,    offset,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
696	[BUG]  [BUGGY]  buffer.delete(buffer,  offset,  toRead,  length  +  1);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.delete(buffer,  offset,  toRead,  length  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.delete(buffer,  offset,  toRead,  length  +  1);	  buffer.delete(buffer,    offset,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
697	[BUG]  [BUGGY]  buffer.delete(buf,  offset,  toRead,  length);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.delete(buf,  offset,  toRead,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.delete(buf,  offset,  toRead,  length);	  buffer.delete(buffer,    offset,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
698	[BUG]  [BUGGY]  buffer.delete(buffer,  offset,  csize,  toRead);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.delete(buffer,  offset,  csize,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.delete(buffer,  offset,  csize,  toRead);	  buffer.delete(buffer,    offset,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
699	[BUG]  [BUGGY]  buf.put(buf,  csize  +  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  csize  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  csize  +  1);	  buf.put(buf,    csize);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
700	[BUG]  [BUGGY]  buf.set(buffer,  offset,  csize,  toRead,  length  -  toRead);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  csize,  toRead,  length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  csize,  toRead,  length  -  toRead);	  buf.set(buffer,    offset,    toRead,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
701	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  size);  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  size);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  size);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buf.remaining(),    size);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
702	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  size);  }  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  size);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  size);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buf.remaining(),    size);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
703	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  toRead);  }  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  toRead);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buf.remaining(),    size);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
704	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  size);  }  [CE]  illegal  start  of  type  [FE]                                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  size);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  size);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buf.remaining(),    size);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
705	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  length);  }  [CE]  illegal  start  of  type  [FE]                                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  length);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  length);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buf.remaining(),    size);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
706	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  size);  }  [CE]  illegal  start  of  type  [FE]                                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  size);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  size);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buf.remaining(),    size);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
707	[BUG]  [BUGGY]  buf.put(current.bytesRead,  length  -  toRead);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(current.bytesRead,  length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(current.bytesRead,  length  -  toRead);	  buf.put(current.bytesRead,    toRead);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
708	[BUG]  [BUGGY]  buf.put(buf,  toRead,  buffer);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  toRead,  buffer);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  toRead,  buffer);	  buf.put(offset,    toRead,    buffer);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
709	[BUG]  [BUGGY]  buf.put(buf,  off,  toRead  +  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  off,  toRead  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  off,  toRead  +  1);	  buf.put(buf,    off,    toRead);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
710	[BUG]  [BUGGY]  buf.put(buf,  off,  csize);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  off,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  off,  csize);	  buf.put(buf,    off,    toRead);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
711	[BUG]  [BUGGY]  buf.put(buf,  off,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  off,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  off,  current.bytesRead);	  buf.put(buf,    off,    toRead);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
712	[BUG]  [BUGGY]  buf.delete(buffer,  offset,  csize  -  toRead);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.delete(buffer,  offset,  csize  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.delete(buffer,  offset,  csize  -  toRead);	  buf.delete(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
713	[BUG]  [BUGGY]  buf.delete(buffer,  offset,  length  -  toRead,  csize);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.delete(buffer,  offset,  length  -  toRead,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.delete(buffer,  offset,  length  -  toRead,  csize);	  buf.delete(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
714	[BUG]  [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buf.length,  0,  length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buf.length,  0,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	System.arraycopy(current.bytesRead,  offset,  buf.length,  0,  length);	  System.arraycopy(buf,    offset,    current.bytesRead,    0,    length);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
715	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  length);  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  length);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  length);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buf.remaining(),    length);    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
716	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  length);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  length);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  length);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buf.remaining(),    length);    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
717	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  length);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  length);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  length);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buf.remaining(),    length);    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
718	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  length);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  length);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  length);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buf.remaining(),    length);    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
719	[BUG]  [BUGGY]  buffer.get(buffer,  offset,  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.get(buffer,  offset,  length,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.get(buffer,  offset,  length,  current.bytesRead);	  buf.get(buffer,    offset,    toRead,    length,    size);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
720	[BUG]  [BUGGY]  buf.put(buf,  offset,  toRead  -  length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  offset,  toRead  -  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  offset,  toRead  -  length);	  buf.put(buf,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
721	[BUG]  [BUGGY]  buf.put(buf,  offset,  csize  -  toRead);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  offset,  csize  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  offset,  csize  -  toRead);	  buf.put(buf,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
722	[BUG]  [BUGGY]  buf.put(current.bytesRead,  length,  toRead);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(current.bytesRead,  length,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(current.bytesRead,  length,  toRead);	  buf.put(buf,    length,    toRead);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
723	[BUG]  [BUGGY]  buf.reset(length,  offset,  toRead,  buffer);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(length,  offset,  toRead,  buffer);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(length,  offset,  toRead,  buffer);	  buf.reset(buffer,    offset,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
724	[BUG]  [BUGGY]  buf.reset(off,  buffer,  toRead,  length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(off,  buffer,  toRead,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(off,  buffer,  toRead,  length);	  buf.reset(buffer,    offset,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
725	[BUG]  [BUGGY]  buf.reset(buffer,  offset,  toRead,  length  +  1);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(buffer,  offset,  toRead,  length  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(buffer,  offset,  toRead,  length  +  1);	  buf.reset(buffer,    offset,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
726	[BUG]  [BUGGY]  buf.get(buffer,  offset,  toRead,  length,  current.length  -  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  toRead,  length,  current.length  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  toRead,  length,  current.length  -  1);	  buf.get(buffer,    offset,    toRead,    length,    current.length);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
727	[BUG]  [BUGGY]  buf.put(buffer,  length  -  1,  toRead);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  length  -  1,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  length  -  1,  toRead);	  buf.put(toRead,    length,    buffer);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
728	[BUG]  [BUGGY]  buf.reset(off,  buffer,  length,  toRead);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(off,  buffer,  length,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(off,  buffer,  length,  toRead);	  buf.reset(buffer,    offset,    length,    toRead);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
729	[BUG]  [BUGGY]  buf.put(buf,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  offset,  length  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  offset,  length  -  1);	  buf.put(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
730	[BUG]  [BUGGY]  buf.set(buffer,  offset,  csize  -  toRead);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  csize  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  csize  -  toRead);	  buf.set(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
731	[BUG]  [BUGGY]  buf.set(off,  buffer,  length  -  toRead);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(off,  buffer,  length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(off,  buffer,  length  -  toRead);	  buf.set(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
732	[BUG]  [BUGGY]  buf.set(buffer,  offset,  length  -  toRead,  csize);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  length  -  toRead,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  length  -  toRead,  csize);	  buf.set(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
733	[BUG]  [BUGGY]  buf.set(buffer,  offset,  toRead  -  length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  toRead  -  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  toRead  -  length);	  buf.set(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
734	[BUG]  [BUGGY]  buf.set(off,  buffer,  length,  csize);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(off,  buffer,  length,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(off,  buffer,  length,  csize);	  buf.set(buffer,    offset,    length,    csize);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
735	[BUG]  [BUGGY]  buf.put(buffer,  offset,  toRead  -  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  offset,  toRead  -  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  offset,  toRead  -  length);	  buf.put(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
736	[BUG]  [BUGGY]  buf.put(buffer,  offset,  csize  -  toRead);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  offset,  csize  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  offset,  csize  -  toRead);	  buf.put(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
737	[BUG]  [BUGGY]  buf.put(buffer,  length,  buffer.length  -  toRead);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  length,  buffer.length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  length,  buffer.length  -  toRead);	  buf.put(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
738	[BUG]  [BUGGY]  buffer.delete(buffer,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.delete(buffer,  offset,  length  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.delete(buffer,  offset,  length  +  1);	  buffer.delete(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
739	[BUG]  [BUGGY]  buffer.delete(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.delete(buffer,  offset,  length  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.delete(buffer,  offset,  length  -  1);	  buffer.delete(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
740	[BUG]  [BUGGY]  buf.set(buffer,  offset,  toRead,  length  *  1);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  toRead,  length  *  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  toRead,  length  *  1);	  buf.set(buffer,    offset,    toRead,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
741	[BUG]  [BUGGY]  buf.set(buffer,  offset,  toRead,  length  *  2  +  1);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  toRead,  length  *  2  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  toRead,  length  *  2  +  1);	  buf.set(buffer,    offset,    toRead,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
742	[BUG]  [BUGGY]  System.arraycopy(current.bytesRead,  offset,  current.bytesRead,  0,  length);  toRead  =  0;  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  System.arraycopy(current.bytesRead,  offset,  current.bytesRead,  0,  length);  toRead  =  0;  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	System.arraycopy(current.bytesRead,  offset,  current.bytesRead,  0,  length);  toRead  =  0;	  if(length    >    0)    {    System.arraycopy(buf,    offset,    current.bytesRead,    0,    length);    toRead    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
743	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(current.bytesRead,  offset,  current.bytesRead,  0,  length);  toRead  =  0;  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  System.arraycopy(current.bytesRead,  offset,  current.bytesRead,  0,  length);  toRead  =  0;  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  System.arraycopy(current.bytesRead,  offset,  current.bytesRead,  0,  length);  toRead  =  0;  }	  if(length    >    0)    {    System.arraycopy(buf,    offset,    current.bytesRead,    0,    length);    toRead    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
744	[BUG]  [BUGGY]  buf.put(buf,  offset,  toRead,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  offset,  toRead,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  offset,  toRead,  current.bytesRead);	  buf.put(buffer,    length,    toRead,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
745	[BUG]  [BUGGY]  buffer.put(buf,  offset,  toRead,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.put(buf,  offset,  toRead,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.put(buf,  offset,  toRead,  current.bytesRead);	  buf.put(buffer,    length,    toRead,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
746	[BUG]  [BUGGY]  buf.put(buf,  length,  current.bytesRead,  toRead);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  length,  current.bytesRead,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  length,  current.bytesRead,  toRead);	  buf.put(buffer,    length,    toRead,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
747	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  buf,  0,  buf.length);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  System.arraycopy(buf,  offset,  buf,  0,  buf.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	System.arraycopy(buf,  offset,  buf,  0,  buf.length);	  System.arraycopy(buf,    offset,    toRead,    0,    buf.length);    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
748	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  buf,  0,  length);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  System.arraycopy(buf,  offset,  buf,  0,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	System.arraycopy(buf,  offset,  buf,  0,  length);	  System.arraycopy(buf,    offset,    toRead,    0,    buf.length);    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
749	[BUG]  [BUGGY]  System.arraycopy(buf,  off,  buf,  0,  buf.length);  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  System.arraycopy(buf,  off,  buf,  0,  buf.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	System.arraycopy(buf,  off,  buf,  0,  buf.length);	  System.arraycopy(buf,    offset,    toRead,    0,    buf.length);    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
750	[BUG]  [BUGGY]  Buffer  buf.reset(length,  buffer,  offset,  toRead);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  Buffer  buf.reset(length,  buffer,  offset,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	Buffer  buf.reset(length,  buffer,  offset,  toRead);	  Buffer    buf.reset(buffer,    offset,    length,    toRead);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
751	[BUG]  [BUGGY]  Buffer  buf.reset(toRead,  offset,  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  Buffer  buf.reset(toRead,  offset,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	Buffer  buf.reset(toRead,  offset,  length);	  Buffer    buf.reset(buffer,    offset,    length,    toRead);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
752	[BUG]  [BUGGY]  Buffer  buf.reset(length,  offset,  buffer,  toRead);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  Buffer  buf.reset(length,  offset,  buffer,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	Buffer  buf.reset(length,  offset,  buffer,  toRead);	  Buffer    buf.reset(buffer,    offset,    length,    toRead);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
753	[BUG]  [BUGGY]  Buffer  buf.reset(current,  offset,  length,  toRead);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  Buffer  buf.reset(current,  offset,  length,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	Buffer  buf.reset(current,  offset,  length,  toRead);	  Buffer    buf.reset(buffer,    offset,    length,    toRead);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
754	[BUG]  [BUGGY]  buf.put(buf,  offset,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  offset,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  offset,  current.bytesRead);	  buf.put(buffer,    length,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
755	[BUG]  [BUGGY]  buf.put(buf,  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  length,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  length,  current.bytesRead);	  buf.put(buffer,    length,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
756	[BUG]  [BUGGY]  buf.get(buffer,  offset,  csize,  toRead,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  csize,  toRead,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  csize,  toRead,  current.bytesRead);	  buf.get(buffer,    offset,    toRead,    length,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
757	[BUG]  [BUGGY]  buf.get(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  length  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  length  -  1);	  buf.get(buffer,    offset,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
758	[BUG]  [BUGGY]  buf.set(buffer,  toRead,  buffer);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  toRead,  buffer);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  toRead,  buffer);	  buf.set(off,    toRead,    buffer);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
759	[BUG]  [BUGGY]  buf.reset(current,  off,  toRead);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(current,  off,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(current,  off,  toRead);	  buf.reset(buffer,    off,    toRead);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
760	[BUG]  [BUGGY]  buf.put(buffer,  offset,  csize,  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  offset,  csize,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  offset,  csize,  length);	  buf.put(buffer,    offset,    length,    csize);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
761	[BUG]  [BUGGY]  Buffer  buf.remove(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  Buffer  buf.remove(buffer,  offset,  length  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	Buffer  buf.remove(buffer,  offset,  length  -  1);	  Buffer    buf.remove(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
762	[BUG]  [BUGGY]  Buffer  buf.remove(buffer,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  Buffer  buf.remove(buffer,  offset,  length  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	Buffer  buf.remove(buffer,  offset,  length  +  1);	  Buffer    buf.remove(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
763	[BUG]  [BUGGY]  Buffer  buf.remove(buf,  offset,  length  -  toRead);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  Buffer  buf.remove(buf,  offset,  length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	Buffer  buf.remove(buf,  offset,  length  -  toRead);	  Buffer    buf.remove(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
764	[BUG]  [BUGGY]  Buffer  buf.remove(current.buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  Buffer  buf.remove(current.buffer,  offset,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	Buffer  buf.remove(current.buffer,  offset,  length);	  Buffer    buf.remove(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
765	[BUG]  [BUGGY]  if(buf!=  null)  {  buf.put(toRead,  buffer);  }  else  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(buf!=  null)  {  buf.put(toRead,  buffer);  }  else  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(buf!=  null)  {  buf.put(toRead,  buffer);  }  else  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  }	  buf.put(toRead,    buffer);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
766	[BUG]  [BUGGY]  if(buf!=  null)  {  buf.put(toRead,  buffer);  }  else  {  System.arraycopy(buf,  offset,  current.bytesReadFromStream,  0,  toRead);  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(buf!=  null)  {  buf.put(toRead,  buffer);  }  else  {  System.arraycopy(buf,  offset,  current.bytesReadFromStream,  0,  toRead);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(buf!=  null)  {  buf.put(toRead,  buffer);  }  else  {  System.arraycopy(buf,  offset,  current.bytesReadFromStream,  0,  toRead);  }	  buf.put(toRead,    buffer);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
767	[BUG]  [BUGGY]  if(buf!=  null)  {  buf.put(toRead,  buffer);  }  else  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  break;  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(buf!=  null)  {  buf.put(toRead,  buffer);  }  else  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  break;  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(buf!=  null)  {  buf.put(toRead,  buffer);  }  else  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  break;  }	  buf.put(toRead,    buffer);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
768	[BUG]  [BUGGY]  if(buf!=  null)  {  buf.put(toRead,  buffer);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(buf!=  null)  {  buf.put(toRead,  buffer);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(buf!=  null)  {  buf.put(toRead,  buffer);  }	  buf.put(toRead,    buffer);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
769	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buffer[i]  =  new  ByteBuffer(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buffer[i]  =  new  ByteBuffer(buf[i]);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buffer[i]  =  new  ByteBuffer(buf[i]);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteBuffer(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
770	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  buffer[i]  =  new  ByteBuffer(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  buffer[i]  =  new  ByteBuffer(buf[i]);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  buffer[i]  =  new  ByteBuffer(buf[i]);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteBuffer(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
771	[BUG]  [BUGGY]  buf.remove(buf,  offset,  toRead);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.remove(buf,  offset,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.remove(buf,  offset,  toRead);	  buf.remove(buffer,    off,    toRead);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
772	[BUG]  [BUGGY]  buf.remove(buf,  off,  toRead);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.remove(buf,  off,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.remove(buf,  off,  toRead);	  buf.remove(buffer,    off,    toRead);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
773	[BUG]  [BUGGY]  buf.get(buffer,  offset,  length  -  1,  toRead);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  length  -  1,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  length  -  1,  toRead);	  buf.get(buffer,    offset,    toRead,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
774	[BUG]  [BUGGY]  buf.get(buffer,  offset,  length,  csize  -  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  length,  csize  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  length,  csize  -  1);	  buf.get(buffer,    offset,    toRead,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
775	[BUG]  [BUGGY]  buf.get(buffer,  offset,  toRead,  length  -  2);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  toRead,  length  -  2);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  toRead,  length  -  2);	  buf.get(buffer,    offset,    toRead,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
776	[BUG]  [BUGGY]  buf.get(buffer,  offset,  csize,  toRead  -  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  csize,  toRead  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  csize,  toRead  -  1);	  buf.get(buffer,    offset,    toRead,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
777	[BUG]  [BUGGY]  System.arraycopy(buf,  off,  current.bytesRead,  0,  buf.length);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  System.arraycopy(buf,  off,  current.bytesRead,  0,  buf.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	System.arraycopy(buf,  off,  current.bytesRead,  0,  buf.length);	  System.arraycopy(buf,    offset,    toRead,    0,    buf.length);    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
778	[BUG]  [BUGGY]  System.arraycopy(buf,  off,  buffer,  0,  buf.length);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  System.arraycopy(buf,  off,  buffer,  0,  buf.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	System.arraycopy(buf,  off,  buffer,  0,  buf.length);	  System.arraycopy(buf,    offset,    toRead,    0,    buf.length);    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
779	[BUG]  [BUGGY]  buf.get(buffer,  offset,  current.bytesRead,  length  -  toRead);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  current.bytesRead,  length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  current.bytesRead,  length  -  toRead);	  buf.get(buffer,    offset,    toRead,    length    -    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
780	[BUG]  [BUGGY]  buf.set(0,  toRead,  buffer,  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(0,  toRead,  buffer,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(0,  toRead,  buffer,  length);	  buf.set(off,    buffer,    length);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
781	[BUG]  [BUGGY]  buffer.remove(buffer,  offset,  toRead,  length  -  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.remove(buffer,  offset,  toRead,  length  -  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.remove(buffer,  offset,  toRead,  length  -  current.bytesRead);	  buffer.remove(buffer,    offset,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
782	[BUG]  [BUGGY]  buf.put(buf,  current.bytesRead,  length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  current.bytesRead,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  current.bytesRead,  length);	  buf.put(buffer,    length,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
783	[BUG]  [BUGGY]  buf.put(buf,  toRead  -  start);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  toRead  -  start);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  toRead  -  start);	  buf.put(buf,    toRead);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
784	[BUG]  [BUGGY]  Buffer  buf.remove(current.fileNameLen,  buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  Buffer  buf.remove(current.fileNameLen,  buffer,  offset,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	Buffer  buf.remove(current.fileNameLen,  buffer,  offset,  length);	  Buffer    buf.remove(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
785	[BUG]  [BUGGY]  buffer.put(buf,  toRead  -  start);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.put(buf,  toRead  -  start);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.put(buf,  toRead  -  start);	  buffer.put(buf,    toRead);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
786	[BUG]  [BUGGY]  buf.put(buf,  toRead  -  toRead  +  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  toRead  -  toRead  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  toRead  -  toRead  +  1);	  buf.put(buf,    toRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
787	[BUG]  [BUGGY]  buf.get(buffer,  offset,  toRead,  length  -  current.length);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  toRead,  length  -  current.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  toRead,  length  -  current.length);	  buf.get(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
788	[BUG]  [BUGGY]  buf.get(buffer,  offset,  length  -  current.bytesRead);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  length  -  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  length  -  current.bytesRead);	  buf.get(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
789	[BUG]  [BUGGY]  buf.put(buf,  toRead,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  toRead,  offset,  length  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  toRead,  offset,  length  -  1);	  buf.put(buffer,    toRead,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
790	[BUG]  [BUGGY]  buf.put(buffer,  toRead,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  toRead,  offset,  length  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  toRead,  offset,  length  -  1);	  buf.put(buffer,    toRead,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
791	[BUG]  [BUGGY]  buf.set(buffer,  offset,  toRead  +  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  toRead  +  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  toRead  +  length);	  buf.set(buffer,    offset,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
792	[BUG]  [BUGGY]  buf.set(buffer,  offset,  toRead  +  length  +  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  toRead  +  length  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  toRead  +  length  +  1);	  buf.set(buffer,    offset,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
793	[BUG]  [BUGGY]  if(toRead  >  0)  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  toRead  +=  length;  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(toRead  >  0)  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  toRead  +=  length;  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(toRead  >  0)  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  toRead  +=  length;  }	  if(length    >    0)    {    System.arraycopy(buf,    offset,    current.bytesRead,    0,    length);    toRead    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
794	[BUG]  [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buffer.length,  0,  length);  toRead  +=  length;  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buffer.length,  0,  length);  toRead  +=  length;  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	System.arraycopy(current.bytesRead,  offset,  buffer.length,  0,  length);  toRead  +=  length;	  if(length    >    0)    {    System.arraycopy(buf,    offset,    current.bytesRead,    0,    length);    toRead    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
795	[BUG]  [BUGGY]  if(toRead  >  0)  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  length);  toRead  +=  length;  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(toRead  >  0)  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  length);  toRead  +=  length;  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(toRead  >  0)  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  length);  toRead  +=  length;  }	  if(length    >    0)    {    System.arraycopy(buf,    offset,    current.bytesRead,    0,    length);    toRead    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
796	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(current.bytesRead,  offset,  buffer.offset,  length);  toRead  +=  length;  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  System.arraycopy(current.bytesRead,  offset,  buffer.offset,  length);  toRead  +=  length;  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  System.arraycopy(current.bytesRead,  offset,  buffer.offset,  length);  toRead  +=  length;  }	  if(length    >    0)    {    System.arraycopy(buf,    offset,    current.bytesRead,    0,    length);    toRead    +=    length;    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
797	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(current.bytesRead,  offset,  buffer.length,  0,  length);  toRead  =  0;  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  System.arraycopy(current.bytesRead,  offset,  buffer.length,  0,  length);  toRead  =  0;  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  System.arraycopy(current.bytesRead,  offset,  buffer.length,  0,  length);  toRead  =  0;  }	  if(length    >    0)    {    System.arraycopy(buf,    offset,    current.bytesRead,    0,    length);    toRead    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
798	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(current.bytesRead,  offset,  buffer.offset,  length);  toRead  =  0;  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  System.arraycopy(current.bytesRead,  offset,  buffer.offset,  length);  toRead  =  0;  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  System.arraycopy(current.bytesRead,  offset,  buffer.offset,  length);  toRead  =  0;  }	  if(length    >    0)    {    System.arraycopy(buf,    offset,    current.bytesRead,    0,    length);    toRead    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
799	[BUG]  [BUGGY]  System.arraycopy(current.bytesRead,  offset,  current.length,  0,  length);  toRead  =  0;  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  System.arraycopy(current.bytesRead,  offset,  current.length,  0,  length);  toRead  =  0;  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	System.arraycopy(current.bytesRead,  offset,  current.length,  0,  length);  toRead  =  0;	  if(length    >    0)    {    System.arraycopy(buf,    offset,    current.bytesRead,    0,    length);    toRead    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
800	[BUG]  [BUGGY]  buffer.get(buffer,  offset,  length,  current.bytesRead,  size);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.get(buffer,  offset,  length,  current.bytesRead,  size);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.get(buffer,  offset,  length,  current.bytesRead,  size);	  buf.get(buffer,    offset,    toRead,    length,    size);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
801	[BUG]  [BUGGY]  buf.set(buffer,  offset,  length  -  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  length  -  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  length  -  current.bytesRead);	  buf.set(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
802	[BUG]  [BUGGY]  buf.set(buffer,  offset,  toRead,  length  -  current.length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  toRead,  length  -  current.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  toRead,  length  -  current.length);	  buf.set(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
803	[BUG]  [BUGGY]  buf.set(buffer,  offset,  length  -  toRead,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  length  -  toRead,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  length  -  toRead,  current.bytesRead);	  buf.set(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
804	[BUG]  [BUGGY]  buf.put(buffer,  offset,  length,  current.length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  offset,  length,  current.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  offset,  length,  current.length);	  buf.put(buffer,    offset,    length,    csize);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
805	[BUG]  [BUGGY]  buf.put(buffer,  offset,  length,  csize,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  offset,  length,  csize,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  offset,  length,  csize,  current.bytesRead);	  buf.put(buffer,    offset,    length,    csize);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
806	[BUG]  [BUGGY]  buf.put(buf,  off,  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  off,  length,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  off,  length,  current.bytesRead);	  buf.put(buffer,    offset,    length,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
807	[BUG]  [BUGGY]  buf.put(buf,  offset,  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  offset,  length,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  offset,  length,  current.bytesRead);	  buf.put(buffer,    offset,    length,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
808	[BUG]  [BUGGY]  if(length  <  =  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  new  ByteBuffer(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  <  =  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  new  ByteBuffer(buf[i]);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  <  =  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  new  ByteBuffer(buf[i]);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteBuffer(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
809	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  new  ByteBuffer(buf[i].remaining());  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  new  ByteBuffer(buf[i].remaining());  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  new  ByteBuffer(buf[i].remaining());  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteBuffer(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
810	[BUG]  [BUGGY]  buf.delete(buffer,  offset,  toRead,  length  -  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.delete(buffer,  offset,  toRead,  length  -  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.delete(buffer,  offset,  toRead,  length  -  current.bytesRead);	  buf.delete(buffer,    offset,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
811	[BUG]  [BUGGY]  buf.delete(buffer,  off,  length,  toRead);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.delete(buffer,  off,  length,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.delete(buffer,  off,  length,  toRead);	  buf.delete(buffer,    offset,    length,    toRead);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
812	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  current.bytesRead);  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  current.bytesRead);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  current.bytesRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buf.remaining(),    size);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
813	[BUG]  [BUGGY]  buffer.put(buf,  toRead,  length  -  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.put(buf,  toRead,  length  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.put(buf,  toRead,  length  -  1);	  buffer.put(buffer,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
814	[BUG]  [BUGGY]  buffer.put(buffer,  offset,  toRead,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.put(buffer,  offset,  toRead,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.put(buffer,  offset,  toRead,  length);	  buffer.put(buffer,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
815	[BUG]  [BUGGY]  buf.get(buffer,  offset,  toRead,  buffer.length  -  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  toRead,  buffer.length  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  toRead,  buffer.length  -  1);	  buf.get(buffer,    offset,    toRead,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
816	[BUG]  [BUGGY]  buf.get(buffer,  offset,  toRead,  length  -  1,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  toRead,  length  -  1,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  toRead,  length  -  1,  current.bytesRead);	  buf.get(buffer,    offset,    toRead,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
817	[BUG]  [BUGGY]  buf.get(buffer,  offset,  toRead,  csize  -  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  toRead,  csize  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  toRead,  csize  -  1);	  buf.get(buffer,    offset,    toRead,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
818	[BUG]  [BUGGY]  buf.put(buf,  offset,  toRead  -  1);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  offset,  toRead  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  offset,  toRead  -  1);	  buf.put(buffer,    offset,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
819	[BUG]  [BUGGY]  buf.set(0,  toRead,  buffer.off  +  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(0,  toRead,  buffer.off  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(0,  toRead,  buffer.off  +  1);	  buf.set(0,    toRead,    buffer.off);    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
820	[BUG]  [BUGGY]  buf.set(0,  toRead,  buffer.length  -  toRead);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(0,  toRead,  buffer.length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(0,  toRead,  buffer.length  -  toRead);	  buf.set(0,    toRead,    buffer.off);    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
821	[BUG]  [BUGGY]  buffer.remove(offset,  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.remove(offset,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.remove(offset,  length);	  buffer.remove(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
822	[BUG]  [BUGGY]  buffer.remove(length,  offset,  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.remove(length,  offset,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.remove(length,  offset,  length);	  buffer.remove(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
823	[BUG]  [BUGGY]  buffer.remove(current.fileNameLen,  offset,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.remove(current.fileNameLen,  offset,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.remove(current.fileNameLen,  offset,  length);	  buffer.remove(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
824	[BUG]  [BUGGY]  buf.set(buffer,  offset,  length,  current.bytesRead,  length  +  1);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  length,  current.bytesRead,  length  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  length,  current.bytesRead,  length  +  1);	  buf.set(buffer,    offset,    toRead,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
825	[BUG]  [BUGGY]  buf.set(buffer,  offset,  toRead,  buffer.length  +  1);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  toRead,  buffer.length  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  toRead,  buffer.length  +  1);	  buf.set(buffer,    offset,    toRead,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
826	[BUG]  [BUGGY]  buf.set(buffer,  offset,  toRead,  csize  +  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  toRead,  csize  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  toRead,  csize  +  1);	  buf.set(buffer,    offset,    toRead,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
827	[BUG]  [BUGGY]  buf.remove(current.bytesRead,  buffer.offset,  toRead);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.remove(current.bytesRead,  buffer.offset,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.remove(current.bytesRead,  buffer.offset,  toRead);	  buf.remove(current.bytesRead,    offset,    toRead);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
828	[BUG]  [BUGGY]  buf.put(buffer,  offset,  toRead  +  length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  offset,  toRead  +  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  offset,  toRead  +  length);	  buf.put(buffer,    offset,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
829	[BUG]  [BUGGY]  buf.put(buf,  offset,  toRead  +  1);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  offset,  toRead  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  offset,  toRead  +  1);	  buf.put(buffer,    offset,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
830	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  end;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining());  }  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  end;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining());  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  end;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining());  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buf.remaining());    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
831	[BUG]  [BUGGY]  buf.get(buffer,  offset,  csize,  current.length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  csize,  current.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  csize,  current.length);	  buf.get(buffer,    offset,    length,    current.length);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
832	[BUG]  [BUGGY]  buf.get(buffer,  offset,  current.length,  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  current.length,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  current.length,  length);	  buf.get(buffer,    offset,    length,    current.length);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
833	[BUG]  [BUGGY]  while(toRead  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remaining();  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  while(toRead  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remaining();  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	while(toRead  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remaining();  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remaining();    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
834	[BUG]  [BUGGY]  read(buf,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remaining();  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  read(buf,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remaining();  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	read(buf,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remaining();  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remaining();    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
835	[BUG]  [BUGGY]  buf.reset(offset,  length,  toRead);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(offset,  length,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(offset,  length,  toRead);	  buf.reset(length,    buffer,    toRead);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
836	[BUG]  [BUGGY]  buf.reset(offset,  buffer,  toRead);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(offset,  buffer,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(offset,  buffer,  toRead);	  buf.reset(length,    buffer,    toRead);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
837	[BUG]  [BUGGY]  Buffer  buf.reset(buffer,  offset,  length,  current.length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  Buffer  buf.reset(buffer,  offset,  length,  current.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	Buffer  buf.reset(buffer,  offset,  length,  current.length);	  Buffer    buf.reset(buffer,    offset,    length,    toRead);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
838	[BUG]  [BUGGY]  Buffer  buf.reset(buffer,  offset,  length  -  toRead);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  Buffer  buf.reset(buffer,  offset,  length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	Buffer  buf.reset(buffer,  offset,  length  -  toRead);	  Buffer    buf.reset(buffer,    offset,    length,    toRead);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
839	[BUG]  [BUGGY]  Buffer  buf.reset(buffer,  offset,  length,  csize);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  Buffer  buf.reset(buffer,  offset,  length,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	Buffer  buf.reset(buffer,  offset,  length,  csize);	  Buffer    buf.reset(buffer,    offset,    length,    toRead);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
840	[BUG]  [BUGGY]  buf.put(buf,  off,  toRead  -  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  off,  toRead  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  off,  toRead  -  1);	  buf.put(buf,    off,    toRead);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
841	[BUG]  [BUGGY]  buf.put(buf,  offset,  length,  toRead,  csize);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  offset,  length,  toRead,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  offset,  length,  toRead,  csize);	  buf.put(buffer,    length,    toRead,    csize);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
842	[BUG]  [BUGGY]  buf.put(buffer,  offset,  length,  toRead,  csize);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buffer,  offset,  length,  toRead,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buffer,  offset,  length,  toRead,  csize);	  buf.put(buffer,    length,    toRead,    csize);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
843	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(current.bytesRead,  offset,  buffer.remaining(),  length);  buffer.remaining();  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  System.arraycopy(current.bytesRead,  offset,  buffer.remaining(),  length);  buffer.remaining();  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  System.arraycopy(current.bytesRead,  offset,  buffer.remaining(),  length);  buffer.remaining();  }	  if(length    >    0)    {    System.arraycopy(buf,    offset,    current.bytesRead,    0,    length);    buffer.remaining();    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
844	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(current.bytesRead,  offset,  buf.remaining(),  0,  length);  buffer.remaining();  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  System.arraycopy(current.bytesRead,  offset,  buf.remaining(),  0,  length);  buffer.remaining();  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  System.arraycopy(current.bytesRead,  offset,  buf.remaining(),  0,  length);  buffer.remaining();  }	  if(length    >    0)    {    System.arraycopy(buf,    offset,    current.bytesRead,    0,    length);    buffer.remaining();    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
845	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(current.bytesRead,  offset,  buffer.offset,  length);  buffer.remaining();  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  System.arraycopy(current.bytesRead,  offset,  buffer.offset,  length);  buffer.remaining();  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  System.arraycopy(current.bytesRead,  offset,  buffer.offset,  length);  buffer.remaining();  }	  if(length    >    0)    {    System.arraycopy(buf,    offset,    current.bytesRead,    0,    length);    buffer.remaining();    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
846	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  length);  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  length);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buf.remaining(),  length);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buf.remaining(),    length);    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
847	[BUG]  [BUGGY]  buf.put(buf,  off,  length,  toRead);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  off,  length,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  off,  length,  toRead);	  buf.put(buffer,    offset,    length,    toRead);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
848	[BUG]  [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buffer.length,  0,  length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buffer.length,  0,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	System.arraycopy(current.bytesRead,  offset,  buffer.length,  0,  length);	  System.arraycopy(buf,    offset,    current.bytesRead,    0,    length);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
849	[BUG]  [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buf,  0,  length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buf,  0,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	System.arraycopy(current.bytesRead,  offset,  buf,  0,  length);	  System.arraycopy(buf,    offset,    current.bytesRead,    0,    length);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
850	[BUG]  [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buffer.offset,  length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buffer.offset,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	System.arraycopy(current.bytesRead,  offset,  buffer.offset,  length);	  System.arraycopy(buf,    offset,    current.bytesRead,    0,    length);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
851	[BUG]  [BUGGY]  buf.put(buf,  off,  toRead,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  off,  toRead,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  off,  toRead,  current.bytesRead);	  buf.put(buffer,    length,    toRead,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
852	[BUG]  [BUGGY]  buf.get(buffer,  offset,  toRead,  buffer.length  +  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  toRead,  buffer.length  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  toRead,  buffer.length  +  1);	  buf.get(buffer,    offset,    toRead,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
853	[BUG]  [BUGGY]  buf.get(buffer,  offset,  toRead,  csize  +  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  toRead,  csize  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  toRead,  csize  +  1);	  buf.get(buffer,    offset,    toRead,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
854	[BUG]  [BUGGY]  buf.get(buffer,  offset,  toRead,  length  +  1,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  toRead,  length  +  1,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  toRead,  length  +  1,  current.bytesRead);	  buf.get(buffer,    offset,    toRead,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
855	[BUG]  [BUGGY]  if(toRead  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(0);  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(toRead  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(0);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(toRead  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(0);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(0);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
856	[BUG]  [BUGGY]  while(toRead  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(0);  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  while(toRead  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(0);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	while(toRead  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(0);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(0);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
857	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(0);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(0);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(0);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(0);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
858	[BUG]  [BUGGY]  while(toRead  <  length)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(0);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  while(toRead  <  length)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(0);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	while(toRead  <  length)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(0);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(0);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
859	[BUG]  [BUGGY]  while(toRead  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(1);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  while(toRead  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(1);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	while(toRead  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(1);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(0);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
860	[BUG]  [BUGGY]  buf.reset(buffer,  offset,  toRead,  length  -  current.bytesRead);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(buffer,  offset,  toRead,  length  -  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(buffer,  offset,  toRead,  length  -  current.bytesRead);	  buf.reset(buffer,    offset,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
861	[BUG]  [BUGGY]  buf.get(buffer,  offset,  length,  csize,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  length,  csize,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  length,  csize,  current.bytesRead);	  buf.get(buffer,    offset,    toRead,    length,    csize);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
862	[BUG]  [BUGGY]  buf.get(buffer,  offset,  length,  current.csize);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  length,  current.csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  length,  current.csize);	  buf.get(buffer,    offset,    toRead,    length,    csize);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
863	[BUG]  [BUGGY]  buf.delete(buffer,  offset,  length  -  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.delete(buffer,  offset,  length  -  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.delete(buffer,  offset,  length  -  current.bytesRead);	  buf.delete(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
864	[BUG]  [BUGGY]  buf.delete(buffer,  offset,  toRead,  length  -  current.length);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.delete(buffer,  offset,  toRead,  length  -  current.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.delete(buffer,  offset,  toRead,  length  -  current.length);	  buf.delete(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
865	[BUG]  [BUGGY]  buf.reset(toRead,  buffer.length,  length);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(toRead,  buffer.length,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(toRead,  buffer.length,  length);	  buf.reset(toRead,    offset,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
866	[BUG]  [BUGGY]  buf.set(buffer,  offset,  current.bytesRead,  length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  current.bytesRead,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  current.bytesRead,  length);	  buf.set(buffer,    offset,    length,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
867	[BUG]  [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buf,  0,  toRead);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buf,  0,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	System.arraycopy(current.bytesRead,  offset,  buf,  0,  toRead);	  System.arraycopy(buf,    offset,    current.bytesRead,    0,    toRead);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
868	[BUG]  [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buffer.length,  0,  toRead);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buffer.length,  0,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	System.arraycopy(current.bytesRead,  offset,  buffer.length,  0,  toRead);	  System.arraycopy(buf,    offset,    current.bytesRead,    0,    toRead);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
869	[BUG]  [BUGGY]  System.arraycopy(current,  offset,  buffer.bytesRead,  0,  toRead);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  System.arraycopy(current,  offset,  buffer.bytesRead,  0,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	System.arraycopy(current,  offset,  buffer.bytesRead,  0,  toRead);	  System.arraycopy(buf,    offset,    current.bytesRead,    0,    toRead);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
870	[BUG]  [BUGGY]  buffer.delete(buffer,  offset,  toRead,  length  -  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.delete(buffer,  offset,  toRead,  length  -  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.delete(buffer,  offset,  toRead,  length  -  current.bytesRead);	  buffer.delete(buffer,    offset,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
871	[BUG]  [BUGGY]  buffer.delete(buffer,  offset,  toRead,  csize);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buffer.delete(buffer,  offset,  toRead,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buffer.delete(buffer,  offset,  toRead,  csize);	  buffer.delete(buffer,    offset,    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
872	[BUG]  [BUGGY]  buf.set(buf,  off,  length  -  toRead);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buf,  off,  length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buf,  off,  length  -  toRead);	  buf.set(buf,    off,    toRead);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
873	[BUG]  [BUGGY]  buf.reset(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(buffer,  offset,  length  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(buffer,  offset,  length  -  1);	  buf.reset(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
874	[BUG]  [BUGGY]  buf.put(buf,  new  InputStreamReader(toRead));  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  new  InputStreamReader(toRead));  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  new  InputStreamReader(toRead));	  buf.put(buffer,    length);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
875	[BUG]  [BUGGY]  buf.put(buf,  toRead  -  1,  length  -  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  toRead  -  1,  length  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  toRead  -  1,  length  -  1);	  buf.put(buf,    toRead    -    1);    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
876	[BUG]  [BUGGY]  buf.put(buf,  toRead  -  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  toRead  -  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  toRead  -  length);	  buf.put(buf,    toRead    -    1);    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
877	[BUG]  [BUGGY]  buf.set(buffer,  offset,  csize,  toRead,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  csize,  toRead,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  csize,  toRead,  current.bytesRead);	  buf.set(buffer,    offset,    toRead,    length,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
878	[BUG]  [BUGGY]  buf.set(buffer,  offset,  length,  csize,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  length,  csize,  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  length,  csize,  current.bytesRead);	  buf.set(buffer,    offset,    toRead,    length,    csize);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
879	[BUG]  [BUGGY]  buf.release(buffer,  offset,  toRead);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.release(buffer,  offset,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.release(buffer,  offset,  toRead);	  buf.delete(toRead,    offset,    buffer);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
880	[BUG]  [BUGGY]  buf.get(buffer,  offset,  current.bytesRead,  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  current.bytesRead,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  current.bytesRead,  length);	  buf.get(buffer,    offset,    length,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
881	[BUG]  [BUGGY]  buf.set(buffer,  offset,  csize,  current.bytesRead,  toRead);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  csize,  current.bytesRead,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  csize,  current.bytesRead,  toRead);	  buf.set(buffer,    offset,    csize,    toRead);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
882	[BUG]  [BUGGY]  if(toRead  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining());  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(toRead  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining());  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(toRead  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining());  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf.remaining());    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
883	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  end;  ++i)  {  buf.setLength(buf.remaining());  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  end;  ++i)  {  buf.setLength(buf.remaining());  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  end;  ++i)  {  buf.setLength(buf.remaining());  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf.remaining());    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
884	[BUG]  [BUGGY]  buf.remove(current.bytesRead,  offset,  length  -  toRead);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.remove(current.bytesRead,  offset,  length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.remove(current.bytesRead,  offset,  length  -  toRead);	  buf.remove(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
885	[BUG]  [BUGGY]  buf.remove(buffer,  offset,  toRead  +  length  -  toRead);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.remove(buffer,  offset,  toRead  +  length  -  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.remove(buffer,  offset,  toRead  +  length  -  toRead);	  buf.remove(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
886	[BUG]  [BUGGY]  while(toRead  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.reset();  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  while(toRead  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.reset();  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	while(toRead  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.reset();  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.reset();    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
887	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  length;  ++i)  {  buf.reset();  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  for(int  i  =  0;  i  <  length;  ++i)  {  buf.reset();  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	for(int  i  =  0;  i  <  length;  ++i)  {  buf.reset();  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.reset();    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
888	[BUG]  [BUGGY]  buf.set(buffer,  csize,  current.bytesRead,  toRead);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  csize,  current.bytesRead,  toRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  csize,  current.bytesRead,  toRead);	  buf.set(buffer,    csize,    toRead);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
889	[BUG]  [BUGGY]  buf.set(buf,  toRead,  csize);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buf,  toRead,  csize);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buf,  toRead,  csize);	  buf.set(buffer,    csize,    toRead);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
890	[BUG]  [BUGGY]  buf.set(buffer,  offset,  csize,  current.length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  csize,  current.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  csize,  current.length);	  buf.set(buffer,    offset,    length,    current.length);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
891	[BUG]  [BUGGY]  buf.set(buffer,  offset,  toRead  +  length  -  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  toRead  +  length  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  toRead  +  length  -  1);	  buf.set(buffer,    offset,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
892	[BUG]  [BUGGY]  buf.set(buffer,  offset,  toRead  -  length  -  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  toRead  -  length  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  toRead  -  length  -  1);	  buf.set(buffer,    offset,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
893	[BUG]  [BUGGY]  buf.put(buf,  new  byte[toRead  +  1]);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  new  byte[toRead  +  1]);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  new  byte[toRead  +  1]);	  buf.put(toRead,    buffer);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
894	[BUG]  [BUGGY]  buf.put(buf,  new  Integer(toRead));  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.put(buf,  new  Integer(toRead));  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.put(buf,  new  Integer(toRead));	  buf.put(toRead,    buffer);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
895	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buffer[i]);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buffer[i]);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  new  ByteArrayInputStream(buffer[i]);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    new    ByteArrayInputStream(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
896	[BUG]  [BUGGY]  buf.get(buffer,  offset,  toRead  +  length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  toRead  +  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  toRead  +  length);	  buf.get(buffer,    offset,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
897	[BUG]  [BUGGY]  buf.get(buffer,  offset,  toRead  +  length  +  1);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.get(buffer,  offset,  toRead  +  length  +  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.get(buffer,  offset,  toRead  +  length  +  1);	  buf.get(buffer,    offset,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
898	[BUG]  [BUGGY]  buf.set(buffer,  offset,  toRead,  csize  -  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  toRead,  csize  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  toRead,  csize  -  1);	  buf.set(buffer,    offset,    toRead,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
899	[BUG]  [BUGGY]  buf.set(buffer,  offset,  csize,  toRead,  length  -  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  csize,  toRead,  length  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  csize,  toRead,  length  -  1);	  buf.set(buffer,    offset,    toRead,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
900	[BUG]  [BUGGY]  buf.set(buffer,  offset,  toRead,  buffer.length  -  1);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.set(buffer,  offset,  toRead,  buffer.length  -  1);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.set(buffer,  offset,  toRead,  buffer.length  -  1);	  buf.set(buffer,    offset,    toRead,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
901	[BUG]  [BUGGY]  buf.remove(current.bytesRead,  buffer,  length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.remove(current.bytesRead,  buffer,  length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.remove(current.bytesRead,  buffer,  length);	  buf.remove(buffer,    length,    toRead);    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
902	[BUG]  [BUGGY]  buf.reset(buffer,  offset,  length  -  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(buffer,  offset,  length  -  current.bytesRead);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(buffer,  offset,  length  -  current.bytesRead);	  buf.reset(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
903	[BUG]  [BUGGY]  buf.reset(buffer,  offset,  toRead,  length  -  current.length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  buf.reset(buffer,  offset,  toRead,  length  -  current.length);  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	buf.reset(buffer,  offset,  toRead,  length  -  current.length);	  buf.reset(buffer,    offset,    length    -    toRead);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
904	[BUG]  [BUGGY]  if(toRead  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(toRead  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf[i]);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(toRead  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf[i]);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
905	[BUG]  [BUGGY]  while(toRead  <  length)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  while(toRead  <  length)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf[i]);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	while(toRead  <  length)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf[i]);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
906	[BUG]  [BUGGY]  if(toRead  <  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(toRead  <  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf[i]);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(toRead  <  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf[i]);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
907	[BUG]  [BUGGY]  if(toRead  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }      [BUGGY]  if(toRead  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf[i]);  }  [BUGGY]      current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	if(toRead  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf[i]);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
