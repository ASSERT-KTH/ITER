bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  read  =  readDeflated(buffer,  offset,  length);  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	read  =  readDeflated(buffer,  offset,  length);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
2	[BUG]  [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length);  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Inflater  inf  =  current.in.read(buffer,  offset,  length);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
3	[BUG]  [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length);  read  =  inf.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length);  read  =  inf.read(buffer,  offset,  length);  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Inflater  inf  =  current.in.read(buffer,  offset,  length);  read  =  inf.read(buffer,  offset,  length);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
4	[BUG]  [BUGGY]  if(read  ==  null)  {  if(current.crc!=  null)  {  read  =  current.in.read(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  if(read  ==  null)  {  if(current.crc!=  null)  {  read  =  current.in.read(buffer,  offset,  length);  }  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  null)  {  if(current.crc!=  null)  {  read  =  current.in.read(buffer,  offset,  length);  }	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
5	[BUG]  [BUGGY]  InputStream  in  =  current.in.read(buffer,  offset,  length);  read  =  in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  InputStream  in  =  current.in.read(buffer,  offset,  length);  read  =  in.read(buffer,  offset,  length);  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	InputStream  in  =  current.in.read(buffer,  offset,  length);  read  =  in.read(buffer,  offset,  length);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
6	[BUG]  [BUGGY]  InputStream  in  =  current.in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  InputStream  in  =  current.in.read(buffer,  offset,  length);  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	InputStream  in  =  current.in.read(buffer,  offset,  length);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
7	[BUG]  [BUGGY]  if(read  <  =  0)  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  if(read  <  =  0)  {  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  =  0)  {	  if(read    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
8	[BUG]  [BUGGY]  if(read  ==  0  ||  read.length  <  2)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  if(read  ==  0  ||  read.length  <  2)  {  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  ||  read.length  <  2)  {	  if(read    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
9	[BUG]  [BUGGY]  if(read  <  0  ||  read  >  max)  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  if(read  <  0  ||  read  >  max)  {  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  >  max)  {	  if(read    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
10	[BUG]  [BUGGY]  if(read  >  0  ||  read  <  length)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  if(read  >  0  ||  read  <  length)  {  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >  0  ||  read  <  length)  {	  if(read    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
11	[BUG]  [BUGGY]  if(read  <  0  ||  read  >  current.crc.length)  {  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  if(read  <  0  ||  read  >  current.crc.length)  {  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  >  current.crc.length)  {	  if(read    <    0    ||    read    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
12	[BUG]  [BUGGY]  if(read  <  0  ||  read  ==  buffer.length)  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  if(read  <  0  ||  read  ==  buffer.length)  {  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  ==  buffer.length)  {	  if(read    <    0    ||    read    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
13	[BUG]  [BUGGY]  if(read  <  0  ||  read  >=  buffer.length)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  if(read  <  0  ||  read  >=  buffer.length)  {  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  >=  buffer.length)  {	  if(read    <    0    ||    read    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
14	[BUG]  [BUGGY]  if(read  <  0  ||  read  <  buffer.length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  if(read  <  0  ||  read  <  buffer.length)  {  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  <  buffer.length)  {	  if(read    <    0    ||    read    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
15	[BUG]  [BUGGY]  if(read  <  0  ||  read  <  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  if(read  <  0  ||  read  <  length)  {  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  <  length)  {	  if(read    <    0    ||    read    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
16	[BUG]  [BUGGY]  if(read  <  0  ||  read!=  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  if(read  <  0  ||  read!=  buffer.length)  {  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read!=  buffer.length)  {	  if(read    <    0    ||    read    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
17	[BUG]  [BUGGY]  if(read!=  0  ||  read  ==  current.crc.size())  {  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  if(read!=  0  ||  read  ==  current.crc.size())  {  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  ||  read  ==  current.crc.size())  {	  if(read!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
18	[BUG]  [BUGGY]  if(read!=  0  ||  read  ==  current.crc.length)  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  if(read!=  0  ||  read  ==  current.crc.length)  {  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  ||  read  ==  current.crc.length)  {	  if(read!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
19	[BUG]  [BUGGY]  if(read!=  0  ||  read.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  if(read!=  0  ||  read.length  ==  0)  {  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  ||  read.length  ==  0)  {	  if(read!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
20	[BUG]  [BUGGY]  if(read!=  0  ||  read.length  <  2)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  if(read!=  0  ||  read.length  <  2)  {  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  ||  read.length  <  2)  {	  if(read!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
21	[BUG]  [BUGGY]  if(read!=  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  if(read!=  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(read!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
22	[BUG]  [BUGGY]  if(read!=  0  ||  read.charAt(read.length  -  1)!=  'n')  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  if(read!=  0  ||  read.charAt(read.length  -  1)!=  'n')  {  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  ||  read.charAt(read.length  -  1)!=  'n')  {	  if(read!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
23	[BUG]  [BUGGY]  if(read!=  0  ||  read.charAt(read.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  if(read!=  0  ||  read.charAt(read.length  -  1)!=  '/')  {  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  ||  read.charAt(read.length  -  1)!=  '/')  {	  if(read!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
24	[BUG]  [BUGGY]  if(read!=  0  ||  read.equals(current.entry.getMethod()))  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  if(read!=  0  ||  read.equals(current.entry.getMethod()))  {  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  ||  read.equals(current.entry.getMethod()))  {	  if(read!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
25	[BUG]  [BUGGY]  if(read  ==  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  if(read  ==  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(read    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
26	[BUG]  [BUGGY]  if(read  ==  0  ||  read.equals(current.crc))  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  if(read  ==  0  ||  read.equals(current.crc))  {  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  ||  read.equals(current.crc))  {	  if(read    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
27	[BUG]  [BUGGY]  if(read  >  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  if(read  >  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(read    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
28	[BUG]  [BUGGY]  if(read  >  0  ||  read.charAt(read.length  -  1)!=  'n')  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  if(read  >  0  ||  read.charAt(read.length  -  1)!=  'n')  {  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >  0  ||  read.charAt(read.length  -  1)!=  'n')  {	  if(read    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
29	[BUG]  [BUGGY]  if(read  >  0  ||  read.charAt(read.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  if(read  >  0  ||  read.charAt(read.length  -  1)!=  '/')  {  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >  0  ||  read.charAt(read.length  -  1)!=  '/')  {	  if(read    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
30	[BUG]  [BUGGY]  if(read  ==  null)  {  if(current.in!=  null)  {  read  =  readDeflated(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  if(read  ==  null)  {  if(current.in!=  null)  {  read  =  readDeflated(buffer,  offset,  length);  }  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  null)  {  if(current.in!=  null)  {  read  =  readDeflated(buffer,  offset,  length);  }	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
31	[BUG]  [BUGGY]  if(read  ==  null)  {  if(current.entry!=  null)  {  read  =  readDeflated(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  if(read  ==  null)  {  if(current.entry!=  null)  {  read  =  readDeflated(buffer,  offset,  length);  }  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  null)  {  if(current.entry!=  null)  {  read  =  readDeflated(buffer,  offset,  length);  }	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
32	[BUG]  [BUGGY]  in.close();  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  in.close();  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	in.close();	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
33	[BUG]  [BUGGY]  if(read  ==  null)  {  if(current.in!=  null)  {  read  =  in.read(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  if(read  ==  null)  {  if(current.in!=  null)  {  read  =  in.read(buffer,  offset,  length);  }  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  null)  {  if(current.in!=  null)  {  read  =  in.read(buffer,  offset,  length);  }	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
34	[BUG]  [BUGGY]  if(read  <  0  ||  read  >  Buffer.length)  {  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  if(read  <  0  ||  read  >  Buffer.length)  {  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  >  Buffer.length)  {	  if(read    <    0    ||    read    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
35	[BUG]  [BUGGY]  if(read  <  0  ||  read  >  length)  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  if(read  <  0  ||  read  >  length)  {  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  >  length)  {	  if(read    <    0    ||    read    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
36	[BUG]  [BUGGY]  if(read  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  if(read  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(read    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
37	[BUG]  [BUGGY]  if(read  <  0  ||  offset  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  if(read  <  0  ||  offset  >  buffer.length)  {  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  offset  >  buffer.length)  {	  if(read    <    0    ||    read    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
38	[BUG]  [BUGGY]  if(read  <  0  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  if(read  <  0  ||  length  >  buffer.length)  {  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  length  >  buffer.length)  {	  if(read    <    0    ||    read    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
39	[BUG]  [BUGGY]  if(read  <  0  ||  read  >  buffer.length  ||  current.crc!=  null)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  if(read  <  0  ||  read  >  buffer.length  ||  current.crc!=  null)  {  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  >  buffer.length  ||  current.crc!=  null)  {	  if(read    <    0    ||    read    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
40	[BUG]  [BUGGY]  if(read  <  0  ||  read  >  buffer.length  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  if(read  <  0  ||  read  >  buffer.length  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  >  buffer.length  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(read    <    0    ||    read    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
41	[BUG]  [BUGGY]  if(read  <  0  ||  read  >  buffer.length  ||  buffer.charAt(offset)!=  '-')  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  if(read  <  0  ||  read  >  buffer.length  ||  buffer.charAt(offset)!=  '-')  {  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  >  buffer.length  ||  buffer.charAt(offset)!=  '-')  {	  if(read    <    0    ||    read    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
42	[BUG]  [BUGGY]  if(read  <  0  ||  read  >  buffer.length  ||  buffer.charAt(offset)  >=  '-')  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  if(read  <  0  ||  read  >  buffer.length  ||  buffer.charAt(offset)  >=  '-')  {  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  >  buffer.length  ||  buffer.charAt(offset)  >=  '-')  {	  if(read    <    0    ||    read    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
43	[BUG]  [BUGGY]  if(read  >  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED))  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  if(read  >  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED))  {  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED))  {	  if(read    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
44	[BUG]  [BUGGY]  if(read  >  0  ||  length  >  current.crc.length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  if(read  >  0  ||  length  >  current.crc.length)  {  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >  0  ||  length  >  current.crc.length)  {	  if(read    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
45	[BUG]  [BUGGY]  if(read  <  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED))  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  if(read  <  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED))  {  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED))  {	  if(read    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
46	[BUG]  [BUGGY]  if(read  <  0  ||  read.equals(current.entry.getMethod()))  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  if(read  <  0  ||  read.equals(current.entry.getMethod()))  {  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read.equals(current.entry.getMethod()))  {	  if(read    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
47	[BUG]  [BUGGY]  if(read  ==  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED))  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  if(read  ==  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED))  {  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED))  {	  if(read    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
48	[BUG]  [BUGGY]  if(read  ==  0  ||  read.equals(current.entry.getMethod()))  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  if(read  ==  0  ||  read.equals(current.entry.getMethod()))  {  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  ||  read.equals(current.entry.getMethod()))  {	  if(read    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
49	[BUG]  [BUGGY]  if(read  ==  0  ||  isEnabled(ZipArchiveOutputStream.DEFAULT_CRC))  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  if(read  ==  0  ||  isEnabled(ZipArchiveOutputStream.DEFAULT_CRC))  {  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  ||  isEnabled(ZipArchiveOutputStream.DEFAULT_CRC))  {	  if(read    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
50	[BUG]  [BUGGY]  if(read!=  0  &&  current.crc!=  null)  {  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  if(read!=  0  &&  current.crc!=  null)  {  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  &&  current.crc!=  null)  {	  if(read!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
51	[BUG]  [BUGGY]  if(read!=  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED))  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  if(read!=  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED))  {  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED))  {	  if(read!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
52	[BUG]  [BUGGY]  if(read!=  0  &&  isEnabled(ZipArchiveOutputStream.DEFLATED))  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  if(read!=  0  &&  isEnabled(ZipArchiveOutputStream.DEFLATED))  {  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  &&  isEnabled(ZipArchiveOutputStream.DEFLATED))  {	  if(read!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
53	[BUG]  [BUGGY]  if(read!=  0  &&  read.length  >  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  if(read!=  0  &&  read.length  >  0)  {  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  &&  read.length  >  0)  {	  if(read!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
54	[BUG]  [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Inflater  inf  =  current.in.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
55	[BUG]  [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Inflater  inf  =  current.in.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
56	[BUG]  [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Inflater  inf  =  current.in.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
57	[BUG]  [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Inflater  inf  =  current.in.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
58	[BUG]  [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }    [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current  [BUGGY]    current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Inflater  inf  =  current.in.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
