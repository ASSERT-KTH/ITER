projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>=0){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>0){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read>buffer.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392read=readDeflated(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Inflaterinf=current.in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Inflaterinf=current.in.read(buffer,offset,length);read=inf.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==null){if(current.crc!=null){read=current.in.read(buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392InputStreamin=current.in.read(buffer,offset,length);read=in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392InputStreamin=current.in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<=0){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0||read.length<2){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read>max){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>0||read<length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read>current.crc.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read==buffer.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read>=buffer.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read<buffer.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read<length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read!=buffer.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0||read==current.crc.size()){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0||read==current.crc.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0||read.length==0){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0||read.length<2){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0||isEnabled(Feature.QUOTE_FIELD_NAMES)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0||read.charAt(read.length-1)!='n'){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0||read.charAt(read.length-1)!='/'){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0||read.equals(current.entry.getMethod())){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0||isEnabled(Feature.QUOTE_FIELD_NAMES)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0||read.equals(current.crc)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>0||isEnabled(Feature.QUOTE_FIELD_NAMES)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>0||read.charAt(read.length-1)!='n'){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>0||read.charAt(read.length-1)!='/'){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==null){if(current.in!=null){read=readDeflated(buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==null){if(current.entry!=null){read=readDeflated(buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392in.close();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==null){if(current.in!=null){read=in.read(buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read>Buffer.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read>length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||isEnabled(Feature.QUOTE_FIELD_NAMES)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||offset>buffer.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||length>buffer.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read>buffer.length||current.crc!=null){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read>buffer.length||isEnabled(Feature.QUOTE_FIELD_NAMES)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read>buffer.length||buffer.charAt(offset)!='-'){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read>buffer.length||buffer.charAt(offset)>='-'){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>0||isEnabled(ZipArchiveOutputStream.DEFLATED)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>0||length>current.crc.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||isEnabled(ZipArchiveOutputStream.DEFLATED)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read.equals(current.entry.getMethod())){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0||isEnabled(ZipArchiveOutputStream.DEFLATED)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0||read.equals(current.entry.getMethod())){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0||isEnabled(ZipArchiveOutputStream.DEFAULT_CRC)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0&&current.crc!=null){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0||isEnabled(ZipArchiveOutputStream.DEFLATED)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0&&isEnabled(ZipArchiveOutputStream.DEFLATED)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0&&read.length>0){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Inflaterinf=current.in.read(buffer,offset,length);if(inf!=null){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current.entry);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Inflaterinf=current.in.read(buffer,offset,length);if(inf!=null){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Inflaterinf=current.in.read(buffer,offset,length);if(inf!=null){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current.entry
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Inflaterinf=current.in.read(buffer,offset,length);if(inf!=null){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Inflaterinf=current.in.read(buffer,offset,length);if(inf!=null){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read<current.crc.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<=0||read<buffer.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>=0||read<buffer.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Inflaterinf=current.in.read(buffer,offset,read);if(inf!=null){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Inflaterinf=current.in.read(buffer,offset,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Inflaterinf=current.crc.read(buffer,offset,length);if(inf!=null){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Inflaterinf=current.in.read(buffer,offset,read);if(inf==null){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Inflaterinf=current.in.read(buffer,offset,length,read);if(inf!=null){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392intinf=current.in.read(buffer,offset,length);if(inf!=null){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0&&isEnabled(Feature.QUOTE_FIELD_NAMES)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0&&isEnabled(Feature.QUOTE_FIELD_NAMES)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>=0||isEnabled(Feature.QUOTE_FIELD_NAMES)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>=0&&isEnabled(Feature.QUOTE_FIELD_NAMES)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0||isEnabled(Feature.QUOTE_FIELD_NAMES)&&current.crc!=null){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0||current.crc!=null){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0&&current.crc!=null){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>=0&&current.crc!=null){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0&&current.crc==null){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0||current.crc!=null){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0&&crc!=null){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392read=in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392read=current.in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392while(current.crc!=null){read=in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392reader=in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392while(current.crc!=null){read=current.in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read==length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read>=length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read!=length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read>0){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Inflaterinf=current.in.read(buffer,offset,read);if(inf!=null){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current.entry
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Inflaterinf=current.in.read(buffer,offset,read);if(inf!=null){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Inflaterinf=current.in.read(buffer,offset,read);if(inf!=null){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current.
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Inflaterinf=current.in.read(buffer,offset,length,read);if(inf!=null){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Inflaterinf=current.in.read(buffer,offset,read);if(inf!=null){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Inflaterinf=current.in.read(buffer,offset,read);if(inf==null){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current.entry
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0||read.length<2||current.crc!=null){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0||read.length<=2){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read.length<2){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0||read.length<1){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0||read.length>2){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read==buffer.length||current.crc!=null){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read>=buffer.length||current.crc!=null){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read>current.crc.length||buffer!=null){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read>buffer.length||current.crc==null){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read!=buffer.length||current.crc!=null){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read<buffer.length||current.crc!=null){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||length>current.crc.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>0||length<current.crc.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>0&&length>current.crc.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>0||read<current.crc.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0||length>current.crc.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>=0||length>current.crc.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>0||read.length>current.crc.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392InputStreamin=current.in.read(buffer,offset,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392InputStreamin=current.in.read(buffer,offset,length,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392InputStreamin=current.in.read(buffer,offset,CFH_LEN);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392InputStreamin=crc.in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392InputStreamin=current.in.read(buffer,offset,length,CFH_LEN);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392InputStreamin=current.in.read(buffer,offset,length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392InputStreamin=current.in.read(buffer,offset,fileNameLen);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read==buffer.length||isEnabled(Feature.QUOTE_FIELD_NAMES)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read<length||isEnabled(Feature.QUOTE_FIELD_NAMES)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read<buffer.length||isEnabled(Feature.QUOTE_FIELD_NAMES)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read>=buffer.length||isEnabled(Feature.QUOTE_FIELD_NAMES)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read>length||isEnabled(Feature.QUOTE_FIELD_NAMES)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read!=buffer.length||isEnabled(Feature.QUOTE_FIELD_NAMES)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0||isEnabled(ZipArchiveOutputStream.DEFAULT_CRC,current.crc)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0||isEnabled(ZipArchiveOutputStream.DEFAULT_CRC)||isEnabled(current.crc)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0&&isEnabled(ZipArchiveOutputStream.DEFAULT_CRC)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||isEnabled(ZipArchiveOutputStream.DEFAULT_CRC)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0||isEnabled(ZipArchiveOutputStream.DEFAULT_CRC)&&isEnabled(current.crc)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0||isEnabled(ZipArchiveOutputStream.DEFAULT_CRC)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read.equals(current.crc.getMethod())){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<=0||read.equals(current.entry.getMethod())){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read.equals(current.crc)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read.equals(current.crc.getName())){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>0||read.equals(current.entry.getMethod())){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read>bytesReadFromStream){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<=0||read>max){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read==max){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read>=max){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<=0||read<length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read<length||current.crc!=null){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read.charAt(read.length-1)!='/'){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0||read.charAt(read.length-1)!='/'){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>=0||read.charAt(read.length-1)!='/'){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>0&&read.charAt(read.length-1)!='/'){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<=0||read.charAt(read.length-1)!='/'){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0&&read.length==0){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0||read.length<=0){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0||read.length==0){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0||read.length>=0){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0||read.length<=0){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0||read.length>0){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read==current.crc.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read!=current.crc.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<=0||read==buffer.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Inflaterinf=current.in.read(buffer,offset,length,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Inflaterinf=current.in.read(buffer,offset,length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Inflaterinf=current.in.read(buffer,offset,length,CFH_LEN);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Inflaterinf=current.in.read(buffer,offset,CFH_LEN);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Inflaterinf=current.in.read(buffer,offset,length,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Inflaterinf=current.in.read(buffer,offset,length-read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read.charAt(read.length-1)!='n'){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0||read.charAt(read.length-1)!='n'){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>=0||read.charAt(read.length-1)!='n'){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>0&&read.charAt(read.length-1)!='n'){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>0||read.charAt(offset-1)!='n'){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<=0||read==current.crc.size()){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<=0||read!=current.crc.size()){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<=0||read>=current.crc.size()){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0||read.equals(current.crc.getMethod())){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0||read.equals(current.crc.getMethod())){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0&&read.equals(current.entry.getMethod())){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0||read.equals(current.crc.getName())){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0||read.equals(current.crc.getCrc())){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0||isEnabled(Feature.QUOTE_FIELD_NAMES)&&current.crc!=null){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0||isEnabled(Feature.QUOTE_FIELD_NAMES)||current.crc!=null){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<=0||isEnabled(Feature.QUOTE_FIELD_NAMES)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read>=current.crc.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<=0||read!=buffer.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392while(read!=null&&current.crc!=null){read=current.in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392read=current.in.read(buffer,offset,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Read=current.in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392reader=current.in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392while(read!=null&&current.crc!=null){reader=current.in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>=0||isEnabled(ZipArchiveOutputStream.DEFLATED)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<=0||isEnabled(ZipArchiveOutputStream.DEFLATED)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>0&&isEnabled(ZipArchiveOutputStream.DEFLATED)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>0||isEnabled(ZipArchiveOutputStream.DEFLATED,current.crc)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>0&&read<length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0||read<length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>=0||read<length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0||read<length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>0||read<buffer.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<=0||read>=buffer.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read==Buffer.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read>Buffer.length||current.crc!=null){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read>=Buffer.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read>Buffer.MAX_VALUE){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read!=Buffer.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||isEnabled(ZipArchiveOutputStream.DEFLATED,current.crc)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||isEnabled(ZipArchiveOutputStream.DEFLATED)||isEnabled(current.crc)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||isEnabled(ZipArchiveOutputStream.DEFLATED)||current.crc!=null){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||offset>=buffer.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||offset==buffer.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||offset<length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(offset<0||read>buffer.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||offset>current.crc.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||offset!=buffer.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||buffer.length>offset){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0||read.charAt(offset-1)!='/'){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0||read.charAt(read.offset-1)!='/'){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0&&read.charAt(read.length-1)!='/'){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0||read.charAt(offset-1)!='/'){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0||read.charAt(read.offset-1)!='/'){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||offset>buffer.length||buffer.charAt(offset)!='-'){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read==buffer.length||buffer.charAt(offset)!='-'){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read<buffer.length||buffer.charAt(offset)!='-'){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read>=buffer.length||buffer.charAt(offset)!='-'){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read!=buffer.length||buffer.charAt(offset)!='-'){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read<length||buffer.charAt(offset)!='-'){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0&&read.equals(current.entry.getMethod())){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0||read.equals(current.crc)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>=0&&read.equals(current.entry.getMethod())){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0||read.equals(current.crc.getName())){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>0&&isEnabled(Feature.QUOTE_FIELD_NAMES)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>>0||isEnabled(Feature.QUOTE_FIELD_NAMES)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read>current.crc.update(buffer,offset,length)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<=0||read>current.crc.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392ReadBufferinf=current.in.read(buffer,offset,length);read=inf.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Inflaterinf=current.in.read(buffer,offset,length-1);read=inf.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0||isEnabled(ZipArchiveOutputStream.DEFLATED,current.crc)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0||isEnabled(ZipArchiveOutputStream.DEFLATED)||isEnabled(current.crc)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0||isEnabled(ZipArchiveOutputStream.DEFLATED)||current.crc!=null){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0&&isEnabled(ZipArchiveOutputStream.DEFLATED)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0||isEnabled(ZipArchiveOutputStream.DEFLATED)||isEnabled(current.crc)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0||isEnabled(ZipArchiveOutputStream.DEFLATED,current.crc)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||isEnabled(Feature.QUOTE_FIELD_NAMES)||current.crc!=null){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0&&read==current.crc.size()){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0||read.length==current.crc.size()){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0||read<current.crc.size()){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0||read!=current.crc.size()){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0||read==current.crc.size()){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0||read==current.in.size()){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read>buffer.length||buffer.charAt(offset)=='-'){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read==buffer.length||buffer.charAt(offset)>='-'){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||offset>buffer.length||buffer.charAt(offset)>='-'){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0&&read.length<2){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0||read.length<=2){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0||read.length<1){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0||read.length<2||current.crc==null){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0||read.length<2||length>current.crc.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Inflaterinf=current.in.read(buffer,offset,read);if(inf==null){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Inflaterinf=current.in.read(buffer,offset,length,crc);if(inf!=null){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Inflaterinf=current.crc.read(buffer,offset,length);if(inf!=null){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392ReadBufferin=current.in.read(buffer,offset,length);read=in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392InputStreamin=current.in.read(buffer,offset,length-1);read=in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392InputStreamin=current.in.read(buffer,offset,read);read=in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0||current.crc.equals(read)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0&&read.equals(current.crc)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0||crc.equals(current.crc)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>=0||read.equals(current.crc)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0&&read.charAt(read.length-1)!='n'){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0||read.charAt(read.offset-1)!='n'){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0||read.charAt(offset-1)!='n'){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0||read.charAt(read.length-1)=='n'){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0&&read.length>0&&current.crc!=null){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0&&read.length<=0){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0&&read.length>0||current.crc!=null){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0&&read.length>0){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0||read.length>0){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=null){in.close();}else{thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=null){in.close();}else{thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current.entry.getMethod());}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=null){in.close();}elseif(current.entry.getMethod()==ZipMethod.IMPLODING){read=readDeflated(buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=null){in.close();}else{thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current.entry);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=null){in.close();}elseif(current.entry.getMethod()==ZipMethod.UNSHRINKING){read=readDeflated(buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=null){in.close();}elseif(current.entry.getMethod()==ZipMethod.UNSHRINKING.getCode()){read=readDeflated(buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392while(current.crc!=null){if(read!=null){read=readDeflated(buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392while(current.crc!=null){if(read==null){read=readDeflated(buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392while(current.crc!=null){read=readDeflated(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392reader=readDeflated(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Read=readDeflated(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0&&read==current.crc.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0||read==current.crc.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0||read.length==current.crc.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0||read<current.crc.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0||read!=current.crc.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>=0||read==current.crc.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0||isEnabled(ZipArchiveOutputStream.DEFLATED)&&isEnabled(current.crc)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0&&isEnabled(ZipArchiveOutputStream.DEFLATED,current.crc)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0&&isEnabled(current.crc)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0&&isEnabled(ZipArchiveOutputStream.DEFLATED)||isEnabled(current.crc)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0&&isEnabled(ZipArchiveOutputStream.DEFLATED,current.crc)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Inflaterinf=current.in.read(buffer,offset,read);if(inf!=null){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Inflaterinf=current.in.read(buffer,offset,length,read);if(inf!=null){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Inflaterinf=current.in.read(buffer,offset,read);if(inf==null){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Inflaterinf=current.crc.read(buffer,offset,length);if(inf!=null){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392intinf=current.in.read(buffer,offset,length);if(inf!=null){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Inflaterinf=current.in.read(buffer,offset,read);if(inf!=null){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Inflaterinf=current.in.read(buffer,offset,read);if(inf!=null){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current.entry);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Inflaterinf=current.in.read(buffer,offset,length,read);if(inf!=null){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current.entry);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Inflaterinf=current.in.read(buffer,offset,read);if(inf==null){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current.entry);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Inflaterinf=current.crc.read(buffer,offset,length);if(inf!=null){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current.entry);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||length>=buffer.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||length==buffer.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||buffer.length>length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392while(current.in!=null){read=readDeflated(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392read=readDeflated(buffer,offset,length,current.crc);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392read=readDeflated(buffer,offset,length,current.in);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392read=readDeflated(buffer,offset,length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392read=readDeflated(current.entry,buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392read=readDeflated(buffer,offset,length+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0&&isEnabled(ZipArchiveOutputStream.DEFAULT_CRC)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0||isEnabled(ZipArchiveOutputStream.DEFAULT_RCC)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392InputStreamin=current.in.read(buffer,offset,length-read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392InputStreamin=current.in.read(buffer,offset,length+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>>0){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==null){Inflaterinf=current.in.read(buffer,offset,length);if(inf!=null){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMet
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||isEnabled(ZipArchiveOutputStream.DEFLATED)||isEnabled(current.entry)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||isEnabled(ZipArchiveOutputStream.DEFLATED)||hasDataDescriptor){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||isEnabled(ZipArchiveOutputStream.DEFLATED,read)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>0||read==buffer.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392read=inf.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392InputStreamin=inputStream.read(buffer,offset,length);read=in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Inflaterinf=current.in.read(buffer,offset,length);read=inf.read(buffer,offset,length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392read=readDeflated(current.entry,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read.length!=buffer.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Inflaterinf=current.in.read(buffer,offset,length-1);if(inf!=null){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Inflaterinf=current.in.read(buffer,offset,length+1);if(inf!=null){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Inflaterinf=current.in.read(buffer,offset,length);if(inf!=null){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=null){if(current.crc!=null){read=current.in.read(buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=null){if(current.entry!=null){read=readDeflated(buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=null){if(current.entry!=null){read=current.in.read(buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0||isEnabled(ZipArchiveOutputStream.DEFLATED)||isEnabled(current.entry)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>=0||read.length==0){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0||read.length!=0){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read.length!=0||read.length==0){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read>offset){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0||read.length==current.crc.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=null){if(current.crc!=null){read=readDeflated(buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==null){if(current.crc!=null){read=readDeflated(buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=null){if(current.in!=null){read=readDeflated(buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=null){if(current.in==null){read=readDeflated(buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read.length>0||read.charAt(read.length-1)!='/'){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>=0||read>buffer.length||buffer.charAt(offset)!='-'){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0||read>buffer.length||buffer.charAt(offset)!='-'){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==null){Inflaterinf=current.in.read(buffer,offset,length);if(inf!=null){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMetho
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>=0||read.equals(current.entry.getMethod())){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read>BoundedInputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read.equals(current.entry)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read>buffer.length||buffer.charAt(offset)>'-'){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read>=buffer.length||buffer.charAt(offset)>='-'){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>=0||read>buffer.length||buffer.charAt(offset)>='-'){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read.length!=0||read.charAt(read.length-1)!='/'){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0||read.charAt(read.length-1)=='/'){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0&&read.charAt(read.length-1)!='/'){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read>Buffer.length-1){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read>Buffer.length-offset){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||length>read.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||length>buffer.length-1){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>>0||isEnabled(ZipArchiveOutputStream.DEFLATED)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<=0||read>buffer.length||isEnabled(Feature.QUOTE_FIELD_NAMES)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>=0||read>buffer.length||isEnabled(Feature.QUOTE_FIELD_NAMES)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>buffer.length||isEnabled(Feature.QUOTE_FIELD_NAMES)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read.length>0||read.charAt(read.length-1)!='n'){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==null){Inflaterinf=current.in.read(buffer,offset,length);if(inf!=null){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMeth
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>0||read>=buffer.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>=0&&isEnabled(ZipArchiveOutputStream.DEFLATED)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Integerinf=current.in.read(buffer,offset,length);if(inf!=null){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Inflaterinf=current.in.read(buffer,offset,length-1);if(inf!=null){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392InputStreamin=current.in.read(buffer,offset,length);read=in.read(buffer,offset,length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392InputStreamin=current.in.read(buffer,offset,length+1);read=in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392InputStreamin=current.in.read(buffer,offset,length-read);read=in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read.length!=0||read.charAt(read.length-1)!='n'){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0&&read.charAt(read.length-1)!='n'){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=null){if(current.in!=null){read=in.read(buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392in.close(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392in.flush();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Inflaterinf.close();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392in.close(buffer,offset,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392in.closeEntry();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>=0&&read.length>0){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0&&read.length>1){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0||read.length<2||current.crc.isEnabled(Feature.QUOTE_FIELD_NAMES)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0||read.length==2){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0||read.length<2||isEnabled(Feature.QUOTE_FIELD_NAMES)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0&&read.length<2){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>=0||read>current.crc.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Inflaterinf=current.in.read(buffer,offset,length+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0&&read.equals(current.crc)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0||current.crc.equals(read)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0&&isEnabled(current.entry)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0&&isEnabled(CrcArchiveOutputStream.DEFLATED)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0||read.length==current.crc.size()){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0||read.size()==current.crc.size()){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0||read.size()==current.crc.size()){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read.length==0||read.length<2){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0||read.length>=2){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0||read.length!=2){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read>current.crc.length||isEnabled(Feature.QUOTE_FIELD_NAMES)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read>current.crc.offset){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read>buffer.crc.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392InputStreamin=current.in.read(buffer,offset,length);if(in!=null){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Inflaterinf=current.in.read(buffer,offset,length-1);if(inf!=null){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392InputStreamin=current.in.read(buffer,offset,length);if(in==null){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>=0||current.crc!=null){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392InputStreamin=current.in.read(buffer,offset,length);if(in!=null){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Integerinf=current.in.read(buffer,offset,length);if(inf!=null){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392InputStreamin=current.in.read(buffer,offset,length);if(inf!=null){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=null){read=in.read(buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==null){if(current.crc!=null){read=in.read(buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0||read>=current.crc.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=current.entry.getMethod()||read.equals(current.entry.getMethod())){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=current.crc.size()||read.equals(current.entry.getMethod())){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(current.crc!=null){if(read!=null){read=readDeflated(buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=null){read=readDeflated(buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392InputStreamin=current.in.read(buffer,offset,length);if(in!=null){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current.entry
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392read=readDeflated(current.in,buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>0||isEnabled(Feature.QUOTE_FIELD_NAMES)||isEnabled(Feature.PRIVATE_EXP_32)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=null){read=current.in.read(buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392while(current.entry!=null&&current.entry.getMethod()==ZipMethod.IMPLODING){read=current.in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392while(current.entry!=null){read=current.in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392while(current.entry!=null&&current.entry.getMethod()==ZipMethod.UNSHRINKING){read=current.in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392while(current.entry!=null&&current.entry.getMethod()==ZipMethod.GETPROP){read=current.in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=null||isEnabled(Feature.QUOTE_FIELD_NAMES)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0||isEnabled(Feature.QUOTE_FIELD_NAMES)||isEnabled(Feature.PRIVATE_EXP_32)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||length>Buffer.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||offset>Buffer.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=null){in.close();}else{thrownewUnsupportedZipFeatureException(ZipMethod.IMPLODING,current.entry.getMethod());}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=null){in.close();}else{System.arraycopy(buffer,offset,read,buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==null){in.close();}else{System.arraycopy(buffer,offset,read,buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0||isEnabled(ZipArchiveOutputStream.DEFLATED)||isEnabled(current.entry.getMethod())){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||buffer.length==length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||offset<buffer.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||buffer.length<length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>0||offset<length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>0||read<offset){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||off<length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||offset>length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392InputStreamread=current.in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read>BYTE_EXP_32){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read>256){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392InputStreamin=current.in.read(buffer,offset,length,current.crc);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0||read.charAt(read.off+length-1)!='n'){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392InputStreamin=current.in.read(buffer,offset,length);if(in!=null){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392InputStreamin=current.in.read(buffer,offset,length);if(inf!=null){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392InputStreamin=current.in.read(buffer,offset,length);if(in==null){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||length>buffer.length||isEnabled(Feature.QUOTE_FIELD_NAMES)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||offset>buffer.length||isEnabled(Feature.QUOTE_FIELD_NAMES)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||buffer.length>length||isEnabled(Feature.QUOTE_FIELD_NAMES)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0||isEnabled(ZipArchiveOutputStream.DEFLATED)||isEnabled(current.entry.getMethod())){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0||buffer.length==0){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||offset>buffer.length-1){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392InputStreamin=current.in.read(buffer,offset,length);if(in!=null){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current.entry);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Inflaterinf=current.in.read(buffer,offset,length-1);if(inf!=null){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current.entry
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Inflaterinf=current.in.read(buffer,offset,length-1);if(inf!=null){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current.entry);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392InputStreamin=current.in.read(buffer,offset,length);if(in==null){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current.entry);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>0||isEnabled(ZipArchiveOutputStream.DEFLATED)||isEnabled(current.crc)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0&&isEnabled(ZipArchiveOutputStream.DEFLATED)||isEnabled(current.entry.getMethod())){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>=0||read.length<2){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>0||read.length<2){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0||read.length<2||buffer.offset>=length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Inflaterinf=current.in.read(buffer,offset,length,current.crc);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Inflaterinf=current.in.read(buffer,offset,length-2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0||read.charAt(read.off+length-1)!='/'){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>0||read.charAt(offset-1)!='/'){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0||read.length<2||buffer.offset>=length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0||read.length<2||isEnabled(ZipArchiveOutputStream.DEFLATED)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0||read.length<2||buffer.offset==length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||isEnabled(Feature.QUOTE_FIELD_NAMES)||isEnabled(Feature.PRIVATE_EXP_32)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||isEnabled(Feature.QUOTE_FIELD_NAMES)||isEnabled(Feature.RC_OVER)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Integerinf=current.in.read(buffer,offset,length);read=inf.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392Integerinf=current.in.read(buffer,offset,length);read=inf.read(buffer,offset,length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||length>buffer.length||current.crc!=null){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||length>accessorsRead){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||length>buffer.length-offset){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read>BYTE_LEN||current.crc!=null){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read>maxLen||current.crc!=null){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||length>buffer.length||buffer.charAt(offset)>='-'){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||buffer.length>offset||buffer.charAt(offset)>='-'){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||isEnabled(current.entry.getMethod())){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||isEnabled(ZipArchiveOutputStream.DEFLATED)||isEnabled(current.entry.getMethod())){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||isEnabled(ZipArchiveOutputStream.DEFLATED,current.in)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0&&read.length>0&&isEnabled(Feature.QUOTE_FIELD_NAMES)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read!=0&&buffer.length>0){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>=0&&read==current.crc.size()){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||length>current.crc.offset){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||length>current.crc.size()){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>0||length>=current.crc.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>0||length==current.crc.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>0||offset<current.crc.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read[Delete]0&&isEnabled(Feature.QUOTE_FIELD_NAMES)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read>=0||isEnabled(ZipArchiveOutputStream.DEFAULT_CRC)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read==0||isEnabled(ZipArchiveOutputStream.DEFAULT_CRC,current.in)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||off>=buffer.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||length>buffer.length||buffer.charAt(offset)!='-'){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||buffer.length>length||buffer.charAt(offset)!='-'){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||buffer.length>offset||buffer.charAt(offset)!='-'){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java392if(read<0||read>buffer.length||buffer.charAt(offset+length)!='-'){
