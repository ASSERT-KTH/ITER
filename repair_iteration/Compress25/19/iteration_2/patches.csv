bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(read  <  0  ||  read  <  current.crc.length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read  <  current.crc.length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  <  current.crc.length)  {	  if(read    <    0    ||    read    <    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
2	[BUG]  [BUGGY]  if(read  <  =  0  ||  read  <  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  =  0  ||  read  <  buffer.length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  =  0  ||  read  <  buffer.length)  {	  if(read    <    0    ||    read    <    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
3	[BUG]  [BUGGY]  if(read  >=  0  ||  read  <  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  >=  0  ||  read  <  buffer.length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >=  0  ||  read  <  buffer.length)  {	  if(read    <    0    ||    read    <    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
4	[BUG]  [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  read);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  read);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Inflater  inf  =  current.in.read(buffer,  offset,  read);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
5	[BUG]  [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  read);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  read);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Inflater  inf  =  current.in.read(buffer,  offset,  read);	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
6	[BUG]  [BUGGY]  Inflater  inf  =  current.crc.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  Inflater  inf  =  current.crc.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Inflater  inf  =  current.crc.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
7	[BUG]  [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  read);  if(inf  ==  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  read);  if(inf  ==  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Inflater  inf  =  current.in.read(buffer,  offset,  read);  if(inf  ==  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
8	[BUG]  [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length,  read);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length,  read);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Inflater  inf  =  current.in.read(buffer,  offset,  length,  read);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
9	[BUG]  [BUGGY]  int  inf  =  current.in.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  int  inf  =  current.in.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	int  inf  =  current.in.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
10	[BUG]  [BUGGY]  if(read!=  0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(read!=    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
11	[BUG]  [BUGGY]  if(read  ==  0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(read!=    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
12	[BUG]  [BUGGY]  if(read  >=  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  >=  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >=  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(read!=    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
13	[BUG]  [BUGGY]  if(read  >=  0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  >=  0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >=  0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(read!=    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
14	[BUG]  [BUGGY]  if(read!=  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  current.crc!=  null)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  current.crc!=  null)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  current.crc!=  null)  {	  if(read!=    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
15	[BUG]  [BUGGY]  if(read!=  0  ||  current.crc!=  null)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  ||  current.crc!=  null)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  ||  current.crc!=  null)  {	  if(read!=    0    &&    current.crc!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
16	[BUG]  [BUGGY]  if(read  ==  0  &&  current.crc!=  null)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  &&  current.crc!=  null)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  &&  current.crc!=  null)  {	  if(read!=    0    &&    current.crc!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
17	[BUG]  [BUGGY]  if(read  >=  0  &&  current.crc!=  null)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  >=  0  &&  current.crc!=  null)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >=  0  &&  current.crc!=  null)  {	  if(read!=    0    &&    current.crc!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
18	[BUG]  [BUGGY]  if(read!=  0  &&  current.crc  ==  null)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  &&  current.crc  ==  null)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  &&  current.crc  ==  null)  {	  if(read!=    0    &&    current.crc!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
19	[BUG]  [BUGGY]  if(read  ==  0  ||  current.crc!=  null)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  ||  current.crc!=  null)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  ||  current.crc!=  null)  {	  if(read!=    0    &&    current.crc!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
20	[BUG]  [BUGGY]  if(read!=  0  &&  crc!=  null)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  &&  crc!=  null)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  &&  crc!=  null)  {	  if(read!=    0    &&    current.crc!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
21	[BUG]  [BUGGY]  read  =  in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  read  =  in.read(buffer,  offset,  length);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	read  =  in.read(buffer,  offset,  length);	  if(read    ==    null)    {    if(current.in!=    null)    {    read    =    in.read(buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
22	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  read  =  current.in.read(buffer,  offset,  length);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	read  =  current.in.read(buffer,  offset,  length);	  if(read    ==    null)    {    if(current.in!=    null)    {    read    =    in.read(buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
23	[BUG]  [BUGGY]  while(current.crc!=  null)  {  read  =  in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  while(current.crc!=  null)  {  read  =  in.read(buffer,  offset,  length);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	while(current.crc!=  null)  {  read  =  in.read(buffer,  offset,  length);	  if(read    ==    null)    {    if(current.in!=    null)    {    read    =    in.read(buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
24	[BUG]  [BUGGY]  reader  =  in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  reader  =  in.read(buffer,  offset,  length);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	reader  =  in.read(buffer,  offset,  length);	  if(read    ==    null)    {    if(current.in!=    null)    {    read    =    in.read(buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
25	[BUG]  [BUGGY]  while(current.crc!=  null)  {  read  =  current.in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  while(current.crc!=  null)  {  read  =  current.in.read(buffer,  offset,  length);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	while(current.crc!=  null)  {  read  =  current.in.read(buffer,  offset,  length);	  if(read    ==    null)    {    if(current.in!=    null)    {    read    =    in.read(buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
26	[BUG]  [BUGGY]  if(read  <  0  ||  read  ==  length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read  ==  length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  ==  length)  {	  if(read    <    0    ||    read    >    length)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
27	[BUG]  [BUGGY]  if(read  <  0  ||  read  >=  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read  >=  length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  >=  length)  {	  if(read    <    0    ||    read    >    length)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
28	[BUG]  [BUGGY]  if(read  <  0  ||  read!=  length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read!=  length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read!=  length)  {	  if(read    <    0    ||    read    >    length)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
29	[BUG]  [BUGGY]  if(read  <  0  ||  read  >  0)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read  >  0)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  >  0)  {	  if(read    <    0    ||    read    >    length)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
30	[BUG]  [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  read);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  read);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Inflater  inf  =  current.in.read(buffer,  offset,  read);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current.entry    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
31	[BUG]  [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  read);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  read);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Inflater  inf  =  current.in.read(buffer,  offset,  read);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current.entry    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
32	[BUG]  [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  read);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  read);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Inflater  inf  =  current.in.read(buffer,  offset,  read);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current.entry    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
33	[BUG]  [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length,  read);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length,  read);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Inflater  inf  =  current.in.read(buffer,  offset,  length,  read);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current.entry    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
34	[BUG]  [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  read);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  read);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Inflater  inf  =  current.in.read(buffer,  offset,  read);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current.entry    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
35	[BUG]  [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  read);  if(inf  ==  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  read);  if(inf  ==  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Inflater  inf  =  current.in.read(buffer,  offset,  read);  if(inf  ==  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current.entry    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
36	[BUG]  [BUGGY]  if(read  ==  0  ||  read.length  <  2  ||  current.crc!=  null)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  ||  read.length  <  2  ||  current.crc!=  null)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  ||  read.length  <  2  ||  current.crc!=  null)  {	  if(read    ==    0    ||    read.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
37	[BUG]  [BUGGY]  if(read  ==  0  ||  read.length  <  =  2)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  ||  read.length  <  =  2)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  ||  read.length  <  =  2)  {	  if(read    ==    0    ||    read.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
38	[BUG]  [BUGGY]  if(read  <  0  ||  read.length  <  2)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read.length  <  2)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read.length  <  2)  {	  if(read    ==    0    ||    read.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
39	[BUG]  [BUGGY]  if(read  ==  0  ||  read.length  <  1)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  ||  read.length  <  1)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  ||  read.length  <  1)  {	  if(read    ==    0    ||    read.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
40	[BUG]  [BUGGY]  if(read  ==  0  ||  read.length  >  2)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  ||  read.length  >  2)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  ||  read.length  >  2)  {	  if(read    ==    0    ||    read.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
41	[BUG]  [BUGGY]  if(read  <  0  ||  read  ==  buffer.length  ||  current.crc!=  null)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read  ==  buffer.length  ||  current.crc!=  null)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  ==  buffer.length  ||  current.crc!=  null)  {	  if(read    <    0    ||    read    >    buffer.length    ||    current.crc!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
42	[BUG]  [BUGGY]  if(read  <  0  ||  read  >=  buffer.length  ||  current.crc!=  null)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read  >=  buffer.length  ||  current.crc!=  null)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  >=  buffer.length  ||  current.crc!=  null)  {	  if(read    <    0    ||    read    >    buffer.length    ||    current.crc!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
43	[BUG]  [BUGGY]  if(read  <  0  ||  read  >  current.crc.length  ||  buffer!=  null)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read  >  current.crc.length  ||  buffer!=  null)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  >  current.crc.length  ||  buffer!=  null)  {	  if(read    <    0    ||    read    >    buffer.length    ||    current.crc!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
44	[BUG]  [BUGGY]  if(read  <  0  ||  read  >  buffer.length  ||  current.crc  ==  null)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read  >  buffer.length  ||  current.crc  ==  null)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  >  buffer.length  ||  current.crc  ==  null)  {	  if(read    <    0    ||    read    >    buffer.length    ||    current.crc!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
45	[BUG]  [BUGGY]  if(read  <  0  ||  read!=  buffer.length  ||  current.crc!=  null)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read!=  buffer.length  ||  current.crc!=  null)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read!=  buffer.length  ||  current.crc!=  null)  {	  if(read    <    0    ||    read    >    buffer.length    ||    current.crc!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
46	[BUG]  [BUGGY]  if(read  <  0  ||  read  <  buffer.length  ||  current.crc!=  null)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read  <  buffer.length  ||  current.crc!=  null)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  <  buffer.length  ||  current.crc!=  null)  {	  if(read    <    0    ||    read    >    buffer.length    ||    current.crc!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
47	[BUG]  [BUGGY]  if(read  <  0  ||  length  >  current.crc.length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  length  >  current.crc.length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  length  >  current.crc.length)  {	  if(read    >    0    ||    length    >    current.crc.length)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
48	[BUG]  [BUGGY]  if(read  >  0  ||  length  <  current.crc.length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  >  0  ||  length  <  current.crc.length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >  0  ||  length  <  current.crc.length)  {	  if(read    >    0    ||    length    >    current.crc.length)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
49	[BUG]  [BUGGY]  if(read  >  0  &&  length  >  current.crc.length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  >  0  &&  length  >  current.crc.length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >  0  &&  length  >  current.crc.length)  {	  if(read    >    0    ||    length    >    current.crc.length)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
50	[BUG]  [BUGGY]  if(read  >  0  ||  read  <  current.crc.length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  >  0  ||  read  <  current.crc.length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >  0  ||  read  <  current.crc.length)  {	  if(read    >    0    ||    length    >    current.crc.length)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
51	[BUG]  [BUGGY]  if(read  ==  0  ||  length  >  current.crc.length)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  ||  length  >  current.crc.length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  ||  length  >  current.crc.length)  {	  if(read    >    0    ||    length    >    current.crc.length)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
52	[BUG]  [BUGGY]  if(read  >=  0  ||  length  >  current.crc.length)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  >=  0  ||  length  >  current.crc.length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >=  0  ||  length  >  current.crc.length)  {	  if(read    >    0    ||    length    >    current.crc.length)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
53	[BUG]  [BUGGY]  if(read  >  0  ||  read.length  >  current.crc.length)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  >  0  ||  read.length  >  current.crc.length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >  0  ||  read.length  >  current.crc.length)  {	  if(read    >    0    ||    length    >    current.crc.length)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
54	[BUG]  [BUGGY]  InputStream  in  =  current.in.read(buffer,  offset,  read);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  InputStream  in  =  current.in.read(buffer,  offset,  read);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	InputStream  in  =  current.in.read(buffer,  offset,  read);	  InputStream    in    =    current.in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
55	[BUG]  [BUGGY]  InputStream  in  =  current.in.read(buffer,  offset,  length,  read);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  InputStream  in  =  current.in.read(buffer,  offset,  length,  read);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	InputStream  in  =  current.in.read(buffer,  offset,  length,  read);	  InputStream    in    =    current.in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
56	[BUG]  [BUGGY]  InputStream  in  =  current.in.read(buffer,  offset,  CFH_LEN);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  InputStream  in  =  current.in.read(buffer,  offset,  CFH_LEN);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	InputStream  in  =  current.in.read(buffer,  offset,  CFH_LEN);	  InputStream    in    =    current.in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
57	[BUG]  [BUGGY]  InputStream  in  =  crc.in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  InputStream  in  =  crc.in.read(buffer,  offset,  length);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	InputStream  in  =  crc.in.read(buffer,  offset,  length);	  InputStream    in    =    current.in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
58	[BUG]  [BUGGY]  InputStream  in  =  current.in.read(buffer,  offset,  length,  CFH_LEN);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  InputStream  in  =  current.in.read(buffer,  offset,  length,  CFH_LEN);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	InputStream  in  =  current.in.read(buffer,  offset,  length,  CFH_LEN);	  InputStream    in    =    current.in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
59	[BUG]  [BUGGY]  InputStream  in  =  current.in.read(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  InputStream  in  =  current.in.read(buffer,  offset,  length  -  1);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	InputStream  in  =  current.in.read(buffer,  offset,  length  -  1);	  InputStream    in    =    current.in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
60	[BUG]  [BUGGY]  InputStream  in  =  current.in.read(buffer,  offset,  fileNameLen);  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  InputStream  in  =  current.in.read(buffer,  offset,  fileNameLen);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	InputStream  in  =  current.in.read(buffer,  offset,  fileNameLen);	  InputStream    in    =    current.in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
61	[BUG]  [BUGGY]  if(read  <  0  ||  read  ==  buffer.length  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read  ==  buffer.length  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  ==  buffer.length  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(read    <    0    ||    read    >    buffer.length    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
62	[BUG]  [BUGGY]  if(read  <  0  ||  read  <  length  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read  <  length  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  <  length  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(read    <    0    ||    read    >    buffer.length    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
63	[BUG]  [BUGGY]  if(read  <  0  ||  read  <  buffer.length  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read  <  buffer.length  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  <  buffer.length  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(read    <    0    ||    read    >    buffer.length    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
64	[BUG]  [BUGGY]  if(read  <  0  ||  read  >=  buffer.length  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read  >=  buffer.length  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  >=  buffer.length  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(read    <    0    ||    read    >    buffer.length    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
65	[BUG]  [BUGGY]  if(read  <  0  ||  read  >  length  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read  >  length  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  >  length  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(read    <    0    ||    read    >    buffer.length    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
66	[BUG]  [BUGGY]  if(read  <  0  ||  read!=  buffer.length  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read!=  buffer.length  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read!=  buffer.length  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(read    <    0    ||    read    >    buffer.length    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
67	[BUG]  [BUGGY]  if(read  ==  0  ||  isEnabled(ZipArchiveOutputStream.DEFAULT_CRC,  current.crc))  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  ||  isEnabled(ZipArchiveOutputStream.DEFAULT_CRC,  current.crc))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  ||  isEnabled(ZipArchiveOutputStream.DEFAULT_CRC,  current.crc))  {	  if(read    ==    0    ||    isEnabled(ZipArchiveOutputStream.DEFAULT_CRC))    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
68	[BUG]  [BUGGY]  if(read  ==  0  ||  isEnabled(ZipArchiveOutputStream.DEFAULT_CRC)||  isEnabled(current.crc))  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  ||  isEnabled(ZipArchiveOutputStream.DEFAULT_CRC)||  isEnabled(current.crc))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  ||  isEnabled(ZipArchiveOutputStream.DEFAULT_CRC)||  isEnabled(current.crc))  {	  if(read    ==    0    ||    isEnabled(ZipArchiveOutputStream.DEFAULT_CRC))    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
69	[BUG]  [BUGGY]  if(read  ==  0  &&  isEnabled(ZipArchiveOutputStream.DEFAULT_CRC))  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  &&  isEnabled(ZipArchiveOutputStream.DEFAULT_CRC))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  &&  isEnabled(ZipArchiveOutputStream.DEFAULT_CRC))  {	  if(read    ==    0    ||    isEnabled(ZipArchiveOutputStream.DEFAULT_CRC))    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
70	[BUG]  [BUGGY]  if(read  <  0  ||  isEnabled(ZipArchiveOutputStream.DEFAULT_CRC))  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  isEnabled(ZipArchiveOutputStream.DEFAULT_CRC))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  isEnabled(ZipArchiveOutputStream.DEFAULT_CRC))  {	  if(read    ==    0    ||    isEnabled(ZipArchiveOutputStream.DEFAULT_CRC))    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
71	[BUG]  [BUGGY]  if(read  ==  0  ||  isEnabled(ZipArchiveOutputStream.DEFAULT_CRC)&&  isEnabled(current.crc))  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  ||  isEnabled(ZipArchiveOutputStream.DEFAULT_CRC)&&  isEnabled(current.crc))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  ||  isEnabled(ZipArchiveOutputStream.DEFAULT_CRC)&&  isEnabled(current.crc))  {	  if(read    ==    0    ||    isEnabled(ZipArchiveOutputStream.DEFAULT_CRC))    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
72	[BUG]  [BUGGY]  if(read!=  0  ||  isEnabled(ZipArchiveOutputStream.DEFAULT_CRC))  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  ||  isEnabled(ZipArchiveOutputStream.DEFAULT_CRC))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  ||  isEnabled(ZipArchiveOutputStream.DEFAULT_CRC))  {	  if(read    ==    0    ||    isEnabled(ZipArchiveOutputStream.DEFAULT_CRC))    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
73	[BUG]  [BUGGY]  if(read  <  0  ||  read.equals(current.crc.getMethod()))  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read.equals(current.crc.getMethod()))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read.equals(current.crc.getMethod()))  {	  if(read    <    0    ||    read.equals(current.entry.getMethod()))    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
74	[BUG]  [BUGGY]  if(read  <  =  0  ||  read.equals(current.entry.getMethod()))  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  =  0  ||  read.equals(current.entry.getMethod()))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  =  0  ||  read.equals(current.entry.getMethod()))  {	  if(read    <    0    ||    read.equals(current.entry.getMethod()))    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
75	[BUG]  [BUGGY]  if(read  <  0  ||  read.equals(current.crc))  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read.equals(current.crc))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read.equals(current.crc))  {	  if(read    <    0    ||    read.equals(current.entry.getMethod()))    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
76	[BUG]  [BUGGY]  if(read  <  0  ||  read.equals(current.crc.getName()))  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read.equals(current.crc.getName()))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read.equals(current.crc.getName()))  {	  if(read    <    0    ||    read.equals(current.entry.getMethod()))    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
77	[BUG]  [BUGGY]  if(read  >  0  ||  read.equals(current.entry.getMethod()))  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  >  0  ||  read.equals(current.entry.getMethod()))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >  0  ||  read.equals(current.entry.getMethod()))  {	  if(read    <    0    ||    read.equals(current.entry.getMethod()))    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
78	[BUG]  [BUGGY]  if(read  <  0  ||  read  >  bytesReadFromStream)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read  >  bytesReadFromStream)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  >  bytesReadFromStream)  {	  if(read    <    0    ||    read    >    max)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
79	[BUG]  [BUGGY]  if(read  <  =  0  ||  read  >  max)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  =  0  ||  read  >  max)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  =  0  ||  read  >  max)  {	  if(read    <    0    ||    read    >    max)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
80	[BUG]  [BUGGY]  if(read  <  0  ||  read  ==  max)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read  ==  max)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  ==  max)  {	  if(read    <    0    ||    read    >    max)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
81	[BUG]  [BUGGY]  if(read  <  0  ||  read  >=  max)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read  >=  max)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  >=  max)  {	  if(read    <    0    ||    read    >    max)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
82	[BUG]  [BUGGY]  if(read  <  =  0  ||  read  <  length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  =  0  ||  read  <  length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  =  0  ||  read  <  length)  {	  if(read    <    0    ||    read    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
83	[BUG]  [BUGGY]  if(read  <  0  ||  read  <  length  ||  current.crc!=  null)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read  <  length  ||  current.crc!=  null)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  <  length  ||  current.crc!=  null)  {	  if(read    <    0    ||    read    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
84	[BUG]  [BUGGY]  if(read  <  0  ||  read.charAt(read.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read.charAt(read.length  -  1)!=  '/')  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read.charAt(read.length  -  1)!=  '/')  {	  if(read    >    0    ||    read.charAt(read.length    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
85	[BUG]  [BUGGY]  if(read  ==  0  ||  read.charAt(read.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  ||  read.charAt(read.length  -  1)!=  '/')  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  ||  read.charAt(read.length  -  1)!=  '/')  {	  if(read    >    0    ||    read.charAt(read.length    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
86	[BUG]  [BUGGY]  if(read  >=  0  ||  read.charAt(read.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  >=  0  ||  read.charAt(read.length  -  1)!=  '/')  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >=  0  ||  read.charAt(read.length  -  1)!=  '/')  {	  if(read    >    0    ||    read.charAt(read.length    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
87	[BUG]  [BUGGY]  if(read  >  0  &&  read.charAt(read.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  >  0  &&  read.charAt(read.length  -  1)!=  '/')  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >  0  &&  read.charAt(read.length  -  1)!=  '/')  {	  if(read    >    0    ||    read.charAt(read.length    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
88	[BUG]  [BUGGY]  if(read  <  =  0  ||  read.charAt(read.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  =  0  ||  read.charAt(read.length  -  1)!=  '/')  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  =  0  ||  read.charAt(read.length  -  1)!=  '/')  {	  if(read    >    0    ||    read.charAt(read.length    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
89	[BUG]  [BUGGY]  if(read!=  0  &&  read.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  &&  read.length  ==  0)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  &&  read.length  ==  0)  {	  if(read!=    0    ||    read.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
90	[BUG]  [BUGGY]  if(read!=  0  ||  read.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  ||  read.length  <  =  0)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  ||  read.length  <  =  0)  {	  if(read!=    0    ||    read.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
91	[BUG]  [BUGGY]  if(read  ==  0  ||  read.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  ||  read.length  ==  0)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  ||  read.length  ==  0)  {	  if(read!=    0    ||    read.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
92	[BUG]  [BUGGY]  if(read!=  0  ||  read.length  >=  0)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  ||  read.length  >=  0)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  ||  read.length  >=  0)  {	  if(read!=    0    ||    read.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
93	[BUG]  [BUGGY]  if(read  ==  0  ||  read.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  ||  read.length  <  =  0)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  ||  read.length  <  =  0)  {	  if(read!=    0    ||    read.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
94	[BUG]  [BUGGY]  if(read!=  0  ||  read.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  ||  read.length  >  0)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  ||  read.length  >  0)  {	  if(read!=    0    ||    read.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
95	[BUG]  [BUGGY]  if(read  <  0  ||  read  ==  current.crc.length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read  ==  current.crc.length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  ==  current.crc.length)  {	  if(read    <    0    ||    read    ==    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
96	[BUG]  [BUGGY]  if(read  <  0  ||  read!=  current.crc.length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read!=  current.crc.length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read!=  current.crc.length)  {	  if(read    <    0    ||    read    ==    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
97	[BUG]  [BUGGY]  if(read  <  =  0  ||  read  ==  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  =  0  ||  read  ==  buffer.length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  =  0  ||  read  ==  buffer.length)  {	  if(read    <    0    ||    read    ==    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
98	[BUG]  [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length,  read);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length,  read);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Inflater  inf  =  current.in.read(buffer,  offset,  length,  read);	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
99	[BUG]  [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length  -  1);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Inflater  inf  =  current.in.read(buffer,  offset,  length  -  1);	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
100	[BUG]  [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length,  CFH_LEN);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length,  CFH_LEN);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Inflater  inf  =  current.in.read(buffer,  offset,  length,  CFH_LEN);	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
101	[BUG]  [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  CFH_LEN);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  CFH_LEN);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Inflater  inf  =  current.in.read(buffer,  offset,  CFH_LEN);	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
102	[BUG]  [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length,  buffer.length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length,  buffer.length);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Inflater  inf  =  current.in.read(buffer,  offset,  length,  buffer.length);	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
103	[BUG]  [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length  -  read);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length  -  read);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Inflater  inf  =  current.in.read(buffer,  offset,  length  -  read);	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
104	[BUG]  [BUGGY]  if(read  <  0  ||  read.charAt(read.length  -  1)!=  'n')  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read.charAt(read.length  -  1)!=  'n')  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read.charAt(read.length  -  1)!=  'n')  {	  if(read    >    0    ||    read.charAt(read.length    -    1)!=    'n')    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
105	[BUG]  [BUGGY]  if(read  ==  0  ||  read.charAt(read.length  -  1)!=  'n')  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  ||  read.charAt(read.length  -  1)!=  'n')  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  ||  read.charAt(read.length  -  1)!=  'n')  {	  if(read    >    0    ||    read.charAt(read.length    -    1)!=    'n')    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
106	[BUG]  [BUGGY]  if(read  >=  0  ||  read.charAt(read.length  -  1)!=  'n')  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  >=  0  ||  read.charAt(read.length  -  1)!=  'n')  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >=  0  ||  read.charAt(read.length  -  1)!=  'n')  {	  if(read    >    0    ||    read.charAt(read.length    -    1)!=    'n')    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
107	[BUG]  [BUGGY]  if(read  >  0  &&  read.charAt(read.length  -  1)!=  'n')  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  >  0  &&  read.charAt(read.length  -  1)!=  'n')  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >  0  &&  read.charAt(read.length  -  1)!=  'n')  {	  if(read    >    0    ||    read.charAt(read.length    -    1)!=    'n')    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
108	[BUG]  [BUGGY]  if(read  >  0  ||  read.charAt(offset  -  1)!=  'n')  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  >  0  ||  read.charAt(offset  -  1)!=  'n')  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >  0  ||  read.charAt(offset  -  1)!=  'n')  {	  if(read    >    0    ||    read.charAt(read.length    -    1)!=    'n')    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
109	[BUG]  [BUGGY]  if(read  <  =  0  ||  read  ==  current.crc.size())  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  =  0  ||  read  ==  current.crc.size())  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  =  0  ||  read  ==  current.crc.size())  {	  if(read    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
110	[BUG]  [BUGGY]  if(read  <  =  0  ||  read!=  current.crc.size())  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  =  0  ||  read!=  current.crc.size())  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  =  0  ||  read!=  current.crc.size())  {	  if(read    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
111	[BUG]  [BUGGY]  if(read  <  =  0  ||  read  >=  current.crc.size())  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  =  0  ||  read  >=  current.crc.size())  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  =  0  ||  read  >=  current.crc.size())  {	  if(read    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
112	[BUG]  [BUGGY]  if(read  ==  0  ||  read.equals(current.crc.getMethod()))  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  ||  read.equals(current.crc.getMethod()))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  ||  read.equals(current.crc.getMethod()))  {	  if(read    ==    0    ||    read.equals(current.entry.getMethod()))    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
113	[BUG]  [BUGGY]  if(read!=  0  ||  read.equals(current.crc.getMethod()))  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  ||  read.equals(current.crc.getMethod()))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  ||  read.equals(current.crc.getMethod()))  {	  if(read    ==    0    ||    read.equals(current.entry.getMethod()))    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
114	[BUG]  [BUGGY]  if(read  ==  0  &&  read.equals(current.entry.getMethod()))  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  &&  read.equals(current.entry.getMethod()))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  &&  read.equals(current.entry.getMethod()))  {	  if(read    ==    0    ||    read.equals(current.entry.getMethod()))    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
115	[BUG]  [BUGGY]  if(read  ==  0  ||  read.equals(current.crc.getName()))  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  ||  read.equals(current.crc.getName()))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  ||  read.equals(current.crc.getName()))  {	  if(read    ==    0    ||    read.equals(current.entry.getMethod()))    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
116	[BUG]  [BUGGY]  if(read  ==  0  ||  read.equals(current.crc.getCrc()))  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  ||  read.equals(current.crc.getCrc()))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  ||  read.equals(current.crc.getCrc()))  {	  if(read    ==    0    ||    read.equals(current.entry.getMethod()))    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
117	[BUG]  [BUGGY]  if(read  ==  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  current.crc!=  null)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  current.crc!=  null)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  current.crc!=  null)  {	  if(read    ==    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
118	[BUG]  [BUGGY]  if(read  ==  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  current.crc!=  null)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  current.crc!=  null)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  current.crc!=  null)  {	  if(read    ==    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
119	[BUG]  [BUGGY]  if(read  <  =  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  =  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  =  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(read    ==    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
120	[BUG]  [BUGGY]  if(read  <  0  ||  read  >=  current.crc.length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read  >=  current.crc.length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  >=  current.crc.length)  {	  if(read    <    0    ||    read!=    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
121	[BUG]  [BUGGY]  if(read  <  =  0  ||  read!=  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  =  0  ||  read!=  buffer.length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  =  0  ||  read!=  buffer.length)  {	  if(read    <    0    ||    read!=    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
122	[BUG]  [BUGGY]  while(read!=  null  &&  current.crc!=  null)  {  read  =  current.in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  while(read!=  null  &&  current.crc!=  null)  {  read  =  current.in.read(buffer,  offset,  length);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	while(read!=  null  &&  current.crc!=  null)  {  read  =  current.in.read(buffer,  offset,  length);	  if(read    ==    null)    {    if(current.crc!=    null)    {    read    =    current.in.read(buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
123	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset,  read);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  read  =  current.in.read(buffer,  offset,  read);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	read  =  current.in.read(buffer,  offset,  read);	  if(read    ==    null)    {    if(current.crc!=    null)    {    read    =    current.in.read(buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
124	[BUG]  [BUGGY]  Read  =  current.in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  Read  =  current.in.read(buffer,  offset,  length);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Read  =  current.in.read(buffer,  offset,  length);	  if(read    ==    null)    {    if(current.crc!=    null)    {    read    =    current.in.read(buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
125	[BUG]  [BUGGY]  reader  =  current.in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  reader  =  current.in.read(buffer,  offset,  length);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	reader  =  current.in.read(buffer,  offset,  length);	  if(read    ==    null)    {    if(current.crc!=    null)    {    read    =    current.in.read(buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
126	[BUG]  [BUGGY]  while(read!=  null  &&  current.crc!=  null)  {  reader  =  current.in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  while(read!=  null  &&  current.crc!=  null)  {  reader  =  current.in.read(buffer,  offset,  length);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	while(read!=  null  &&  current.crc!=  null)  {  reader  =  current.in.read(buffer,  offset,  length);	  if(read    ==    null)    {    if(current.crc!=    null)    {    read    =    current.in.read(buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
127	[BUG]  [BUGGY]  if(read  >=  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED))  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  >=  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >=  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED))  {	  if(read    >    0    ||    isEnabled(ZipArchiveOutputStream.DEFLATED))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
128	[BUG]  [BUGGY]  if(read  <  =  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED))  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  =  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  =  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED))  {	  if(read    >    0    ||    isEnabled(ZipArchiveOutputStream.DEFLATED))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
129	[BUG]  [BUGGY]  if(read  >  0  &&  isEnabled(ZipArchiveOutputStream.DEFLATED))  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  >  0  &&  isEnabled(ZipArchiveOutputStream.DEFLATED))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >  0  &&  isEnabled(ZipArchiveOutputStream.DEFLATED))  {	  if(read    >    0    ||    isEnabled(ZipArchiveOutputStream.DEFLATED))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
130	[BUG]  [BUGGY]  if(read  >  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED,  current.crc))  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  >  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED,  current.crc))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED,  current.crc))  {	  if(read    >    0    ||    isEnabled(ZipArchiveOutputStream.DEFLATED))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
131	[BUG]  [BUGGY]  if(read  >  0  &&  read  <  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  >  0  &&  read  <  length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >  0  &&  read  <  length)  {	  if(read    >    0    ||    read    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
132	[BUG]  [BUGGY]  if(read  ==  0  ||  read  <  length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  ||  read  <  length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  ||  read  <  length)  {	  if(read    >    0    ||    read    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
133	[BUG]  [BUGGY]  if(read  >=  0  ||  read  <  length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  >=  0  ||  read  <  length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >=  0  ||  read  <  length)  {	  if(read    >    0    ||    read    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
134	[BUG]  [BUGGY]  if(read!=  0  ||  read  <  length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  ||  read  <  length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  ||  read  <  length)  {	  if(read    >    0    ||    read    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
135	[BUG]  [BUGGY]  if(read  >  0  ||  read  <  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  >  0  ||  read  <  buffer.length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >  0  ||  read  <  buffer.length)  {	  if(read    >    0    ||    read    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
136	[BUG]  [BUGGY]  if(read  <  =  0  ||  read  >=  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  =  0  ||  read  >=  buffer.length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  =  0  ||  read  >=  buffer.length)  {	  if(read    <    0    ||    read    >=    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
137	[BUG]  [BUGGY]  if(read  <  0  ||  read  ==  Buffer.length)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read  ==  Buffer.length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  ==  Buffer.length)  {	  if(read    <    0    ||    read    >    Buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
138	[BUG]  [BUGGY]  if(read  <  0  ||  read  >  Buffer.length  ||  current.crc!=  null)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read  >  Buffer.length  ||  current.crc!=  null)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  >  Buffer.length  ||  current.crc!=  null)  {	  if(read    <    0    ||    read    >    Buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
139	[BUG]  [BUGGY]  if(read  <  0  ||  read  >=  Buffer.length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read  >=  Buffer.length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  >=  Buffer.length)  {	  if(read    <    0    ||    read    >    Buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
140	[BUG]  [BUGGY]  if(read  <  0  ||  read  >  Buffer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read  >  Buffer.MAX_VALUE)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  >  Buffer.MAX_VALUE)  {	  if(read    <    0    ||    read    >    Buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
141	[BUG]  [BUGGY]  if(read  <  0  ||  read!=  Buffer.length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read!=  Buffer.length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read!=  Buffer.length)  {	  if(read    <    0    ||    read    >    Buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
142	[BUG]  [BUGGY]  if(read  <  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED,  current.crc))  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED,  current.crc))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED,  current.crc))  {	  if(read    <    0    ||    isEnabled(ZipArchiveOutputStream.DEFLATED))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
143	[BUG]  [BUGGY]  if(read  <  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED)||  isEnabled(current.crc))  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED)||  isEnabled(current.crc))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED)||  isEnabled(current.crc))  {	  if(read    <    0    ||    isEnabled(ZipArchiveOutputStream.DEFLATED))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
144	[BUG]  [BUGGY]  if(read  <  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED)||  current.crc!=  null)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED)||  current.crc!=  null)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED)||  current.crc!=  null)  {	  if(read    <    0    ||    isEnabled(ZipArchiveOutputStream.DEFLATED))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
145	[BUG]  [BUGGY]  if(read  <  0  ||  offset  >=  buffer.length)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  offset  >=  buffer.length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  offset  >=  buffer.length)  {	  if(read    <    0    ||    offset    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
146	[BUG]  [BUGGY]  if(read  <  0  ||  offset  ==  buffer.length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  offset  ==  buffer.length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  offset  ==  buffer.length)  {	  if(read    <    0    ||    offset    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
147	[BUG]  [BUGGY]  if(read  <  0  ||  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  offset  <  length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  offset  <  length)  {	  if(read    <    0    ||    offset    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
148	[BUG]  [BUGGY]  if(offset  <  0  ||  read  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(offset  <  0  ||  read  >  buffer.length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(offset  <  0  ||  read  >  buffer.length)  {	  if(read    <    0    ||    offset    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
149	[BUG]  [BUGGY]  if(read  <  0  ||  offset  >  current.crc.length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  offset  >  current.crc.length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  offset  >  current.crc.length)  {	  if(read    <    0    ||    offset    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
150	[BUG]  [BUGGY]  if(read  <  0  ||  offset!=  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  offset!=  buffer.length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  offset!=  buffer.length)  {	  if(read    <    0    ||    offset    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
151	[BUG]  [BUGGY]  if(read  <  0  ||  buffer.length  >  offset)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  buffer.length  >  offset)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  buffer.length  >  offset)  {	  if(read    <    0    ||    offset    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
152	[BUG]  [BUGGY]  if(read!=  0  ||  read.charAt(offset  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  ||  read.charAt(offset  -  1)!=  '/')  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  ||  read.charAt(offset  -  1)!=  '/')  {	  if(read!=    0    ||    read.charAt(read.length    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
153	[BUG]  [BUGGY]  if(read!=  0  ||  read.charAt(read.offset  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  ||  read.charAt(read.offset  -  1)!=  '/')  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  ||  read.charAt(read.offset  -  1)!=  '/')  {	  if(read!=    0    ||    read.charAt(read.length    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
154	[BUG]  [BUGGY]  if(read!=  0  &&  read.charAt(read.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  &&  read.charAt(read.length  -  1)!=  '/')  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  &&  read.charAt(read.length  -  1)!=  '/')  {	  if(read!=    0    ||    read.charAt(read.length    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
155	[BUG]  [BUGGY]  if(read  ==  0  ||  read.charAt(offset  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  ||  read.charAt(offset  -  1)!=  '/')  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  ||  read.charAt(offset  -  1)!=  '/')  {	  if(read!=    0    ||    read.charAt(read.length    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
156	[BUG]  [BUGGY]  if(read  ==  0  ||  read.charAt(read.offset  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  ||  read.charAt(read.offset  -  1)!=  '/')  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  ||  read.charAt(read.offset  -  1)!=  '/')  {	  if(read!=    0    ||    read.charAt(read.length    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
157	[BUG]  [BUGGY]  if(read  <  0  ||  offset  >  buffer.length  ||  buffer.charAt(offset)!=  '-')  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  offset  >  buffer.length  ||  buffer.charAt(offset)!=  '-')  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  offset  >  buffer.length  ||  buffer.charAt(offset)!=  '-')  {	  if(read    <    0    ||    read    >    buffer.length    ||    buffer.charAt(offset)!=    '-')    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
158	[BUG]  [BUGGY]  if(read  <  0  ||  read  ==  buffer.length  ||  buffer.charAt(offset)!=  '-')  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read  ==  buffer.length  ||  buffer.charAt(offset)!=  '-')  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  ==  buffer.length  ||  buffer.charAt(offset)!=  '-')  {	  if(read    <    0    ||    read    >    buffer.length    ||    buffer.charAt(offset)!=    '-')    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
159	[BUG]  [BUGGY]  if(read  <  0  ||  read  <  buffer.length  ||  buffer.charAt(offset)!=  '-')  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read  <  buffer.length  ||  buffer.charAt(offset)!=  '-')  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  <  buffer.length  ||  buffer.charAt(offset)!=  '-')  {	  if(read    <    0    ||    read    >    buffer.length    ||    buffer.charAt(offset)!=    '-')    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
160	[BUG]  [BUGGY]  if(read  <  0  ||  read  >=  buffer.length  ||  buffer.charAt(offset)!=  '-')  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read  >=  buffer.length  ||  buffer.charAt(offset)!=  '-')  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  >=  buffer.length  ||  buffer.charAt(offset)!=  '-')  {	  if(read    <    0    ||    read    >    buffer.length    ||    buffer.charAt(offset)!=    '-')    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
161	[BUG]  [BUGGY]  if(read  <  0  ||  read!=  buffer.length  ||  buffer.charAt(offset)!=  '-')  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read!=  buffer.length  ||  buffer.charAt(offset)!=  '-')  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read!=  buffer.length  ||  buffer.charAt(offset)!=  '-')  {	  if(read    <    0    ||    read    >    buffer.length    ||    buffer.charAt(offset)!=    '-')    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
162	[BUG]  [BUGGY]  if(read  <  0  ||  read  <  length  ||  buffer.charAt(offset)!=  '-')  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read  <  length  ||  buffer.charAt(offset)!=  '-')  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  <  length  ||  buffer.charAt(offset)!=  '-')  {	  if(read    <    0    ||    read    >    buffer.length    ||    buffer.charAt(offset)!=    '-')    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
163	[BUG]  [BUGGY]  if(read!=  0  &&  read.equals(current.entry.getMethod()))  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  &&  read.equals(current.entry.getMethod()))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  &&  read.equals(current.entry.getMethod()))  {	  if(read!=    0    ||    read.equals(current.entry.getMethod()))    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
164	[BUG]  [BUGGY]  if(read!=  0  ||  read.equals(current.crc))  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  ||  read.equals(current.crc))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  ||  read.equals(current.crc))  {	  if(read!=    0    ||    read.equals(current.entry.getMethod()))    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
165	[BUG]  [BUGGY]  if(read  >=  0  &&  read.equals(current.entry.getMethod()))  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  >=  0  &&  read.equals(current.entry.getMethod()))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >=  0  &&  read.equals(current.entry.getMethod()))  {	  if(read!=    0    ||    read.equals(current.entry.getMethod()))    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
166	[BUG]  [BUGGY]  if(read!=  0  ||  read.equals(current.crc.getName()))  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  ||  read.equals(current.crc.getName()))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  ||  read.equals(current.crc.getName()))  {	  if(read!=    0    ||    read.equals(current.entry.getMethod()))    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
167	[BUG]  [BUGGY]  if(read  >  0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  >  0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >  0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(read    >    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
168	[BUG]  [BUGGY]  if(read  >>  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  >>  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >>  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(read    >    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
169	[BUG]  [BUGGY]  if(read  <  0  ||  read  >  current.crc.update(buffer,  offset,  length))  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read  >  current.crc.update(buffer,  offset,  length))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  >  current.crc.update(buffer,  offset,  length))  {	  if(read    <    0    ||    read    >    current.crc.length)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
170	[BUG]  [BUGGY]  if(read  <  =  0  ||  read  >  current.crc.length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  =  0  ||  read  >  current.crc.length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  =  0  ||  read  >  current.crc.length)  {	  if(read    <    0    ||    read    >    current.crc.length)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
171	[BUG]  [BUGGY]  ReadBuffer  inf  =  current.in.read(buffer,  offset,  length);  read  =  inf.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  ReadBuffer  inf  =  current.in.read(buffer,  offset,  length);  read  =  inf.read(buffer,  offset,  length);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	ReadBuffer  inf  =  current.in.read(buffer,  offset,  length);  read  =  inf.read(buffer,  offset,  length);	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    read    =    inf.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
172	[BUG]  [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length  -  1);  read  =  inf.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length  -  1);  read  =  inf.read(buffer,  offset,  length);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Inflater  inf  =  current.in.read(buffer,  offset,  length  -  1);  read  =  inf.read(buffer,  offset,  length);	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    read    =    inf.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
173	[BUG]  [BUGGY]  if(read  ==  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED,  current.crc))  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED,  current.crc))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED,  current.crc))  {	  if(read    ==    0    ||    isEnabled(ZipArchiveOutputStream.DEFLATED))    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
174	[BUG]  [BUGGY]  if(read  ==  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED)||  isEnabled(current.crc))  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED)||  isEnabled(current.crc))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED)||  isEnabled(current.crc))  {	  if(read    ==    0    ||    isEnabled(ZipArchiveOutputStream.DEFLATED))    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
175	[BUG]  [BUGGY]  if(read  ==  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED)||  current.crc!=  null)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED)||  current.crc!=  null)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED)||  current.crc!=  null)  {	  if(read    ==    0    ||    isEnabled(ZipArchiveOutputStream.DEFLATED))    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
176	[BUG]  [BUGGY]  if(read  ==  0  &&  isEnabled(ZipArchiveOutputStream.DEFLATED))  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  &&  isEnabled(ZipArchiveOutputStream.DEFLATED))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  &&  isEnabled(ZipArchiveOutputStream.DEFLATED))  {	  if(read    ==    0    ||    isEnabled(ZipArchiveOutputStream.DEFLATED))    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
177	[BUG]  [BUGGY]  if(read!=  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED)||  isEnabled(current.crc))  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED)||  isEnabled(current.crc))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED)||  isEnabled(current.crc))  {	  if(read    ==    0    ||    isEnabled(ZipArchiveOutputStream.DEFLATED))    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
178	[BUG]  [BUGGY]  if(read!=  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED,  current.crc))  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED,  current.crc))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED,  current.crc))  {	  if(read    ==    0    ||    isEnabled(ZipArchiveOutputStream.DEFLATED))    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
179	[BUG]  [BUGGY]  if(read  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  current.crc!=  null)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  current.crc!=  null)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  current.crc!=  null)  {	  if(read    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
180	[BUG]  [BUGGY]  if(read!=  0  &&  read  ==  current.crc.size())  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  &&  read  ==  current.crc.size())  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  &&  read  ==  current.crc.size())  {	  if(read!=    0    ||    read    ==    current.crc.size())    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
181	[BUG]  [BUGGY]  if(read!=  0  ||  read.length  ==  current.crc.size())  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  ||  read.length  ==  current.crc.size())  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  ||  read.length  ==  current.crc.size())  {	  if(read!=    0    ||    read    ==    current.crc.size())    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
182	[BUG]  [BUGGY]  if(read!=  0  ||  read  <  current.crc.size())  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  ||  read  <  current.crc.size())  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  ||  read  <  current.crc.size())  {	  if(read!=    0    ||    read    ==    current.crc.size())    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
183	[BUG]  [BUGGY]  if(read  ==  0  ||  read!=  current.crc.size())  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  ||  read!=  current.crc.size())  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  ||  read!=  current.crc.size())  {	  if(read!=    0    ||    read    ==    current.crc.size())    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
184	[BUG]  [BUGGY]  if(read  ==  0  ||  read  ==  current.crc.size())  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  ||  read  ==  current.crc.size())  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  ||  read  ==  current.crc.size())  {	  if(read!=    0    ||    read    ==    current.crc.size())    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
185	[BUG]  [BUGGY]  if(read!=  0  ||  read  ==  current.in.size())  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  ||  read  ==  current.in.size())  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  ||  read  ==  current.in.size())  {	  if(read!=    0    ||    read    ==    current.crc.size())    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
186	[BUG]  [BUGGY]  if(read  <  0  ||  read  >  buffer.length  ||  buffer.charAt(offset)  ==  '-')  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read  >  buffer.length  ||  buffer.charAt(offset)  ==  '-')  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  >  buffer.length  ||  buffer.charAt(offset)  ==  '-')  {	  if(read    <    0    ||    read    >    buffer.length    ||    buffer.charAt(offset)    >=    '-')    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
187	[BUG]  [BUGGY]  if(read  <  0  ||  read  ==  buffer.length  ||  buffer.charAt(offset)  >=  '-')  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read  ==  buffer.length  ||  buffer.charAt(offset)  >=  '-')  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  ==  buffer.length  ||  buffer.charAt(offset)  >=  '-')  {	  if(read    <    0    ||    read    >    buffer.length    ||    buffer.charAt(offset)    >=    '-')    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
188	[BUG]  [BUGGY]  if(read  <  0  ||  offset  >  buffer.length  ||  buffer.charAt(offset)  >=  '-')  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  offset  >  buffer.length  ||  buffer.charAt(offset)  >=  '-')  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  offset  >  buffer.length  ||  buffer.charAt(offset)  >=  '-')  {	  if(read    <    0    ||    read    >    buffer.length    ||    buffer.charAt(offset)    >=    '-')    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
189	[BUG]  [BUGGY]  if(read!=  0  &&  read.length  <  2)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  &&  read.length  <  2)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  &&  read.length  <  2)  {	  if(read!=    0    ||    read.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
190	[BUG]  [BUGGY]  if(read!=  0  ||  read.length  <  =  2)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  ||  read.length  <  =  2)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  ||  read.length  <  =  2)  {	  if(read!=    0    ||    read.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
191	[BUG]  [BUGGY]  if(read!=  0  ||  read.length  <  1)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  ||  read.length  <  1)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  ||  read.length  <  1)  {	  if(read!=    0    ||    read.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
192	[BUG]  [BUGGY]  if(read!=  0  ||  read.length  <  2  ||  current.crc  ==  null)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  ||  read.length  <  2  ||  current.crc  ==  null)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  ||  read.length  <  2  ||  current.crc  ==  null)  {	  if(read!=    0    ||    read.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
193	[BUG]  [BUGGY]  if(read!=  0  ||  read.length  <  2  ||  length  >  current.crc.length)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  ||  read.length  <  2  ||  length  >  current.crc.length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  ||  read.length  <  2  ||  length  >  current.crc.length)  {	  if(read!=    0    ||    read.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
194	[BUG]  [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  read);  if(inf  ==  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  read);  if(inf  ==  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Inflater  inf  =  current.in.read(buffer,  offset,  read);  if(inf  ==  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
195	[BUG]  [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length,  crc);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length,  crc);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Inflater  inf  =  current.in.read(buffer,  offset,  length,  crc);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
196	[BUG]  [BUGGY]  Inflater  inf  =  current.crc.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  Inflater  inf  =  current.crc.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Inflater  inf  =  current.crc.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
197	[BUG]  [BUGGY]  ReadBuffer  in  =  current.in.read(buffer,  offset,  length);  read  =  in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  ReadBuffer  in  =  current.in.read(buffer,  offset,  length);  read  =  in.read(buffer,  offset,  length);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	ReadBuffer  in  =  current.in.read(buffer,  offset,  length);  read  =  in.read(buffer,  offset,  length);	  InputStream    in    =    current.in.read(buffer,    offset,    length);    read    =    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
198	[BUG]  [BUGGY]  InputStream  in  =  current.in.read(buffer,  offset,  length  -  1);  read  =  in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  InputStream  in  =  current.in.read(buffer,  offset,  length  -  1);  read  =  in.read(buffer,  offset,  length);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	InputStream  in  =  current.in.read(buffer,  offset,  length  -  1);  read  =  in.read(buffer,  offset,  length);	  InputStream    in    =    current.in.read(buffer,    offset,    length);    read    =    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
199	[BUG]  [BUGGY]  InputStream  in  =  current.in.read(buffer,  offset,  read);  read  =  in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  InputStream  in  =  current.in.read(buffer,  offset,  read);  read  =  in.read(buffer,  offset,  length);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	InputStream  in  =  current.in.read(buffer,  offset,  read);  read  =  in.read(buffer,  offset,  length);	  InputStream    in    =    current.in.read(buffer,    offset,    length);    read    =    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
200	[BUG]  [BUGGY]  if(read  ==  0  ||  current.crc.equals(read))  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  ||  current.crc.equals(read))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  ||  current.crc.equals(read))  {	  if(read    ==    0    ||    read.equals(current.crc))    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
201	[BUG]  [BUGGY]  if(read  ==  0  &&  read.equals(current.crc))  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  &&  read.equals(current.crc))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  &&  read.equals(current.crc))  {	  if(read    ==    0    ||    read.equals(current.crc))    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
202	[BUG]  [BUGGY]  if(read  ==  0  ||  crc.equals(current.crc))  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  ||  crc.equals(current.crc))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  ||  crc.equals(current.crc))  {	  if(read    ==    0    ||    read.equals(current.crc))    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
203	[BUG]  [BUGGY]  if(read  >=  0  ||  read.equals(current.crc))  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  >=  0  ||  read.equals(current.crc))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >=  0  ||  read.equals(current.crc))  {	  if(read    ==    0    ||    read.equals(current.crc))    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
204	[BUG]  [BUGGY]  if(read!=  0  &&  read.charAt(read.length  -  1)!=  'n')  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  &&  read.charAt(read.length  -  1)!=  'n')  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  &&  read.charAt(read.length  -  1)!=  'n')  {	  if(read!=    0    ||    read.charAt(read.length    -    1)!=    'n')    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
205	[BUG]  [BUGGY]  if(read!=  0  ||  read.charAt(read.offset  -  1)!=  'n')  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  ||  read.charAt(read.offset  -  1)!=  'n')  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  ||  read.charAt(read.offset  -  1)!=  'n')  {	  if(read!=    0    ||    read.charAt(read.length    -    1)!=    'n')    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
206	[BUG]  [BUGGY]  if(read!=  0  ||  read.charAt(offset  -  1)!=  'n')  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  ||  read.charAt(offset  -  1)!=  'n')  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  ||  read.charAt(offset  -  1)!=  'n')  {	  if(read!=    0    ||    read.charAt(read.length    -    1)!=    'n')    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
207	[BUG]  [BUGGY]  if(read!=  0  ||  read.charAt(read.length  -  1)  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  ||  read.charAt(read.length  -  1)  ==  'n')  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  ||  read.charAt(read.length  -  1)  ==  'n')  {	  if(read!=    0    ||    read.charAt(read.length    -    1)!=    'n')    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
208	[BUG]  [BUGGY]  if(read!=  0  &&  read.length  >  0  &&  current.crc!=  null)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  &&  read.length  >  0  &&  current.crc!=  null)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  &&  read.length  >  0  &&  current.crc!=  null)  {	  if(read!=    0    &&    read.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
209	[BUG]  [BUGGY]  if(read!=  0  &&  read.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  &&  read.length  <  =  0)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  &&  read.length  <  =  0)  {	  if(read!=    0    &&    read.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
210	[BUG]  [BUGGY]  if(read!=  0  &&  read.length  >  0  ||  current.crc!=  null)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  &&  read.length  >  0  ||  current.crc!=  null)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  &&  read.length  >  0  ||  current.crc!=  null)  {	  if(read!=    0    &&    read.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
211	[BUG]  [BUGGY]  if(read  ==  0  &&  read.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  &&  read.length  >  0)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  &&  read.length  >  0)  {	  if(read!=    0    &&    read.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
212	[BUG]  [BUGGY]  if(read  ==  0  ||  read.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  ||  read.length  >  0)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  ||  read.length  >  0)  {	  if(read!=    0    &&    read.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
213	[BUG]  [BUGGY]  if(read!=  null)  {  in.close();  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  null)  {  in.close();  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  null)  {  in.close();  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }	  in.close();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
214	[BUG]  [BUGGY]  if(read!=  null)  {  in.close();  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry.getMethod());  }  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  null)  {  in.close();  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry.getMethod());  }  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  null)  {  in.close();  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry.getMethod());  }	  in.close();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
215	[BUG]  [BUGGY]  if(read!=  null)  {  in.close();  }  else  if(current.entry.getMethod()  ==  ZipMethod.IMPLODING)  {  read  =  readDeflated(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  null)  {  in.close();  }  else  if(current.entry.getMethod()  ==  ZipMethod.IMPLODING)  {  read  =  readDeflated(buffer,  offset,  length);  }  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  null)  {  in.close();  }  else  if(current.entry.getMethod()  ==  ZipMethod.IMPLODING)  {  read  =  readDeflated(buffer,  offset,  length);  }	  in.close();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
216	[BUG]  [BUGGY]  if(read!=  null)  {  in.close();  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  null)  {  in.close();  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  null)  {  in.close();  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }	  in.close();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
217	[BUG]  [BUGGY]  if(read!=  null)  {  in.close();  }  else  if(current.entry.getMethod()  ==  ZipMethod.UNSHRINKING)  {  read  =  readDeflated(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  null)  {  in.close();  }  else  if(current.entry.getMethod()  ==  ZipMethod.UNSHRINKING)  {  read  =  readDeflated(buffer,  offset,  length);  }  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  null)  {  in.close();  }  else  if(current.entry.getMethod()  ==  ZipMethod.UNSHRINKING)  {  read  =  readDeflated(buffer,  offset,  length);  }	  in.close();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
218	[BUG]  [BUGGY]  if(read!=  null)  {  in.close();  }  else  if(current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode())  {  read  =  readDeflated(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  null)  {  in.close();  }  else  if(current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode())  {  read  =  readDeflated(buffer,  offset,  length);  }  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  null)  {  in.close();  }  else  if(current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode())  {  read  =  readDeflated(buffer,  offset,  length);  }	  in.close();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
219	[BUG]  [BUGGY]  while(current.crc!=  null)  {  if(read!=  null)  {  read  =  readDeflated(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  while(current.crc!=  null)  {  if(read!=  null)  {  read  =  readDeflated(buffer,  offset,  length);  }  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	while(current.crc!=  null)  {  if(read!=  null)  {  read  =  readDeflated(buffer,  offset,  length);  }	  if(read    ==    null)    {    if(current.entry!=    null)    {    read    =    readDeflated(buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
220	[BUG]  [BUGGY]  while(current.crc!=  null)  {  if(read  ==  null)  {  read  =  readDeflated(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  while(current.crc!=  null)  {  if(read  ==  null)  {  read  =  readDeflated(buffer,  offset,  length);  }  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	while(current.crc!=  null)  {  if(read  ==  null)  {  read  =  readDeflated(buffer,  offset,  length);  }	  if(read    ==    null)    {    if(current.entry!=    null)    {    read    =    readDeflated(buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
221	[BUG]  [BUGGY]  while(current.crc!=  null)  {  read  =  readDeflated(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  while(current.crc!=  null)  {  read  =  readDeflated(buffer,  offset,  length);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	while(current.crc!=  null)  {  read  =  readDeflated(buffer,  offset,  length);	  if(read    ==    null)    {    if(current.entry!=    null)    {    read    =    readDeflated(buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
222	[BUG]  [BUGGY]  reader  =  readDeflated(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  reader  =  readDeflated(buffer,  offset,  length);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	reader  =  readDeflated(buffer,  offset,  length);	  if(read    ==    null)    {    if(current.entry!=    null)    {    read    =    readDeflated(buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
223	[BUG]  [BUGGY]  Read  =  readDeflated(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  Read  =  readDeflated(buffer,  offset,  length);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Read  =  readDeflated(buffer,  offset,  length);	  if(read    ==    null)    {    if(current.entry!=    null)    {    read    =    readDeflated(buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
224	[BUG]  [BUGGY]  if(read!=  0  &&  read  ==  current.crc.length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  &&  read  ==  current.crc.length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  &&  read  ==  current.crc.length)  {	  if(read!=    0    ||    read    ==    current.crc.length)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
225	[BUG]  [BUGGY]  if(read  ==  0  ||  read  ==  current.crc.length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  ||  read  ==  current.crc.length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  ||  read  ==  current.crc.length)  {	  if(read!=    0    ||    read    ==    current.crc.length)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
226	[BUG]  [BUGGY]  if(read!=  0  ||  read.length  ==  current.crc.length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  ||  read.length  ==  current.crc.length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  ||  read.length  ==  current.crc.length)  {	  if(read!=    0    ||    read    ==    current.crc.length)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
227	[BUG]  [BUGGY]  if(read!=  0  ||  read  <  current.crc.length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  ||  read  <  current.crc.length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  ||  read  <  current.crc.length)  {	  if(read!=    0    ||    read    ==    current.crc.length)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
228	[BUG]  [BUGGY]  if(read  ==  0  ||  read!=  current.crc.length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  ||  read!=  current.crc.length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  ||  read!=  current.crc.length)  {	  if(read!=    0    ||    read    ==    current.crc.length)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
229	[BUG]  [BUGGY]  if(read  >=  0  ||  read  ==  current.crc.length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  >=  0  ||  read  ==  current.crc.length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >=  0  ||  read  ==  current.crc.length)  {	  if(read!=    0    ||    read    ==    current.crc.length)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
230	[BUG]  [BUGGY]  if(read!=  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED)&&  isEnabled(current.crc))  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED)&&  isEnabled(current.crc))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED)&&  isEnabled(current.crc))  {	  if(read!=    0    ||    isEnabled(ZipArchiveOutputStream.DEFLATED))    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
231	[BUG]  [BUGGY]  if(read!=  0  &&  isEnabled(ZipArchiveOutputStream.DEFLATED,  current.crc))  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  &&  isEnabled(ZipArchiveOutputStream.DEFLATED,  current.crc))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  &&  isEnabled(ZipArchiveOutputStream.DEFLATED,  current.crc))  {	  if(read!=    0    &&    isEnabled(ZipArchiveOutputStream.DEFLATED))    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
232	[BUG]  [BUGGY]  if(read!=  0  &&  isEnabled(current.crc))  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  &&  isEnabled(current.crc))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  &&  isEnabled(current.crc))  {	  if(read!=    0    &&    isEnabled(ZipArchiveOutputStream.DEFLATED))    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
233	[BUG]  [BUGGY]  if(read!=  0  &&  isEnabled(ZipArchiveOutputStream.DEFLATED)||  isEnabled(current.crc))  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  &&  isEnabled(ZipArchiveOutputStream.DEFLATED)||  isEnabled(current.crc))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  &&  isEnabled(ZipArchiveOutputStream.DEFLATED)||  isEnabled(current.crc))  {	  if(read!=    0    &&    isEnabled(ZipArchiveOutputStream.DEFLATED))    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
234	[BUG]  [BUGGY]  if(read  ==  0  &&  isEnabled(ZipArchiveOutputStream.DEFLATED,  current.crc))  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  &&  isEnabled(ZipArchiveOutputStream.DEFLATED,  current.crc))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  &&  isEnabled(ZipArchiveOutputStream.DEFLATED,  current.crc))  {	  if(read!=    0    &&    isEnabled(ZipArchiveOutputStream.DEFLATED))    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
235	[BUG]  [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  read);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  read);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Inflater  inf  =  current.in.read(buffer,  offset,  read);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
236	[BUG]  [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length,  read);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length,  read);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Inflater  inf  =  current.in.read(buffer,  offset,  length,  read);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
237	[BUG]  [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  read);  if(inf  ==  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  read);  if(inf  ==  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Inflater  inf  =  current.in.read(buffer,  offset,  read);  if(inf  ==  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
238	[BUG]  [BUGGY]  Inflater  inf  =  current.crc.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  Inflater  inf  =  current.crc.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Inflater  inf  =  current.crc.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
239	[BUG]  [BUGGY]  int  inf  =  current.in.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  int  inf  =  current.in.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	int  inf  =  current.in.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
240	[BUG]  [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  read);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  read);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Inflater  inf  =  current.in.read(buffer,  offset,  read);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
241	[BUG]  [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  read);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  read);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Inflater  inf  =  current.in.read(buffer,  offset,  read);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current.entry);    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
242	[BUG]  [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length,  read);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length,  read);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Inflater  inf  =  current.in.read(buffer,  offset,  length,  read);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current.entry);    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
243	[BUG]  [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  read);  if(inf  ==  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  read);  if(inf  ==  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Inflater  inf  =  current.in.read(buffer,  offset,  read);  if(inf  ==  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current.entry);    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
244	[BUG]  [BUGGY]  Inflater  inf  =  current.crc.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  Inflater  inf  =  current.crc.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Inflater  inf  =  current.crc.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current.entry);    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
245	[BUG]  [BUGGY]  if(read  <  0  ||  length  >=  buffer.length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  length  >=  buffer.length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  length  >=  buffer.length)  {	  if(read    <    0    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
246	[BUG]  [BUGGY]  if(read  <  0  ||  length  ==  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  length  ==  buffer.length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  length  ==  buffer.length)  {	  if(read    <    0    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
247	[BUG]  [BUGGY]  if(read  <  0  ||  buffer.length  >  length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  buffer.length  >  length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  buffer.length  >  length)  {	  if(read    <    0    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
248	[BUG]  [BUGGY]  while(current.in!=  null)  {  read  =  readDeflated(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  while(current.in!=  null)  {  read  =  readDeflated(buffer,  offset,  length);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	while(current.in!=  null)  {  read  =  readDeflated(buffer,  offset,  length);	  if(read    ==    null)    {    if(current.in!=    null)    {    read    =    readDeflated(buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
249	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  current.crc);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  current.crc);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	read  =  readDeflated(buffer,  offset,  length,  current.crc);	  read    =    readDeflated(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
250	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  current.in);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  current.in);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	read  =  readDeflated(buffer,  offset,  length,  current.in);	  read    =    readDeflated(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
251	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  read  =  readDeflated(buffer,  offset,  length  -  1);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	read  =  readDeflated(buffer,  offset,  length  -  1);	  read    =    readDeflated(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
252	[BUG]  [BUGGY]  read  =  readDeflated(current.entry,  buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  read  =  readDeflated(current.entry,  buffer,  offset,  length);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	read  =  readDeflated(current.entry,  buffer,  offset,  length);	  read    =    readDeflated(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
253	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  read  =  readDeflated(buffer,  offset,  length  +  1);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	read  =  readDeflated(buffer,  offset,  length  +  1);	  read    =    readDeflated(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
254	[BUG]  [BUGGY]  if(read!=  0  &&  isEnabled(ZipArchiveOutputStream.DEFAULT_CRC))  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  &&  isEnabled(ZipArchiveOutputStream.DEFAULT_CRC))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  &&  isEnabled(ZipArchiveOutputStream.DEFAULT_CRC))  {	  if(read    ==    0    ||    isEnabled(ZipArchiveOutputStream.DEFAULT_CRC))    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
255	[BUG]  [BUGGY]  if(read  ==  0  ||  isEnabled(ZipArchiveOutputStream.DEFAULT_RCC))  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  ||  isEnabled(ZipArchiveOutputStream.DEFAULT_RCC))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  ||  isEnabled(ZipArchiveOutputStream.DEFAULT_RCC))  {	  if(read    ==    0    ||    isEnabled(ZipArchiveOutputStream.DEFAULT_CRC))    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
256	[BUG]  [BUGGY]  InputStream  in  =  current.in.read(buffer,  offset,  length  -  read);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  InputStream  in  =  current.in.read(buffer,  offset,  length  -  read);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	InputStream  in  =  current.in.read(buffer,  offset,  length  -  read);	  InputStream    in    =    current.in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
257	[BUG]  [BUGGY]  InputStream  in  =  current.in.read(buffer,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  InputStream  in  =  current.in.read(buffer,  offset,  length  +  1);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	InputStream  in  =  current.in.read(buffer,  offset,  length  +  1);	  InputStream    in    =    current.in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
258	[BUG]  [BUGGY]  if(read  >>  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  >>  0)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >>  0)  {	  if(read    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
259	[BUG]  [BUGGY]  if(read  ==  null)  {  Inflater  inf  =  current.in.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMet  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  null)  {  Inflater  inf  =  current.in.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMet  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  null)  {  Inflater  inf  =  current.in.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMet	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current.entry    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
260	[BUG]  [BUGGY]  if(read  <  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED)||  isEnabled(current.entry))  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED)||  isEnabled(current.entry))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED)||  isEnabled(current.entry))  {	  if(read    <    0    ||    isEnabled(ZipArchiveOutputStream.DEFLATED))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
261	[BUG]  [BUGGY]  if(read  <  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED)||  hasDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED)||  hasDataDescriptor)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED)||  hasDataDescriptor)  {	  if(read    <    0    ||    isEnabled(ZipArchiveOutputStream.DEFLATED))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
262	[BUG]  [BUGGY]  if(read  <  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED,  read))  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED,  read))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED,  read))  {	  if(read    <    0    ||    isEnabled(ZipArchiveOutputStream.DEFLATED))    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
263	[BUG]  [BUGGY]  if(read  >  0  ||  read  ==  buffer.length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  >  0  ||  read  ==  buffer.length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >  0  ||  read  ==  buffer.length)  {	  if(read    <    0    ||    read    ==    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
264	[BUG]  [BUGGY]  read  =  inf.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  read  =  inf.read(buffer,  offset,  length);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	read  =  inf.read(buffer,  offset,  length);	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    read    =    inf.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
265	[BUG]  [BUGGY]  InputStream  in  =  inputStream.read(buffer,  offset,  length);  read  =  in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  InputStream  in  =  inputStream.read(buffer,  offset,  length);  read  =  in.read(buffer,  offset,  length);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	InputStream  in  =  inputStream.read(buffer,  offset,  length);  read  =  in.read(buffer,  offset,  length);	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    read    =    inf.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
266	[BUG]  [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length);  read  =  inf.read(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length);  read  =  inf.read(buffer,  offset,  length  -  1);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Inflater  inf  =  current.in.read(buffer,  offset,  length);  read  =  inf.read(buffer,  offset,  length  -  1);	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    read    =    inf.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
267	[BUG]  [BUGGY]  read  =  readDeflated(current.entry,  offset,  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  read  =  readDeflated(current.entry,  offset,  length);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	read  =  readDeflated(current.entry,  offset,  length);	  read    =    readDeflated(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
268	[BUG]  [BUGGY]  if(read  <  0  ||  read.length!=  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read.length!=  buffer.length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read.length!=  buffer.length)  {	  if(read    <    0    ||    read!=    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
269	[BUG]  [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length  -  1);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length  -  1);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Inflater  inf  =  current.in.read(buffer,  offset,  length  -  1);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
270	[BUG]  [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length  +  1);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length  +  1);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Inflater  inf  =  current.in.read(buffer,  offset,  length  +  1);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
271	[BUG]  [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Inflater  inf  =  current.in.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
272	[BUG]  [BUGGY]  if(read!=  null)  {  if(current.crc!=  null)  {  read  =  current.in.read(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  null)  {  if(current.crc!=  null)  {  read  =  current.in.read(buffer,  offset,  length);  }  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  null)  {  if(current.crc!=  null)  {  read  =  current.in.read(buffer,  offset,  length);  }	  if(read    ==    null)    {    if(current.crc!=    null)    {    read    =    current.in.read(buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
273	[BUG]  [BUGGY]  if(read!=  null)  {  if(current.entry!=  null)  {  read  =  readDeflated(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  null)  {  if(current.entry!=  null)  {  read  =  readDeflated(buffer,  offset,  length);  }  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  null)  {  if(current.entry!=  null)  {  read  =  readDeflated(buffer,  offset,  length);  }	  if(read    ==    null)    {    if(current.crc!=    null)    {    read    =    current.in.read(buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
274	[BUG]  [BUGGY]  if(read!=  null)  {  if(current.entry!=  null)  {  read  =  current.in.read(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  null)  {  if(current.entry!=  null)  {  read  =  current.in.read(buffer,  offset,  length);  }  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  null)  {  if(current.entry!=  null)  {  read  =  current.in.read(buffer,  offset,  length);  }	  if(read    ==    null)    {    if(current.crc!=    null)    {    read    =    current.in.read(buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
275	[BUG]  [BUGGY]  if(read  ==  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED)||  isEnabled(current.entry))  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED)||  isEnabled(current.entry))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED)||  isEnabled(current.entry))  {	  if(read    ==    0    ||    isEnabled(ZipArchiveOutputStream.DEFLATED))    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
276	[BUG]  [BUGGY]  if(read  >=  0  ||  read.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  >=  0  ||  read.length  ==  0)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >=  0  ||  read.length  ==  0)  {	  if(read!=    0    ||    read.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
277	[BUG]  [BUGGY]  if(read  ==  0  ||  read.length!=  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  ||  read.length!=  0)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  ||  read.length!=  0)  {	  if(read!=    0    ||    read.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
278	[BUG]  [BUGGY]  if(read.length!=  0  ||  read.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read.length!=  0  ||  read.length  ==  0)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read.length!=  0  ||  read.length  ==  0)  {	  if(read!=    0    ||    read.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
279	[BUG]  [BUGGY]  if(read  <  0  ||  read  >  offset)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read  >  offset)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  >  offset)  {	  if(read    <    0    ||    read    >    length)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
280	[BUG]  [BUGGY]  if(read  ==  0  ||  read.length  ==  current.crc.length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  ||  read.length  ==  current.crc.length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  ||  read.length  ==  current.crc.length)  {	  if(read!=    0    ||    read    ==    current.crc.length)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
281	[BUG]  [BUGGY]  if(read!=  null)  {  if(current.crc!=  null)  {  read  =  readDeflated(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  null)  {  if(current.crc!=  null)  {  read  =  readDeflated(buffer,  offset,  length);  }  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  null)  {  if(current.crc!=  null)  {  read  =  readDeflated(buffer,  offset,  length);  }	  if(read    ==    null)    {    if(current.in!=    null)    {    read    =    readDeflated(buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
282	[BUG]  [BUGGY]  if(read  ==  null)  {  if(current.crc!=  null)  {  read  =  readDeflated(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  null)  {  if(current.crc!=  null)  {  read  =  readDeflated(buffer,  offset,  length);  }  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  null)  {  if(current.crc!=  null)  {  read  =  readDeflated(buffer,  offset,  length);  }	  if(read    ==    null)    {    if(current.in!=    null)    {    read    =    readDeflated(buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
283	[BUG]  [BUGGY]  if(read!=  null)  {  if(current.in!=  null)  {  read  =  readDeflated(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  null)  {  if(current.in!=  null)  {  read  =  readDeflated(buffer,  offset,  length);  }  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  null)  {  if(current.in!=  null)  {  read  =  readDeflated(buffer,  offset,  length);  }	  if(read    ==    null)    {    if(current.in!=    null)    {    read    =    readDeflated(buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
284	[BUG]  [BUGGY]  if(read!=  null)  {  if(current.in  ==  null)  {  read  =  readDeflated(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  null)  {  if(current.in  ==  null)  {  read  =  readDeflated(buffer,  offset,  length);  }  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  null)  {  if(current.in  ==  null)  {  read  =  readDeflated(buffer,  offset,  length);  }	  if(read    ==    null)    {    if(current.in!=    null)    {    read    =    readDeflated(buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
285	[BUG]  [BUGGY]  if(read.length  >  0  ||  read.charAt(read.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read.length  >  0  ||  read.charAt(read.length  -  1)!=  '/')  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read.length  >  0  ||  read.charAt(read.length  -  1)!=  '/')  {	  if(read    >    0    ||    read.charAt(read.length    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
286	[BUG]  [BUGGY]  if(read  >=  0  ||  read  >  buffer.length  ||  buffer.charAt(offset)!=  '-')  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  >=  0  ||  read  >  buffer.length  ||  buffer.charAt(offset)!=  '-')  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >=  0  ||  read  >  buffer.length  ||  buffer.charAt(offset)!=  '-')  {	  if(read    <    0    ||    read    >    buffer.length    ||    buffer.charAt(offset)!=    '-')    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
287	[BUG]  [BUGGY]  if(read  ==  0  ||  read  >  buffer.length  ||  buffer.charAt(offset)!=  '-')  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  ||  read  >  buffer.length  ||  buffer.charAt(offset)!=  '-')  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  ||  read  >  buffer.length  ||  buffer.charAt(offset)!=  '-')  {	  if(read    <    0    ||    read    >    buffer.length    ||    buffer.charAt(offset)!=    '-')    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
288	[BUG]  [BUGGY]  if(read  ==  null)  {  Inflater  inf  =  current.in.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMetho  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  null)  {  Inflater  inf  =  current.in.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMetho  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  null)  {  Inflater  inf  =  current.in.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMetho	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current.entry);    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
289	[BUG]  [BUGGY]  if(read  >=  0  ||  read.equals(current.entry.getMethod()))  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  >=  0  ||  read.equals(current.entry.getMethod()))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >=  0  ||  read.equals(current.entry.getMethod()))  {	  if(read!=    0    ||    read.equals(current.entry.getMethod()))    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
290	[BUG]  [BUGGY]  if(read  <  0  ||  read  >  BoundedInputStream.DEFAULT)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read  >  BoundedInputStream.DEFAULT)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  >  BoundedInputStream.DEFAULT)  {	  if(read    <    0    ||    read    >    max)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
291	[BUG]  [BUGGY]  if(read  <  0  ||  read.equals(current.entry))  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read.equals(current.entry))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read.equals(current.entry))  {	  if(read    <    0    ||    read.equals(current.entry.getMethod()))    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
292	[BUG]  [BUGGY]  if(read  <  0  ||  read  >  buffer.length  ||  buffer.charAt(offset)>  '-')  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read  >  buffer.length  ||  buffer.charAt(offset)>  '-')  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  >  buffer.length  ||  buffer.charAt(offset)>  '-')  {	  if(read    <    0    ||    read    >    buffer.length    ||    buffer.charAt(offset)    >=    '-')    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
293	[BUG]  [BUGGY]  if(read  <  0  ||  read  >=  buffer.length  ||  buffer.charAt(offset)  >=  '-')  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read  >=  buffer.length  ||  buffer.charAt(offset)  >=  '-')  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  >=  buffer.length  ||  buffer.charAt(offset)  >=  '-')  {	  if(read    <    0    ||    read    >    buffer.length    ||    buffer.charAt(offset)    >=    '-')    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
294	[BUG]  [BUGGY]  if(read  >=  0  ||  read  >  buffer.length  ||  buffer.charAt(offset)  >=  '-')  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  >=  0  ||  read  >  buffer.length  ||  buffer.charAt(offset)  >=  '-')  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >=  0  ||  read  >  buffer.length  ||  buffer.charAt(offset)  >=  '-')  {	  if(read    <    0    ||    read    >    buffer.length    ||    buffer.charAt(offset)    >=    '-')    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
295	[BUG]  [BUGGY]  if(read.length!=  0  ||  read.charAt(read.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read.length!=  0  ||  read.charAt(read.length  -  1)!=  '/')  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read.length!=  0  ||  read.charAt(read.length  -  1)!=  '/')  {	  if(read!=    0    ||    read.charAt(read.length    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
296	[BUG]  [BUGGY]  if(read!=  0  ||  read.charAt(read.length  -  1)  ==  '/')  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  ||  read.charAt(read.length  -  1)  ==  '/')  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  ||  read.charAt(read.length  -  1)  ==  '/')  {	  if(read!=    0    ||    read.charAt(read.length    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
297	[BUG]  [BUGGY]  if(read  ==  0  &&  read.charAt(read.length  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  &&  read.charAt(read.length  -  1)!=  '/')  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  &&  read.charAt(read.length  -  1)!=  '/')  {	  if(read!=    0    ||    read.charAt(read.length    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
298	[BUG]  [BUGGY]  if(read  <  0  ||  read  >  Buffer.length  -  1)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read  >  Buffer.length  -  1)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  >  Buffer.length  -  1)  {	  if(read    <    0    ||    read    >    Buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
299	[BUG]  [BUGGY]  if(read  <  0  ||  read  >  Buffer.length  -  offset)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read  >  Buffer.length  -  offset)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  >  Buffer.length  -  offset)  {	  if(read    <    0    ||    read    >    Buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
300	[BUG]  [BUGGY]  if(read  <  0  ||  length  >  read.length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  length  >  read.length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  length  >  read.length)  {	  if(read    <    0    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
301	[BUG]  [BUGGY]  if(read  <  0  ||  length  >  buffer.length  -  1)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  length  >  buffer.length  -  1)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  length  >  buffer.length  -  1)  {	  if(read    <    0    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
302	[BUG]  [BUGGY]  if(read  >>  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED))  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  >>  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >>  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED))  {	  if(read    >    0    ||    isEnabled(ZipArchiveOutputStream.DEFLATED))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
303	[BUG]  [BUGGY]  if(read  <  =  0  ||  read  >  buffer.length  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  =  0  ||  read  >  buffer.length  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  =  0  ||  read  >  buffer.length  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(read    <    0    ||    read    >    buffer.length    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
304	[BUG]  [BUGGY]  if(read  >=  0  ||  read  >  buffer.length  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  >=  0  ||  read  >  buffer.length  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >=  0  ||  read  >  buffer.length  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(read    <    0    ||    read    >    buffer.length    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
305	[BUG]  [BUGGY]  if(read  >  buffer.length  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  >  buffer.length  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >  buffer.length  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(read    <    0    ||    read    >    buffer.length    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
306	[BUG]  [BUGGY]  if(read.length  >  0  ||  read.charAt(read.length  -  1)!=  'n')  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read.length  >  0  ||  read.charAt(read.length  -  1)!=  'n')  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read.length  >  0  ||  read.charAt(read.length  -  1)!=  'n')  {	  if(read    >    0    ||    read.charAt(read.length    -    1)!=    'n')    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
307	[BUG]  [BUGGY]  if(read  ==  null)  {  Inflater  inf  =  current.in.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMeth  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  null)  {  Inflater  inf  =  current.in.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMeth  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  null)  {  Inflater  inf  =  current.in.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMeth	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
308	[BUG]  [BUGGY]  if(read  >  0  ||  read  >=  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  >  0  ||  read  >=  buffer.length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >  0  ||  read  >=  buffer.length)  {	  if(read    <    0    ||    read    >=    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
309	[BUG]  [BUGGY]  if(read  >=  0  &&  isEnabled(ZipArchiveOutputStream.DEFLATED))  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  >=  0  &&  isEnabled(ZipArchiveOutputStream.DEFLATED))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >=  0  &&  isEnabled(ZipArchiveOutputStream.DEFLATED))  {	  if(read!=    0    ||    isEnabled(ZipArchiveOutputStream.DEFLATED))    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
310	[BUG]  [BUGGY]  Integer  inf  =  current.in.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  Integer  inf  =  current.in.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Integer  inf  =  current.in.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
311	[BUG]  [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length  -  1);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length  -  1);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Inflater  inf  =  current.in.read(buffer,  offset,  length  -  1);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
312	[BUG]  [BUGGY]  InputStream  in  =  current.in.read(buffer,  offset,  length);  read  =  in.read(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  InputStream  in  =  current.in.read(buffer,  offset,  length);  read  =  in.read(buffer,  offset,  length  -  1);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	InputStream  in  =  current.in.read(buffer,  offset,  length);  read  =  in.read(buffer,  offset,  length  -  1);	  InputStream    in    =    current.in.read(buffer,    offset,    length);    read    =    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
313	[BUG]  [BUGGY]  InputStream  in  =  current.in.read(buffer,  offset,  length  +  1);  read  =  in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  InputStream  in  =  current.in.read(buffer,  offset,  length  +  1);  read  =  in.read(buffer,  offset,  length);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	InputStream  in  =  current.in.read(buffer,  offset,  length  +  1);  read  =  in.read(buffer,  offset,  length);	  InputStream    in    =    current.in.read(buffer,    offset,    length);    read    =    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
314	[BUG]  [BUGGY]  InputStream  in  =  current.in.read(buffer,  offset,  length  -  read);  read  =  in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  InputStream  in  =  current.in.read(buffer,  offset,  length  -  read);  read  =  in.read(buffer,  offset,  length);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	InputStream  in  =  current.in.read(buffer,  offset,  length  -  read);  read  =  in.read(buffer,  offset,  length);	  InputStream    in    =    current.in.read(buffer,    offset,    length);    read    =    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
315	[BUG]  [BUGGY]  if(read.length!=  0  ||  read.charAt(read.length  -  1)!=  'n')  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read.length!=  0  ||  read.charAt(read.length  -  1)!=  'n')  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read.length!=  0  ||  read.charAt(read.length  -  1)!=  'n')  {	  if(read!=    0    ||    read.charAt(read.length    -    1)!=    'n')    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
316	[BUG]  [BUGGY]  if(read  ==  0  &&  read.charAt(read.length  -  1)!=  'n')  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  &&  read.charAt(read.length  -  1)!=  'n')  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  &&  read.charAt(read.length  -  1)!=  'n')  {	  if(read!=    0    ||    read.charAt(read.length    -    1)!=    'n')    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
317	[BUG]  [BUGGY]  if(read!=  null)  {  if(current.in!=  null)  {  read  =  in.read(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  null)  {  if(current.in!=  null)  {  read  =  in.read(buffer,  offset,  length);  }  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  null)  {  if(current.in!=  null)  {  read  =  in.read(buffer,  offset,  length);  }	  if(read    ==    null)    {    if(current.in!=    null)    {    read    =    in.read(buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
318	[BUG]  [BUGGY]  in.close(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  in.close(buffer,  offset,  length);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	in.close(buffer,  offset,  length);	  in.close();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
319	[BUG]  [BUGGY]  in.flush();  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  in.flush();  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	in.flush();	  in.close();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
320	[BUG]  [BUGGY]  Inflater  inf.close();  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  Inflater  inf.close();  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Inflater  inf.close();	  in.close();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
321	[BUG]  [BUGGY]  in.close(buffer,  offset,  read);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  in.close(buffer,  offset,  read);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	in.close(buffer,  offset,  read);	  in.close();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
322	[BUG]  [BUGGY]  in.closeEntry();  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  in.closeEntry();  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	in.closeEntry();	  in.close();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
323	[BUG]  [BUGGY]  if(read  >=  0  &&  read.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  >=  0  &&  read.length  >  0)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >=  0  &&  read.length  >  0)  {	  if(read!=    0    &&    read.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
324	[BUG]  [BUGGY]  if(read!=  0  &&  read.length  >  1)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  &&  read.length  >  1)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  &&  read.length  >  1)  {	  if(read!=    0    &&    read.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
325	[BUG]  [BUGGY]  if(read!=  0  ||  read.length  <  2  ||  current.crc.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  ||  read.length  <  2  ||  current.crc.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  ||  read.length  <  2  ||  current.crc.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(read!=    0    ||    read.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
326	[BUG]  [BUGGY]  if(read!=  0  ||  read.length  ==  2)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  ||  read.length  ==  2)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  ||  read.length  ==  2)  {	  if(read!=    0    ||    read.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
327	[BUG]  [BUGGY]  if(read!=  0  ||  read.length  <  2  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  ||  read.length  <  2  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  ||  read.length  <  2  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(read!=    0    ||    read.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
328	[BUG]  [BUGGY]  if(read  ==  0  &&  read.length  <  2)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  &&  read.length  <  2)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  &&  read.length  <  2)  {	  if(read!=    0    ||    read.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
329	[BUG]  [BUGGY]  if(read  >=  0  ||  read  >  current.crc.length)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  >=  0  ||  read  >  current.crc.length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >=  0  ||  read  >  current.crc.length)  {	  if(read    <    0    ||    read    >    current.crc.length)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
330	[BUG]  [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length  +  1);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Inflater  inf  =  current.in.read(buffer,  offset,  length  +  1);	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
331	[BUG]  [BUGGY]  if(read!=  0  &&  read.equals(current.crc))  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  &&  read.equals(current.crc))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  &&  read.equals(current.crc))  {	  if(read    ==    0    ||    read.equals(current.crc))    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
332	[BUG]  [BUGGY]  if(read!=  0  ||  current.crc.equals(read))  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  ||  current.crc.equals(read))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  ||  current.crc.equals(read))  {	  if(read    ==    0    ||    read.equals(current.crc))    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
333	[BUG]  [BUGGY]  if(read!=  0  &&  isEnabled(current.entry))  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  &&  isEnabled(current.entry))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  &&  isEnabled(current.entry))  {	  if(read!=    0    &&    isEnabled(ZipArchiveOutputStream.DEFLATED))    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
334	[BUG]  [BUGGY]  if(read!=  0  &&  isEnabled(CrcArchiveOutputStream.DEFLATED))  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  &&  isEnabled(CrcArchiveOutputStream.DEFLATED))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  &&  isEnabled(CrcArchiveOutputStream.DEFLATED))  {	  if(read!=    0    &&    isEnabled(ZipArchiveOutputStream.DEFLATED))    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
335	[BUG]  [BUGGY]  if(read  ==  0  ||  read.length  ==  current.crc.size())  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  ||  read.length  ==  current.crc.size())  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  ||  read.length  ==  current.crc.size())  {	  if(read!=    0    ||    read    ==    current.crc.size())    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
336	[BUG]  [BUGGY]  if(read!=  0  ||  read.size()  ==  current.crc.size())  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  ||  read.size()  ==  current.crc.size())  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  ||  read.size()  ==  current.crc.size())  {	  if(read!=    0    ||    read    ==    current.crc.size())    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
337	[BUG]  [BUGGY]  if(read  ==  0  ||  read.size()  ==  current.crc.size())  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  ||  read.size()  ==  current.crc.size())  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  ||  read.size()  ==  current.crc.size())  {	  if(read!=    0    ||    read    ==    current.crc.size())    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
338	[BUG]  [BUGGY]  if(read.length  ==  0  ||  read.length  <  2)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read.length  ==  0  ||  read.length  <  2)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read.length  ==  0  ||  read.length  <  2)  {	  if(read    ==    0    ||    read.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
339	[BUG]  [BUGGY]  if(read  ==  0  ||  read.length  >=  2)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  ||  read.length  >=  2)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  ||  read.length  >=  2)  {	  if(read    ==    0    ||    read.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
340	[BUG]  [BUGGY]  if(read  ==  0  ||  read.length!=  2)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  ||  read.length!=  2)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  ||  read.length!=  2)  {	  if(read    ==    0    ||    read.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
341	[BUG]  [BUGGY]  if(read  <  0  ||  read  >  current.crc.length  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read  >  current.crc.length  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  >  current.crc.length  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(read    <    0    ||    read    >    current.crc.length)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
342	[BUG]  [BUGGY]  if(read  <  0  ||  read  >  current.crc.offset)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read  >  current.crc.offset)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  >  current.crc.offset)  {	  if(read    <    0    ||    read    >    current.crc.length)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
343	[BUG]  [BUGGY]  if(read  <  0  ||  read  >  buffer.crc.length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read  >  buffer.crc.length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  >  buffer.crc.length)  {	  if(read    <    0    ||    read    >    current.crc.length)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
344	[BUG]  [BUGGY]  InputStream  in  =  current.in.read(buffer,  offset,  length);  if(in!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  InputStream  in  =  current.in.read(buffer,  offset,  length);  if(in!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	InputStream  in  =  current.in.read(buffer,  offset,  length);  if(in!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
345	[BUG]  [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length  -  1);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length  -  1);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Inflater  inf  =  current.in.read(buffer,  offset,  length  -  1);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
346	[BUG]  [BUGGY]  InputStream  in  =  current.in.read(buffer,  offset,  length);  if(in  ==  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  InputStream  in  =  current.in.read(buffer,  offset,  length);  if(in  ==  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	InputStream  in  =  current.in.read(buffer,  offset,  length);  if(in  ==  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
347	[BUG]  [BUGGY]  if(read  >=  0  ||  current.crc!=  null)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  >=  0  ||  current.crc!=  null)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >=  0  ||  current.crc!=  null)  {	  if(read!=    0    &&    current.crc!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
348	[BUG]  [BUGGY]  InputStream  in  =  current.in.read(buffer,  offset,  length);  if(in!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  InputStream  in  =  current.in.read(buffer,  offset,  length);  if(in!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	InputStream  in  =  current.in.read(buffer,  offset,  length);  if(in!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
349	[BUG]  [BUGGY]  Integer  inf  =  current.in.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  Integer  inf  =  current.in.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Integer  inf  =  current.in.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
350	[BUG]  [BUGGY]  InputStream  in  =  current.in.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  InputStream  in  =  current.in.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	InputStream  in  =  current.in.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
351	[BUG]  [BUGGY]  if(read!=  null)  {  read  =  in.read(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  null)  {  read  =  in.read(buffer,  offset,  length);  }  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  null)  {  read  =  in.read(buffer,  offset,  length);  }	  if(read    ==    null)    {    if(current.in!=    null)    {    read    =    in.read(buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
352	[BUG]  [BUGGY]  if(read  ==  null)  {  if(current.crc!=  null)  {  read  =  in.read(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  null)  {  if(current.crc!=  null)  {  read  =  in.read(buffer,  offset,  length);  }  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  null)  {  if(current.crc!=  null)  {  read  =  in.read(buffer,  offset,  length);  }	  if(read    ==    null)    {    if(current.in!=    null)    {    read    =    in.read(buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
353	[BUG]  [BUGGY]  if(read!=  0  ||  read  >=  current.crc.length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  ||  read  >=  current.crc.length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  ||  read  >=  current.crc.length)  {	  if(read!=    0    ||    read    ==    current.crc.length)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
354	[BUG]  [BUGGY]  if(read!=  current.entry.getMethod()  ||  read.equals(current.entry.getMethod()))  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  current.entry.getMethod()  ||  read.equals(current.entry.getMethod()))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  current.entry.getMethod()  ||  read.equals(current.entry.getMethod()))  {	  if(read!=    0    ||    read.equals(current.entry.getMethod()))    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
355	[BUG]  [BUGGY]  if(read!=  current.crc.size()  ||  read.equals(current.entry.getMethod()))  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  current.crc.size()  ||  read.equals(current.entry.getMethod()))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  current.crc.size()  ||  read.equals(current.entry.getMethod()))  {	  if(read!=    0    ||    read.equals(current.entry.getMethod()))    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
356	[BUG]  [BUGGY]  if(current.crc!=  null)  {  if(read!=  null)  {  read  =  readDeflated(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(current.crc!=  null)  {  if(read!=  null)  {  read  =  readDeflated(buffer,  offset,  length);  }  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(current.crc!=  null)  {  if(read!=  null)  {  read  =  readDeflated(buffer,  offset,  length);  }	  if(read    ==    null)    {    if(current.in!=    null)    {    read    =    readDeflated(buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
357	[BUG]  [BUGGY]  if(read!=  null)  {  read  =  readDeflated(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  null)  {  read  =  readDeflated(buffer,  offset,  length);  }  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  null)  {  read  =  readDeflated(buffer,  offset,  length);  }	  if(read    ==    null)    {    if(current.in!=    null)    {    read    =    readDeflated(buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
358	[BUG]  [BUGGY]  InputStream  in  =  current.in.read(buffer,  offset,  length);  if(in!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  InputStream  in  =  current.in.read(buffer,  offset,  length);  if(in!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	InputStream  in  =  current.in.read(buffer,  offset,  length);  if(in!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current.entry    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
359	[BUG]  [BUGGY]  read  =  readDeflated(current.in,  buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  read  =  readDeflated(current.in,  buffer,  offset,  length);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	read  =  readDeflated(current.in,  buffer,  offset,  length);	  read    =    readDeflated(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
360	[BUG]  [BUGGY]  if(read  >  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.PRIVATE_EXP_32))  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  >  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.PRIVATE_EXP_32))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.PRIVATE_EXP_32))  {	  if(read    >    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
361	[BUG]  [BUGGY]  if(read!=  null)  {  read  =  current.in.read(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  null)  {  read  =  current.in.read(buffer,  offset,  length);  }  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  null)  {  read  =  current.in.read(buffer,  offset,  length);  }	  if(read    ==    null)    {    if(current.crc!=    null)    {    read    =    current.in.read(buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
362	[BUG]  [BUGGY]  while(current.entry!=  null  &&  current.entry.getMethod()  ==  ZipMethod.IMPLODING)  {  read  =  current.in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  while(current.entry!=  null  &&  current.entry.getMethod()  ==  ZipMethod.IMPLODING)  {  read  =  current.in.read(buffer,  offset,  length);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	while(current.entry!=  null  &&  current.entry.getMethod()  ==  ZipMethod.IMPLODING)  {  read  =  current.in.read(buffer,  offset,  length);	  if(read    ==    null)    {    if(current.crc!=    null)    {    read    =    current.in.read(buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
363	[BUG]  [BUGGY]  while(current.entry!=  null)  {  read  =  current.in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  while(current.entry!=  null)  {  read  =  current.in.read(buffer,  offset,  length);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	while(current.entry!=  null)  {  read  =  current.in.read(buffer,  offset,  length);	  if(read    ==    null)    {    if(current.crc!=    null)    {    read    =    current.in.read(buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
364	[BUG]  [BUGGY]  while(current.entry!=  null  &&  current.entry.getMethod()  ==  ZipMethod.UNSHRINKING)  {  read  =  current.in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  while(current.entry!=  null  &&  current.entry.getMethod()  ==  ZipMethod.UNSHRINKING)  {  read  =  current.in.read(buffer,  offset,  length);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	while(current.entry!=  null  &&  current.entry.getMethod()  ==  ZipMethod.UNSHRINKING)  {  read  =  current.in.read(buffer,  offset,  length);	  if(read    ==    null)    {    if(current.crc!=    null)    {    read    =    current.in.read(buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
365	[BUG]  [BUGGY]  while(current.entry!=  null  &&  current.entry.getMethod()  ==  ZipMethod.GETPROP)  {  read  =  current.in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  while(current.entry!=  null  &&  current.entry.getMethod()  ==  ZipMethod.GETPROP)  {  read  =  current.in.read(buffer,  offset,  length);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	while(current.entry!=  null  &&  current.entry.getMethod()  ==  ZipMethod.GETPROP)  {  read  =  current.in.read(buffer,  offset,  length);	  if(read    ==    null)    {    if(current.crc!=    null)    {    read    =    current.in.read(buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
366	[BUG]  [BUGGY]  if(read!=  null  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  null  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  null  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(read    ==    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
367	[BUG]  [BUGGY]  if(read  ==  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.PRIVATE_EXP_32))  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.PRIVATE_EXP_32))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.PRIVATE_EXP_32))  {	  if(read    ==    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
368	[BUG]  [BUGGY]  if(read  <  0  ||  length  >  Buffer.length)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  length  >  Buffer.length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  length  >  Buffer.length)  {	  if(read    <    0    ||    read    >    Buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
369	[BUG]  [BUGGY]  if(read  <  0  ||  offset  >  Buffer.length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  offset  >  Buffer.length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  offset  >  Buffer.length)  {	  if(read    <    0    ||    read    >    Buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
370	[BUG]  [BUGGY]  if(read!=  null)  {  in.close();  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.IMPLODING,  current.entry.getMethod());  }  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  null)  {  in.close();  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.IMPLODING,  current.entry.getMethod());  }  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  null)  {  in.close();  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.IMPLODING,  current.entry.getMethod());  }	  in.close();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
371	[BUG]  [BUGGY]  if(read!=  null)  {  in.close();  }  else  {  System.arraycopy(buffer,  offset,  read,  buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  null)  {  in.close();  }  else  {  System.arraycopy(buffer,  offset,  read,  buffer,  offset,  length);  }  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  null)  {  in.close();  }  else  {  System.arraycopy(buffer,  offset,  read,  buffer,  offset,  length);  }	  in.close();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
372	[BUG]  [BUGGY]  if(read  ==  null)  {  in.close();  }  else  {  System.arraycopy(buffer,  offset,  read,  buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  null)  {  in.close();  }  else  {  System.arraycopy(buffer,  offset,  read,  buffer,  offset,  length);  }  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  null)  {  in.close();  }  else  {  System.arraycopy(buffer,  offset,  read,  buffer,  offset,  length);  }	  in.close();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
373	[BUG]  [BUGGY]  if(read!=  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED)||  isEnabled(current.entry.getMethod()))  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED)||  isEnabled(current.entry.getMethod()))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED)||  isEnabled(current.entry.getMethod()))  {	  if(read!=    0    ||    isEnabled(ZipArchiveOutputStream.DEFLATED))    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
374	[BUG]  [BUGGY]  if(read  <  0  ||  buffer.length  ==  length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  buffer.length  ==  length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  buffer.length  ==  length)  {	  if(read    <    0    ||    read    ==    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
375	[BUG]  [BUGGY]  if(read  <  0  ||  offset  <  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  offset  <  buffer.length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  offset  <  buffer.length)  {	  if(read    <    0    ||    read    <    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
376	[BUG]  [BUGGY]  if(read  <  0  ||  buffer.length  <  length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  buffer.length  <  length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  buffer.length  <  length)  {	  if(read    <    0    ||    read    <    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
377	[BUG]  [BUGGY]  if(read  >  0  ||  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  >  0  ||  offset  <  length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >  0  ||  offset  <  length)  {	  if(read    >    0    ||    read    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
378	[BUG]  [BUGGY]  if(read  >  0  ||  read  <  offset)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  >  0  ||  read  <  offset)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >  0  ||  read  <  offset)  {	  if(read    >    0    ||    read    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
379	[BUG]  [BUGGY]  if(read  <  0  ||  off  <  length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  off  <  length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  off  <  length)  {	  if(read    <    0    ||    read    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
380	[BUG]  [BUGGY]  if(read  <  0  ||  offset  >  length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  offset  >  length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  offset  >  length)  {	  if(read    <    0    ||    read    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
381	[BUG]  [BUGGY]  InputStream  read  =  current.in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  InputStream  read  =  current.in.read(buffer,  offset,  length);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	InputStream  read  =  current.in.read(buffer,  offset,  length);	  InputStream    in    =    current.in.read(buffer,    offset,    length);    read    =    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
382	[BUG]  [BUGGY]  if(read  <  0  ||  read  >  BYTE_EXP_32)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read  >  BYTE_EXP_32)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  >  BYTE_EXP_32)  {	  if(read    <    0    ||    read    >    max)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
383	[BUG]  [BUGGY]  if(read  <  0  ||  read  >  256)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read  >  256)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  >  256)  {	  if(read    <    0    ||    read    >    max)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
384	[BUG]  [BUGGY]  InputStream  in  =  current.in.read(buffer,  offset,  length,  current.crc);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  InputStream  in  =  current.in.read(buffer,  offset,  length,  current.crc);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	InputStream  in  =  current.in.read(buffer,  offset,  length,  current.crc);	  InputStream    in    =    current.in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
385	[BUG]  [BUGGY]  if(read!=  0  ||  read.charAt(read.off  +  length  -  1)!=  'n')  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  ||  read.charAt(read.off  +  length  -  1)!=  'n')  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  ||  read.charAt(read.off  +  length  -  1)!=  'n')  {	  if(read!=    0    ||    read.charAt(read.length    -    1)!=    'n')    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
386	[BUG]  [BUGGY]  InputStream  in  =  current.in.read(buffer,  offset,  length);  if(in!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  InputStream  in  =  current.in.read(buffer,  offset,  length);  if(in!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	InputStream  in  =  current.in.read(buffer,  offset,  length);  if(in!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
387	[BUG]  [BUGGY]  InputStream  in  =  current.in.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  InputStream  in  =  current.in.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	InputStream  in  =  current.in.read(buffer,  offset,  length);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
388	[BUG]  [BUGGY]  InputStream  in  =  current.in.read(buffer,  offset,  length);  if(in  ==  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  InputStream  in  =  current.in.read(buffer,  offset,  length);  if(in  ==  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	InputStream  in  =  current.in.read(buffer,  offset,  length);  if(in  ==  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
389	[BUG]  [BUGGY]  if(read  <  0  ||  length  >  buffer.length  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  length  >  buffer.length  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  length  >  buffer.length  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(read    <    0    ||    read    >    buffer.length    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
390	[BUG]  [BUGGY]  if(read  <  0  ||  offset  >  buffer.length  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  offset  >  buffer.length  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  offset  >  buffer.length  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(read    <    0    ||    read    >    buffer.length    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
391	[BUG]  [BUGGY]  if(read  <  0  ||  buffer.length  >  length  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  buffer.length  >  length  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  buffer.length  >  length  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(read    <    0    ||    read    >    buffer.length    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
392	[BUG]  [BUGGY]  if(read  ==  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED)||  isEnabled(current.entry.getMethod()))  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED)||  isEnabled(current.entry.getMethod()))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED)||  isEnabled(current.entry.getMethod()))  {	  if(read    ==    0    ||    isEnabled(ZipArchiveOutputStream.DEFLATED))    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
393	[BUG]  [BUGGY]  if(read!=  0  ||  buffer.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  ||  buffer.length  ==  0)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  ||  buffer.length  ==  0)  {	  if(read!=    0    ||    read.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
394	[BUG]  [BUGGY]  if(read  <  0  ||  offset  >  buffer.length  -  1)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  offset  >  buffer.length  -  1)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  offset  >  buffer.length  -  1)  {	  if(read    <    0    ||    offset    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
395	[BUG]  [BUGGY]  InputStream  in  =  current.in.read(buffer,  offset,  length);  if(in!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  InputStream  in  =  current.in.read(buffer,  offset,  length);  if(in!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	InputStream  in  =  current.in.read(buffer,  offset,  length);  if(in!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current.entry);    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
396	[BUG]  [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length  -  1);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length  -  1);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Inflater  inf  =  current.in.read(buffer,  offset,  length  -  1);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current.entry);    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
397	[BUG]  [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length  -  1);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length  -  1);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Inflater  inf  =  current.in.read(buffer,  offset,  length  -  1);  if(inf!=  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current.entry);    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
398	[BUG]  [BUGGY]  InputStream  in  =  current.in.read(buffer,  offset,  length);  if(in  ==  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  InputStream  in  =  current.in.read(buffer,  offset,  length);  if(in  ==  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	InputStream  in  =  current.in.read(buffer,  offset,  length);  if(in  ==  null)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    if(inf!=    null)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current.entry);    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
399	[BUG]  [BUGGY]  if(read  >  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED)||  isEnabled(current.crc))  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  >  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED)||  isEnabled(current.crc))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED)||  isEnabled(current.crc))  {	  if(read    >    0    ||    isEnabled(ZipArchiveOutputStream.DEFLATED))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
400	[BUG]  [BUGGY]  if(read!=  0  &&  isEnabled(ZipArchiveOutputStream.DEFLATED)||  isEnabled(current.entry.getMethod()))  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  &&  isEnabled(ZipArchiveOutputStream.DEFLATED)||  isEnabled(current.entry.getMethod()))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  &&  isEnabled(ZipArchiveOutputStream.DEFLATED)||  isEnabled(current.entry.getMethod()))  {	  if(read!=    0    &&    isEnabled(ZipArchiveOutputStream.DEFLATED))    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
401	[BUG]  [BUGGY]  if(read  >=  0  ||  read.length  <  2)  {  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  >=  0  ||  read.length  <  2)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >=  0  ||  read.length  <  2)  {	  if(read    ==    0    ||    read.length    <    2)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
402	[BUG]  [BUGGY]  if(read  >  0  ||  read.length  <  2)  {  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  >  0  ||  read.length  <  2)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >  0  ||  read.length  <  2)  {	  if(read    ==    0    ||    read.length    <    2)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
403	[BUG]  [BUGGY]  if(read  ==  0  ||  read.length  <  2  ||  buffer.offset  >=  length)  {  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  ||  read.length  <  2  ||  buffer.offset  >=  length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  ||  read.length  <  2  ||  buffer.offset  >=  length)  {	  if(read    ==    0    ||    read.length    <    2)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
404	[BUG]  [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length,  current.crc);  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length,  current.crc);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Inflater  inf  =  current.in.read(buffer,  offset,  length,  current.crc);	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
405	[BUG]  [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length  -  2);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length  -  2);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Inflater  inf  =  current.in.read(buffer,  offset,  length  -  2);	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
406	[BUG]  [BUGGY]  if(read!=  0  ||  read.charAt(read.off  +  length  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  ||  read.charAt(read.off  +  length  -  1)!=  '/')  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  ||  read.charAt(read.off  +  length  -  1)!=  '/')  {	  if(read!=    0    ||    read.charAt(read.length    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
407	[BUG]  [BUGGY]  if(read  >  0  ||  read.charAt(offset  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  >  0  ||  read.charAt(offset  -  1)!=  '/')  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >  0  ||  read.charAt(offset  -  1)!=  '/')  {	  if(read    >    0    ||    read.charAt(read.length    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
408	[BUG]  [BUGGY]  if(read!=  0  ||  read.length  <  2  ||  buffer.offset  >=  length)  {  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  ||  read.length  <  2  ||  buffer.offset  >=  length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  ||  read.length  <  2  ||  buffer.offset  >=  length)  {	  if(read!=    0    ||    read.length    <    2)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
409	[BUG]  [BUGGY]  if(read!=  0  ||  read.length  <  2  ||  isEnabled(ZipArchiveOutputStream.DEFLATED))  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  ||  read.length  <  2  ||  isEnabled(ZipArchiveOutputStream.DEFLATED))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  ||  read.length  <  2  ||  isEnabled(ZipArchiveOutputStream.DEFLATED))  {	  if(read!=    0    ||    read.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
410	[BUG]  [BUGGY]  if(read!=  0  ||  read.length  <  2  ||  buffer.offset  ==  length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  ||  read.length  <  2  ||  buffer.offset  ==  length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  ||  read.length  <  2  ||  buffer.offset  ==  length)  {	  if(read!=    0    ||    read.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
411	[BUG]  [BUGGY]  if(read  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.PRIVATE_EXP_32))  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.PRIVATE_EXP_32))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.PRIVATE_EXP_32))  {	  if(read    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
412	[BUG]  [BUGGY]  if(read  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.RC_OVER))  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.RC_OVER))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.RC_OVER))  {	  if(read    <    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
413	[BUG]  [BUGGY]  Integer  inf  =  current.in.read(buffer,  offset,  length);  read  =  inf.read(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  Integer  inf  =  current.in.read(buffer,  offset,  length);  read  =  inf.read(buffer,  offset,  length);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Integer  inf  =  current.in.read(buffer,  offset,  length);  read  =  inf.read(buffer,  offset,  length);	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    read    =    inf.read(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
414	[BUG]  [BUGGY]  Integer  inf  =  current.in.read(buffer,  offset,  length);  read  =  inf.read(buffer,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  Integer  inf  =  current.in.read(buffer,  offset,  length);  read  =  inf.read(buffer,  offset,  length  -  1);  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	Integer  inf  =  current.in.read(buffer,  offset,  length);  read  =  inf.read(buffer,  offset,  length  -  1);	  Inflater    inf    =    current.in.read(buffer,    offset,    length);    read    =    inf.read(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
415	[BUG]  [BUGGY]  if(read  <  0  ||  length  >  buffer.length  ||  current.crc!=  null)  {  [CE]  <identifier>  expected  [FE]              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  length  >  buffer.length  ||  current.crc!=  null)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  length  >  buffer.length  ||  current.crc!=  null)  {	  if(read    <    0    ||    length    >    buffer.length)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
416	[BUG]  [BUGGY]  if(read  <  0  ||  length  >  accessorsRead)  {  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  length  >  accessorsRead)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  length  >  accessorsRead)  {	  if(read    <    0    ||    length    >    buffer.length)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
417	[BUG]  [BUGGY]  if(read  <  0  ||  length  >  buffer.length  -  offset)  {  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  length  >  buffer.length  -  offset)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  length  >  buffer.length  -  offset)  {	  if(read    <    0    ||    length    >    buffer.length)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
418	[BUG]  [BUGGY]  if(read  <  0  ||  read  >  BYTE_LEN  ||  current.crc!=  null)  {  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read  >  BYTE_LEN  ||  current.crc!=  null)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  >  BYTE_LEN  ||  current.crc!=  null)  {	  if(read    <    0    ||    read    >    buffer.length    ||    current.crc!=    null)    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
419	[BUG]  [BUGGY]  if(read  <  0  ||  read  >  maxLen  ||  current.crc!=  null)  {  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read  >  maxLen  ||  current.crc!=  null)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  >  maxLen  ||  current.crc!=  null)  {	  if(read    <    0    ||    read    >    buffer.length    ||    current.crc!=    null)    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
420	[BUG]  [BUGGY]  if(read  <  0  ||  length  >  buffer.length  ||  buffer.charAt(offset)  >=  '-')  {  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  length  >  buffer.length  ||  buffer.charAt(offset)  >=  '-')  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  length  >  buffer.length  ||  buffer.charAt(offset)  >=  '-')  {	  if(read    <    0    ||    read    >    buffer.length    ||    buffer.charAt(offset)    >=    '-')    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
421	[BUG]  [BUGGY]  if(read  <  0  ||  buffer.length  >  offset  ||  buffer.charAt(offset)  >=  '-')  {  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  buffer.length  >  offset  ||  buffer.charAt(offset)  >=  '-')  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  buffer.length  >  offset  ||  buffer.charAt(offset)  >=  '-')  {	  if(read    <    0    ||    read    >    buffer.length    ||    buffer.charAt(offset)    >=    '-')    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
422	[BUG]  [BUGGY]  if(read  <  0  ||  isEnabled(current.entry.getMethod()))  {  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  isEnabled(current.entry.getMethod()))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  isEnabled(current.entry.getMethod()))  {	  if(read    <    0    ||    read.equals(current.entry.getMethod()))    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
423	[BUG]  [BUGGY]  if(read  <  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED)||  isEnabled(current.entry.getMethod()))  {  [CE]  <identifier>  expected  [FE]              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED)||  isEnabled(current.entry.getMethod()))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED)||  isEnabled(current.entry.getMethod()))  {	  if(read    <    0    ||    isEnabled(ZipArchiveOutputStream.DEFLATED))    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
424	[BUG]  [BUGGY]  if(read  <  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED,  current.in))  {  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED,  current.in))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  isEnabled(ZipArchiveOutputStream.DEFLATED,  current.in))  {	  if(read    <    0    ||    isEnabled(ZipArchiveOutputStream.DEFLATED))    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
425	[BUG]  [BUGGY]  if(read!=  0  &&  read.length  >  0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  &&  read.length  >  0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  &&  read.length  >  0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(read!=    0    &&    read.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
426	[BUG]  [BUGGY]  if(read!=  0  &&  buffer.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read!=  0  &&  buffer.length  >  0)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read!=  0  &&  buffer.length  >  0)  {	  if(read!=    0    &&    read.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
427	[BUG]  [BUGGY]  if(read  >=  0  &&  read  ==  current.crc.size())  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  >=  0  &&  read  ==  current.crc.size())  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >=  0  &&  read  ==  current.crc.size())  {	  if(read!=    0    ||    read    ==    current.crc.size())    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
428	[BUG]  [BUGGY]  if(read  <  0  ||  length  >  current.crc.offset)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  length  >  current.crc.offset)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  length  >  current.crc.offset)  {	  if(read    <    0    ||    read    >    length)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
429	[BUG]  [BUGGY]  if(read  <  0  ||  length  >  current.crc.size())  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  length  >  current.crc.size())  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  length  >  current.crc.size())  {	  if(read    <    0    ||    read    >    length)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
430	[BUG]  [BUGGY]  if(read  >  0  ||  length  >=  current.crc.length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  >  0  ||  length  >=  current.crc.length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >  0  ||  length  >=  current.crc.length)  {	  if(read    >    0    ||    length    >    current.crc.length)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
431	[BUG]  [BUGGY]  if(read  >  0  ||  length  ==  current.crc.length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  >  0  ||  length  ==  current.crc.length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >  0  ||  length  ==  current.crc.length)  {	  if(read    >    0    ||    length    >    current.crc.length)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
432	[BUG]  [BUGGY]  if(read  >  0  ||  offset  <  current.crc.length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  >  0  ||  offset  <  current.crc.length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >  0  ||  offset  <  current.crc.length)  {	  if(read    >    0    ||    length    >    current.crc.length)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
433	[BUG]  [BUGGY]  if(read  [Delete]  0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  [Delete]  0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  [Delete]  0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(read!=    0    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
434	[BUG]  [BUGGY]  if(read  >=  0  ||  isEnabled(ZipArchiveOutputStream.DEFAULT_CRC))  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  >=  0  ||  isEnabled(ZipArchiveOutputStream.DEFAULT_CRC))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  >=  0  ||  isEnabled(ZipArchiveOutputStream.DEFAULT_CRC))  {	  if(read    ==    0    ||    isEnabled(ZipArchiveOutputStream.DEFAULT_CRC))    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
435	[BUG]  [BUGGY]  if(read  ==  0  ||  isEnabled(ZipArchiveOutputStream.DEFAULT_CRC,  current.in))  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  ==  0  ||  isEnabled(ZipArchiveOutputStream.DEFAULT_CRC,  current.in))  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  ==  0  ||  isEnabled(ZipArchiveOutputStream.DEFAULT_CRC,  current.in))  {	  if(read    ==    0    ||    isEnabled(ZipArchiveOutputStream.DEFAULT_CRC))    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
436	[BUG]  [BUGGY]  if(read  <  0  ||  off  >=  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  off  >=  buffer.length)  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  off  >=  buffer.length)  {	  if(read    <    0    ||    read    >=    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
437	[BUG]  [BUGGY]  if(read  <  0  ||  length  >  buffer.length  ||  buffer.charAt(offset)!=  '-')  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  length  >  buffer.length  ||  buffer.charAt(offset)!=  '-')  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  length  >  buffer.length  ||  buffer.charAt(offset)!=  '-')  {	  if(read    <    0    ||    read    >    buffer.length    ||    buffer.charAt(offset)!=    '-')    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
438	[BUG]  [BUGGY]  if(read  <  0  ||  buffer.length  >  length  ||  buffer.charAt(offset)!=  '-')  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  buffer.length  >  length  ||  buffer.charAt(offset)!=  '-')  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  buffer.length  >  length  ||  buffer.charAt(offset)!=  '-')  {	  if(read    <    0    ||    read    >    buffer.length    ||    buffer.charAt(offset)!=    '-')    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
439	[BUG]  [BUGGY]  if(read  <  0  ||  buffer.length  >  offset  ||  buffer.charAt(offset)!=  '-')  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  buffer.length  >  offset  ||  buffer.charAt(offset)!=  '-')  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  buffer.length  >  offset  ||  buffer.charAt(offset)!=  '-')  {	  if(read    <    0    ||    read    >    buffer.length    ||    buffer.charAt(offset)!=    '-')    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
440	[BUG]  [BUGGY]  if(read  <  0  ||  read  >  buffer.length  ||  buffer.charAt(offset  +  length)!=  '-')  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }      [BUGGY]  if(read  <  0  ||  read  >  buffer.length  ||  buffer.charAt(offset  +  length)!=  '-')  {  [BUGGY]      current.crc.update(buffer,  offset,  read);  }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	if(read  <  0  ||  read  >  buffer.length  ||  buffer.charAt(offset  +  length)!=  '-')  {	  if(read    <    0    ||    read    >    buffer.length    ||    buffer.charAt(offset)!=    '-')    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
