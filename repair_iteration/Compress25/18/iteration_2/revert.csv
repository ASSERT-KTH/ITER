projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.FIELD_NAME){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.KEY){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==null||current.entry.getMethod()==ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.in.readStored(buffer,offset,length)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED&&current.in.readStored(buffer,offset,length)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.getMethod()==ZipArchiveOutputStream.STORED||current.in.readStored(buffer,offset,length)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.in.readStored(buffer,offset,length+1)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.in.readStored(buffer,offset,length,read)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.getMethod()==ZipArchiveOutputStream.STORED||current.entry.readStored(buffer,offset,length)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.readStored(buffer,offset,length)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380Integeroffset=current.in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(length>0){for(inti=0;i<length;++i){buffer[offset++]=current.in.read(buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,length);if(length>0){for(inti=0;i<length;++i){continue;}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380in.close();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,length);if(length>0){for(inti=0;i<length;++i){buffer[off
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(length>0){for(inti=0;i<length;++i){buffer[off]=current.in.read(buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED&&current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()!=ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()!=ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null||current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED&&current.entry.getMethod()==ZipArchiveOutputStream.FIELD_NAME){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.FIELD_NAME){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()!=ZipArchiveOutputStream.FIELD_NAME){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()!=ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.FIELD_NAME){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null||current.entry.getMethod()==ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==null||current.entry.getMethod()!=ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null||current.entry.getMethod()==ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null||current.entry.getMethod()==ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==null||current.entry.getMethod()>=ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==null){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null||length==current.entry.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null||length<current.entry.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null||length!=current.entry.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null||length<current.entry.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED&&current.entry.getMethod()==ZipArchiveOutputStream.KEY){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.KEY){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()!=ZipArchiveOutputStream.KEY){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()!=ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.KEY){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null||length>=current.entry.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED&&current.entry.getMethod()==ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()!=ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STRING||current.entry.getMethod()==ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.in.getMethod()==ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()!=ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(read==null){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in>=null){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.enabled){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null||current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null||current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.KEY){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.KEY){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,length);if(length>0){System.arraycopy(buffer,offset,buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380Integerpos=current.in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,length);if(length>0){System.arraycopy(buffer,offset,read,buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(length>0){System.arraycopy(buffer,offset,read,0,current.entry.length);}else{System.arraycopy(buffer,offset,buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(length>0){System.arraycopy(buffer,offset,buffer,offset,length);}else{System.arraycopy(buffer,offset,buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null||current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.FIELD_NAME){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.FIELD_NAME){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.in.readStored(buffer,offset,length)-1){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.in.readStored(buffer,offset,length)+1){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null||current.entry.getMethod()==ZipMethod.IMPLODING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null||current.entry.getMethod()==ZipArchiveOutputStream.DEFLATED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null||current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==null||current.entry.getMethod()==ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry>=null||current.entry.getMethod()==ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null||current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.read()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.FIELD_NAME){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.in.getMethod()==ZipArchiveOutputStream.FIELD_NAME){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.readStored(buffer,offset,length)||current.entry.getMethod()==ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.read()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entriesRead==null||current.entry.getMethod()==ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==null||current.entry.getName()==ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null||length>current.entry.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null||length>current.entry.getLength()){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null||current.entry.getMethod()==ZipMethod.DEFLATED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null||length>current.entry.length()){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.read()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.KEY){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.in.getMethod()==ZipArchiveOutputStream.KEY){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null&&current.entry.getMethod()==ZipMethod.IMPLODING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null&&current.entry.getMethod()==ZipMethod.DEFLATED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null&&current.entry.getMethod()==ZipMethod.UNSHRINKING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null&&current.entry.getMethod()==ZipMethod.GETPROP){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null&&current.entry.getMethod()==ZipMethod.IMPLATED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.read()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null||current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380Integerlength=current.in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null){intlength=current.in.read(buffer,offset,length);if(length>0){return;}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null){intlength=current.in.read(buffer,offset,length);if(length>0){thrownewIllegalStateException("");}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null){intlength=current.in.read(buffer,offset,length);if(length>0){continue;}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null){intlength=current.in.read(buffer,offset,length);if(length>0){break;}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null||current.entry.getMethod()==ZipArchiveOutputStream.DEFLATED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==null||current.in.getMethod()==ZipArchiveOutputStream.DEFLATED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==null||current.entry.getMethod()==ZipArchiveOutputStream.DEFLATED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null||current.entry.getMethod()!=ZipArchiveOutputStream.DEFLATED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(read==null||current.entry.getMethod()==ZipArchiveOutputStream.DEFLATED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==null||current.in.getMethod()==ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null||current.entry.getMethod()!=ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(read==null||current.entry.getMethod()==ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.getMethod()==ZipArchiveOutputStream.STORED&&current.entry.getMethod()==ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STRING&&current.entry.getMethod()==ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null||current.entry.getMethod()==ZipMethod.IMPLODING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null&&current.in.getMethod()==ZipMethod.IMPLODING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null&&current.entry.getMethod()==ZipMethod.IMPLODING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null&&current.entry.getMethod()==ZipMethod.IMPLODING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null||current.entry.getMethod()==ZipMethod.IMPLODING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.getMethod()==ZipArchiveOutputStream.STORED&&current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,length,CFH_LEN);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,length,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,fileNameLen);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,0);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.getMethod()!=ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.KEY){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null||current.entry.getMethod()==ZipMethod.GETPROP){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null&&current.entry.getMethod()==ZipMethod.GETPROP){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null&&current.in.getMethod()==ZipMethod.GETPROP){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null||current.entry.getMethod()==ZipMethod.GETPROP){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null||current.entry.getMethod()==ZipMethod.GETPROP){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null&&current.entry.getMethod()==ZipMethod.GETPROP){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null||length==current.entry.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==null||length!=current.entry.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null||current.entry==null){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null||current.entry.getMethod()==ZipMethod.DEFLATED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==null||current.entry.getMethod()==ZipMethod.DEFLATED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==null||current.in.getMethod()==ZipMethod.DEFLATED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null||current.entry.getMethod()!=ZipMethod.DEFLATED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(read==null||current.entry.getMethod()==ZipMethod.DEFLATED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null||length!=current.entry.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null||length>current.entry.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null||offset>=current.entry.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null||length!=current.entry.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.getMethod()!=ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.readStored(buffer,offset,length)&&current.entry.getMethod()==ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.readStored(buffer,offset,length)||current.entry.getMethod()!=ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.readStored(buffer,offset,length)||current.entry.getMethod()==ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(!current.in.readStored(buffer,offset,length)||current.entry.getMethod()==ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.readShort(buffer,offset,length)||current.entry.getMethod()==ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380Integeroffset=current.in.read(buffer,offset,length,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380Integeroffset=current.in.read(buffer,offset,length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380Integeroffset=current.in.read(buffer,offset,length,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380Integeroffset=current.in.read(buffer,offset,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380Integeroffset=current.in.read(buffer,offset,length,CFH_LEN);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380Integeroffset=current.in.read(buffer,offset,length,fileNameLen);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null&&current.in.getMethod()==ZipMethod.DEFLATED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null&&current.entry.getMethod()==ZipMethod.DEFLATED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null||current.entry.getMethod()==ZipMethod.DEFLATED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null&&current.entry.getMethod()==ZipMethod.DEFLATED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null&&current.entry.getMethod()==ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null||current.entry.getMethod()>=ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==null||current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null||current.entry.getMethod()>=ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==null||current.entry.getMethod()!=ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry>=null||current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null||current.entry.getMethod()!=ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null||current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()!=ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==null||current.in.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380while(off<length){for(inti=0;i<length;++i){buffer[off]=current.in.read(buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380read=readStored(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380while(off<length){for(inti=0;i<offset;++i){buffer[off]=current.in.read(buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380Integerbuffer[]=current.in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380while(off<length){buffer[off]=current.in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380while(off<length){for(inti=0;i<size;++i){buffer[off]=current.in.read(buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.enabled&&isEnabled(current.entry)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(!allowStoredEntriesWithDataDescriptor){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.enabled&&length>0){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.enabled&&current.entry.getMethod()==ZipMethod.DEFLATED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(!current.enabled){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.enabled&&buffer.length>0){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.enabled&&isEnabled(current.entry,offset,length)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null&&current.entry.getMethod()==ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null||current.in.getMethod()==ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,length);if(length>0){return;}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,read);if(length>0){return;}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intread=current.in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null){intlength=current.in.read(buffer,offset,length);if(length<0){return;}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380Integerlength=current.in.read(buffer,offset,length);if(length>0){return;}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,length);if(length>0){thrownewIllegalArgumentException("");}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(read!=null){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(read==null||length!=read.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(read==null||length<2){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==null||current.in.getMethod()==ZipMethod.IMPLODING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null||current.entry.getMethod()!=ZipMethod.IMPLODING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==null||current.entry.getMethod()==ZipMethod.IMPLODING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(read==null||current.entry.getMethod()==ZipMethod.IMPLODING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,read);if(length>0){for(inti=0;i<length;++i){continue;}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,fileNameLen);if(length>0){for(inti=0;i<length;++i){continue;}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,buffer.length);if(length>0){for(inti=0;i<length;++i){continue;}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,size);if(length>0){for(inti=0;i<length;++i){continue;}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,read);if(length<0){for(inti=0;i<length;++i){continue;}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED&&current.in.readStored(buffer,offset,length,read)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.getMethod()==ZipArchiveOutputStream.STORED||current.in.readStored(buffer,offset,length,read)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.in.readStored(buffer,offset,read,length)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.in.readStored(buffer,offset,length,reader)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.in.readStored(buffer,offset,length,zipEncoding)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.readStored(buffer,offset,length,current.entry)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==null||current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.FIELD_NAME){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null||current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.FIELD_NAME){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null||current.entry.getMethod()>=ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.FIELD_NAME){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==null||current.entry.getMethod()!=ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.FIELD_NAME){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null||current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()>=ZipArchiveOutputStream.FIELD_NAME){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.getMethod()==ZipArchiveOutputStream.STORED&&current.entry.getMethod()==ZipArchiveOutputStream.KEY){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==null||current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.KEY){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null||current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.KEY){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null||current.entry.getMethod()>=ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.KEY){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==null||current.entry.getMethod()!=ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.KEY){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry>=null||current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.KEY){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.read()==ZipArchiveOutputStream.STORED&&current.entry.getMethod()==ZipArchiveOutputStream.FIELD_NAME){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.read()!=ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.FIELD_NAME){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null||current.in.read()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.FIELD_NAME){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.read()!=ZipArchiveOutputStream.STORED&&current.entry.getMethod()==ZipArchiveOutputStream.FIELD_NAME){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.read()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.FIELD_NAME){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.FIELD_NAME){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED&&current.in.getMethod()==ZipArchiveOutputStream.FIELD_NAME){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.getMethod()==ZipArchiveOutputStream.STORED||current.in.getMethod()==ZipArchiveOutputStream.FIELD_NAME){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.getMethod()==ZipArchiveOutputStream.FIELD_NAME||current.entry.getMethod()==ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null||current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.in.getMethod()==ZipArchiveOutputStream.FIELD_NAME){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.in.getMethod()!=ZipArchiveOutputStream.FIELD_NAME){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null||length<current.entry.length()){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null||offset>current.entry.length()){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null||length>current.entry.length()){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==null||length>current.in.length()){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null||length>=current.entry.length()){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null||length<current.entry.length()){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()!=ZipArchiveOutputStream.KEY){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.KEY){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null&&length<current.entry.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null||length<current.in.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null||buffer.length<current.entry.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null||offset<length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null||length<current.entry.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED&&current.in.readStored(buffer,offset,length)+1){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.getMethod()==ZipArchiveOutputStream.STORED||current.in.readStored(buffer,offset,length)+1){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.in.readStored(buffer,offset,length)/2){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.in.readStored(buffer,offset,length)+2){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.in.readStored(buffer,offset,length)/1){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null||length<current.entry.getLength()){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null||offset>current.entry.getLength()){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==null||length>current.in.read()){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(length==0||current.entry!=null||length>current.entry.getLength()){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null||length>current.entry.getLength()){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null||length>=current.entry.getLength()){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()!=ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(length>0){System.arraycopy(current.entry,offset,buffer,offset,length);}else{System.arraycopy(buffer,offset,buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(length>0){System.arraycopy(buffer,offset,buffer,offset,0,current.entry.length);}else{System.arraycopy(buffer,offset,buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(length>0){System.arraycopy(buffer,offset,buffer,0,current.entry.length);}else{System.arraycopy(buffer,offset,buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(length>0){System.arraycopy(buffer,offset,current.entry.length,0,current.entry.length);}else{System.arraycopy(buffer,offset,buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED&&current.in.readStored(buffer,offset,length+1)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.getMethod()==ZipArchiveOutputStream.STORED||current.in.readStored(buffer,offset,length+1)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.readStored(buffer,offset,length+1)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.in.readStored(buffer,offset,length+2)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null||current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.getMethod()==ZipArchiveOutputStream.STRING||current.entry.getMethod()==ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()!=ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380System.arraycopy(buffer,offset,buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380System.arraycopy(buffer,offset,current.entry,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380System.arraycopy(current.entry,offset,buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380readStored(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380System.arraycopy(buffer,offset,fileNameLen,buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380System.arraycopy(buffer,offset,current.entry,buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.getMethod()==ZipArchiveOutputStream.STORED&&current.entry.getMethod()==ZipArchiveOutputStream.FIELD_NAME){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()!=ZipArchiveOutputStream.FIELD_NAME){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.getMethod()!=ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.FIELD_NAME){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.read()==ZipArchiveOutputStream.STORED&&current.entry.getMethod()==ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.read()==ZipArchiveOutputStream.STRING||current.entry.getMethod()==ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.read()!=ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null||current.in.read()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.read()!=ZipArchiveOutputStream.STORED&&current.entry.getMethod()==ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null||current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==null||current.in.getMethod()==ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null||current.entry.getMethod()!=ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==null||current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(read==null||current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.read()==ZipArchiveOutputStream.STORED&&current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.read()==ZipArchiveOutputStream.DEFAULT||current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null||current.in.read()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.read()!=ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.read()!=ZipArchiveOutputStream.STORED&&current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED&&current.in.getMethod()==ZipArchiveOutputStream.KEY){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.getMethod()==ZipArchiveOutputStream.STORED||current.in.getMethod()==ZipArchiveOutputStream.KEY){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.in.getMethod()!=ZipArchiveOutputStream.KEY){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.getMethod()==ZipArchiveOutputStream.STORED||current.en.getMethod()==ZipArchiveOutputStream.KEY){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,length);if(length>0){thrownewIllegalStateException("");}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,read);if(length>0){thrownewIllegalStateException("");}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null){intlength=current.in.read(buffer,offset,length);if(length<0){thrownewIllegalStateException("");}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,length);if(length<0){thrownewIllegalStateException("");}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380Integerlength=current.in.read(buffer,offset,length);if(length>0){thrownewIllegalStateException("");}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null||current.entry.getMethod()==ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null||current.entry.getMethod()==ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==null||current.entry.getMethod()!=ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null||current.entry.getMethod()==ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==null||current.in.getMethod()==ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED&&current.entry.getMethod()!=ZipArchiveOutputStream.KEY){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()>=ZipArchiveOutputStream.KEY){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null||current.entry.getMethod()!=ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null||offset!=current.entry.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null||length>=current.entry.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null||offset>=current.entry.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null&&current.in.readStored(buffer,offset,length)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.readStored(buffer,offset,length,read)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.readStored(buffer,offset,length,current.entry.length)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.readStored(buffer,offset,length)&&current.entry.getMethod()==ZipMethod.DEFLATED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.readStored(buffer,offset,length,current.length)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.readStored(buffer,offset,length)||current.entry.getMethod()==ZipMethod.DEFLATED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.readStored(buffer,offset,length)&&current.entry.getMethod()==ZipMethod.GETPROP){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.getMethod()==ZipArchiveOutputStream.STORED&&current.in.readStored(buffer,offset,length)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.getMethod()==ZipArchiveOutputStream.STORED&&current.entry.readStored(buffer,offset,length)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,read);if(length>0){System.arraycopy(buffer,offset,buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,fileNameLen);if(length>0){System.arraycopy(buffer,offset,buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,size);if(length>0){System.arraycopy(buffer,offset,buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,read);if(length<0){System.arraycopy(buffer,offset,buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,buffer.length);if(length>0){System.arraycopy(buffer,offset,buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,fileNameLen);if(length<0){System.arraycopy(buffer,offset,buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,length);if(length>0){continue;}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,read);if(length>0){continue;}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,length);if(length>0){continue;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null){intlength=current.in.read(buffer,offset,length);if(length<0){continue;}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,length);if(length<0){continue;}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.read()==ZipArchiveOutputStream.STORED&&current.entry.getMethod()==ZipArchiveOutputStream.KEY){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.read()!=ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.KEY){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.read()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.KEY){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.read()!=ZipArchiveOutputStream.STORED&&current.entry.getMethod()==ZipArchiveOutputStream.KEY){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.KEY){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STRING||current.entry.getMethod()!=ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STRING||current.in.getMethod()==ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()!=ZipArchiveOutputStream.STRING||current.entry.getMethod()==ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.FIELD_NAME){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==ZipArchiveOutputStream.STORED&&current.entry.getMethod()==ZipArchiveOutputStream.FIELD_NAME){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==ZipArchiveOutputStream.STORED||current.entry.getMethod()!=ZipArchiveOutputStream.FIELD_NAME){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=ZipArchiveOutputStream.STORED&&current.entry.getMethod()==ZipArchiveOutputStream.FIELD_NAME){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.getMethod()!=ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null||current.entry!=null){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null||length>=current.entry.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null||offset>current.entry.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==null||length>current.entry.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.read()==ZipArchiveOutputStream.STORED||current.entry.readStored(buffer,offset,length)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null||current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.readStored(buffer,offset,length)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.readStored(buffer,offset,length)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.getMethod()!=ZipArchiveOutputStream.STORED&&current.entry.readStored(buffer,offset,length)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.getMethod()==ZipArchiveOutputStream.STORED||current.entry.readStored(buffer,offset,length+1)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED&&current.entry.getMethod()!=ZipArchiveOutputStream.FIELD_NAME){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.KEY){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==ZipArchiveOutputStream.STORED&&current.entry.getMethod()==ZipArchiveOutputStream.KEY){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=ZipArchiveOutputStream.STORED&&current.entry.getMethod()==ZipArchiveOutputStream.KEY){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry>=ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.KEY){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.read()==ZipArchiveOutputStream.STORED||current.in.readStored(buffer,offset,length)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.getMethod()!=ZipArchiveOutputStream.STORED&&current.in.readStored(buffer,offset,length)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.getMethod()==ZipArchiveOutputStream.STORED||current.in.getMethod()==ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED&&current.in.getMethod()==ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.getMethod()==ZipArchiveOutputStream.STORED||current.en.getMethod()==ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.in.getMethod()!=ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380while(length>0){buffer[offset++]=current.in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380Integeroffset=current.in.readInt(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380EncoderUtil.copyCurrentStructure(current.entry,buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED&&current.entry.getMethod()!=ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()>=ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==null||current.entry.getName()!=ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null||current.entry.getName()==ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==null||current.entry.getType()==ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==null||current.entry.getName()>=ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null||current.entry.getName()==ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null||current.entry.getMethod()==ZipMethod.UNSHRINKING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null&&current.in.getMethod()==ZipMethod.UNSHRINKING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null&&current.entry.getMethod()==ZipMethod.UNSHRINKING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null||current.entry.getMethod()==ZipMethod.UNSHRINKING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null&&current.entry.getMethod()==ZipMethod.UNSHRINKING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null||current.entry.getMethod()==ZipMethod.UNSHRINKING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null||offset<length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null||buffer.length<current.entry.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==null||length<current.in.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null||current.entry.getMethod()==ZipMethod.IMPLATED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null&&current.in.getMethod()==ZipMethod.IMPLATED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null&&current.entry.getMethod()==ZipMethod.IMPLATED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null||current.entry.getMethod()==ZipMethod.IMPLATED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null&&current.entry.getMethod()==ZipMethod.IMPLATED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null||current.entry.getMethod()==ZipMethod.IMPLATED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entriesRead==null||current.entry.getMethod()!=ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==null||current.entriesRead.getMethod()==ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()>=ZipArchiveOutputStream.FIELD_NAME){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,length);if(length>0){break;}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,read);if(length>0){break;}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null){intlength=current.in.read(buffer,offset,length);if(length<0){break;}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,length);if(length<0){break;}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380Integerlength=current.in.read(buffer,offset,length);if(length>0){break;}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,length);if(length>=0){break;}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null||current.in.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,read);if(length>0){for(inti=0;i<length;++i){buffer[off
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,fileNameLen);if(length>0){for(inti=0;i<length;++i){buffer[off
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,buffer.length);if(length>0){for(inti=0;i<length;++i){buffer[off
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.entry.read(buffer,offset,length);if(length>0){for(inti=0;i<length;++i){buffer[off
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,size);if(length>0){for(inti=0;i<length;++i){buffer[off
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED&&current.entry.getMethod()!=ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()>=ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED&&current.in.readStored(buffer,offset,length)-1){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.getMethod()==ZipArchiveOutputStream.STORED||current.in.readStored(buffer,offset,length)-1){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.readStored(buffer,offset,length)-1){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.getMethod()==ZipArchiveOutputStream.STORED||current.entry.readStored(buffer,offset,length)-1){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.in.readStored(buffer,offset,length-1)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()!=ZipArchiveOutputStream.STORED&&current.in.readStored(buffer,offset,length)-1){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null||current.entry.getMethod()!=ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380Integerlength=current.in.read(buffer,offset,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380Integerlength=current.in.read(buffer,offset,length,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380Integerlength=current.in.read(buffer,offset,length,CFH_LEN);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380Integerlength=current.in.read(buffer,offset,0);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380Integerlength=current.in.read(buffer,offset,length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380Integerlength=current.in.read(buffer,offset,length,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380Integerlength=current.in.read(buffer,offset,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,read);if(length>0){System.arraycopy(buffer,offset,read,buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,fileNameLen);if(length>0){System.arraycopy(buffer,offset,read,buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,size);if(length>0){System.arraycopy(buffer,offset,read,buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,read);if(length<0){System.arraycopy(buffer,offset,read,buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,fileNameLen);if(length<0){System.arraycopy(buffer,offset,read,buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,0,length);if(length>0){System.arraycopy(buffer,offset,read,buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==null||current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null||current.entry.getMethod()==ZipArchiveOutputStream.STRING||current.entry.getMethod()==ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null||current.entry.getMethod()>=ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==null||current.entry.getMethod()!=ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380Integerpos=current.in.read(buffer,offset,length,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380Integerpos=current.in.read(buffer,offset,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380Integerpos=current.in.read(buffer,offset,length,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380Integerpos=current.in.read(buffer,offset,length,size);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380Integerpos=current.in.read(buffer,offset,length,max);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380Integerpos=current.in.read(buffer,offset,length,fileNameLen);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380in.write(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380in.skipChildren();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380in.flush();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380in.close(current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380null.close();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null||length==current.entry.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null||length==current.in.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null||offset==current.entry.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null&&current.in.read()==ZipMethod.DEFLATED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null&&length>=current.entry.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null&&current.in.read()==ZipMethod.IMPLODING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null&&current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.FIELD_NAME){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry>=null||current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.FIELD_NAME){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.enabled&&current.entry.getMethod()==ZipArchiveOutputStream.DEFLATED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.enabled||isEnabled(current.entry)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.enabled&&current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.enabled&&hasUTF8DataDescriptor){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.enabled){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.enabled&&hasUTF8){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null){intlength=current.in.read(buffer,offset,length);if(length>0){break;}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intsize=current.in.read(buffer,offset,length);if(size>0){break;}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null||current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()!=ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.readStored()==ZipArchiveOutputStream.STORED||current.in.readStored(buffer,offset,length)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null&&current.entry.getMethod()==ZipArchiveOutputStream.STORED&&current.entry.getMethod()==ZipArchiveOutputStream.FIELD_NAME){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null){intlength=current.in.read(buffer,offset,length);if(length>0){continue;}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intsize=current.in.read(buffer,offset,length);if(size>0){continue;}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.read()==ZipArchiveOutputStream.DEFAULT||current.entry.getMethod()==ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.read()==ZipArchiveOutputStream.STORED||current.entry.getMethod()!=ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==null||length<current.entry.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null||current.entry.length<length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==ZipArchiveOutputStream.STORED||current.entry.getMethod()!=ZipArchiveOutputStream.KEY){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry<ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.KEY){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null||length>current.entry.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==null||hasDataDescriptor){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null||hasDataDescriptor){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==null&&current.entry.getMethod()==ZipMethod.GETPROP){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380Integeroffset=current.in.read(buffer,offset,length+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380Integeroffset=current.in.read(buffer,offset,length-2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380Integeroffset=current.in.read(buffer,offset,length+2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null&&length==current.entry.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null&&current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null){intlength=current.in.read(buffer,offset,length);if(length>0){return;}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intsize=current.in.read(buffer,offset,length);if(size>0){return;}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null){intlength=current.in.read(buffer,offset,length);if(length>=0){return;}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,length+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,length-2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,length+2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==null||length>current.entry.length()){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null||length!=current.entry.length()){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==null||current.entry.getMethod()!=ZipMethod.DEFLATED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null||current.entry.getMethod()==ZipMethod.IMPLING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null||current.entry.getMethod()==ZipMethod.IMPLING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==null||current.entry.getMethod()==ZipMethod.IMPLING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.in.readStored(buffer,offset,length)-2){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STRING||current.in.readStored(buffer,offset,length)-1){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==null||length>current.entry.getLength()){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null||length!=current.entry.getLength()){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null&&current.entry.getMethod()==ZipArchiveOutputStream.STORED&&current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null&&current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.out!=null||current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null||current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.in.getMethod()==ZipArchiveOutputStream.KEY){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.in!=ZipArchiveOutputStream.KEY){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.en.getMethod()==ZipArchiveOutputStream.KEY){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null||current.entry.read()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.KEY){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.read()==ZipArchiveOutputStream.STORED||current.entry.getMethod()!=ZipArchiveOutputStream.KEY){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null){intlength=current.in.read(buffer,offset,length);if(length>0){System.arraycopy(buffer,offset,read,buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,length);if(length<0){System.arraycopy(buffer,offset,read,buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED+|current.entry.getMethod()!=ZipArchiveOutputStream.FIELD_NAME){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null){intlength=current.in.read(buffer,offset,length);if(length>0){System.arraycopy(buffer,offset,buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,length);if(length<0){System.arraycopy(buffer,offset,buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.in.readStored(buffer,offset,length)&1){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null||current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.FIELD_NAME){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.FIELD_NAME){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry>=null||current.entry.getMethod()==ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==null||current.entry.getMethod()>=ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry>=ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.FIELD_NAME){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry<ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.FIELD_NAME){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null&&current.in.read()==ZipMethod.IMPLATED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null&&current.entry.getMethod()==ZipMethod.IMPLIVE){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null&&current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.KEY){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(length>0){for(inti=0;i<offset;++i){buffer[offset++]=current.in.read(buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(length>0){for(inti=0;i<buffer.length;++i){buffer[offset++]=current.in.read(buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(length>0){for(inti=0;i<size;++i){buffer[offset++]=current.in.read(buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(length>0){for(inti=0;i<len;++i){buffer[offset++]=current.in.read(buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null&&current.entry.getMethod()==ZipArchiveOutputStream.STORED&&current.in.readStored(buffer,offset,length)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED&&current.in.readStored(buffer,offset,length)||current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED&&current.in.readStored(buffer,offset,length)||current.entry.getMethod()==ZipArchiveOutputStream.FIELD_NAME){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED&&current.in.readStored(buffer,offset,length)||current.entry.getMethod()==ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(in!=null){in.close();}else{System.arraycopy(buffer,offset,read,buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(in!=null){in.close();}else{System.arraycopy(buffer,offset,buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(in!=null){in.close();}else{System.arraycopy(buffer,offset,read,0,current.entry.length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(in!=null){in.close();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(in!=null){in.close();}else{System.arraycopy(buffer,offset,read,0,current.entry.getLength());}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(in!=null){in.close();}else{System.arraycopy(buffer,offset,read,buffer,offset,length);return;}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null||current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.KEY){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(length>0){System.arraycopy(current.entry,offset,read,0,current.entry.length);}else{System.arraycopy(buffer,offset,buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null){if(length>0){System.arraycopy(buffer,offset,read,0,current.entry.length);}else{System.arraycopy(buffer,offset,buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null){if(length>0){System.arraycopy(buffer,offset,read,0,current.entry.length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380System.arraycopy(current.entry,offset,read,0,current.entry.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null||current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.readStored(buffer,offset,length)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==ZipArchiveOutputStream.STORED||current.entry.readStored(buffer,offset,length)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null&&current.entry.getMethod()==ZipArchiveOutputStream.STORED&&current.entry.getMethod()==ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null||current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==null||current.entry.getName()==ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(length>0){System.arraycopy(buffer,offset,buffer,offset,length+1);}else{System.arraycopy(buffer,offset,buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(length>0){System.arraycopy(current.entry,buffer,offset,length);}else{System.arraycopy(buffer,offset,buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(length>0){System.arraycopy(buffer,offset,read,buffer,offset,length);}else{System.arraycopy(buffer,offset,buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(length>0){System.arraycopy(buffer,offset,buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null||current.in.readStored(buffer,offset,length)||current.entry.getMethod()==ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.readStored(buffer,offset,length)||current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(!current.in.readStored(buffer,offset,length)&&current.entry.getMethod()==ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null||current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.in.getMethod()==ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.in!=ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,length-1);if(length>0){for(inti=0;i<length;++i){buffer[off
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,read);if(length>0){for(inti=0;i<length;++i){buffer[
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,length);if(length<0){for(inti=0;i<length;++i){buffer[off
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==ZipArchiveOutputStream.FIELD_NAME||current.entry.getMethod()==ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.in!=ZipArchiveOutputStream.FIELD_NAME){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null&&current.entry.getMethod()==ZipArchiveOutputStream.STORED&&current.entry.getMethod()==ZipArchiveOutputStream.KEY){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.read()==ZipArchiveOutputStream.STORED||current.entry.getMethod()!=ZipArchiveOutputStream.FIELD_NAME){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.read()==ZipArchiveOutputStream.FIELD_NAME||current.entry.getMethod()==ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.readStored(buffer,offset,length)&&current.entry.getMethod()==ZipArchiveOutputStream.DEFLATED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null||current.in.readStored(buffer,offset,length)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null||current.in.readStored(buffer,offset,length)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.readStored(buffer,offset,length)||current.entry.getMethod()==ZipArchiveOutputStream.DEFLATED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.readStored(buffer,offset,length)&&isEnabled(Feature.QUOTE_FIELD_NAMES)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,length-1);if(length>0){for(inti=0;i<length;++i){continue;}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,length);if(length<0){for(inti=0;i<length;++i){continue;}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,length+1);if(length>0){for(inti=0;i<length;++i){continue;}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null||current.entry.getMethod()==ZipArchiveOutputStream.DEFLATED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null||current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entriesRead==null||current.entry.getMethod()==ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry>=null){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null&&current.in.read()==ZipMethod.UNSHRINKING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(length>0){for(inti=0;i<offset;++i){buffer[off]=current.in.read(buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(length>0){for(inti=0;i<buffer.length;++i){buffer[off]=current.in.read(buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(length>0){for(inti=0;i<offset+length;++i){buffer[off]=current.in.read(buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(length>0){for(inti=0;i<size;++i){buffer[off]=current.in.read(buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380Integerlength=current.in.read(buffer,offset,length+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380Integerlength=current.in.read(buffer,offset,length-2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380Integerlength=current.in.read(buffer,offset,length+2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null){intlength=current.in.read(buffer,offset,length);if(length>0){thrownewIllegalStateException("");}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intsize=current.in.read(buffer,offset,length);if(size>0){thrownewIllegalStateException("");}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intsize=current.in.read(buffer,offset,length);if(length>0){thrownewIllegalStateException("");}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(read==null||length!=0){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null&&current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry>=null||current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==null||current.in.read()==ZipArchiveOutputStream.DEFLATED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380Integerpos=current.in.read(buffer,offset,length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380Integerpos=current.in.read(buffer,offset,length+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380Integerpos=current.in.read(buffer,offset,length+2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==null||current.in.read()==ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.read()==ZipArchiveOutputStream.STORED||current.entry.getMethod()!=ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null){intlength=current.in.read(buffer,offset,length);if(length>0){break;}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null&&hasDataDescriptor){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null||length>current.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==null||current.in.read()==ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entries!=null||current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.KEY){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entriesRead==null||current.entry.getName()==ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null||length<=current.entry.length()){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in>=null||current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entries!=null||current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.FIELD_NAME){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null||current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entries.getMethod()==ZipArchiveOutputStream.FIELD_NAME){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null&&current.entry.getMethod()==ZipArchiveOutputStream.STORED&&current.in.readStored(buffer,offset,length)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null&&current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.FIELD_NAME){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null||current.entry.getMethod()==ZipArchiveOutputStream.FIELD_NAME){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED+current.entry.getMethod()!=ZipArchiveOutputStream.KEY){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null&&current.entry.getMethod()==ZipArchiveOutputStream.STORED&&current.entry.getMethod()==ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null||current.entry.getMethod()>=ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.readStored(buffer,offset,length)+1){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380Integerlength=current.in.read(buffer,offset,length,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(read==null||length>readLen){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(read==null||length>ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(length>0){System.arraycopy(buffer,offset,current.entry,offset,length);}else{System.arraycopy(buffer,offset,buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in>=null||current.entry.getMethod()==ZipArchiveOutputStream.DEFLATED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==null||current.entry!=ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()!=ZipArchiveOutputStream.STORED&&current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.read()>=ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.readStored(buffer,offset,length+1)||current.entry.getMethod()==ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.readStored()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.read()>=ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.read()==ZipArchiveOutputStream.SHORT||current.entry.getMethod()==ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null||current.entry.getMethod()==ZipArchiveOutputStream.STORED&&current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null||current.entry.getMethod()==ZipArchiveOutputStream.STRING||current.entry.getMethod()==ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entries!=null||current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entries==null||current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entriesRead==null||current.in.getMethod()==ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.getMethod()==ZipArchiveOutputStream.STORED||current.in.readStored(buffer,offset,length)&&current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.getMethod()==ZipArchiveOutputStream.STORED||current.in.readStored(buffer,offset,length)&&current.entry.getMethod()==ZipArchiveOutputStream.DEFLATED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380while(current.entry.getMethod()==ZipMethod.DEFLATED){if(length>0){for(inti=0;i<length;++i){buffer[off]=current.in.read(buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380while(current.entry.getMethod()==ZipMethod.IMPLODING){if(length>0){for(inti=0;i<length;++i){buffer[off]=current.in.read(buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.getMethod()==ZipArchiveOutputStream.FIELD_NAME){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null&&current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.in.getMethod()==ZipArchiveOutputStream.FIELD_NAME){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.getMethod()==ZipArchiveOutputStream.STORED||current.in.readStored(buffer,offset,length,zipEncoding)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entriesRead==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.KEY){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null&&current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.in.getMethod()==ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.getMethod()==ZipArchiveOutputStream.STORED||current.out.getMethod()==ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380while(current.in!=null){intlength=current.in.read(buffer,offset,length);if(length>0){continue;}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.readStored()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.KEY){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,length);if(length<0){return;}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null){intlength=current.in.read(buffer,offset,length);if(length>0){return;}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null&&current.entry.getMethodByCode()==ZipMethod.DEFLATED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380Integerpos=current.in.read(buffer,offset,length,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380Integerpos=current.in.read(buffer,offset,length-2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.readStored(buffer,offset,length)&&current.entry.getMethod()==ZipMethod.IMPLODING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.readStored(buffer,offset,length)||current.entry.getMethod()==ZipMethod.IMPLODING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.readStored(buffer,offset,length)||current.entry.getMethod()==ZipMethod.GETPROP){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==null||length>current.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null||length<=current.entry.getLength()){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entries!=null||current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null||offset>current.entry.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==null||current.in.read()==ZipMethod.DEFLATED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null||current.entry.getMethod()==ZipMethod.NONE){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.length>0){System.arraycopy(buffer,offset,read,0,current.entry.length);}else{System.arraycopy(buffer,offset,buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(length>0){System.arraycopy(current.entry,offset,buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.FIELD_NAME){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null&&current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.readStored(buffer,offset,length)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null&&current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.in.getMethod()==ZipArchiveOutputStream.KEY){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,0);if(length>0){for(inti=0;i<length;++i){continue;}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null||length<=current.entry.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entries==null||current.entry.getMethod()==ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null&&current.in.readStored(buffer,offset,length)||current.entry.getMethod()==ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.read()>=ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.FIELD_NAME){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.read()==ZipArchiveOutputStream.FIELD_NAME||current.entry.getMethod()==ZipArchiveOutputStream.STORED_BY){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380while(current.entry.getMethod()==ZipMethod.DEFLATED){if(length>0){for(inti=0;i<length;++i){buffer[offset++]=current.in.read(buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380while(current.entry.getMethod()==ZipMethod.IMPLODING){if(length>0){for(inti=0;i<length;++i){buffer[offset++]=current.in.read(buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(in!=null){in.close();}else{System.arraycopy(buffer,offset,buffer,offset,length);out.write(buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(in!=null){in.close();}else{System.arraycopy(buffer,offset,buffer,off,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(in!=null){in.close();}else{thrownewIllegalStateException("");}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(in!=null){in.close();}else{System.arraycopy(buffer,offset,buffer,offset+length,current.entry.getLength());}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,buffer.length);if(length>0){System.arraycopy(buffer,offset,read,buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380Integeroffset=current.in.read(buffer,offset,length,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380Integeroffset=current.in.read(buffer,offset,0);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null&&current.entry.getMethod()==ZipMethod.GET_PROP){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null&&current.entry.getMethod()==ZipMethod.GET){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null&&current.in.read()==ZipMethod.GETPROP){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.Read()==ZipArchiveOutputStream.STORED||current.in.readStored(buffer,offset,length)-1){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==ZipArchiveOutputStream.STORED||current.in.readStored(buffer,offset,length)-1){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.readStored()==ZipArchiveOutputStream.STORED||current.in.readStored(buffer,offset,length)-1){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==null||current.in.read()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.read()>=ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.KEY){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.read()==ZipArchiveOutputStream.KEY||current.entry.getMethod()==ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.read()<ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.KEY){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null&&current.entry.getMethodByCode()==ZipMethod.UNSHRINKING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in.readStored()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.FIELD_NAME){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null&&current.entry.length<length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null||length<current.length){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null&&current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.KEY){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry!=null||current.in.read()==ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in>=null||current.entry.getMethod()==ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380intlength=current.in.read(buffer,offset,length,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entries!=null||current.entry.getMethod()==ZipArchiveOutputStream.STORED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==null||length>current.in.read){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null&&current.entry.getMethod()==ZipMethod.IMPLTED){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in==null||current.entry.getMethodByCode()==ZipMethod.IMPLODING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry==null||current.in.read()==ZipMethod.IMPLODING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380while(current.in!=null){intlength=current.in.read(buffer,offset,length);if(length>0){thrownewIllegalStateException("");}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in>=null||current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null&&current.entry.getMethod()==ZipArchiveOutputStream.STORED||current.entry.getMethod()==ZipArchiveOutputStream.STRING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null&&current.entry.getMethod()==ZipMethod.IMPLING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.in!=null&&current.entry.getMethodByCode()==ZipMethod.IMPLODING){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java380if(current.entry.getMethod()==ZipArchiveOutputStream.STORED+current.entry.getMethod()!=ZipArchiveOutputStream.DEFAULT){
