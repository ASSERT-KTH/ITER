bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read,  length  -  current.in);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read,  length  -  current.in);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read,  length  -  current.in);	  current.crc.update(buffer,    offset,    length    -    read,    current.in);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
2	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  -  read,  current.in,  crc);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  -  read,  current.in,  crc);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  -  read,  current.in,  crc);	  current.crc.update(buffer,    offset,    length    -    read,    current.in);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
3	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read  -  length,  current.in);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read  -  length,  current.in);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read  -  length,  current.in);	  current.crc.update(buffer,    offset,    length    -    read,    current.in);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
4	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  -  read,  buffer,  current.in);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  -  read,  buffer,  current.in);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  -  read,  buffer,  current.in);	  current.crc.update(buffer,    offset,    length    -    read,    current.in);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
5	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  -  read,  current.in,  buffer.length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  -  read,  current.in,  buffer.length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  -  read,  current.in,  buffer.length);	  current.crc.update(buffer,    offset,    length    -    read,    current.in);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
6	[BUG]  [BUGGY]  reader  =  current.in.read(buffer,  offset,  length);  if(read  ==  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry.getMet  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  reader  =  current.in.read(buffer,  offset,  length);  if(read  ==  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry.getMet  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	reader  =  current.in.read(buffer,  offset,  length);  if(read  ==  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry.getMet	  read    =    current.in.read(buffer,    offset,    length);    if(read    ==    0)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current.entry.getMet    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
7	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset,  length  -  1);  if(read  ==  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry.getMet  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer,  offset,  length  -  1);  if(read  ==  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry.getMet  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer,  offset,  length  -  1);  if(read  ==  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry.getMet	  read    =    current.in.read(buffer,    offset,    length);    if(read    ==    0)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current.entry.getMet    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
8	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset,  length  +  1);  if(read  ==  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry.getMet  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer,  offset,  length  +  1);  if(read  ==  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry.getMet  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer,  offset,  length  +  1);  if(read  ==  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry.getMet	  read    =    current.in.read(buffer,    offset,    length);    if(read    ==    0)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current.entry.getMet    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
9	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset,  length  -  1);  if(read  ==  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer,  offset,  length  -  1);  if(read  ==  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer,  offset,  length  -  1);  if(read  ==  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.	  read    =    current.in.read(buffer,    offset,    length);    if(read    ==    0)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current.entry.getMet    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
10	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset,  length);  if(read  ==  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry.get  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer,  offset,  length);  if(read  ==  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry.get  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer,  offset,  length);  if(read  ==  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry.get	  read    =    current.in.read(buffer,    offset,    length);    if(read    ==    0)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current.entry.getMet    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
11	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  current.in.length  -  2);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  current.in.length  -  2);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(buffer,  offset,  length,  current.in.length  -  2);	  read    =    readDeflated(buffer,    offset,    length    -    2);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
12	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  current.in.read());  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  current.in.read());  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(buffer,  offset,  length,  current.in.read());	  read    =    readDeflated(buffer,    offset,    length    -    2);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
13	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length  -  2,  current.in);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(buffer,  offset,  length  -  2,  current.in);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(buffer,  offset,  length  -  2,  current.in);	  read    =    readDeflated(buffer,    offset,    length    -    2);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
14	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length  -  1,  buffer.length  -  2);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(buffer,  offset,  length  -  1,  buffer.length  -  2);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(buffer,  offset,  length  -  1,  buffer.length  -  2);	  read    =    readDeflated(buffer,    offset,    length    -    2);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
15	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length  -  1,  current.in.length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(buffer,  offset,  length  -  1,  current.in.length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(buffer,  offset,  length  -  1,  current.in.length);	  read    =    readDeflated(buffer,    offset,    length    -    2);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
16	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset,  length,  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer,  offset,  length,  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer,  offset,  length,  1);	  read    =    current.in.read(buffer,    offset,    length,    0);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
17	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset,  length,  2);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer,  offset,  length,  2);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer,  offset,  length,  2);	  read    =    current.in.read(buffer,    offset,    length,    0);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
18	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset,  length,  3);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer,  offset,  length,  3);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer,  offset,  length,  3);	  read    =    current.in.read(buffer,    offset,    length,    0);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
19	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset,  length,  4);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer,  offset,  length,  4);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer,  offset,  length,  4);	  read    =    current.in.read(buffer,    offset,    length,    0);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
20	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length,  0);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length,  0);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length,  0);	  current.crc.update(buffer,    offset,    read,    0);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
21	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read,  length,  0);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read,  length,  0);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read,  length,  0);	  current.crc.update(buffer,    offset,    read,    0);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
22	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read,  0,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read,  0,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read,  0,  length);	  current.crc.update(buffer,    offset,    read,    0);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
23	[BUG]  [BUGGY]  CRC32  crc  =  current.crc.update(buffer,  offset,  length,  0);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CRC32  crc  =  current.crc.update(buffer,  offset,  length,  0);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CRC32  crc  =  current.crc.update(buffer,  offset,  length,  0);	  current.crc.update(buffer,    offset,    read,    0);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
24	[BUG]  [BUGGY]  CRC32  crc  =  current.crc.update(buffer,  offset,  read,  0);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CRC32  crc  =  current.crc.update(buffer,  offset,  read,  0);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CRC32  crc  =  current.crc.update(buffer,  offset,  read,  0);	  current.crc.update(buffer,    offset,    read,    0);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
25	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  1);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(buffer,  offset,  length,  1);	  read    =    readDeflated(buffer,    offset,    length,    0);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
26	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  2);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  2);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(buffer,  offset,  length,  2);	  read    =    readDeflated(buffer,    offset,    length,    0);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
27	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  4);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  4);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(buffer,  offset,  length,  4);	  read    =    readDeflated(buffer,    offset,    length,    0);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
28	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  3);  [CE]  <identifier>  expected  [FE]                                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  3);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(buffer,  offset,  length,  3);	  read    =    readDeflated(buffer,    offset,    length,    0);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
29	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  0,  current.in.length);  [CE]  <identifier>  expected  [FE]                                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  0,  current.in.length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(buffer,  offset,  length,  0,  current.in.length);	  read    =    readDeflated(buffer,    offset,    length,    0);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
30	[BUG]  [BUGGY]  lastStoredEntry  =  zipEncoding.read(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  lastStoredEntry  =  zipEncoding.read(buffer,  offset,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	lastStoredEntry  =  zipEncoding.read(buffer,  offset,  length);	  lastStoredEntry    =    entryEncoding.read(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
31	[BUG]  [BUGGY]  lastStoredEntry  =  crc.read(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  lastStoredEntry  =  crc.read(buffer,  offset,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	lastStoredEntry  =  crc.read(buffer,  offset,  length);	  lastStoredEntry    =    entryEncoding.read(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
32	[BUG]  [BUGGY]  lastStoredEntry  =  entryEncoding.read(buffer,  offset,  length,  read);  [CE]  <identifier>  expected  [FE]                            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  lastStoredEntry  =  entryEncoding.read(buffer,  offset,  length,  read);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	lastStoredEntry  =  entryEncoding.read(buffer,  offset,  length,  read);	  lastStoredEntry    =    entryEncoding.read(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
33	[BUG]  [BUGGY]  lastStoredEntry  =  entryEncoding.read(buffer,  offset,  read);  [CE]  <identifier>  expected  [FE]                              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  lastStoredEntry  =  entryEncoding.read(buffer,  offset,  read);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	lastStoredEntry  =  entryEncoding.read(buffer,  offset,  read);	  lastStoredEntry    =    entryEncoding.read(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
34	[BUG]  [BUGGY]  lastStoredEntry  =  entryEncoding.read(buffer,  offset,  length,  CFH_LEN);  [CE]  <identifier>  expected  [FE]                                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  lastStoredEntry  =  entryEncoding.read(buffer,  offset,  length,  CFH_LEN);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	lastStoredEntry  =  entryEncoding.read(buffer,  offset,  length,  CFH_LEN);	  lastStoredEntry    =    entryEncoding.read(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
35	[BUG]  [BUGGY]  lastStoredEntry  =  entryEncoding.read(buffer,  offset,  length,  current.in);  [CE]  <identifier>  expected  [FE]                                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  lastStoredEntry  =  entryEncoding.read(buffer,  offset,  length,  current.in);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	lastStoredEntry  =  entryEncoding.read(buffer,  offset,  length,  current.in);	  lastStoredEntry    =    entryEncoding.read(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
36	[BUG]  [BUGGY]  lastStoredEntry  =  entryEncoding.read(buffer,  offset,  length,  fileNameLen);  [CE]  <identifier>  expected  [FE]                                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  lastStoredEntry  =  entryEncoding.read(buffer,  offset,  length,  fileNameLen);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	lastStoredEntry  =  entryEncoding.read(buffer,  offset,  length,  fileNameLen);	  lastStoredEntry    =    entryEncoding.read(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
37	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length,  read,  zipEncoding);  [CE]  <identifier>  expected  [FE]              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length,  read,  zipEncoding);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length,  read,  zipEncoding);	  current.crc.update(buffer,    offset,    length,    zipEncoding);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
38	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length,  zipEncoding,  read);  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length,  zipEncoding,  read);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length,  zipEncoding,  read);	  current.crc.update(buffer,    offset,    length,    zipEncoding);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
39	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length,  entryEncoding);  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length,  entryEncoding);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length,  entryEncoding);	  current.crc.update(buffer,    offset,    length,    zipEncoding);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
40	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read,  zipEncoding);  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read,  zipEncoding);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read,  zipEncoding);	  current.crc.update(buffer,    offset,    length,    zipEncoding);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
41	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length,  fileNameLen,  zipEncoding);  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length,  fileNameLen,  zipEncoding);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length,  fileNameLen,  zipEncoding);	  current.crc.update(buffer,    offset,    length,    zipEncoding);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
42	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read,  length  -  buffer.length);  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read,  length  -  buffer.length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read,  length  -  buffer.length);	  current.crc.update(buffer,    offset,    read    -    length);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
43	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read,  length  -  off);  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read,  length  -  off);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read,  length  -  off);	  current.crc.update(buffer,    offset,    read    -    length);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
44	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length,  read  -  length);  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length,  read  -  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length,  read  -  length);	  current.crc.update(buffer,    offset,    read    -    length);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
45	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length,  read  -  buffer.length);  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length,  read  -  buffer.length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length,  read  -  buffer.length);	  current.crc.update(buffer,    offset,    read    -    length);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
46	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read,  length  -  line);  [CE]  <identifier>  expected  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read,  length  -  line);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read,  length  -  line);	  current.crc.update(buffer,    offset,    read    -    length);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
47	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length,  read  -  read);  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length,  read  -  read);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length,  read  -  read);	  current.crc.update(buffer,    offset,    read,    length    -    read);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
48	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read,  buffer.length  -  read);  [CE]  <identifier>  expected  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read,  buffer.length  -  read);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read,  buffer.length  -  read);	  current.crc.update(buffer,    offset,    read,    length    -    read);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
49	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read,  length  -  read,  buffer.length);  [CE]  <identifier>  expected  [FE]                            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read,  length  -  read,  buffer.length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read,  length  -  read,  buffer.length);	  current.crc.update(buffer,    offset,    read,    length    -    read);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
50	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read,  length  -  read,  fileNameLen);  [CE]  invalid  method  declaration;  return  type  required  [FE]                              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read,  length  -  read,  fileNameLen);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read,  length  -  read,  fileNameLen);	  current.crc.update(buffer,    offset,    read,    length    -    read);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
51	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  =  read?  true  :  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor  =  read?  true  :  false;  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor  =  read?  true  :  false;	  allowStoredEntriesWithDataDescriptor    =    allowStoredEntriesWithDataDescriptor?    true    :    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
52	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor?  false  :  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]                            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor?  false  :  false;  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor?  false  :  false;	  allowStoredEntriesWithDataDescriptor    =    allowStoredEntriesWithDataDescriptor?    true    :    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
53	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  =  hasUTF8Flag?  true  :  false;  [CE]  invalid  method  declaration;  return  type  required  [FE]                              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor  =  hasUTF8Flag?  true  :  false;  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor  =  hasUTF8Flag?  true  :  false;	  allowStoredEntriesWithDataDescriptor    =    allowStoredEntriesWithDataDescriptor?    true    :    false;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
54	[BUG]  [BUGGY]  CurrentEntry  current  =  current.entry.read(buffer,  offset,  read);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  current  =  current.entry.read(buffer,  offset,  read);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  current  =  current.entry.read(buffer,  offset,  read);	  CurrentEntry    current    =    current.in.read(buffer,    offset,    read);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
55	[BUG]  [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  read,  length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  read,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  current  =  current.in.read(buffer,  offset,  read,  length);	  CurrentEntry    current    =    current.in.read(buffer,    offset,    read);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
56	[BUG]  [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  off,  length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  off,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  current  =  current.in.read(buffer,  off,  length);	  CurrentEntry    current    =    current.in.read(buffer,    offset,    read);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
57	[BUG]  [BUGGY]  CurrentEntry  current  =  read.in.read(buffer,  offset,  current.in);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  current  =  read.in.read(buffer,  offset,  current.in);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  current  =  read.in.read(buffer,  offset,  current.in);	  CurrentEntry    current    =    current.in.read(buffer,    offset,    read);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
58	[BUG]  [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  0);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  current  =  current.in.read(buffer,  offset,  0);	  CurrentEntry    current    =    current.in.read(buffer,    offset,    read);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
59	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset,  length  +  1,  current.entry.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer,  offset,  length  +  1,  current.entry.length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer,  offset,  length  +  1,  current.entry.length);	  read    =    current.in.read(buffer,    offset,    length    +    2);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	69	None	replace
60	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset,  length  +  3);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer,  offset,  length  +  3);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer,  offset,  length  +  3);	  read    =    current.in.read(buffer,    offset,    length    +    2);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	69	None	replace
61	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset,  length,  buffer.length  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer,  offset,  length,  buffer.length  -  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer,  offset,  length,  buffer.length  -  1);	  read    =    current.in.read(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
62	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset,  length,  buffer.length  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer,  offset,  length,  buffer.length  +  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer,  offset,  length,  buffer.length  +  1);	  read    =    current.in.read(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
63	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset,  length,  current.entry.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer,  offset,  length,  current.entry.length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer,  offset,  length,  current.entry.length);	  read    =    current.in.read(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
64	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset,  length,  fileNameLen);  [CE]  invalid  method  declaration;  return  type  required  [FE]                            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer,  offset,  length,  fileNameLen);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer,  offset,  length,  fileNameLen);	  read    =    current.in.read(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
65	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset,  length,  cache.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer,  offset,  length,  cache.length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer,  offset,  length,  cache.length);	  read    =    current.in.read(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
66	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(read)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor(read)  {  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor(read)  {	  allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
67	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  ||  read  ==  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor  ||  read  ==  0)  {  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor  ||  read  ==  0)  {	  allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
68	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor,  read)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor,  read)  {  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor,  read)  {	  allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	53	None	replace
69	[BUG]  [BUGGY]  read  =  readInputStream(buffer,  offset,  length  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readInputStream(buffer,  offset,  length  -  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readInputStream(buffer,  offset,  length  -  1);	  read    =    readInputStream(buffer,    offset,    length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
70	[BUG]  [BUGGY]  read  =  readInputStream(buffer,  offset,  length  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readInputStream(buffer,  offset,  length  +  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readInputStream(buffer,  offset,  length  +  1);	  read    =    readInputStream(buffer,    offset,    length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
71	[BUG]  [BUGGY]  read  =  readDecodedInputStream(buffer,  offset,  length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDecodedInputStream(buffer,  offset,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDecodedInputStream(buffer,  offset,  length);	  read    =    readInputStream(buffer,    offset,    length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
72	[BUG]  [BUGGY]  read  =  readFully(buffer,  offset,  length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readFully(buffer,  offset,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readFully(buffer,  offset,  length);	  read    =    readInputStream(buffer,    offset,    length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
73	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  =  hasUTF8Flag  &&  current.in.read(buffer,  offset,  length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor  =  hasUTF8Flag  &&  current.in.read(buffer,  offset,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor  =  hasUTF8Flag  &&  current.in.read(buffer,  offset,  length);	  allowStoredEntriesWithDataDescriptor    =    allowStoredEntriesWithDataDescriptor    &&    current.in.read(buffer,    offset,    length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
74	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  =  hasUseUnicodeExtraFields  &&  current.in.read(buffer,  offset,  length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor  =  hasUseUnicodeExtraFields  &&  current.in.read(buffer,  offset,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor  =  hasUseUnicodeExtraFields  &&  current.in.read(buffer,  offset,  length);	  allowStoredEntriesWithDataDescriptor    =    allowStoredEntriesWithDataDescriptor    &&    current.in.read(buffer,    offset,    length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
75	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  =  current.in  &&  allowStoredEntriesWithDataDescriptor.read(buffer,  offset,  length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor  =  current.in  &&  allowStoredEntriesWithDataDescriptor.read(buffer,  offset,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor  =  current.in  &&  allowStoredEntriesWithDataDescriptor.read(buffer,  offset,  length);	  allowStoredEntriesWithDataDescriptor    =    allowStoredEntriesWithDataDescriptor    &&    current.in.read(buffer,    offset,    length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
76	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  =  allowedStoredEntriesWithDataDescriptor  ||  current.in.read(buffer,  offset,  length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor  =  allowedStoredEntriesWithDataDescriptor  ||  current.in.read(buffer,  offset,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor  =  allowedStoredEntriesWithDataDescriptor  ||  current.in.read(buffer,  offset,  length);	  allowStoredEntriesWithDataDescriptor    =    allowStoredEntriesWithDataDescriptor    &&    current.in.read(buffer,    offset,    length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
77	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  =  hasUTF8Flag  ||  current.in.read(buffer,  offset,  length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor  =  hasUTF8Flag  ||  current.in.read(buffer,  offset,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor  =  hasUTF8Flag  ||  current.in.read(buffer,  offset,  length);	  allowStoredEntriesWithDataDescriptor    =    allowStoredEntriesWithDataDescriptor    &&    current.in.read(buffer,    offset,    length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
78	[BUG]  [BUGGY]  read  =  ze.in.read(buffer,  offset,  length,  current.entry.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  ze.in.read(buffer,  offset,  length,  current.entry.length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  ze.in.read(buffer,  offset,  length,  current.entry.length);	  read    =    ze.in.read(buffer,    offset,    length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	89	None	replace
79	[BUG]  [BUGGY]  read  =  entryEncoding.read(buffer,  offset,  length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  entryEncoding.read(buffer,  offset,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  entryEncoding.read(buffer,  offset,  length);	  read    =    ze.in.read(buffer,    offset,    length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	89	None	replace
80	[BUG]  [BUGGY]  reader  =  current.in.read(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  reader  =  current.in.read(buffer,  offset,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	reader  =  current.in.read(buffer,  offset,  length);	  read    =    ze.in.read(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	89	None	replace
81	[BUG]  [BUGGY]  read  =  ze.in.read(buffer,  offset,  length,  current.entry);  [CE]  <identifier>  expected  [FE]                              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  ze.in.read(buffer,  offset,  length,  current.entry);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  ze.in.read(buffer,  offset,  length,  current.entry);	  read    =    ze.in.read(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	89	None	replace
82	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length,  read  +  1);  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length,  read  +  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length,  read  +  1);	  current.crc.update(buffer,    offset,    read,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
83	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read,  length  +  2);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read,  length  +  2);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read,  length  +  2);	  current.crc.update(buffer,    offset,    read,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
84	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read,  length  *  2  +  1);  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read,  length  *  2  +  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read,  length  *  2  +  1);	  current.crc.update(buffer,    offset,    read,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
85	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read,  length  +  3);  [CE]  <identifier>  expected  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read,  length  +  3);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read,  length  +  3);	  current.crc.update(buffer,    offset,    read,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
86	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length  +  1,  current.in);  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(buffer,  offset,  length  +  1,  current.in);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(buffer,  offset,  length  +  1,  current.in);	  read    =    readDeflated(buffer,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
87	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length  *  2  +  1);  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(buffer,  offset,  length  *  2  +  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(buffer,  offset,  length  *  2  +  1);	  read    =    readDeflated(buffer,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
88	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length  +  3);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(buffer,  offset,  length  +  3);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(buffer,  offset,  length  +  3);	  read    =    readDeflated(buffer,    offset,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
89	[BUG]  [BUGGY]  read  =  readDelimiter(current.in,  current.entry.getMethod());  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDelimiter(current.in,  current.entry.getMethod());  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDelimiter(current.in,  current.entry.getMethod());	  read    =    readDelimiter(current.entry.getMethod());    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
90	[BUG]  [BUGGY]  read  =  readDelimiter(current.entry.getMethod(),  current.in);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDelimiter(current.entry.getMethod(),  current.in);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDelimiter(current.entry.getMethod(),  current.in);	  read    =    readDelimiter(current.entry.getMethod());    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
91	[BUG]  [BUGGY]  read  =  readDelimiter(current.in.read(buffer,  offset,  length));  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDelimiter(current.in.read(buffer,  offset,  length));  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDelimiter(current.in.read(buffer,  offset,  length));	  read    =    readDelimiter(current.entry.getMethod());    	non-compiled	[CE]  <identifier>  expected	94	None	replace
92	[BUG]  [BUGGY]  read  =  readDelimiter(current.entry.getMethod(),  current.line);  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDelimiter(current.entry.getMethod(),  current.line);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDelimiter(current.entry.getMethod(),  current.line);	  read    =    readDelimiter(current.entry.getMethod());    	non-compiled	[CE]  <identifier>  expected	94	None	replace
93	[BUG]  [BUGGY]  read  =  readDelimiter(current.entry.getMethod(),  current.encoding);  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDelimiter(current.entry.getMethod(),  current.encoding);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDelimiter(current.entry.getMethod(),  current.encoding);	  read    =    readDelimiter(current.entry.getMethod());    	non-compiled	[CE]  <identifier>  expected	94	None	replace
94	[BUG]  [BUGGY]  CRC32  crc  =  current.crc.update(buffer,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CRC32  crc  =  current.crc.update(buffer,  offset,  length  -  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CRC32  crc  =  current.crc.update(buffer,  offset,  length  -  1);	  current.crc.update(buffer,    offset,    read    -    1);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
95	[BUG]  [BUGGY]  read  =  current.crc.update(buffer,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.crc.update(buffer,  offset,  length  -  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.crc.update(buffer,  offset,  length  -  1);	  current.crc.update(buffer,    offset,    read    -    1);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
96	[BUG]  [BUGGY]  CurrentEntry  current  =  crc.update(buffer,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  current  =  crc.update(buffer,  offset,  length  -  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  current  =  crc.update(buffer,  offset,  length  -  1);	  current.crc.update(buffer,    offset,    read    -    1);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
97	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  *  2  -  1);  [CE]  <identifier>  expected  [FE]            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  *  2  -  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  *  2  -  1);	  CurrentEntry    <    K,    V>    current    =    current.in.read(buffer,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
98	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  -  1,  read);  [CE]  <identifier>  expected  [FE]              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  -  1,  read);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  -  1,  read);	  CurrentEntry    <    K,    V>    current    =    current.in.read(buffer,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
99	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.entry.read(buffer,  offset,  length  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.entry.read(buffer,  offset,  length  -  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  <  K,  V>  current  =  current.entry.read(buffer,  offset,  length  -  1);	  CurrentEntry    <    K,    V>    current    =    current.in.read(buffer,    offset,    length    -    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
100	[BUG]  [BUGGY]  lastStoredEntry  =  zipEncoding.decode(buffer,  offset,  length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  lastStoredEntry  =  zipEncoding.decode(buffer,  offset,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	lastStoredEntry  =  zipEncoding.decode(buffer,  offset,  length);	  lastStoredEntry    =    entryEncoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	95	None	replace
101	[BUG]  [BUGGY]  lastStoredEntry  =  crc.decode(buffer,  offset,  length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  lastStoredEntry  =  crc.decode(buffer,  offset,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	lastStoredEntry  =  crc.decode(buffer,  offset,  length);	  lastStoredEntry    =    entryEncoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	95	None	replace
102	[BUG]  [BUGGY]  lastStoredEntry  =  entryEncoding.decode(buffer,  offset,  length,  read);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  lastStoredEntry  =  entryEncoding.decode(buffer,  offset,  length,  read);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	lastStoredEntry  =  entryEncoding.decode(buffer,  offset,  length,  read);	  lastStoredEntry    =    entryEncoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	95	None	replace
103	[BUG]  [BUGGY]  lastStoredEntry  =  entryEncoding.decode(buffer,  offset,  read);  [CE]  invalid  method  declaration;  return  type  required  [FE]                            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  lastStoredEntry  =  entryEncoding.decode(buffer,  offset,  read);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	lastStoredEntry  =  entryEncoding.decode(buffer,  offset,  read);	  lastStoredEntry    =    entryEncoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	95	None	replace
104	[BUG]  [BUGGY]  lastStoredEntry  =  entryEncoding.decode(buffer,  offset,  read,  length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  lastStoredEntry  =  entryEncoding.decode(buffer,  offset,  read,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	lastStoredEntry  =  entryEncoding.decode(buffer,  offset,  read,  length);	  lastStoredEntry    =    entryEncoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	95	None	replace
105	[BUG]  [BUGGY]  lastStoredEntry  =  entryEncoding.decode(buffer,  offset,  length,  CFH_LEN);  [CE]  invalid  method  declaration;  return  type  required  [FE]                                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  lastStoredEntry  =  entryEncoding.decode(buffer,  offset,  length,  CFH_LEN);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	lastStoredEntry  =  entryEncoding.decode(buffer,  offset,  length,  CFH_LEN);	  lastStoredEntry    =    entryEncoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	95	None	replace
106	[BUG]  [BUGGY]  lastStoredEntry  =  entryEncoding.decode(buffer,  offset,  length,  buffer.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  lastStoredEntry  =  entryEncoding.decode(buffer,  offset,  length,  buffer.length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	lastStoredEntry  =  entryEncoding.decode(buffer,  offset,  length,  buffer.length);	  lastStoredEntry    =    entryEncoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	95	None	replace
107	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read,  buffer.length,  length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read,  buffer.length,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read,  buffer.length,  length);	  current.crc.update(buffer,    offset,    read,    length,    buffer.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	56	None	replace
108	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read,  length,  buffer.length  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read,  length,  buffer.length  +  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read,  length,  buffer.length  +  1);	  current.crc.update(buffer,    offset,    read,    length,    buffer.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	56	None	replace
109	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read,  0,  buffer.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read,  0,  buffer.length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read,  0,  buffer.length);	  current.crc.update(buffer,    offset,    read,    length,    buffer.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	56	None	replace
110	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read,  length,  buffer.length  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read,  length,  buffer.length  -  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read,  length,  buffer.length  -  1);	  current.crc.update(buffer,    offset,    read,    length,    buffer.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	56	None	replace
111	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length,  read,  buffer.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length,  read,  buffer.length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length,  read,  buffer.length);	  current.crc.update(buffer,    offset,    read,    length,    buffer.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	56	None	replace
112	[BUG]  [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length  -  read,  buffer.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length  -  read,  buffer.length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  current  =  current.in.read(buffer,  offset,  length  -  read,  buffer.length);	  CurrentEntry    current    =    current.in.read(buffer,    offset,    length    -    read);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
113	[BUG]  [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length  -  1,  read);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length  -  1,  read);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  current  =  current.in.read(buffer,  offset,  length  -  1,  read);	  CurrentEntry    current    =    current.in.read(buffer,    offset,    length    -    read);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
114	[BUG]  [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  read  -  length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  read  -  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  current  =  current.in.read(buffer,  offset,  read  -  length);	  CurrentEntry    current    =    current.in.read(buffer,    offset,    length    -    read);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
115	[BUG]  [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length  -  read,  bytesRead);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length  -  read,  bytesRead);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  current  =  current.in.read(buffer,  offset,  length  -  read,  bytesRead);	  CurrentEntry    current    =    current.in.read(buffer,    offset,    length    -    read);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
116	[BUG]  [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  read,  buffer.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  read,  buffer.length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  current  =  current.in.read(buffer,  offset,  read,  buffer.length);	  CurrentEntry    current    =    current.in.read(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
117	[BUG]  [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  buffer.length  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  buffer.length  -  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  buffer.length  -  1);	  CurrentEntry    current    =    current.in.read(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
118	[BUG]  [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  buffer.length  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  buffer.length  +  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  buffer.length  +  1);	  CurrentEntry    current    =    current.in.read(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
119	[BUG]  [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length  -  1,  buffer.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length  -  1,  buffer.length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  current  =  current.in.read(buffer,  offset,  length  -  1,  buffer.length);	  CurrentEntry    current    =    current.in.read(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
120	[BUG]  [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  fileNameLen);  [CE]  invalid  method  declaration;  return  type  required  [FE]                                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  fileNameLen);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  fileNameLen);	  CurrentEntry    current    =    current.in.read(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
121	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length,  read,  CFH_LEN);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length,  read,  CFH_LEN);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length,  read,  CFH_LEN);	  current.crc.update(buffer,    offset,    length,    read);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
122	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length,  read,  0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length,  read,  0);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length,  read,  0);	  current.crc.update(buffer,    offset,    length,    read);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
123	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length,  read,  fileNameLen);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length,  read,  fileNameLen);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length,  read,  fileNameLen);	  current.crc.update(buffer,    offset,    length,    read);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
124	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length,  read,  current.in);  [CE]  <identifier>  expected  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length,  read,  current.in);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length,  read,  current.in);	  current.crc.update(buffer,    offset,    length,    read);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
125	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset,  length  -  4);  [CE]  invalid  method  declaration;  return  type  required  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer,  offset,  length  -  4);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer,  offset,  length  -  4);	  read    =    current.in.read(buffer,    offset,    length    -    2);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	68	None	replace
126	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset,  length  -  3);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer,  offset,  length  -  3);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer,  offset,  length  -  3);	  read    =    current.in.read(buffer,    offset,    length    -    2);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	68	None	replace
127	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length  /  2);  [CE]  invalid  method  declaration;  return  type  required  [FE]                                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(buffer,  offset,  length  /  2);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(buffer,  offset,  length  /  2);	  read    =    readDeflated(buffer,    offset,    length    +    2);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
128	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length  *  2);  [CE]  invalid  method  declaration;  return  type  required  [FE]                                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(buffer,  offset,  length  *  2);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(buffer,  offset,  length  *  2);	  read    =    readDeflated(buffer,    offset,    length    +    2);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
129	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  LFH_LEN);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  LFH_LEN);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(buffer,  offset,  length,  LFH_LEN);	  read    =    readDeflated(buffer,    offset,    length,    CFH_LEN);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
130	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  CFH_LEN  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  CFH_LEN  +  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(buffer,  offset,  length,  CFH_LEN  +  1);	  read    =    readDeflated(buffer,    offset,    length,    CFH_LEN);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
131	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  DD);  [CE]  invalid  method  declaration;  return  type  required  [FE]                              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  DD);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(buffer,  offset,  length,  DD);	  read    =    readDeflated(buffer,    offset,    length,    CFH_LEN);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
132	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  DFH_LEN);  [CE]  invalid  method  declaration;  return  type  required  [FE]                                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  DFH_LEN);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(buffer,  offset,  length,  DFH_LEN);	  read    =    readDeflated(buffer,    offset,    length,    CFH_LEN);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
133	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read,  buffer.length  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read,  buffer.length  +  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read,  buffer.length  +  1);	  current.crc.update(buffer,    offset,    read,    buffer.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	70	None	replace
134	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read,  buffer.length  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read,  buffer.length  -  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read,  buffer.length  -  1);	  current.crc.update(buffer,    offset,    read,    buffer.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	70	None	replace
135	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read,  buffer.length  +  length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read,  buffer.length  +  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read,  buffer.length  +  length);	  current.crc.update(buffer,    offset,    read,    buffer.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	70	None	replace
136	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read,  buffer.length  -  offset);  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read,  buffer.length  -  offset);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read,  buffer.length  -  offset);	  current.crc.update(buffer,    offset,    read,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
137	[BUG]  [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length  -  4);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length  -  4);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  current  =  current.in.read(buffer,  offset,  length  -  4);	  CurrentEntry    current    =    current.in.read(buffer,    offset,    length    -    2);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	67	None	replace
138	[BUG]  [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length  +  2);  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length  +  2);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  current  =  current.in.read(buffer,  offset,  length  +  2);	  CurrentEntry    current    =    current.in.read(buffer,    offset,    length    -    2);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
139	[BUG]  [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length  +  1,  read);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length  +  1,  read);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  current  =  current.in.read(buffer,  offset,  length  +  1,  read);	  CurrentEntry    current    =    current.in.read(buffer,    offset,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
140	[BUG]  [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  read  +  1);  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  read  +  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  current  =  current.in.read(buffer,  offset,  read  +  1);	  CurrentEntry    current    =    current.in.read(buffer,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
141	[BUG]  [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length  *  2  +  1);  [CE]  <identifier>  expected  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length  *  2  +  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  current  =  current.in.read(buffer,  offset,  length  *  2  +  1);	  CurrentEntry    current    =    current.in.read(buffer,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
142	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length,  read  -  2);  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length,  read  -  2);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length,  read  -  2);	  current.crc.update(buffer,    offset,    length    -    2);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
143	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  -  2,  read);  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  -  2,  read);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  -  2,  read);	  current.crc.update(buffer,    offset,    length    -    2);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
144	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  -  4);  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  -  4);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  -  4);	  current.crc.update(buffer,    offset,    length    -    2);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
145	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  current.in,  buffer.length);  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  current.in,  buffer.length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(buffer,  offset,  length,  current.in,  buffer.length);	  read    =    readDeflated(buffer,    offset,    length,    current.in);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
146	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  current.in,  0);  [CE]  <identifier>  expected  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  current.in,  0);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(buffer,  offset,  length,  current.in,  0);	  read    =    readDeflated(buffer,    offset,    length,    current.in);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
147	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length  -  1,  current.in);  [CE]  <identifier>  expected  [FE]                            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(buffer,  offset,  length  -  1,  current.in);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(buffer,  offset,  length  -  1,  current.in);	  read    =    readDeflated(buffer,    offset,    length,    current.in);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
148	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  current.in,  inputStream);  [CE]  <identifier>  expected  [FE]                              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  current.in,  inputStream);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(buffer,  offset,  length,  current.in,  inputStream);	  read    =    readDeflated(buffer,    offset,    length,    current.in);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
149	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  current.in,  CFH_LEN);  [CE]  <identifier>  expected  [FE]                                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  current.in,  CFH_LEN);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(buffer,  offset,  length,  current.in,  CFH_LEN);	  read    =    readDeflated(buffer,    offset,    length,    current.in);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
150	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  current.in,  crc);  [CE]  <identifier>  expected  [FE]                                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  current.in,  crc);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(buffer,  offset,  length,  current.in,  crc);	  read    =    readDeflated(buffer,    offset,    length,    current.in);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
151	[BUG]  [BUGGY]  reader  =  current.in.read(buffer,  offset,  length);  if(read  ==  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }  [CE]  <identifier>  expected  [FE]                            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  reader  =  current.in.read(buffer,  offset,  length);  if(read  ==  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	reader  =  current.in.read(buffer,  offset,  length);  if(read  ==  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }	  read    =    current.in.read(buffer,    offset,    length);    if(read!=    0)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
152	[BUG]  [BUGGY]  reader  =  current.in.read(buffer,  offset,  length);  if(read!=  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }  [CE]  <identifier>  expected  [FE]                              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  reader  =  current.in.read(buffer,  offset,  length);  if(read!=  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	reader  =  current.in.read(buffer,  offset,  length);  if(read!=  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }	  read    =    current.in.read(buffer,    offset,    length);    if(read!=    0)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
153	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read,  length  -  4);  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read,  length  -  4);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read,  length  -  4);	  current.crc.update(buffer,    offset,    read,    length    -    2);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
154	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read,  length  -  3);  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read,  length  -  3);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read,  length  -  3);	  current.crc.update(buffer,    offset,    read,    length    -    2);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
155	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  -  1,  read,  buffer.length);  [CE]  <identifier>  expected  [FE]              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  -  1,  read,  buffer.length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  -  1,  read,  buffer.length);	  current.crc.update(buffer,    offset,    length    -    1,    read);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
156	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  -  1,  read,  buffer);  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  -  1,  read,  buffer);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  -  1,  read,  buffer);	  current.crc.update(buffer,    offset,    length    -    1,    read);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
157	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  -  1,  read,  fileNameLen);  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  -  1,  read,  fileNameLen);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  -  1,  read,  fileNameLen);	  current.crc.update(buffer,    offset,    length    -    1,    read);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
158	[BUG]  [BUGGY]  read  =  current.crc.update(buffer,  offset,  length  -  1,  read);  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.crc.update(buffer,  offset,  length  -  1,  read);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.crc.update(buffer,  offset,  length  -  1,  read);	  current.crc.update(buffer,    offset,    length    -    1,    read);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
159	[BUG]  [BUGGY]  read  =  this.in.read(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  this.in.read(buffer,  offset,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  this.in.read(buffer,  offset,  length);	  read    =    read.in.read(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
160	[BUG]  [BUGGY]  read  =  read.in.read(buffer,  offset,  length,  current.entry.length);  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  read.in.read(buffer,  offset,  length,  current.entry.length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  read.in.read(buffer,  offset,  length,  current.entry.length);	  read    =    read.in.read(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
161	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset,  length  *  2  +  1);  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer,  offset,  length  *  2  +  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer,  offset,  length  *  2  +  1);	  read    =    current.in.read(buffer,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
162	[BUG]  [BUGGY]  read  =  readLimits(buffer,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readLimits(buffer,  offset,  length  -  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readLimits(buffer,  offset,  length  -  1);	  read    =    readLimits(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
163	[BUG]  [BUGGY]  read  =  readLimits(buffer,  offset,  length  +  1);  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readLimits(buffer,  offset,  length  +  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readLimits(buffer,  offset,  length  +  1);	  read    =    readLimits(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
164	[BUG]  [BUGGY]  read  =  readLimits(buffer,  offset,  length,  0);  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readLimits(buffer,  offset,  length,  0);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readLimits(buffer,  offset,  length,  0);	  read    =    readLimits(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
165	[BUG]  [BUGGY]  read  =  readLimits(buffer,  offset,  length  -  2);  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readLimits(buffer,  offset,  length  -  2);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readLimits(buffer,  offset,  length  -  2);	  read    =    readLimits(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
166	[BUG]  [BUGGY]  read  =  readLimits(buffer,  offset,  length,  current.in);  [CE]  <identifier>  expected  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readLimits(buffer,  offset,  length,  current.in);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readLimits(buffer,  offset,  length,  current.in);	  read    =    readLimits(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
167	[BUG]  [BUGGY]  reader  =  current.in.read(buffer,  offset,  length);  if(read  >=  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }  [CE]  <identifier>  expected  [FE]                                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  reader  =  current.in.read(buffer,  offset,  length);  if(read  >=  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	reader  =  current.in.read(buffer,  offset,  length);  if(read  >=  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }	  read    =    current.in.read(buffer,    offset,    length);    if(read    >=    0)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
168	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  buffer.length  +  1);  [CE]  <identifier>  expected  [FE]                              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  buffer.length  +  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(buffer,  offset,  length,  buffer.length  +  1);	  read    =    readDeflated(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
169	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  current.in.length);  [CE]  <identifier>  expected  [FE]                                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  current.in.length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(buffer,  offset,  length,  current.in.length);	  read    =    readDeflated(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
170	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  buffer.length  -  1);  [CE]  <identifier>  expected  [FE]                                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  buffer.length  -  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(buffer,  offset,  length,  buffer.length  -  1);	  read    =    readDeflated(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
171	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  current.in.read(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  current.in.read(buffer,  offset,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(buffer,  offset,  length,  current.in.read(buffer,  offset,  length);	  read    =    readDeflated(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
172	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  current.in.read(buffer,  offset);  [CE]  <identifier>  expected  [FE]                                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  current.in.read(buffer,  offset);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(buffer,  offset,  length,  current.in.read(buffer,  offset);	  read    =    readDeflated(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
173	[BUG]  [BUGGY]  read  =  readLimit(buffer,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readLimit(buffer,  offset,  length  -  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readLimit(buffer,  offset,  length  -  1);	  read    =    readLimit(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
174	[BUG]  [BUGGY]  read  =  readLimit(buffer,  offset,  length  +  1);  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readLimit(buffer,  offset,  length  +  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readLimit(buffer,  offset,  length  +  1);	  read    =    readLimit(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
175	[BUG]  [BUGGY]  read  =  readLimit(buffer,  offset,  length,  CFH_LEN);  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readLimit(buffer,  offset,  length,  CFH_LEN);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readLimit(buffer,  offset,  length,  CFH_LEN);	  read    =    readLimit(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
176	[BUG]  [BUGGY]  read  =  readLimit(buffer,  offset,  length,  current.in);  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readLimit(buffer,  offset,  length,  current.in);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readLimit(buffer,  offset,  length,  current.in);	  read    =    readLimit(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
177	[BUG]  [BUGGY]  read  =  readLimit(buffer,  offset,  length,  0);  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readLimit(buffer,  offset,  length,  0);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readLimit(buffer,  offset,  length,  0);	  read    =    readLimit(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
178	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  =  read  ||  current.in.read(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor  =  read  ||  current.in.read(buffer,  offset,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor  =  read  ||  current.in.read(buffer,  offset,  length);	  allowStoredEntriesWithDataDescriptor    =    allowStoredEntriesWithDataDescriptor    ||    current.in.read(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
179	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  =  current.in  ||  allowStoredEntriesWithDataDescriptor  ||  current.in.read(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor  =  current.in  ||  allowStoredEntriesWithDataDescriptor  ||  current.in.read(buffer,  offset,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor  =  current.in  ||  allowStoredEntriesWithDataDescriptor  ||  current.in.read(buffer,  offset,  length);	  allowStoredEntriesWithDataDescriptor    =    allowStoredEntriesWithDataDescriptor    ||    current.in.read(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
180	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  =  hasDataDescriptor  ||  current.in.read(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor  =  hasDataDescriptor  ||  current.in.read(buffer,  offset,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor  =  hasDataDescriptor  ||  current.in.read(buffer,  offset,  length);	  allowStoredEntriesWithDataDescriptor    =    allowStoredEntriesWithDataDescriptor    ||    current.in.read(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
181	[BUG]  [BUGGY]  read  =  readDelimiter(buffer,  offset,  length,  current.in);  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDelimiter(buffer,  offset,  length,  current.in);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDelimiter(buffer,  offset,  length,  current.in);	  read    =    readDelimiter(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
182	[BUG]  [BUGGY]  read  =  readDelimiter(buffer,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDelimiter(buffer,  offset,  length  -  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDelimiter(buffer,  offset,  length  -  1);	  read    =    readDelimiter(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
183	[BUG]  [BUGGY]  read  =  readDelimiter(buffer,  offset,  length,  CFH_LEN);  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDelimiter(buffer,  offset,  length,  CFH_LEN);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDelimiter(buffer,  offset,  length,  CFH_LEN);	  read    =    readDelimiter(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
184	[BUG]  [BUGGY]  read  =  readDelimiter(buffer,  offset,  length,  fileNameLen);  [CE]  <identifier>  expected  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDelimiter(buffer,  offset,  length,  fileNameLen);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDelimiter(buffer,  offset,  length,  fileNameLen);	  read    =    readDelimiter(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
185	[BUG]  [BUGGY]  read  =  readDelimiter(buffer,  offset,  length,  buffer.length);  [CE]  <identifier>  expected  [FE]                            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDelimiter(buffer,  offset,  length,  buffer.length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDelimiter(buffer,  offset,  length,  buffer.length);	  read    =    readDelimiter(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
186	[BUG]  [BUGGY]  read  =  readDelimiter(buffer,  offset,  length  +  1);  [CE]  <identifier>  expected  [FE]                              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDelimiter(buffer,  offset,  length  +  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDelimiter(buffer,  offset,  length  +  1);	  read    =    readDelimiter(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
187	[BUG]  [BUGGY]  read  =  readDelimiter(buffer,  offset,  length,  crc);  [CE]  <identifier>  expected  [FE]                                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDelimiter(buffer,  offset,  length,  crc);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDelimiter(buffer,  offset,  length,  crc);	  read    =    readDelimiter(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
188	[BUG]  [BUGGY]  read  =  readLoop(buffer,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readLoop(buffer,  offset,  length  -  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readLoop(buffer,  offset,  length  -  1);	  read    =    readLoop(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
189	[BUG]  [BUGGY]  read  =  readLoop(buffer,  offset,  length  +  1);  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readLoop(buffer,  offset,  length  +  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readLoop(buffer,  offset,  length  +  1);	  read    =    readLoop(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
190	[BUG]  [BUGGY]  read  =  readLoop(buffer,  offset,  length,  current.in);  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readLoop(buffer,  offset,  length,  current.in);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readLoop(buffer,  offset,  length,  current.in);	  read    =    readLoop(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
191	[BUG]  [BUGGY]  read  =  readLoop(buffer,  offset,  length,  CFH_LEN);  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readLoop(buffer,  offset,  length,  CFH_LEN);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readLoop(buffer,  offset,  length,  CFH_LEN);	  read    =    readLoop(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
192	[BUG]  [BUGGY]  read  =  readLimit(current.in,  current.entry.getMethod(),  current.entry.getMethod());  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readLimit(current.in,  current.entry.getMethod(),  current.entry.getMethod());  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readLimit(current.in,  current.entry.getMethod(),  current.entry.getMethod());	  read    =    readLimit(current.entry.getMethod(),    current.entry.getMethod());    	non-compiled	[CE]  <identifier>  expected	74	None	replace
193	[BUG]  [BUGGY]  read  =  readLimit(current.entry.getMethod(),  current.entry.getMethod(),  buffer);  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readLimit(current.entry.getMethod(),  current.entry.getMethod(),  buffer);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readLimit(current.entry.getMethod(),  current.entry.getMethod(),  buffer);	  read    =    readLimit(current.entry.getMethod(),    current.entry.getMethod());    	non-compiled	[CE]  <identifier>  expected	74	None	replace
194	[BUG]  [BUGGY]  read  =  readLimit(current.in.getMethod(),  current.entry.getMethod());  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readLimit(current.in.getMethod(),  current.entry.getMethod());  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readLimit(current.in.getMethod(),  current.entry.getMethod());	  read    =    readLimit(current.entry.getMethod(),    current.entry.getMethod());    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
195	[BUG]  [BUGGY]  read  =  readLimit(current.entry.getMethod(),  current.entry.getMethod(),  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readLimit(current.entry.getMethod(),  current.entry.getMethod(),  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readLimit(current.entry.getMethod(),  current.entry.getMethod(),  length);	  read    =    readLimit(current.entry.getMethod(),    current.entry.getMethod());    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
196	[BUG]  [BUGGY]  read  =  readLimit(current.entry.getMethod(),  current.entry.getMethod()  +  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readLimit(current.entry.getMethod(),  current.entry.getMethod()  +  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readLimit(current.entry.getMethod(),  current.entry.getMethod()  +  1);	  read    =    readLimit(current.entry.getMethod(),    current.entry.getMethod());    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
197	[BUG]  [BUGGY]  read  =  readLimit(current.entry.getMethod(),  current.entry.getMethod(),  size);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readLimit(current.entry.getMethod(),  current.entry.getMethod(),  size);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readLimit(current.entry.getMethod(),  current.entry.getMethod(),  size);	  read    =    readLimit(current.entry.getMethod(),    current.entry.getMethod());    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
198	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read,  length,  fileNameLen  +  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read,  length,  fileNameLen  +  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read,  length,  fileNameLen  +  1);	  current.crc.update(buffer,    offset,    read,    length,    fileNameLen);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
199	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read,  length,  fileNameLen,  CFH_LEN);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read,  length,  fileNameLen,  CFH_LEN);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read,  length,  fileNameLen,  CFH_LEN);	  current.crc.update(buffer,    offset,    read,    length,    fileNameLen);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
200	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read,  length,  read);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read,  length,  read);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read,  length,  read);	  current.crc.update(buffer,    offset,    read,    length,    fileNameLen);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
201	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  -  read,  buffer,  bytesRead);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  -  read,  buffer,  bytesRead);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  -  read,  buffer,  bytesRead);	  current.crc.update(buffer,    offset,    length    -    read,    bytesRead);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
202	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read,  length  -  bytesRead);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read,  length  -  bytesRead);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read,  length  -  bytesRead);	  current.crc.update(buffer,    offset,    length    -    read,    bytesRead);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
203	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  -  read,  bytesRead,  max);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  -  read,  bytesRead,  max);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  -  read,  bytesRead,  max);	  current.crc.update(buffer,    offset,    length    -    read,    bytesRead);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
204	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  -  read,  bytesRead,  buffer.length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  -  read,  bytesRead,  buffer.length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  -  read,  bytesRead,  buffer.length);	  current.crc.update(buffer,    offset,    length    -    read,    bytesRead);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
205	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length,  read  -  bytesRead);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length,  read  -  bytesRead);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length,  read  -  bytesRead);	  current.crc.update(buffer,    offset,    length    -    read,    bytesRead);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
206	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  -  bytesRead,  bytesRead);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  -  bytesRead,  bytesRead);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  -  bytesRead,  bytesRead);	  current.crc.update(buffer,    offset,    length    -    read,    bytesRead);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
207	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length,  read,  buffer.length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length,  read,  buffer.length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length,  read,  buffer.length);	  CurrentEntry    <    K,    V>    current    =    current.in.read(buffer,    offset,    length,    read);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
208	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length,  read,  0);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length,  read,  0);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length,  read,  0);	  CurrentEntry    <    K,    V>    current    =    current.in.read(buffer,    offset,    length,    read);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
209	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length,  read  -  1);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length,  read  -  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length,  read  -  1);	  CurrentEntry    <    K,    V>    current    =    current.in.read(buffer,    offset,    length,    read);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
210	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length,  read,  bytesRead);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length,  read,  bytesRead);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length,  read,  bytesRead);	  CurrentEntry    <    K,    V>    current    =    current.in.read(buffer,    offset,    length,    read);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
211	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset,  length  +  1);  if(read  ==  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer,  offset,  length  +  1);  if(read  ==  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer,  offset,  length  +  1);  if(read  ==  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }	  read    =    current.in.read(buffer,    offset,    length);    if(read    ==    0)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
212	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read,  length  -  offset);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read,  length  -  offset);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read,  length  -  offset);	  current.crc.update(buffer,    offset,    read    -    offset);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
213	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  -  offset);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  -  offset);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  -  offset);	  current.crc.update(buffer,    offset,    read    -    offset);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
214	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length,  read  -  offset);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length,  read  -  offset);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length,  read  -  offset);	  current.crc.update(buffer,    offset,    read    -    offset);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
215	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read  -  offset,  length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read  -  offset,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read  -  offset,  length);	  current.crc.update(buffer,    offset,    read    -    offset);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
216	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current.in,  current.entry.getMethod(),  current.entry.getMethod()));  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor(current.in,  current.entry.getMethod(),  current.entry.getMethod()));  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor(current.in,  current.entry.getMethod(),  current.entry.getMethod()));	  allowStoredEntriesWithDataDescriptor(current.entry.getMethod(),    current.entry.getMethod()));    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
217	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current.entry.getMethod(),  current.entry.getMethod(),  read));  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor(current.entry.getMethod(),  current.entry.getMethod(),  read));  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor(current.entry.getMethod(),  current.entry.getMethod(),  read));	  allowStoredEntriesWithDataDescriptor(current.entry.getMethod(),    current.entry.getMethod()));    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
218	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current.entry.getMethod(),  current.entry.getMethod()  +  1));  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor(current.entry.getMethod(),  current.entry.getMethod()  +  1));  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor(current.entry.getMethod(),  current.entry.getMethod()  +  1));	  allowStoredEntriesWithDataDescriptor(current.entry.getMethod(),    current.entry.getMethod()));    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
219	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current.entry.getMethod(),  current.entry.getMethod());  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor(current.entry.getMethod(),  current.entry.getMethod());  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor(current.entry.getMethod(),  current.entry.getMethod());	  allowStoredEntriesWithDataDescriptor(current.entry.getMethod(),    current.entry.getMethod()));    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
220	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current.entry.getMethod(),  current.entry.getMethod()),  read);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor(current.entry.getMethod(),  current.entry.getMethod()),  read);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor(current.entry.getMethod(),  current.entry.getMethod()),  read);	  allowStoredEntriesWithDataDescriptor(current.entry.getMethod(),    current.entry.getMethod()));    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
221	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  CFH_LEN,  length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  CFH_LEN,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  CFH_LEN,  length);	  current.crc.update(buffer,    offset,    read,    length,    CFH_LEN);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
222	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  0,  length,  CFH_LEN);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  0,  length,  CFH_LEN);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  0,  length,  CFH_LEN);	  current.crc.update(buffer,    offset,    read,    length,    CFH_LEN);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
223	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read,  length,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read,  length,  LFH_LEN);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read,  length,  LFH_LEN);	  current.crc.update(buffer,    offset,    read,    length,    CFH_LEN);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
224	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  -  read,  buffer.length  +  1);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  -  read,  buffer.length  +  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  -  read,  buffer.length  +  1);	  current.crc.update(buffer,    offset,    length    -    read,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
225	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read  -  buffer.length,  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read  -  buffer.length,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read  -  buffer.length,  length);	  current.crc.update(buffer,    offset,    length    -    read,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
226	[BUG]  [BUGGY]  read  =  readLenient(buffer,  offset,  length,  current.in);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readLenient(buffer,  offset,  length,  current.in);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readLenient(buffer,  offset,  length,  current.in);	  read    =    readLenient(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
227	[BUG]  [BUGGY]  read  =  readLenient(buffer,  offset,  length,  buffer.length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readLenient(buffer,  offset,  length,  buffer.length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readLenient(buffer,  offset,  length,  buffer.length);	  read    =    readLenient(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
228	[BUG]  [BUGGY]  read  =  readLenient(buffer,  offset,  length,  CFH_LEN);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readLenient(buffer,  offset,  length,  CFH_LEN);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readLenient(buffer,  offset,  length,  CFH_LEN);	  read    =    readLenient(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
229	[BUG]  [BUGGY]  read  =  readLenient(buffer,  offset,  length,  0);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readLenient(buffer,  offset,  length,  0);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readLenient(buffer,  offset,  length,  0);	  read    =    readLenient(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
230	[BUG]  [BUGGY]  read  =  readLenient(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readLenient(buffer,  offset,  length  -  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readLenient(buffer,  offset,  length  -  1);	  read    =    readLenient(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
231	[BUG]  [BUGGY]  read  =  readLenient(buffer,  offset,  length,  fileNameLen);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readLenient(buffer,  offset,  length,  fileNameLen);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readLenient(buffer,  offset,  length,  fileNameLen);	  read    =    readLenient(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
232	[BUG]  [BUGGY]  read  =  readLenient(buffer,  offset,  length,  size);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readLenient(buffer,  offset,  length,  size);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readLenient(buffer,  offset,  length,  size);	  read    =    readLenient(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
233	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  -  1,  crc,  read);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  -  1,  crc,  read);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  -  1,  crc,  read);	  current.crc.update(buffer,    offset,    length    -    1,    crc);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
234	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read,  length  -  1,  crc);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read,  length  -  1,  crc);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read,  length  -  1,  crc);	  current.crc.update(buffer,    offset,    length    -    1,    crc);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
235	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  -  1,  crc.length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  -  1,  crc.length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  -  1,  crc.length);	  current.crc.update(buffer,    offset,    length    -    1,    crc);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
236	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  -  1,  crc.in);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  -  1,  crc.in);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  -  1,  crc.in);	  current.crc.update(buffer,    offset,    length    -    1,    crc);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
237	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  -  1,  crc,  fileNameLen);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  -  1,  crc,  fileNameLen);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  -  1,  crc,  fileNameLen);	  current.crc.update(buffer,    offset,    length    -    1,    crc);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
238	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current.entry,  read,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor(current.entry,  read,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor(current.entry,  read,  length);	  allowStoredEntriesWithDataDescriptor(current.entry,    read);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
239	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current.in,  read);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor(current.in,  read);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor(current.in,  read);	  allowStoredEntriesWithDataDescriptor(current.entry,    read);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
240	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current.entry,  read,  buffer);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor(current.entry,  read,  buffer);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor(current.entry,  read,  buffer);	  allowStoredEntriesWithDataDescriptor(current.entry,    read);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
241	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current.entry,  read,  offset);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor(current.entry,  read,  offset);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor(current.entry,  read,  offset);	  allowStoredEntriesWithDataDescriptor(current.entry,    read);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
242	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current.entry,  read,  current.in);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor(current.entry,  read,  current.in);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor(current.entry,  read,  current.in);	  allowStoredEntriesWithDataDescriptor(current.entry,    read);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
243	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current.entry,  read,  0);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor(current.entry,  read,  0);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor(current.entry,  read,  0);	  allowStoredEntriesWithDataDescriptor(current.entry,    read);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
244	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current.entry,  read,  current.length);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor(current.entry,  read,  current.length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor(current.entry,  read,  current.length);	  allowStoredEntriesWithDataDescriptor(current.entry,    read);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
245	[BUG]  [BUGGY]  read  =  ze.read(buffer,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  ze.read(buffer,  offset,  length  +  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  ze.read(buffer,  offset,  length  +  1);	  read    =    ze.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
246	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer,  offset);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer,  offset);	  read    =    read.read(buffer);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
247	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset  +  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer,  offset  +  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer,  offset  +  length);	  read    =    read.read(buffer);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
248	[BUG]  [BUGGY]  read  =  in.read(buffer,  offset);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  in.read(buffer,  offset);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  in.read(buffer,  offset);	  read    =    read.read(buffer);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
249	[BUG]  [BUGGY]  read  =  in.read(buffer);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  in.read(buffer);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  in.read(buffer);	  read    =    read.read(buffer);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
250	[BUG]  [BUGGY]  read  =  this.in.read(buffer,  offset);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  this.in.read(buffer,  offset);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  this.in.read(buffer,  offset);	  read    =    read.read(buffer);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
251	[BUG]  [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  read,  buffer.length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  read,  buffer.length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  read,  buffer.length);	  CurrentEntry    current    =    current.in.read(buffer,    offset,    length,    read);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
252	[BUG]  [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  read,  0);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  read,  0);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  read,  0);	  CurrentEntry    current    =    current.in.read(buffer,    offset,    length,    read);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
253	[BUG]  [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  read,  bytesRead);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  read,  bytesRead);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  read,  bytesRead);	  CurrentEntry    current    =    current.in.read(buffer,    offset,    length,    read);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
254	[BUG]  [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  read  -  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  read  -  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  read  -  1);	  CurrentEntry    current    =    current.in.read(buffer,    offset,    length,    read);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
255	[BUG]  [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  read  +  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  read  +  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  read  +  1);	  CurrentEntry    current    =    current.in.read(buffer,    offset,    length,    read);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
256	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length  -  1);  if(read!=  0)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(buffer,  offset,  length  -  1);  if(read!=  0)  {  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(buffer,  offset,  length  -  1);  if(read!=  0)  {	  read    =    readDeflated(buffer,    offset,    length);    if(read!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
257	[BUG]  [BUGGY]  reader  =  readDeflated(buffer,  offset,  length);  if(read  ==  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  reader  =  readDeflated(buffer,  offset,  length);  if(read  ==  0)  {  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	reader  =  readDeflated(buffer,  offset,  length);  if(read  ==  0)  {	  read    =    readDeflated(buffer,    offset,    length);    if(read!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
258	[BUG]  [BUGGY]  reader  =  readDeflated(buffer,  offset,  length);  if(read!=  0)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  reader  =  readDeflated(buffer,  offset,  length);  if(read!=  0)  {  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	reader  =  readDeflated(buffer,  offset,  length);  if(read!=  0)  {	  read    =    readDeflated(buffer,    offset,    length);    if(read!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
259	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length  +  1);  if(read!=  0)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(buffer,  offset,  length  +  1);  if(read!=  0)  {  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(buffer,  offset,  length  +  1);  if(read!=  0)  {	  read    =    readDeflated(buffer,    offset,    length);    if(read!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
260	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length);  if(read  ==  0)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(buffer,  offset,  length);  if(read  ==  0)  {  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(buffer,  offset,  length);  if(read  ==  0)  {	  read    =    readDeflated(buffer,    offset,    length);    if(read!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
261	[BUG]  [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  CFH_LEN,  read);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  CFH_LEN,  read);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  CFH_LEN,  read);	  CurrentEntry    current    =    current.in.read(buffer,    offset,    length,    CFH_LEN);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
262	[BUG]  [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length  -  1,  CFH_LEN);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length  -  1,  CFH_LEN);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  current  =  current.in.read(buffer,  offset,  length  -  1,  CFH_LEN);	  CurrentEntry    current    =    current.in.read(buffer,    offset,    length,    CFH_LEN);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
263	[BUG]  [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  LFH_LEN);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  LFH_LEN);	  CurrentEntry    current    =    current.in.read(buffer,    offset,    length,    CFH_LEN);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
264	[BUG]  [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  CFH_LEN  +  1);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  CFH_LEN  +  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  CFH_LEN  +  1);	  CurrentEntry    current    =    current.in.read(buffer,    offset,    length,    CFH_LEN);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
265	[BUG]  [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  CFH_EXP_32);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  CFH_EXP_32);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  CFH_EXP_32);	  CurrentEntry    current    =    current.in.read(buffer,    offset,    length,    CFH_LEN);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
266	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset,  length,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer,  offset,  length,  LFH_LEN);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer,  offset,  length,  LFH_LEN);	  read    =    current.in.read(buffer,    offset,    length,    CFH_LEN);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
267	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset,  length,  CFH_LEN  +  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer,  offset,  length,  CFH_LEN  +  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer,  offset,  length,  CFH_LEN  +  1);	  read    =    current.in.read(buffer,    offset,    length,    CFH_LEN);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
268	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset,  length,  CFH_EXP_32);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer,  offset,  length,  CFH_EXP_32);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer,  offset,  length,  CFH_EXP_32);	  read    =    current.in.read(buffer,    offset,    length,    CFH_LEN);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
269	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset,  length,  DFH_LEN);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer,  offset,  length,  DFH_LEN);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer,  offset,  length,  DFH_LEN);	  read    =    current.in.read(buffer,    offset,    length,    CFH_LEN);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
270	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  +  2);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  +  2);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  +  2);	  CurrentEntry    <    K,    V>    current    =    current.in.read(buffer,    offset,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
271	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  +  1,  read);  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  +  1,  read);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  +  1,  read);	  CurrentEntry    <    K,    V>    current    =    current.in.read(buffer,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
272	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  *  2  +  1);  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  *  2  +  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  *  2  +  1);	  CurrentEntry    <    K,    V>    current    =    current.in.read(buffer,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
273	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  +  3);  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  +  3);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  +  3);	  CurrentEntry    <    K,    V>    current    =    current.in.read(buffer,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
274	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length,  buffer.length  +  1);  [CE]  <identifier>  expected  [FE]              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length,  buffer.length  +  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length,  buffer.length  +  1);	  current.crc.update(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
275	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  -  1,  buffer.length);  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  -  1,  buffer.length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  -  1,  buffer.length);	  current.crc.update(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
276	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  0,  buffer.length);  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  0,  buffer.length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  0,  buffer.length);	  current.crc.update(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
277	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length,  buffer.length  -  1);  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length,  buffer.length  -  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length,  buffer.length  -  1);	  current.crc.update(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
278	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length  *  2  -  1);  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(buffer,  offset,  length  *  2  -  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(buffer,  offset,  length  *  2  -  1);	  read    =    readDeflated(buffer,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
279	[BUG]  [BUGGY]  read  =  in.read(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  in.read(buffer,  offset,  length  -  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  in.read(buffer,  offset,  length  -  1);	  read    =    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
280	[BUG]  [BUGGY]  read  =  in.read(buffer,  offset,  length,  CFH_LEN);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  in.read(buffer,  offset,  length,  CFH_LEN);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  in.read(buffer,  offset,  length,  CFH_LEN);	  read    =    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
281	[BUG]  [BUGGY]  read  =  in.read(buffer,  offset,  length,  current.in.length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  in.read(buffer,  offset,  length,  current.in.length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  in.read(buffer,  offset,  length,  current.in.length);	  read    =    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
282	[BUG]  [BUGGY]  read  =  in.read(buffer,  offset,  length,  current.in.read());  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  in.read(buffer,  offset,  length,  current.in.read());  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  in.read(buffer,  offset,  length,  current.in.read());	  read    =    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
283	[BUG]  [BUGGY]  read  =  in.read(buffer,  offset,  length,  current.in.read);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  in.read(buffer,  offset,  length,  current.in.read);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  in.read(buffer,  offset,  length,  current.in.read);	  read    =    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
284	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read,  current.in);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read,  current.in);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read,  current.in);	  current.crc.update(buffer,    offset,    length,    current.in);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
285	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length,  current.in,  read);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length,  current.in,  read);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length,  current.in,  read);	  current.crc.update(buffer,    offset,    length,    current.in);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
286	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length,  current.in,  crc);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length,  current.in,  crc);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length,  current.in,  crc);	  current.crc.update(buffer,    offset,    length,    current.in);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
287	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length,  reader,  current.in);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length,  reader,  current.in);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length,  reader,  current.in);	  current.crc.update(buffer,    offset,    length,    current.in);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
288	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length,  CFH_LEN,  read);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length,  CFH_LEN,  read);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length,  CFH_LEN,  read);	  current.crc.update(buffer,    offset,    length,    CFH_LEN);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
289	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  -  1,  CFH_LEN);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  -  1,  CFH_LEN);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  -  1,  CFH_LEN);	  current.crc.update(buffer,    offset,    length,    CFH_LEN);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
290	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length,  LFH_LEN);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length,  LFH_LEN);	  current.crc.update(buffer,    offset,    length,    CFH_LEN);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
291	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read,  CFH_LEN);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read,  CFH_LEN);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read,  CFH_LEN);	  current.crc.update(buffer,    offset,    length,    CFH_LEN);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
292	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset,  length,  bytesRead,  0);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer,  offset,  length,  bytesRead,  0);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer,  offset,  length,  bytesRead,  0);	  read    =    current.in.read(buffer,    offset,    length,    bytesRead);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
293	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset,  length,  bytesRead,  max);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer,  offset,  length,  bytesRead,  max);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer,  offset,  length,  bytesRead,  max);	  read    =    current.in.read(buffer,    offset,    length,    bytesRead);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
294	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset,  length,  bytesRead,  buffer.length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer,  offset,  length,  bytesRead,  buffer.length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer,  offset,  length,  bytesRead,  buffer.length);	  read    =    current.in.read(buffer,    offset,    length,    bytesRead);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
295	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset,  length,  bytesRead,  size);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer,  offset,  length,  bytesRead,  size);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer,  offset,  length,  bytesRead,  size);	  read    =    current.in.read(buffer,    offset,    length,    bytesRead);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
296	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  =  read;  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor  =  read;  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor  =  read;	  allowStoredEntriesWithDataDescriptor    =    allowStoredEntriesWithDataDescriptor;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
297	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  =  true;  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor  =  true;  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor  =  true;	  allowStoredEntriesWithDataDescriptor    =    allowStoredEntriesWithDataDescriptor;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
298	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  =  hasUTF8Flag;  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor  =  hasUTF8Flag;  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor  =  hasUTF8Flag;	  allowStoredEntriesWithDataDescriptor    =    allowStoredEntriesWithDataDescriptor;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
299	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  =  hasUTF8Flag?  true  :  allowStoredEntriesWithDataDescriptor;  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor  =  hasUTF8Flag?  true  :  allowStoredEntriesWithDataDescriptor;  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor  =  hasUTF8Flag?  true  :  allowStoredEntriesWithDataDescriptor;	  allowStoredEntriesWithDataDescriptor    =    allowStoredEntriesWithDataDescriptor;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
300	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  =  hasUTF8Flag?  lastStoredEntry  :  allowStoredEntriesWithDataDescriptor;  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor  =  hasUTF8Flag?  lastStoredEntry  :  allowStoredEntriesWithDataDescriptor;  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor  =  hasUTF8Flag?  lastStoredEntry  :  allowStoredEntriesWithDataDescriptor;	  allowStoredEntriesWithDataDescriptor    =    allowStoredEntriesWithDataDescriptor;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
301	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  =  hasUTF8Flag  ||  allowStoredEntriesWithDataDescriptor;  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor  =  hasUTF8Flag  ||  allowStoredEntriesWithDataDescriptor;  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor  =  hasUTF8Flag  ||  allowStoredEntriesWithDataDescriptor;	  allowStoredEntriesWithDataDescriptor    =    allowStoredEntriesWithDataDescriptor;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
302	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  =  hasUTF8Flag  &&  hasUTF8Flag;  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor  =  hasUTF8Flag  &&  hasUTF8Flag;  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor  =  hasUTF8Flag  &&  hasUTF8Flag;	  allowStoredEntriesWithDataDescriptor    =    allowStoredEntriesWithDataDescriptor;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
303	[BUG]  [BUGGY]  read  =  readLimit(current.in,  current.entry.getMethod());  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readLimit(current.in,  current.entry.getMethod());  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readLimit(current.in,  current.entry.getMethod());	  read    =    readLimit(current.entry.getMethod());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
304	[BUG]  [BUGGY]  read  =  readLimit(current.entry.getMethod(),  current.in);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readLimit(current.entry.getMethod(),  current.in);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readLimit(current.entry.getMethod(),  current.in);	  read    =    readLimit(current.entry.getMethod());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
305	[BUG]  [BUGGY]  read  =  readLimit(current.in.getMethod());  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readLimit(current.in.getMethod());  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readLimit(current.in.getMethod());	  read    =    readLimit(current.entry.getMethod());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
306	[BUG]  [BUGGY]  read  =  readLimit(current.entry.getMethod(),  current.entry.getEnd());  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readLimit(current.entry.getMethod(),  current.entry.getEnd());  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readLimit(current.entry.getMethod(),  current.entry.getEnd());	  read    =    readLimit(current.entry.getMethod());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
307	[BUG]  [BUGGY]  read  =  readLimit(current.in.read(buffer,  offset,  length));  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readLimit(current.in.read(buffer,  offset,  length));  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readLimit(current.in.read(buffer,  offset,  length));	  read    =    readLimit(current.entry.getMethod());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
308	[BUG]  [BUGGY]  read  =  readLimit(current.entry.getMethod(),  current.entry.getCharset());  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readLimit(current.entry.getMethod(),  current.entry.getCharset());  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readLimit(current.entry.getMethod(),  current.entry.getCharset());	  read    =    readLimit(current.entry.getMethod());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
309	[BUG]  [BUGGY]  reader  =  readRead(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  reader  =  readRead(buffer,  offset,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	reader  =  readRead(buffer,  offset,  length);	  read    =    readRead(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
310	[BUG]  [BUGGY]  reader  =  readDeflated(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  reader  =  readDeflated(buffer,  offset,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	reader  =  readDeflated(buffer,  offset,  length);	  read    =    readRead(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
311	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  off,  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(buffer,  off,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(buffer,  off,  length);	  read    =    readRead(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
312	[BUG]  [BUGGY]  read  =  readDecoded(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDecoded(buffer,  offset,  length  -  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDecoded(buffer,  offset,  length  -  1);	  read    =    readDecoded(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
313	[BUG]  [BUGGY]  read  =  readDecoded(buffer,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDecoded(buffer,  offset,  length  +  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDecoded(buffer,  offset,  length  +  1);	  read    =    readDecoded(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
314	[BUG]  [BUGGY]  read  =  readDecoded(buffer,  offset,  length,  current.in);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDecoded(buffer,  offset,  length,  current.in);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDecoded(buffer,  offset,  length,  current.in);	  read    =    readDecoded(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
315	[BUG]  [BUGGY]  read  =  readDecoded(buffer,  offset,  length,  CFH_LEN);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDecoded(buffer,  offset,  length,  CFH_LEN);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDecoded(buffer,  offset,  length,  CFH_LEN);	  read    =    readDecoded(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
316	[BUG]  [BUGGY]  read  =  readDecoded(buffer,  offset,  length,  buffer.length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDecoded(buffer,  offset,  length,  buffer.length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDecoded(buffer,  offset,  length,  buffer.length);	  read    =    readDecoded(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
317	[BUG]  [BUGGY]  read  =  readDecoded(buffer,  offset,  length,  0);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDecoded(buffer,  offset,  length,  0);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDecoded(buffer,  offset,  length,  0);	  read    =    readDecoded(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
318	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  /  2  -  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  /  2  -  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  /  2  -  1);	  current.crc.update(buffer,    offset,    length    *    2    -    1);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
319	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  *  2);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  *  2);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  *  2);	  current.crc.update(buffer,    offset,    length    *    2    -    1);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
320	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  *  2  +  1);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  *  2  +  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  *  2  +  1);	  current.crc.update(buffer,    offset,    length    *    2    -    1);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
321	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read  *  2  -  1);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read  *  2  -  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read  *  2  -  1);	  current.crc.update(buffer,    offset,    length    *    2    -    1);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
322	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read,  length  *  2  -  1);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read,  length  *  2  -  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read,  length  *  2  -  1);	  current.crc.update(buffer,    offset,    length    *    2    -    1);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
323	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read  +  1);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read  +  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read  +  1);	  current.crc.update(buffer,    offset,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
324	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  +  1,  read);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  +  1,  read);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  +  1,  read);	  current.crc.update(buffer,    offset,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
325	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  +  1,  crc);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  +  1,  crc);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  +  1,  crc);	  current.crc.update(buffer,    offset,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
326	[BUG]  [BUGGY]  read  =  current.crc.update(buffer,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.crc.update(buffer,  offset,  length  +  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.crc.update(buffer,  offset,  length  +  1);	  current.crc.update(buffer,    offset,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
327	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  -  read,  buffer.length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  -  read,  buffer.length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  -  read,  buffer.length);	  CurrentEntry    <    K,    V>    current    =    current.in.read(buffer,    offset,    length    -    read);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
328	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  read,  length  -  read);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  read,  length  -  read);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  read,  length  -  read);	  CurrentEntry    <    K,    V>    current    =    current.in.read(buffer,    offset,    length    -    read);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
329	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  -  read,  size);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  -  read,  size);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  -  read,  size);	  CurrentEntry    <    K,    V>    current    =    current.in.read(buffer,    offset,    length    -    read);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
330	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  -  read,  fileNameLen);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  -  read,  fileNameLen);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  -  read,  fileNameLen);	  CurrentEntry    <    K,    V>    current    =    current.in.read(buffer,    offset,    length    -    read);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
331	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.entry.read(buffer,  offset,  read);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.entry.read(buffer,  offset,  read);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  <  K,  V>  current  =  current.entry.read(buffer,  offset,  read);	  CurrentEntry    <    K,    V>    current    =    current.in.read(buffer,    offset,    read);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
332	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  off,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  off,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  off,  length);	  CurrentEntry    <    K,    V>    current    =    current.in.read(buffer,    offset,    read);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
333	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  read,  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  read,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  read,  length);	  CurrentEntry    <    K,    V>    current    =    current.in.read(buffer,    offset,    read);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
334	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length,  buffer.length  -  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length,  buffer.length  -  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length,  buffer.length  -  1);	  CurrentEntry    <    K,    V>    current    =    current.in.read(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
335	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  read,  buffer.length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  read,  buffer.length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  read,  buffer.length);	  CurrentEntry    <    K,    V>    current    =    current.in.read(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
336	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length,  buffer.length  +  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length,  buffer.length  +  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length,  buffer.length  +  1);	  CurrentEntry    <    K,    V>    current    =    current.in.read(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
337	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  -  1,  buffer.length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  -  1,  buffer.length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  -  1,  buffer.length);	  CurrentEntry    <    K,    V>    current    =    current.in.read(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
338	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length,  fileNameLen);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length,  fileNameLen);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length,  fileNameLen);	  CurrentEntry    <    K,    V>    current    =    current.in.read(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
339	[BUG]  [BUGGY]  read  =  readDeflated(current.in,  buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(current.in,  buffer,  offset,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(current.in,  buffer,  offset,  length);	  if(read!=    0)    {    read    =    readDeflated(buffer,    offset,    length);    }    else    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current.entry    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
340	[BUG]  [BUGGY]  read  =  readDeflated(current.entry,  offset,  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(current.entry,  offset,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(current.entry,  offset,  length);	  if(read!=    0)    {    read    =    readDeflated(buffer,    offset,    length);    }    else    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current.entry    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
341	[BUG]  [BUGGY]  ReadBuffer  read  =  readDeflated(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  ReadBuffer  read  =  readDeflated(buffer,  offset,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	ReadBuffer  read  =  readDeflated(buffer,  offset,  length);	  if(read!=    0)    {    read    =    readDeflated(buffer,    offset,    length);    }    else    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current.entry    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
342	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  -  read,  buffer,  lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  -  read,  buffer,  lastStoredEntry);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  -  read,  buffer,  lastStoredEntry);	  current.crc.update(buffer,    offset,    length    -    read,    lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
343	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  -  1,  lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  -  1,  lastStoredEntry);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  -  1,  lastStoredEntry);	  current.crc.update(buffer,    offset,    length    -    read,    lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
344	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read  -  lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read  -  lastStoredEntry);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read  -  lastStoredEntry);	  current.crc.update(buffer,    offset,    length    -    read,    lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
345	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  -  read,  lastStoredEntry,  bytesRead);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  -  read,  lastStoredEntry,  bytesRead);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  -  read,  lastStoredEntry,  bytesRead);	  current.crc.update(buffer,    offset,    length    -    read,    lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
346	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length,  read  -  1);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length,  read  -  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length,  read  -  1);	  current.crc.update(buffer,    offset,    read,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
347	[BUG]  [BUGGY]  read  =  current.in.read();  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read();  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read();	  read    =    read.read();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
348	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  off,  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer,  off,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer,  off,  length);	  read    =    read.read();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
349	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.entry.read(buffer,  offset,  length,  read);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.entry.read(buffer,  offset,  length,  read);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  <  K,  V>  current  =  current.entry.read(buffer,  offset,  length,  read);	  CurrentEntry    <    K,    V>    current    =    current.entry.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
350	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.entry.read(buffer,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.entry.read(buffer,  offset,  length  +  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  <  K,  V>  current  =  current.entry.read(buffer,  offset,  length  +  1);	  CurrentEntry    <    K,    V>    current    =    current.entry.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
351	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.entry.read(buffer,  offset,  length,  CFH_LEN);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.entry.read(buffer,  offset,  length,  CFH_LEN);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  <  K,  V>  current  =  current.entry.read(buffer,  offset,  length,  CFH_LEN);	  CurrentEntry    <    K,    V>    current    =    current.entry.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
352	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.entry.read(buffer,  offset,  length,  buffer.length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.entry.read(buffer,  offset,  length,  buffer.length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  <  K,  V>  current  =  current.entry.read(buffer,  offset,  length,  buffer.length);	  CurrentEntry    <    K,    V>    current    =    current.entry.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
353	[BUG]  [BUGGY]  reader.write(buffer,  offset,  length);  if(read  ==  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  reader.write(buffer,  offset,  length);  if(read  ==  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	reader.write(buffer,  offset,  length);  if(read  ==  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }	  read    =    in.read(buffer,    offset,    length);    if(read    ==    0)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
354	[BUG]  [BUGGY]  if(length  ==  0)  {  read  =  in.read(buffer,  offset,  length);  if(read  ==  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  if(length  ==  0)  {  read  =  in.read(buffer,  offset,  length);  if(read  ==  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	if(length  ==  0)  {  read  =  in.read(buffer,  offset,  length);  if(read  ==  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }	  read    =    in.read(buffer,    offset,    length);    if(read    ==    0)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
355	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  -  2,  read);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  -  2,  read);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  -  2,  read);	  CurrentEntry    <    K,    V>    current    =    current.in.read(buffer,    offset,    length    -    2);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
356	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  -  4);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  -  4);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  -  4);	  CurrentEntry    <    K,    V>    current    =    current.in.read(buffer,    offset,    length    -    2);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
357	[BUG]  [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  read  -  1);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  read  -  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  current  =  current.in.read(buffer,  offset,  read  -  1);	  CurrentEntry    current    =    current.in.read(buffer,    offset,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
358	[BUG]  [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length  *  2  -  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length  *  2  -  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  current  =  current.in.read(buffer,  offset,  length  *  2  -  1);	  CurrentEntry    current    =    current.in.read(buffer,    offset,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
359	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset,  length  -  1  +  1);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer,  offset,  length  -  1  +  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer,  offset,  length  -  1  +  1);	  read    =    current.in.read(buffer,    offset,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
360	[BUG]  [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  1);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  1);	  CurrentEntry    current    =    current.in.read(buffer,    offset,    length,    0);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
361	[BUG]  [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  2);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  2);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  2);	  CurrentEntry    current    =    current.in.read(buffer,    offset,    length,    0);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
362	[BUG]  [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  3);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  3);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  3);	  CurrentEntry    current    =    current.in.read(buffer,    offset,    length,    0);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
363	[BUG]  [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length  -  1,  0);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length  -  1,  0);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  current  =  current.in.read(buffer,  offset,  length  -  1,  0);	  CurrentEntry    current    =    current.in.read(buffer,    offset,    length,    0);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
364	[BUG]  [BUGGY]  read  =  readDeflated(current.in,  offset,  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(current.in,  offset,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(current.in,  offset,  length);	  read    =    readDeflated(buffer,    offset,    length,    current.in);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
365	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  current.in  +  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  current.in  +  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(buffer,  offset,  length,  current.in  +  1);	  read    =    readDeflated(buffer,    offset,    length,    current.in);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
366	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read  -  1,  crc);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read  -  1,  crc);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read  -  1,  crc);	  current.crc.update(buffer,    offset,    length    -    1,    crc);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
367	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  -  1,  crc,  inputStream);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  -  1,  crc,  inputStream);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  -  1,  crc,  inputStream);	  current.crc.update(buffer,    offset,    length    -    1,    crc);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
368	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read  -  1,  length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read  -  1,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read  -  1,  length);	  current.crc.update(buffer,    offset,    length    -    1,    read);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
369	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  -  1,  read,  lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  -  1,  read,  lastStoredEntry);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  -  1,  read,  lastStoredEntry);	  current.crc.update(buffer,    offset,    length    -    1,    read);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
370	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  -  1,  read,  bytesRead);  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  -  1,  read,  bytesRead);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  -  1,  read,  bytesRead);	  current.crc.update(buffer,    offset,    length    -    1,    read);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
371	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  -  1,  read,  inputStream);  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  -  1,  read,  inputStream);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  -  1,  read,  inputStream);	  current.crc.update(buffer,    offset,    length    -    1,    read);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
372	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read  *  -  1);  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read  *  -  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read  *  -  1);	  current.crc.update(buffer,    offset,    read    -    1);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
373	[BUG]  [BUGGY]  currToken.update(buffer,  offset,  read  -  1);  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  currToken.update(buffer,  offset,  read  -  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	currToken.update(buffer,  offset,  read  -  1);	  current.crc.update(buffer,    offset,    read    -    1);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
374	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read,  length  *  1);  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read,  length  *  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read,  length  *  1);	  current.crc.update(buffer,    offset,    read,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
375	[BUG]  [BUGGY]  allowStoredEntriesWithFieldDescriptor(current.entry.getMethod(),  current.entry.getMethod()));  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithFieldDescriptor(current.entry.getMethod(),  current.entry.getMethod()));  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithFieldDescriptor(current.entry.getMethod(),  current.entry.getMethod()));	  allowStoredEntriesWithDataDescriptor(current.entry.getMethod(),    current.entry.getMethod()));    	non-compiled	[CE]  <identifier>  expected	47	None	replace
376	[BUG]  [BUGGY]  allowStoredEntriesWithDescriptor(current.entry.getMethod(),  current.entry.getMethod()));  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDescriptor(current.entry.getMethod(),  current.entry.getMethod()));  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDescriptor(current.entry.getMethod(),  current.entry.getMethod()));	  allowStoredEntriesWithDataDescriptor(current.entry.getMethod(),    current.entry.getMethod()));    	non-compiled	[CE]  <identifier>  expected	47	None	replace
377	[BUG]  [BUGGY]  enableStoredEntriesWithDataDescriptor(current.entry.getMethod(),  current.entry.getMethod()));  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  enableStoredEntriesWithDataDescriptor(current.entry.getMethod(),  current.entry.getMethod()));  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	enableStoredEntriesWithDataDescriptor(current.entry.getMethod(),  current.entry.getMethod()));	  allowStoredEntriesWithDataDescriptor(current.entry.getMethod(),    current.entry.getMethod()));    	non-compiled	[CE]  <identifier>  expected	47	None	replace
378	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read,  length,  current.in.read);  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read,  length,  current.in.read);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read,  length,  current.in.read);	  current.crc.update(buffer,    offset,    read,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
379	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length  -  3);  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(buffer,  offset,  length  -  3);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(buffer,  offset,  length  -  3);	  read    =    readDeflated(buffer,    offset,    length    -    2);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
380	[BUG]  [BUGGY]  lastStoredEntry  =  entryEncoding.read(buffer,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  lastStoredEntry  =  entryEncoding.read(buffer,  offset,  length  -  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	lastStoredEntry  =  entryEncoding.read(buffer,  offset,  length  -  1);	  lastStoredEntry    =    entryEncoding.read(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
381	[BUG]  [BUGGY]  lastStoredEntry  =  entryEncoding.read(buffer,  offset,  length  +  1);  [CE]  <identifier>  expected  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  lastStoredEntry  =  entryEncoding.read(buffer,  offset,  length  +  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	lastStoredEntry  =  entryEncoding.read(buffer,  offset,  length  +  1);	  lastStoredEntry    =    entryEncoding.read(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
382	[BUG]  [BUGGY]  lastStoredEntry  =  entryEncoding.read(buffer,  offset,  length,  ze);  [CE]  <identifier>  expected  [FE]                            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  lastStoredEntry  =  entryEncoding.read(buffer,  offset,  length,  ze);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	lastStoredEntry  =  entryEncoding.read(buffer,  offset,  length,  ze);	  lastStoredEntry    =    entryEncoding.read(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
383	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read  -  buffer.length);  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read  -  buffer.length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read  -  buffer.length);	  current.crc.update(buffer,    offset,    length    -    read,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
384	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  -  read,  buffer.length  -  1);  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  -  read,  buffer.length  -  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  -  read,  buffer.length  -  1);	  current.crc.update(buffer,    offset,    length    -    read,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
385	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  -  read,  buffer.length  -  read);  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  -  read,  buffer.length  -  read);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  -  read,  buffer.length  -  read);	  current.crc.update(buffer,    offset,    length    -    read,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
386	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read  -  length,  buffer.length);  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read  -  length,  buffer.length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read  -  length,  buffer.length);	  current.crc.update(buffer,    offset,    length    -    read,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
387	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read  +  length,  buffer.length);  [CE]  <identifier>  expected  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read  +  length,  buffer.length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read  +  length,  buffer.length);	  current.crc.update(buffer,    offset,    length    -    read,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
388	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor?  true  :  false;  [CE]  <identifier>  expected  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor?  true  :  false;  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor?  true  :  false;	  allowStoredEntriesWithDataDescriptor    =    allowStoredEntriesWithDataDescriptor?    true    :    false;    	non-compiled	[CE]  <identifier>  expected	51	None	replace
389	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  =  hasUTF8Flag  ||  allowStoredEntriesWithDataDescriptor?  true  :  false;  [CE]  <identifier>  expected  [FE]                            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor  =  hasUTF8Flag  ||  allowStoredEntriesWithDataDescriptor?  true  :  false;  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor  =  hasUTF8Flag  ||  allowStoredEntriesWithDataDescriptor?  true  :  false;	  allowStoredEntriesWithDataDescriptor    =    allowStoredEntriesWithDataDescriptor?    true    :    false;    	non-compiled	[CE]  <identifier>  expected	51	None	replace
390	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  =!allowStoredEntriesWithDataDescriptor?  true  :  false;  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor  =!allowStoredEntriesWithDataDescriptor?  true  :  false;  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor  =!allowStoredEntriesWithDataDescriptor?  true  :  false;	  allowStoredEntriesWithDataDescriptor    =    allowStoredEntriesWithDataDescriptor?    true    :    false;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
391	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  =  hasUTF8Flag?  hasUTF8Flag  :  allowStoredEntriesWithDataDescriptor;  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor  =  hasUTF8Flag?  hasUTF8Flag  :  allowStoredEntriesWithDataDescriptor;  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor  =  hasUTF8Flag?  hasUTF8Flag  :  allowStoredEntriesWithDataDescriptor;	  allowStoredEntriesWithDataDescriptor    =    allowStoredEntriesWithDataDescriptor;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
392	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  =  hasUTF8Flag  ||  hasUTF8Flag;  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor  =  hasUTF8Flag  ||  hasUTF8Flag;  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor  =  hasUTF8Flag  ||  hasUTF8Flag;	  allowStoredEntriesWithDataDescriptor    =    allowStoredEntriesWithDataDescriptor;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
393	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  =  hasUTF8Flag?  read  :  allowStoredEntriesWithDataDescriptor;  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor  =  hasUTF8Flag?  read  :  allowStoredEntriesWithDataDescriptor;  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor  =  hasUTF8Flag?  read  :  allowStoredEntriesWithDataDescriptor;	  allowStoredEntriesWithDataDescriptor    =    allowStoredEntriesWithDataDescriptor;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
394	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read,  length  -  read  +  1);  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read,  length  -  read  +  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read,  length  -  read  +  1);	  current.crc.update(buffer,    offset,    read,    length    -    read);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
395	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read,  length  *  read);  [CE]  <identifier>  expected  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read,  length  *  read);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read,  length  *  read);	  current.crc.update(buffer,    offset,    read,    length    -    read);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
396	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read,  length  -  read));  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read,  length  -  read));  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read,  length  -  read));	  current.crc.update(buffer,    offset,    read,    length    -    read);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
397	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  *  1);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  *  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  *  1);	  CurrentEntry    <    K,    V>    current    =    current.in.read(buffer,    offset,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
398	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  *  2);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  *  2);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  *  2);	  CurrentEntry    <    K,    V>    current    =    current.in.read(buffer,    offset,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
399	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset,  length);  if(read  >  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer,  offset,  length);  if(read  >  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer,  offset,  length);  if(read  >  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }	  read    =    current.in.read(buffer,    offset,    length);    if(read    ==    0)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
400	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  -  1  +  1);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  -  1  +  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  -  1  +  1);	  CurrentEntry    <    K,    V>    current    =    current.in.read(buffer,    offset,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
401	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length,  0);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length,  0);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length,  0);	  CurrentEntry    <    K,    V>    current    =    current.in.read(buffer,    offset,    length,    read);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
402	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length,  read  +  1);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length,  read  +  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length,  read  +  1);	  CurrentEntry    <    K,    V>    current    =    current.in.read(buffer,    offset,    length,    read);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
403	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  LBH_LEN);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  LBH_LEN);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(buffer,  offset,  length,  LBH_LEN);	  read    =    readDeflated(buffer,    offset,    length,    CFH_LEN);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
404	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  current.in.read);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  current.in.read);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(buffer,  offset,  length,  current.in.read);	  read    =    readDeflated(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
405	[BUG]  [BUGGY]  read  =  readLenient(buffer,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readLenient(buffer,  offset,  length  +  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readLenient(buffer,  offset,  length  +  1);	  read    =    readLenient(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
406	[BUG]  [BUGGY]  read  =  readDelimiter(current.in,  buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDelimiter(current.in,  buffer,  offset,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDelimiter(current.in,  buffer,  offset,  length);	  read    =    readDelimiter(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
407	[BUG]  [BUGGY]  if(read  ==  0)  {  current.crc.update(buffer,  offset,  read);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  if(read  ==  0)  {  current.crc.update(buffer,  offset,  read);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	if(read  ==  0)  {  current.crc.update(buffer,  offset,  read);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),	  if(read!=    0)    {    current.crc.update(buffer,    offset,    read);    }    else    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
408	[BUG]  [BUGGY]  if(read!=  0)  {  current.crc.update(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  if(read!=  0)  {  current.crc.update(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	if(read!=  0)  {  current.crc.update(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),	  if(read!=    0)    {    current.crc.update(buffer,    offset,    read);    }    else    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
409	[BUG]  [BUGGY]  if(read!=  0)  {  current.crc.update(buffer,  offset,  read);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMetho  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  if(read!=  0)  {  current.crc.update(buffer,  offset,  read);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMetho  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	if(read!=  0)  {  current.crc.update(buffer,  offset,  read);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMetho	  if(read!=    0)    {    current.crc.update(buffer,    offset,    read);    }    else    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
410	[BUG]  [BUGGY]  if(read!=  0)  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  if(read!=  0)  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	if(read!=  0)  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),	  if(read!=    0)    {    current.crc.update(buffer,    offset,    read);    }    else    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
411	[BUG]  [BUGGY]  if(read!=  0)  {  current.crc.update(buffer,  offset,  read);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  if(read!=  0)  {  current.crc.update(buffer,  offset,  read);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	if(read!=  0)  {  current.crc.update(buffer,  offset,  read);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod	  if(read!=    0)    {    current.crc.update(buffer,    offset,    read);    }    else    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
412	[BUG]  [BUGGY]  read  =  readLoop(buffer,  offset,  length  -  2);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readLoop(buffer,  offset,  length  -  2);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readLoop(buffer,  offset,  length  -  2);	  read    =    readLoop(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
413	[BUG]  [BUGGY]  read  =  readLoop(buffer,  offset,  length  +  2);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readLoop(buffer,  offset,  length  +  2);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readLoop(buffer,  offset,  length  +  2);	  read    =    readLoop(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
414	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.entry.read(buffer,  offset,  length  -  2);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.entry.read(buffer,  offset,  length  -  2);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  <  K,  V>  current  =  current.entry.read(buffer,  offset,  length  -  2);	  CurrentEntry    <    K,    V>    current    =    current.entry.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
415	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.entry.read(buffer,  offset,  length  -  read);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.entry.read(buffer,  offset,  length  -  read);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  <  K,  V>  current  =  current.entry.read(buffer,  offset,  length  -  read);	  CurrentEntry    <    K,    V>    current    =    current.entry.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
416	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  -  3);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  -  3);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  -  3);	  CurrentEntry    <    K,    V>    current    =    current.in.read(buffer,    offset,    length    -    2);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
417	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read  -  bytesRead,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read  -  bytesRead,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read  -  bytesRead,  length);	  current.crc.update(buffer,    offset,    length    -    read,    bytesRead);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
418	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read  -  bytesRead);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read  -  bytesRead);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read  -  bytesRead);	  current.crc.update(buffer,    offset,    length    -    read,    bytesRead);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
419	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  -  read,  0,  bytesRead);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  -  read,  0,  bytesRead);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  -  read,  0,  bytesRead);	  current.crc.update(buffer,    offset,    length    -    read,    bytesRead);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
420	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  -  read,  max);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  -  read,  max);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  -  read,  max);	  current.crc.update(buffer,    offset,    length    -    read,    bytesRead);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
421	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset,  length);  if(read  >=  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry.getMet  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer,  offset,  length);  if(read  >=  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry.getMet  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer,  offset,  length);  if(read  >=  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry.getMet	  read    =    current.in.read(buffer,    offset,    length);    if(read    ==    0)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current.entry.getMet    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
422	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset,  length  +  1);  if(read  >=  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry.getMet  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer,  offset,  length  +  1);  if(read  >=  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry.getMet  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer,  offset,  length  +  1);  if(read  >=  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry.getMet	  read    =    current.in.read(buffer,    offset,    length);    if(read    ==    0)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current.entry.getMet    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
423	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset,  length  -  1);  if(read  ==  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer,  offset,  length  -  1);  if(read  ==  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer,  offset,  length  -  1);  if(read  ==  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry	  read    =    current.in.read(buffer,    offset,    length);    if(read    ==    0)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current.entry.getMet    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
424	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset,  length  -  1);  if(read  >=  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry.getMet  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer,  offset,  length  -  1);  if(read  >=  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry.getMet  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer,  offset,  length  -  1);  if(read  >=  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry.getMet	  read    =    current.in.read(buffer,    offset,    length);    if(read    ==    0)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current.entry.getMet    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
425	[BUG]  [BUGGY]  lastStoredEntry  =  entryEncoding.decode(buffer,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  lastStoredEntry  =  entryEncoding.decode(buffer,  offset,  length  +  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	lastStoredEntry  =  entryEncoding.decode(buffer,  offset,  length  +  1);	  lastStoredEntry    =    entryEncoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
426	[BUG]  [BUGGY]  lastStoredEntry  =  entryEncoding.decode(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  lastStoredEntry  =  entryEncoding.decode(buffer,  offset,  length  -  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	lastStoredEntry  =  entryEncoding.decode(buffer,  offset,  length  -  1);	  lastStoredEntry    =    entryEncoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
427	[BUG]  [BUGGY]  lastStoredEntry  =  ZipEncoding.decode(current.entry,  buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  lastStoredEntry  =  ZipEncoding.decode(current.entry,  buffer,  offset,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	lastStoredEntry  =  ZipEncoding.decode(current.entry,  buffer,  offset,  length);	  lastStoredEntry    =    entryEncoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
428	[BUG]  [BUGGY]  lastStoredEntry  =  ZipArchiveEntry.decode(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  lastStoredEntry  =  ZipArchiveEntry.decode(buffer,  offset,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	lastStoredEntry  =  ZipArchiveEntry.decode(buffer,  offset,  length);	  lastStoredEntry    =    entryEncoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
429	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  *  4  -  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  *  4  -  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  *  4  -  1);	  current.crc.update(buffer,    offset,    length    *    2    -    1);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
430	[BUG]  [BUGGY]  read  =  readDelimiter(current.entry.getMethod(),  current.entry);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDelimiter(current.entry.getMethod(),  current.entry);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDelimiter(current.entry.getMethod(),  current.entry);	  read    =    readDelimiter(current.entry.getMethod());    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
431	[BUG]  [BUGGY]  read  =  readDelimiter(current.entry.getMethod(),  current.entry.getCharset());  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDelimiter(current.entry.getMethod(),  current.entry.getCharset());  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDelimiter(current.entry.getMethod(),  current.entry.getCharset());	  read    =    readDelimiter(current.entry.getMethod());    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
432	[BUG]  [BUGGY]  read  =  readDelimiter(current.entry.getMethod(),  current.entry.getValue());  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDelimiter(current.entry.getMethod(),  current.entry.getValue());  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDelimiter(current.entry.getMethod(),  current.entry.getValue());	  read    =    readDelimiter(current.entry.getMethod());    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
433	[BUG]  [BUGGY]  read  =  readDelimiter(current.entry.getMethod(),  current.entry.getEnd());  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDelimiter(current.entry.getMethod(),  current.entry.getEnd());  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDelimiter(current.entry.getMethod(),  current.entry.getEnd());	  read    =    readDelimiter(current.entry.getMethod());    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
434	[BUG]  [BUGGY]  read  =  readDelimiter(current.entry.getMethod(),  current.entry.getEntryCount());  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDelimiter(current.entry.getMethod(),  current.entry.getEntryCount());  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDelimiter(current.entry.getMethod(),  current.entry.getEntryCount());	  read    =    readDelimiter(current.entry.getMethod());    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
435	[BUG]  [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length  -  read  +  1);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length  -  read  +  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  current  =  current.in.read(buffer,  offset,  length  -  read  +  1);	  CurrentEntry    current    =    current.in.read(buffer,    offset,    length    -    read);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
436	[BUG]  [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length  -  read,  lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length  -  read,  lastStoredEntry);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  current  =  current.in.read(buffer,  offset,  length  -  read,  lastStoredEntry);	  CurrentEntry    current    =    current.in.read(buffer,    offset,    length    -    read);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
437	[BUG]  [BUGGY]  read  =  readDecoded(buffer,  offset,  length  -  2);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDecoded(buffer,  offset,  length  -  2);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDecoded(buffer,  offset,  length  -  2);	  read    =    readDecoded(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
438	[BUG]  [BUGGY]  read  =  readDecoded(buffer,  offset,  length  +  2);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDecoded(buffer,  offset,  length  +  2);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDecoded(buffer,  offset,  length  +  2);	  read    =    readDecoded(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
439	[BUG]  [BUGGY]  read  =  in.read(buffer,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  in.read(buffer,  offset,  length  +  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  in.read(buffer,  offset,  length  +  1);	  read    =    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
440	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length  -  1);  if(read  ==  0)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(buffer,  offset,  length  -  1);  if(read  ==  0)  {  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(buffer,  offset,  length  -  1);  if(read  ==  0)  {	  read    =    readDeflated(buffer,    offset,    length);    if(read!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
441	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read,  buffer.length  -  2);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read,  buffer.length  -  2);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read,  buffer.length  -  2);	  current.crc.update(buffer,    offset,    read,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
442	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset,  length  +  1);  if(read  >=  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer,  offset,  length  +  1);  if(read  >=  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer,  offset,  length  +  1);  if(read  >=  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }	  read    =    current.in.read(buffer,    offset,    length);    if(read    >=    0)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
443	[BUG]  [BUGGY]  if(read!=  0)  {  current.crc.update(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.ent  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  if(read!=  0)  {  current.crc.update(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.ent  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	if(read!=  0)  {  current.crc.update(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.ent	  if(read!=    0)    {    current.crc.update(buffer,    offset,    read);    }    else    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current.ent    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
444	[BUG]  [BUGGY]  if(read!=  0)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.ent  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  if(read!=  0)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.ent  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	if(read!=  0)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.ent	  if(read!=    0)    {    current.crc.update(buffer,    offset,    read);    }    else    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current.ent    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
445	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current.entry,  read,  ze);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor(current.entry,  read,  ze);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor(current.entry,  read,  ze);	  allowStoredEntriesWithDataDescriptor(current.entry,    read);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
446	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current.entry,  read,  lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor(current.entry,  read,  lastStoredEntry);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor(current.entry,  read,  lastStoredEntry);	  allowStoredEntriesWithDataDescriptor(current.entry,    read);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
447	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current.entry,  read,  hasUTF8Flag);  [CE]  <identifier>  expected  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor(current.entry,  read,  hasUTF8Flag);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor(current.entry,  read,  hasUTF8Flag);	  allowStoredEntriesWithDataDescriptor(current.entry,    read);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
448	[BUG]  [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  read  +  length);  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  read  +  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  current  =  current.in.read(buffer,  offset,  read  +  length);	  CurrentEntry    current    =    current.in.read(buffer,    offset,    read);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
449	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  -  read,  fileNameLen);  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  -  read,  fileNameLen);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  -  read,  fileNameLen);	  current.crc.update(buffer,    offset,    length    -    read,    lastStoredEntry);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
450	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  -  read,  end);  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  -  read,  end);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  -  read,  end);	  current.crc.update(buffer,    offset,    length    -    read,    lastStoredEntry);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
451	[BUG]  [BUGGY]  read  =  ze.in.read(buffer,  offset,  length  +  1);  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  ze.in.read(buffer,  offset,  length  +  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  ze.in.read(buffer,  offset,  length  +  1);	  read    =    ze.in.read(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	89	None	replace
452	[BUG]  [BUGGY]  read  =  ze.in.read(buffer,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  ze.in.read(buffer,  offset,  length  -  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  ze.in.read(buffer,  offset,  length  -  1);	  read    =    ze.in.read(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	89	None	replace
453	[BUG]  [BUGGY]  read  =  readLimit(current.entry.getMethod(),  current.entry);  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readLimit(current.entry.getMethod(),  current.entry);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readLimit(current.entry.getMethod(),  current.entry);	  read    =    readLimit(current.entry.getMethod());    	non-compiled	[CE]  <identifier>  expected	75	None	replace
454	[BUG]  [BUGGY]  read  =  readLimit(current.entry.getMethod(),  current.entry.getValue());  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readLimit(current.entry.getMethod(),  current.entry.getValue());  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readLimit(current.entry.getMethod(),  current.entry.getValue());	  read    =    readLimit(current.entry.getMethod());    	non-compiled	[CE]  <identifier>  expected	75	None	replace
455	[BUG]  [BUGGY]  read  =  readLimit(current.entry.getMethod(),  current.entry.getChars());  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readLimit(current.entry.getMethod(),  current.entry.getChars());  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readLimit(current.entry.getMethod(),  current.entry.getChars());	  read    =    readLimit(current.entry.getMethod());    	non-compiled	[CE]  <identifier>  expected	75	None	replace
456	[BUG]  [BUGGY]  read  =  readLimit(current.entry.getMethod(),  current.entry.getEntryCount());  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readLimit(current.entry.getMethod(),  current.entry.getEntryCount());  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readLimit(current.entry.getMethod(),  current.entry.getEntryCount());	  read    =    readLimit(current.entry.getMethod());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
457	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read  -  start,  current.in);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read  -  start,  current.in);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read  -  start,  current.in);	  current.crc.update(buffer,    offset,    length    -    read,    current.in);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
458	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  -  read,  current.in,  read);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  -  read,  current.in,  read);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  -  read,  current.in,  read);	  current.crc.update(buffer,    offset,    length    -    read,    current.in);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
459	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read  -  buffer,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read  -  buffer,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read  -  buffer,  length);	  current.crc.update(buffer,    offset,    length    -    read,    current.in);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
460	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read  -  offset,  current.in);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read  -  offset,  current.in);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read  -  offset,  current.in);	  current.crc.update(buffer,    offset,    length    -    read,    current.in);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
461	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read  -  read,  current.in);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read  -  read,  current.in);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read  -  read,  current.in);	  current.crc.update(buffer,    offset,    length    -    read,    current.in);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
462	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  =  hasUseUnicodeExtraFields  ||  current.in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor  =  hasUseUnicodeExtraFields  ||  current.in.read(buffer,  offset,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor  =  hasUseUnicodeExtraFields  ||  current.in.read(buffer,  offset,  length);	  allowStoredEntriesWithDataDescriptor    =    allowStoredEntriesWithDataDescriptor    ||    current.in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
463	[BUG]  [BUGGY]  read  =  current.in.read(buffer);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer);	  read    =    read.read(buffer);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
464	[BUG]  [BUGGY]  read  =  read.read(buffer,  offset);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  read.read(buffer,  offset);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  read.read(buffer,  offset);	  read    =    read.read(buffer);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
465	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length  /  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(buffer,  offset,  length  /  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(buffer,  offset,  length  /  1);	  read    =    readDeflated(buffer,    offset,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
466	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length  *  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(buffer,  offset,  length  *  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(buffer,  offset,  length  *  1);	  read    =    readDeflated(buffer,    offset,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
467	[BUG]  [BUGGY]  if(read!=  0)  {  current.crc.update(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  if(read!=  0)  {  current.crc.update(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	if(read!=  0)  {  current.crc.update(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.	  if(read!=    0)    {    current.crc.update(buffer,    offset,    read);    }    else    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current.    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
468	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  +  2);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  +  2);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  +  2);	  current.crc.update(buffer,    offset,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
469	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length,  DFH_LEN);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length,  DFH_LEN);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length,  DFH_LEN);	  current.crc.update(buffer,    offset,    read,    length,    CFH_LEN);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
470	[BUG]  [BUGGY]  read  =  readLimit(buffer,  offset,  length  -  2);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readLimit(buffer,  offset,  length  -  2);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readLimit(buffer,  offset,  length  -  2);	  read    =    readLimit(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
471	[BUG]  [BUGGY]  read  =  readReadLimit(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readReadLimit(buffer,  offset,  length  -  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readReadLimit(buffer,  offset,  length  -  1);	  read    =    readLimit(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
472	[BUG]  [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length  *  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length  *  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  current  =  current.in.read(buffer,  offset,  length  *  1);	  CurrentEntry    current    =    current.in.read(buffer,    offset,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
473	[BUG]  [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length  /  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length  /  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  current  =  current.in.read(buffer,  offset,  length  /  1);	  CurrentEntry    current    =    current.in.read(buffer,    offset,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
474	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read  -  offset  +  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read  -  offset  +  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read  -  offset  +  length);	  current.crc.update(buffer,    offset,    read    -    offset);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
475	[BUG]  [BUGGY]  read  =  read.read(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  read.read(buffer,  offset,  length  -  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  read.read(buffer,  offset,  length  -  1);	  read    =    read.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
476	[BUG]  [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length  -  1  +  1);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length  -  1  +  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  current  =  current.in.read(buffer,  offset,  length  -  1  +  1);	  CurrentEntry    current    =    current.in.read(buffer,    offset,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
477	[BUG]  [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length  -  3);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length  -  3);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  current  =  current.in.read(buffer,  offset,  length  -  3);	  CurrentEntry    current    =    current.in.read(buffer,    offset,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
478	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset,  length,  bytesRead  +  1);  [CE]  <identifier>  expected  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer,  offset,  length,  bytesRead  +  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer,  offset,  length,  bytesRead  +  1);	  read    =    current.in.read(buffer,    offset,    length,    bytesRead);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
479	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset,  length  -  bytesRead);  [CE]  <identifier>  expected  [FE]                            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer,  offset,  length  -  bytesRead);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer,  offset,  length  -  bytesRead);	  read    =    current.in.read(buffer,    offset,    length,    bytesRead);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
480	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset,  length,  bytesReadFromStream);  [CE]  <identifier>  expected  [FE]                              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer,  offset,  length,  bytesReadFromStream);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer,  offset,  length,  bytesReadFromStream);	  read    =    current.in.read(buffer,    offset,    length,    bytesRead);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
481	[BUG]  [BUGGY]  if(read!=  0)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  if(read!=  0)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	if(read!=  0)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current	  if(read!=    0)    {    read    =    readDeflated(buffer,    offset,    length);    }    else    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current.entry    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
482	[BUG]  [BUGGY]  if(read!=  0)  {  read  =  readDeflated(buffer,  offset,  length  +  1);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  if(read!=  0)  {  read  =  readDeflated(buffer,  offset,  length  +  1);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	if(read!=  0)  {  read  =  readDeflated(buffer,  offset,  length  +  1);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry	  if(read!=    0)    {    read    =    readDeflated(buffer,    offset,    length);    }    else    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current.entry    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
483	[BUG]  [BUGGY]  if(read!=  0)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  if(read!=  0)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	if(read!=  0)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),	  if(read!=    0)    {    read    =    readDeflated(buffer,    offset,    length);    }    else    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current.entry    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
484	[BUG]  [BUGGY]  if(read!=  0)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  if(read!=  0)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	if(read!=  0)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.	  if(read!=    0)    {    read    =    readDeflated(buffer,    offset,    length);    }    else    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current.entry    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
485	[BUG]  [BUGGY]  if(read!=  0)  {  read  =  readDeflated(buffer,  off,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  if(read!=  0)  {  read  =  readDeflated(buffer,  off,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	if(read!=  0)  {  read  =  readDeflated(buffer,  off,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry	  if(read!=    0)    {    read    =    readDeflated(buffer,    offset,    length);    }    else    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current.entry    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
486	[BUG]  [BUGGY]  read  =  readRead(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readRead(buffer,  offset,  length  -  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readRead(buffer,  offset,  length  -  1);	  read    =    readRead(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
487	[BUG]  [BUGGY]  read  =  readRead(buffer,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readRead(buffer,  offset,  length  +  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readRead(buffer,  offset,  length  +  1);	  read    =    readRead(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
488	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(read,  hasUTF8Flag)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor(read,  hasUTF8Flag)  {  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor(read,  hasUTF8Flag)  {	  allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
489	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor,  hasUTF8Flag)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor,  hasUTF8Flag)  {  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor,  hasUTF8Flag)  {	  allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
490	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  ||  hasUTF8Flag)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor  ||  hasUTF8Flag)  {  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor  ||  hasUTF8Flag)  {	  allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
491	[BUG]  [BUGGY]  enableStoredEntriesWithDataDescriptor  =  hasUTF8Flag  &&  current.in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  enableStoredEntriesWithDataDescriptor  =  hasUTF8Flag  &&  current.in.read(buffer,  offset,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	enableStoredEntriesWithDataDescriptor  =  hasUTF8Flag  &&  current.in.read(buffer,  offset,  length);	  allowStoredEntriesWithDataDescriptor    =    allowStoredEntriesWithDataDescriptor    &&    current.in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
492	[BUG]  [BUGGY]  read  =  read.in.read(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  read.in.read(buffer,  offset,  length  -  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  read.in.read(buffer,  offset,  length  -  1);	  read    =    read.in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
493	[BUG]  [BUGGY]  read  =  read.in.read(buffer,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  read.in.read(buffer,  offset,  length  +  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  read.in.read(buffer,  offset,  length  +  1);	  read    =    read.in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
494	[BUG]  [BUGGY]  read  =  ze.read(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  ze.read(buffer,  offset,  length  -  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  ze.read(buffer,  offset,  length  -  1);	  read    =    ze.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
495	[BUG]  [BUGGY]  read  =  inputStream.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  inputStream.read(buffer,  offset,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  inputStream.read(buffer,  offset,  length);	  read    =    ze.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
496	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length  -  1  +  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(buffer,  offset,  length  -  1  +  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(buffer,  offset,  length  -  1  +  1);	  read    =    readDeflated(buffer,    offset,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
497	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  -  1,  zipEncoding);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  -  1,  zipEncoding);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  -  1,  zipEncoding);	  current.crc.update(buffer,    offset,    length,    zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
498	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length,  fileNameLen);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length,  fileNameLen);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length,  fileNameLen);	  current.crc.update(buffer,    offset,    length,    zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
499	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read,  length  -  0);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read,  length  -  0);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read,  length  -  0);	  current.crc.update(buffer,    offset,    read,    0);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
500	[BUG]  [BUGGY]  read  =  readLimit(current.in.read(buffer,  offset,  length),  current.entry.getMethod());  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readLimit(current.in.read(buffer,  offset,  length),  current.entry.getMethod());  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readLimit(current.in.read(buffer,  offset,  length),  current.entry.getMethod());	  read    =    readLimit(current.entry.getMethod(),    current.entry.getMethod());    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
501	[BUG]  [BUGGY]  read  =  readLimit(current.entry.getMethod(),  current.entry.getMethod())+  1;  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readLimit(current.entry.getMethod(),  current.entry.getMethod())+  1;  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readLimit(current.entry.getMethod(),  current.entry.getMethod())+  1;	  read    =    readLimit(current.entry.getMethod(),    current.entry.getMethod());    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
502	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset,  length,  current.length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer,  offset,  length,  current.length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer,  offset,  length,  current.length);	  read    =    current.in.read(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
503	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset,  length  -  1,  buffer.length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer,  offset,  length  -  1,  buffer.length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer,  offset,  length  -  1,  buffer.length);	  read    =    current.in.read(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
504	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  read  -  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  read  -  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  read  -  1);	  CurrentEntry    <    K,    V>    current    =    current.in.read(buffer,    offset,    read);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
505	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  read  +  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  read  +  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  read  +  length);	  CurrentEntry    <    K,    V>    current    =    current.in.read(buffer,    offset,    read);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
506	[BUG]  [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length  /  2);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length  /  2);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  current  =  current.in.read(buffer,  offset,  length  /  2);	  CurrentEntry    current    =    current.in.read(buffer,    offset,    length    -    2);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
507	[BUG]  [BUGGY]  if(read  ==  0)  {  current.crc.update(buffer,  offset,  read);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  if(read  ==  0)  {  current.crc.update(buffer,  offset,  read);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	if(read  ==  0)  {  current.crc.update(buffer,  offset,  read);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current	  if(read!=    0)    {    current.crc.update(buffer,    offset,    read);    }    else    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
508	[BUG]  [BUGGY]  if(read!=  0)  {  current.crc.update(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  if(read!=  0)  {  current.crc.update(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	if(read!=  0)  {  current.crc.update(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current	  if(read!=    0)    {    current.crc.update(buffer,    offset,    read);    }    else    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
509	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset,  length  +  1);  if(read!=  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer,  offset,  length  +  1);  if(read!=  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer,  offset,  length  +  1);  if(read!=  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }	  read    =    current.in.read(buffer,    offset,    length);    if(read!=    0)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
510	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset,  length  /  2);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer,  offset,  length  /  2);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer,  offset,  length  /  2);	  read    =    current.in.read(buffer,    offset,    length    +    2);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
511	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length,  DD);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length,  DD);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length,  DD);	  current.crc.update(buffer,    offset,    length,    CFH_LEN);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
512	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read  +  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read  +  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read  +  length);	  current.crc.update(buffer,    offset,    read    -    length);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
513	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read,  length  *  2);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read,  length  *  2);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read,  length  *  2);	  current.crc.update(buffer,    offset,    read,    length    -    2);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
514	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length,  read,  lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length,  read,  lastStoredEntry);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length,  read,  lastStoredEntry);	  current.crc.update(buffer,    offset,    length,    read);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
515	[BUG]  [BUGGY]  read  =  readLimits(buffer,  offset,  length  +  2);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readLimits(buffer,  offset,  length  +  2);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readLimits(buffer,  offset,  length  +  2);	  read    =    readLimits(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
516	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  -  1,  current.in);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  -  1,  current.in);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  -  1,  current.in);	  current.crc.update(buffer,    offset,    length,    current.in);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
517	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length,  current.in,  reader);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length,  current.in,  reader);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length,  current.in,  reader);	  current.crc.update(buffer,    offset,    length,    current.in);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
518	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length,  current.in,  0);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length,  current.in,  0);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length,  current.in,  0);	  current.crc.update(buffer,    offset,    length,    current.in);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
519	[BUG]  [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  DFH_LEN);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  DFH_LEN);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  DFH_LEN);	  CurrentEntry    current    =    current.in.read(buffer,    offset,    length,    CFH_LEN);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
520	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  0,  0);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  0,  0);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(buffer,  offset,  length,  0,  0);	  read    =    readDeflated(buffer,    offset,    length,    0);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
521	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read,  length  -  1,  fileNameLen);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read,  length  -  1,  fileNameLen);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read,  length  -  1,  fileNameLen);	  current.crc.update(buffer,    offset,    read,    length,    fileNameLen);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
522	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read,  length,  reader);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read,  length,  reader);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read,  length,  reader);	  current.crc.update(buffer,    offset,    read,    length,    fileNameLen);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
523	[BUG]  [BUGGY]  read  =  readReadInputStream(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readReadInputStream(buffer,  offset,  length  -  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readReadInputStream(buffer,  offset,  length  -  1);	  read    =    readInputStream(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
524	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  -  read  +  1);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  -  read  +  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  -  read  +  1);	  CurrentEntry    <    K,    V>    current    =    current.in.read(buffer,    offset,    length    -    read);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
525	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  -  read,  lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  -  read,  lastStoredEntry);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  -  read,  lastStoredEntry);	  CurrentEntry    <    K,    V>    current    =    current.in.read(buffer,    offset,    length    -    read);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
526	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  -  read)+  1;  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  -  read)+  1;  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  -  read)+  1;	  CurrentEntry    <    K,    V>    current    =    current.in.read(buffer,    offset,    length    -    read);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
527	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  *  read);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  *  read);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  *  read);	  CurrentEntry    <    K,    V>    current    =    current.in.read(buffer,    offset,    length    -    read);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
528	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset  +  length,  read);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset  +  length,  read);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset  +  length,  read);	  CurrentEntry    <    K,    V>    current    =    current.in.read(buffer,    offset,    read);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
529	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset  +  1,  read);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset  +  1,  read);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset  +  1,  read);	  CurrentEntry    <    K,    V>    current    =    current.in.read(buffer,    offset,    read);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
530	[BUG]  [BUGGY]  if(read!=  0)  {  current.crc  =  crc.update(buffer,  offset,  read);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  if(read!=  0)  {  current.crc  =  crc.update(buffer,  offset,  read);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	if(read!=  0)  {  current.crc  =  crc.update(buffer,  offset,  read);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current	  if(read!=    0)    {    current.crc.update(buffer,    offset,    read);    }    else    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
531	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset,  length,  LBH_LEN);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer,  offset,  length,  LBH_LEN);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer,  offset,  length,  LBH_LEN);	  read    =    current.in.read(buffer,    offset,    length,    CFH_LEN);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
532	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset,  length,  DD);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer,  offset,  length,  DD);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer,  offset,  length,  DD);	  read    =    current.in.read(buffer,    offset,    length,    CFH_LEN);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
533	[BUG]  [BUGGY]  lastStoredEntry  =  entryEncoding.read(buffer,  offset,  length,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  lastStoredEntry  =  entryEncoding.read(buffer,  offset,  length,  zipEncoding);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	lastStoredEntry  =  entryEncoding.read(buffer,  offset,  length,  zipEncoding);	  lastStoredEntry    =    entryEncoding.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
534	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  CFH_LEN,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  CFH_LEN,  LFH_BUF);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(buffer,  offset,  length,  CFH_LEN,  LFH_BUF);	  read    =    readDeflated(buffer,    offset,    length,    CFH_LEN);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
535	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  CFH_LEN,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  CFH_LEN,  LFH_LEN);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(buffer,  offset,  length,  CFH_LEN,  LFH_LEN);	  read    =    readDeflated(buffer,    offset,    length,    CFH_LEN);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
536	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset,  length  -  1);  if(read  >=  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }  [CE]  <identifier>  expected  [FE]                                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer,  offset,  length  -  1);  if(read  >=  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer,  offset,  length  -  1);  if(read  >=  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }	  read    =    current.in.read(buffer,    offset,    length);    if(read    >=    0)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
537	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  -  read,  off);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  -  read,  off);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  -  read,  off);	  CurrentEntry    <    K,    V>    current    =    current.in.read(buffer,    offset,    length    -    read);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
538	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  -  read,  end);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  -  read,  end);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  -  read,  end);	  CurrentEntry    <    K,    V>    current    =    current.in.read(buffer,    offset,    length    -    read);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
539	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length,  current.in,  buffer.length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length,  current.in,  buffer.length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length,  current.in,  buffer.length);	  current.crc.update(buffer,    offset,    read,    length,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
540	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length,  current.in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length,  current.in.read(buffer,  offset,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length,  current.in.read(buffer,  offset,  length);	  current.crc.update(buffer,    offset,    read,    length,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
541	[BUG]  [BUGGY]  reader  =  current.in.read(buffer,  offset,  length);  if(read  >=  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry.getMet  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  reader  =  current.in.read(buffer,  offset,  length);  if(read  >=  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry.getMet  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	reader  =  current.in.read(buffer,  offset,  length);  if(read  >=  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry.getMet	  read    =    current.in.read(buffer,    offset,    length);    if(read    ==    0)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current.entry.getMet    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
542	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset,  length  -  1);  if(read  >=  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry.  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer,  offset,  length  -  1);  if(read  >=  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry.  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer,  offset,  length  -  1);  if(read  >=  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry.	  read    =    current.in.read(buffer,    offset,    length);    if(read    ==    0)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current.entry.getMet    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
543	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset,  length  -  1);  if(read  >=  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer,  offset,  length  -  1);  if(read  >=  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer,  offset,  length  -  1);  if(read  >=  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry	  read    =    current.in.read(buffer,    offset,    length);    if(read    ==    0)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current.entry.getMet    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
544	[BUG]  [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  current.entry.length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  current.entry.length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  current.entry.length);	  CurrentEntry    current    =    current.in.read(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
545	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset,  length,  bytesRead;  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer,  offset,  length,  bytesRead;  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer,  offset,  length,  bytesRead;	  read    =    current.in.read(buffer,    offset,    length,    bytesRead);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
546	[BUG]  [BUGGY]  read  =  this.in.read();  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  this.in.read();  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  this.in.read();	  read    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
547	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length,  current.in,  entryEncoding);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length,  current.in,  entryEncoding);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length,  current.in,  entryEncoding);	  current.crc.update(buffer,    offset,    length,    current.in);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
548	[BUG]  [BUGGY]  CRC32  crc  =  current.in.read(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CRC32  crc  =  current.in.read(buffer,  offset,  length  -  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CRC32  crc  =  current.in.read(buffer,  offset,  length  -  1);	  current.crc.update(buffer,    offset,    read    -    1);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
549	[BUG]  [BUGGY]  if(read  ==  0)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  if(read  ==  0)  {  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	if(read  ==  0)  {	  if(read!=    0)    {    read    =    readDeflated(buffer,    offset,    length);    }    else    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current.entry    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
550	[BUG]  [BUGGY]  if(current.in!=  null)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  if(current.in!=  null)  {  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	if(current.in!=  null)  {	  if(read!=    0)    {    read    =    readDeflated(buffer,    offset,    length);    }    else    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current.entry    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
551	[BUG]  [BUGGY]  if(read  ==  0)  {  read  =  readDeflated(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  if(read  ==  0)  {  read  =  readDeflated(buffer,  offset,  length);  }  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	if(read  ==  0)  {  read  =  readDeflated(buffer,  offset,  length);  }	  if(read!=    0)    {    read    =    readDeflated(buffer,    offset,    length);    }    else    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current.entry    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
552	[BUG]  [BUGGY]  if(read!=  0)  {  read  =  readDeflated(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  if(read!=  0)  {  read  =  readDeflated(buffer,  offset,  length);  }  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	if(read!=  0)  {  read  =  readDeflated(buffer,  offset,  length);  }	  if(read!=    0)    {    read    =    readDeflated(buffer,    offset,    length);    }    else    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current.entry    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
553	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  -  off);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  -  off);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  -  off);	  current.crc.update(buffer,    offset,    read    -    offset);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
554	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length,  buffer,  fileNameLen);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length,  buffer,  fileNameLen);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length,  buffer,  fileNameLen);	  current.crc.update(buffer,    offset,    read,    length,    fileNameLen);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
555	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read,  length,  buffer,  fileNameLen);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read,  length,  buffer,  fileNameLen);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read,  length,  buffer,  fileNameLen);	  current.crc.update(buffer,    offset,    read,    length,    fileNameLen);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
556	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset,  length  -  1);  if(read!=  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer,  offset,  length  -  1);  if(read!=  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer,  offset,  length  -  1);  if(read!=  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }	  read    =    current.in.read(buffer,    offset,    length);    if(read!=    0)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
557	[BUG]  [BUGGY]  read  =  read.read(buffer,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  read.read(buffer,  offset,  length  +  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  read.read(buffer,  offset,  length  +  1);	  read    =    read.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
558	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length,  buffer.length  -  2);  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length,  buffer.length  -  2);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length,  buffer.length  -  2);	  current.crc.update(buffer,    offset,    read,    length    -    2);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
559	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length,  current.in.read  -  1);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length,  current.in.read  -  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length,  current.in.read  -  1);	  current.crc.update(buffer,    offset,    read,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
560	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length,  current.in.read());  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length,  current.in.read());  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length,  current.in.read());	  current.crc.update(buffer,    offset,    read,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
561	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length,  CFH_EXP_32);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length,  CFH_EXP_32);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length,  CFH_EXP_32);	  current.crc.update(buffer,    offset,    read,    length,    CFH_LEN);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
562	[BUG]  [BUGGY]  if(read  ==  0)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  if(read  ==  0)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	if(read  ==  0)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry	  if(read!=    0)    {    current.crc.update(buffer,    offset,    read);    }    else    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current.ent    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
563	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset,  length  *  2  -  1);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer,  offset,  length  *  2  -  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer,  offset,  length  *  2  -  1);	  read    =    current.in.read(buffer,    offset,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
564	[BUG]  [BUGGY]  if(current.in!=  null)  {  read  =  in.read(buffer,  offset,  length);  if(read  ==  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  if(current.in!=  null)  {  read  =  in.read(buffer,  offset,  length);  if(read  ==  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	if(current.in!=  null)  {  read  =  in.read(buffer,  offset,  length);  if(read  ==  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }	  read    =    in.read(buffer,    offset,    length);    if(read    ==    0)    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
565	[BUG]  [BUGGY]  read  =  readLenient(buffer,  offset,  length  -  2);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readLenient(buffer,  offset,  length  -  2);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readLenient(buffer,  offset,  length  -  2);	  read    =    readLenient(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
566	[BUG]  [BUGGY]  read  =  readDecoded(buffer,  offset,  length,  zipEncoding);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDecoded(buffer,  offset,  length,  zipEncoding);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDecoded(buffer,  offset,  length,  zipEncoding);	  read    =    readDecoded(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
567	[BUG]  [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  DD);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  DD);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  DD);	  CurrentEntry    current    =    current.in.read(buffer,    offset,    length,    CFH_LEN);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
568	[BUG]  [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  LBH_LEN);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  LBH_LEN);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  LBH_LEN);	  CurrentEntry    current    =    current.in.read(buffer,    offset,    length,    CFH_LEN);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
569	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset,  length,  current.entry.offset);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer,  offset,  length,  current.entry.offset);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer,  offset,  length,  current.entry.offset);	  read    =    current.in.read(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
570	[BUG]  [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  reader);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  reader);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  current  =  current.in.read(buffer,  offset,  length,  reader);	  CurrentEntry    current    =    current.in.read(buffer,    offset,    length,    0);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
571	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  current.in,  current.entry);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  current.in,  current.entry);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(buffer,  offset,  length,  current.in,  current.entry);	  read    =    readDeflated(buffer,    offset,    length,    current.in);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
572	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  current.in,  current.in);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  current.in,  current.in);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(buffer,  offset,  length,  current.in,  current.in);	  read    =    readDeflated(buffer,    offset,    length,    current.in);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
573	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  current.entry);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  current.entry);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(buffer,  offset,  length,  current.entry);	  read    =    readDeflated(buffer,    offset,    length,    current.in);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
574	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  -  read,  bytesRead,  entryEncoding);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  -  read,  bytesRead,  entryEncoding);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  -  read,  bytesRead,  entryEncoding);	  current.crc.update(buffer,    offset,    length    -    read,    bytesRead);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
575	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  -  bytesRead,  buffer.length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  -  bytesRead,  buffer.length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  -  bytesRead,  buffer.length);	  current.crc.update(buffer,    offset,    length    -    read,    bytesRead);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
576	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  -  1,  read,  current.in);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  -  1,  read,  current.in);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  -  1,  read,  current.in);	  current.crc.update(buffer,    offset,    length    -    1,    read);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
577	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  -  1,  inputStream);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  -  1,  inputStream);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  -  1,  inputStream);	  current.crc.update(buffer,    offset,    length    -    1,    read);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
578	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  -  1,  buffer,  read);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  -  1,  buffer,  read);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  -  1,  buffer,  read);	  current.crc.update(buffer,    offset,    length    -    1,    read);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
579	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  -  1,  reader);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  -  1,  reader);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  -  1,  reader);	  current.crc.update(buffer,    offset,    length    -    1,    read);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
580	[BUG]  [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length  *  2);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset,  length  *  2);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  current  =  current.in.read(buffer,  offset,  length  *  2);	  CurrentEntry    current    =    current.in.read(buffer,    offset,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
581	[BUG]  [BUGGY]  read  =  readDeflatedByteBuffer(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflatedByteBuffer(buffer,  offset,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflatedByteBuffer(buffer,  offset,  length);	  read    =    readRead(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
582	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  -  1,  crc,  entryEncoding);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  -  1,  crc,  entryEncoding);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  -  1,  crc,  entryEncoding);	  current.crc.update(buffer,    offset,    length    -    1,    crc);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
583	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.entry.in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.entry.in.read(buffer,  offset,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  <  K,  V>  current  =  current.entry.in.read(buffer,  offset,  length);	  CurrentEntry    <    K,    V>    current    =    current.entry.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
584	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  -  read,  current.entry);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  -  read,  current.entry);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  -  read,  current.entry);	  current.crc.update(buffer,    offset,    length    -    read,    lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
585	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  -  read,  endpoint);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  -  read,  endpoint);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  -  read,  endpoint);	  current.crc.update(buffer,    offset,    length    -    read,    lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
586	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  -  read,  buffer,  firstEntry);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  -  read,  buffer,  firstEntry);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  -  read,  buffer,  firstEntry);	  current.crc.update(buffer,    offset,    length    -    read,    lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
587	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  -  read,  entryEncoding);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  -  read,  entryEncoding);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  -  read,  entryEncoding);	  current.crc.update(buffer,    offset,    length    -    read,    lastStoredEntry);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
588	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  =  hasUTF8Flag?  1  :  allowStoredEntriesWithDataDescriptor;  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor  =  hasUTF8Flag?  1  :  allowStoredEntriesWithDataDescriptor;  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor  =  hasUTF8Flag?  1  :  allowStoredEntriesWithDataDescriptor;	  allowStoredEntriesWithDataDescriptor    =    allowStoredEntriesWithDataDescriptor;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
589	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  =  hasUTF8Flag?  this  :  allowStoredEntriesWithDataDescriptor;  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor  =  hasUTF8Flag?  this  :  allowStoredEntriesWithDataDescriptor;  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor  =  hasUTF8Flag?  this  :  allowStoredEntriesWithDataDescriptor;	  allowStoredEntriesWithDataDescriptor    =    allowStoredEntriesWithDataDescriptor;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
590	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  =  hasDataDescriptor  &&  current.in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor  =  hasDataDescriptor  &&  current.in.read(buffer,  offset,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor  =  hasDataDescriptor  &&  current.in.read(buffer,  offset,  length);	  allowStoredEntriesWithDataDescriptor    =    allowStoredEntriesWithDataDescriptor    &&    current.in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
591	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  =  allowedStoredEntriesWithDataDescriptor  &&  current.in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor  =  allowedStoredEntriesWithDataDescriptor  &&  current.in.read(buffer,  offset,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor  =  allowedStoredEntriesWithDataDescriptor  &&  current.in.read(buffer,  offset,  length);	  allowStoredEntriesWithDataDescriptor    =    allowStoredEntriesWithDataDescriptor    &&    current.in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
592	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset,  length  *  2);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  current.in.read(buffer,  offset,  length  *  2);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  current.in.read(buffer,  offset,  length  *  2);	  read    =    current.in.read(buffer,    offset,    length    +    2);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
593	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  -  16);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  -  16);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length  -  16);	  CurrentEntry    <    K,    V>    current    =    current.in.read(buffer,    offset,    length    -    2);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
594	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current.entry,  ze);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor(current.entry,  ze);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor(current.entry,  ze);	  allowStoredEntriesWithDataDescriptor(current.entry,    read);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
595	[BUG]  [BUGGY]  read  =  readLimit(current.entry.getMethod(),  current.entry.getName());  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readLimit(current.entry.getMethod(),  current.entry.getName());  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readLimit(current.entry.getMethod(),  current.entry.getName());	  read    =    readLimit(current.entry.getMethod());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
596	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length,  zipEncoding,  entryEncoding);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length,  zipEncoding,  entryEncoding);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length,  zipEncoding,  entryEncoding);	  current.crc.update(buffer,    offset,    length,    zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
597	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length,  reader,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length,  reader,  zipEncoding);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length,  reader,  zipEncoding);	  current.crc.update(buffer,    offset,    length,    zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
598	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(read,  closed)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor(read,  closed)  {  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor(read,  closed)  {	  allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
599	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(read,  hasUTF8Flag))  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor(read,  hasUTF8Flag))  {  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor(read,  hasUTF8Flag))  {	  allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
600	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(read,  closed))  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor(read,  closed))  {  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor(read,  closed))  {	  allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
601	[BUG]  [BUGGY]  lastStoredEntry  =  entryEncoding.decode(buffer,  offset,  length,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  lastStoredEntry  =  entryEncoding.decode(buffer,  offset,  length,  zipEncoding);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	lastStoredEntry  =  entryEncoding.decode(buffer,  offset,  length,  zipEncoding);	  lastStoredEntry    =    entryEncoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
602	[BUG]  [BUGGY]  lastStoredEntry  =  entryEncoding.decode(buffer,  offset,  length,  current.in);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  lastStoredEntry  =  entryEncoding.decode(buffer,  offset,  length,  current.in);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	lastStoredEntry  =  entryEncoding.decode(buffer,  offset,  length,  current.in);	  lastStoredEntry    =    entryEncoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
603	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  =  allowedStoredEntriesWithDataDescriptor?  true  :  false;  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor  =  allowedStoredEntriesWithDataDescriptor?  true  :  false;  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor  =  allowedStoredEntriesWithDataDescriptor?  true  :  false;	  allowStoredEntriesWithDataDescriptor    =    allowStoredEntriesWithDataDescriptor?    true    :    false;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
604	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  =  hasDataDescriptor?  true  :  false;  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor  =  hasDataDescriptor?  true  :  false;  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor  =  hasDataDescriptor?  true  :  false;	  allowStoredEntriesWithDataDescriptor    =    allowStoredEntriesWithDataDescriptor?    true    :    false;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
605	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor?  true  :  null;  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor?  true  :  null;  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor  =  allowStoredEntriesWithDataDescriptor?  true  :  null;	  allowStoredEntriesWithDataDescriptor    =    allowStoredEntriesWithDataDescriptor?    true    :    false;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
606	[BUG]  [BUGGY]  if(read!=  0)  {  current.crc  =  crc.update(buffer,  offset,  read);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  if(read!=  0)  {  current.crc  =  crc.update(buffer,  offset,  read);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	if(read!=  0)  {  current.crc  =  crc.update(buffer,  offset,  read);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.	  if(read!=    0)    {    current.crc.update(buffer,    offset,    read);    }    else    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current.    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
607	[BUG]  [BUGGY]  if(read  ==  0)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  if(read  ==  0)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	if(read  ==  0)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),	  if(read!=    0)    {    current.crc.update(buffer,    offset,    read);    }    else    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
608	[BUG]  [BUGGY]  if(read!=  0)  {  current.crc.update(buffer,  offset,  end);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  if(read!=  0)  {  current.crc.update(buffer,  offset,  end);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	if(read!=  0)  {  current.crc.update(buffer,  offset,  end);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),	  if(read!=    0)    {    current.crc.update(buffer,    offset,    read);    }    else    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
609	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read  /  2  -  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read  /  2  -  1);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read  /  2  -  1);	  current.crc.update(buffer,    offset,    length    *    2    -    1);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
610	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read  -  lastStoredEntry,  current.in);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read  -  lastStoredEntry,  current.in);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read  -  lastStoredEntry,  current.in);	  current.crc.update(buffer,    offset,    length    -    read,    current.in);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
611	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  -  read,  current.in,  entryEncoding);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  -  read,  current.in,  entryEncoding);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  -  read,  current.in,  entryEncoding);	  current.crc.update(buffer,    offset,    length    -    read,    current.in);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
612	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  -  read,  current.in,  current.in);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  -  read,  current.in,  current.in);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  -  read,  current.in,  current.in);	  current.crc.update(buffer,    offset,    length    -    read,    current.in);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
613	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length,  current.in.read);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length,  current.in.read);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length,  current.in.read);	  current.crc.update(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
614	[BUG]  [BUGGY]  read  =  readDelimiter(buffer,  offset,  length,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDelimiter(buffer,  offset,  length,  zipEncoding);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDelimiter(buffer,  offset,  length,  zipEncoding);	  read    =    readDelimiter(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
615	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length,  reader);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length,  reader);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length,  reader);	  CurrentEntry    <    K,    V>    current    =    current.in.read(buffer,    offset,    length,    read);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
616	[BUG]  [BUGGY]  read  =  readDelimiter(current.entry.getMethod(),  current.entry.getMethod());  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDelimiter(current.entry.getMethod(),  current.entry.getMethod());  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDelimiter(current.entry.getMethod(),  current.entry.getMethod());	  read    =    readDelimiter(current.entry.getMethod());    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
617	[BUG]  [BUGGY]  read  =  readDelimiter(current.entry.getMethod(),  current.entry.getName());  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDelimiter(current.entry.getMethod(),  current.entry.getName());  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDelimiter(current.entry.getMethod(),  current.entry.getName());	  read    =    readDelimiter(current.entry.getMethod());    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
618	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  -  read,  buffer.length  -  off);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  -  read,  buffer.length  -  off);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  -  read,  buffer.length  -  off);	  current.crc.update(buffer,    offset,    length    -    read,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
619	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length  -  read,  buffer.length  -  2);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  length  -  read,  buffer.length  -  2);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  length  -  read,  buffer.length  -  2);	  current.crc.update(buffer,    offset,    length    -    read,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
620	[BUG]  [BUGGY]  read  =  readLimit(current.entry.getMethod(),  current.entry.getMethod(),  current.in);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readLimit(current.entry.getMethod(),  current.entry.getMethod(),  current.in);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readLimit(current.entry.getMethod(),  current.entry.getMethod(),  current.in);	  read    =    readLimit(current.entry.getMethod(),    current.entry.getMethod());    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
621	[BUG]  [BUGGY]  read  =  readOutputStream(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readOutputStream(buffer,  offset,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readOutputStream(buffer,  offset,  length);	  read    =    readInputStream(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
622	[BUG]  [BUGGY]  CurrentEntry  current  =  current.entry.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  current  =  current.entry.read(buffer,  offset,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  current  =  current.entry.read(buffer,  offset,  length);	  CurrentEntry    current    =    current.in.read(buffer,    offset,    read);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
623	[BUG]  [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset  +  1,  read);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  current  =  current.in.read(buffer,  offset  +  1,  read);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  current  =  current.in.read(buffer,  offset  +  1,  read);	  CurrentEntry    current    =    current.in.read(buffer,    offset,    read);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
624	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read,  buffer.length  -  length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read,  buffer.length  -  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read,  buffer.length  -  length);	  current.crc.update(buffer,    offset,    read,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
625	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read,  buffer.length  -  off);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  current.crc.update(buffer,  offset,  read,  buffer.length  -  off);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	current.crc.update(buffer,  offset,  read,  buffer.length  -  off);	  current.crc.update(buffer,    offset,    read,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
626	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  =  current.in  ||  allowStoredEntriesWithDataDescriptor.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor  =  current.in  ||  allowStoredEntriesWithDataDescriptor.read(buffer,  offset,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor  =  current.in  ||  allowStoredEntriesWithDataDescriptor.read(buffer,  offset,  length);	  allowStoredEntriesWithDataDescriptor    =    allowStoredEntriesWithDataDescriptor    ||    current.in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
627	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  =  current.in  ||  allowStoredEntriesWithDataDescriptor;  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  allowStoredEntriesWithDataDescriptor  =  current.in  ||  allowStoredEntriesWithDataDescriptor;  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	allowStoredEntriesWithDataDescriptor  =  current.in  ||  allowStoredEntriesWithDataDescriptor;	  allowStoredEntriesWithDataDescriptor    =    allowStoredEntriesWithDataDescriptor    ||    current.in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
628	[BUG]  [BUGGY]  if(read!=  0)  {  current.crc.update(buffer,  offset,  length  +  1);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  if(read!=  0)  {  current.crc.update(buffer,  offset,  length  +  1);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	if(read!=  0)  {  current.crc.update(buffer,  offset,  length  +  1);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry	  if(read!=    0)    {    current.crc.update(buffer,    offset,    length);    }    else    {    throw    new    UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),    current.entry    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
629	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length  -  1,  current.in.read());  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(buffer,  offset,  length  -  1,  current.in.read());  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(buffer,  offset,  length  -  1,  current.in.read());	  read    =    readDeflated(buffer,    offset,    length    -    2);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
630	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length  -  1,  current.in.read);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(buffer,  offset,  length  -  1,  current.in.read);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(buffer,  offset,  length  -  1,  current.in.read);	  read    =    readDeflated(buffer,    offset,    length    -    2);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
631	[BUG]  [BUGGY]  read  =  entry.in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  entry.in.read(buffer,  offset,  length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  entry.in.read(buffer,  offset,  length);	  read    =    ze.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
632	[BUG]  [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  current.entry.length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  read  =  readDeflated(buffer,  offset,  length,  current.entry.length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	read  =  readDeflated(buffer,  offset,  length,  current.entry.length);	  read    =    readDeflated(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
633	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length,  current.entry.length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length,  current.entry.length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length,  current.entry.length);	  CurrentEntry    <    K,    V>    current    =    current.in.read(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
634	[BUG]  [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length,  current.length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  ||  current.entry.getMethod()  ==  ZipMethod.IMPLODING.getCode())  {  read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {      [BUGGY]  CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length,  current.length);  [BUGGY]      }  return  read;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	CurrentEntry  <  K,  V>  current  =  current.in.read(buffer,  offset,  length,  current.length);	  CurrentEntry    <    K,    V>    current    =    current.in.read(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
