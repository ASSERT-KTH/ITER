projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393if(read!=0){current.crc.update(buffer,offset,read);}else{thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393if(read!=0){current.crc.update(buffer,offset,read);}else{thrownewUnsupportedZipFeatureException(ZipMethod.IMPLODING,current.entry.getMethod());}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393if(read!=0){current.crc.update(buffer,offset,read);}else{thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current.entry
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393if(read!=0){current.crc.update(buffer,offset,read);}else{buffer=readDeflated(buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393if(read!=0){current.crc.update(buffer,offset,read);}else{thrownewUnsupportedZipFeatureException(ZipMethod.IMPLODING,entryEncoding);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length,CFH_LEN);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length,0);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,length,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,length+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.entry.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,length,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=read.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDecoded(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLimit(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLimits(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readRead(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor(current.entry,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-1,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-1,crc);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length*2-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-read,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-read,bytesRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,length-read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length);if(read==0){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=in.read(buffer,offset,length);if(read==0){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length);if(read!=0){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length);if(read==0){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current.entry.getMet
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length);if(read>=0){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length);if(read!=0){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length,CFH_LEN);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readInputStream(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=read.read();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length,0);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length,CFH_LEN);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length,bytesRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor(current.entry.getMethod(),current.entry.getMethod()));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor=allowStoredEntriesWithDataDescriptor||current.in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor=allowStoredEntriesWithDataDescriptor;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor=allowStoredEntriesWithDataDescriptor&&current.in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor=allowStoredEntriesWithDataDescriptor?true:false;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLoop(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,length,CFH_LEN);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,length,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,length+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,length,fileNameLen);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length,current.in);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length,CFH_LEN);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length,0);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length+2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length-read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length-2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length-2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length+2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,length-2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,0);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=read.in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLimit(current.entry.getMethod(),current.entry.getMethod());
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLimit(current.entry.getMethod());
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393if(read!=0){current.crc.update(buffer,offset,read);}else{thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393if(read!=0){current.crc.update(buffer,offset,read);}else{thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393if(read!=0){current.crc.update(buffer,offset,read);}else{thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current.
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393if(read!=0){current.crc.update(buffer,offset,read);}else{thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current.ent
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393if(read!=0){current.crc.update(buffer,offset,length);}else{thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current.entry
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDelimiter(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length-2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,length-2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,length-read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read-length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read-offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-read,lastStoredEntry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=ze.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=ze.in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length,current.in);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length,zipEncoding);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393if(read!=0){read=readDeflated(buffer,offset,length);}else{thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current.entry
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLenient(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDelimiter(current.entry.getMethod());
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393lastStoredEntry=entryEncoding.decode(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393lastStoredEntry=entryEncoding.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=in.read();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=read.read(buffer);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-read,current.in);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,length-current.in);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-read,current.in,crc);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read-length,current.in);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-read,buffer,current.in);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-read,current.in,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393reader=current.in.read(buffer,offset,length);if(read==0){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current.entry.getMet
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length-1);if(read==0){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current.entry.getMet
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length+1);if(read==0){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current.entry.getMet
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length-1);if(read==0){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current.
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length);if(read==0){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current.entry.get
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length,current.in.length-2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length,current.in.read());
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length-2,current.in);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length-1,buffer.length-2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length-1,current.in.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length,1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length,2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length,3);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length,4);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length,0);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,length,0);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,0,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CRC32crc=current.crc.update(buffer,offset,length,0);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CRC32crc=current.crc.update(buffer,offset,read,0);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length,1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length,2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length,4);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length,3);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length,0,current.in.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393lastStoredEntry=zipEncoding.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393lastStoredEntry=crc.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393lastStoredEntry=entryEncoding.read(buffer,offset,length,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393lastStoredEntry=entryEncoding.read(buffer,offset,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393lastStoredEntry=entryEncoding.read(buffer,offset,length,CFH_LEN);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393lastStoredEntry=entryEncoding.read(buffer,offset,length,current.in);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393lastStoredEntry=entryEncoding.read(buffer,offset,length,fileNameLen);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length,read,zipEncoding);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length,zipEncoding,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length,entryEncoding);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,zipEncoding);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length,fileNameLen,zipEncoding);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,length-buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,length-off);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length,read-length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length,read-buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,length-line);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length,read-read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,buffer.length-read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,length-read,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,length-read,fileNameLen);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor=read?true:false;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor=allowStoredEntriesWithDataDescriptor?false:false;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor=hasUTF8Flag?true:false;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.entry.read(buffer,offset,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,read,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,off,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=read.in.read(buffer,offset,current.in);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,0);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length+1,current.entry.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length+3);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length,buffer.length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length,buffer.length+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length,current.entry.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length,fileNameLen);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length,cache.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor(read){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor||read==0){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor,read){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readInputStream(buffer,offset,length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readInputStream(buffer,offset,length+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDecodedInputStream(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readFully(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor=hasUTF8Flag&&current.in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor=hasUseUnicodeExtraFields&&current.in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor=current.in&&allowStoredEntriesWithDataDescriptor.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor=allowedStoredEntriesWithDataDescriptor||current.in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor=hasUTF8Flag||current.in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=ze.in.read(buffer,offset,length,current.entry.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=entryEncoding.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393reader=current.in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=ze.in.read(buffer,offset,length,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length,read+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,length+2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,length*2+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,length+3);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length+1,current.in);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length*2+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length+3);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDelimiter(current.in,current.entry.getMethod());
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDelimiter(current.entry.getMethod(),current.in);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDelimiter(current.in.read(buffer,offset,length));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDelimiter(current.entry.getMethod(),current.line);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDelimiter(current.entry.getMethod(),current.encoding);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CRC32crc=current.crc.update(buffer,offset,length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.crc.update(buffer,offset,length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=crc.update(buffer,offset,length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,length*2-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,length-1,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.entry.read(buffer,offset,length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393lastStoredEntry=zipEncoding.decode(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393lastStoredEntry=crc.decode(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393lastStoredEntry=entryEncoding.decode(buffer,offset,length,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393lastStoredEntry=entryEncoding.decode(buffer,offset,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393lastStoredEntry=entryEncoding.decode(buffer,offset,read,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393lastStoredEntry=entryEncoding.decode(buffer,offset,length,CFH_LEN);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393lastStoredEntry=entryEncoding.decode(buffer,offset,length,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,buffer.length,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,length,buffer.length+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,0,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,length,buffer.length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length,read,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length-read,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length-1,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,read-length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length-read,bytesRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,read,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length,buffer.length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length,buffer.length+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length-1,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length,fileNameLen);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length,read,CFH_LEN);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length,read,0);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length,read,fileNameLen);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length,read,current.in);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length-4);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length-3);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length/2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length*2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length,LFH_LEN);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length,CFH_LEN+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length,DD);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length,DFH_LEN);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,buffer.length+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,buffer.length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,buffer.length+length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,buffer.length-offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length-4);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length+2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length+1,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,read+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length*2+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length,read-2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-2,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-4);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length,current.in,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length,current.in,0);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length-1,current.in);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length,current.in,inputStream);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length,current.in,CFH_LEN);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length,current.in,crc);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393reader=current.in.read(buffer,offset,length);if(read==0){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393reader=current.in.read(buffer,offset,length);if(read!=0){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,length-4);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,length-3);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-1,read,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-1,read,buffer);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-1,read,fileNameLen);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.crc.update(buffer,offset,length-1,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=this.in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=read.in.read(buffer,offset,length,current.entry.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length*2+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLimits(buffer,offset,length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLimits(buffer,offset,length+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLimits(buffer,offset,length,0);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLimits(buffer,offset,length-2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLimits(buffer,offset,length,current.in);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393reader=current.in.read(buffer,offset,length);if(read>=0){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length,buffer.length+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length,current.in.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length,buffer.length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length,current.in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length,current.in.read(buffer,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLimit(buffer,offset,length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLimit(buffer,offset,length+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLimit(buffer,offset,length,CFH_LEN);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLimit(buffer,offset,length,current.in);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLimit(buffer,offset,length,0);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor=read||current.in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor=current.in||allowStoredEntriesWithDataDescriptor||current.in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor=hasDataDescriptor||current.in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDelimiter(buffer,offset,length,current.in);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDelimiter(buffer,offset,length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDelimiter(buffer,offset,length,CFH_LEN);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDelimiter(buffer,offset,length,fileNameLen);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDelimiter(buffer,offset,length,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDelimiter(buffer,offset,length+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDelimiter(buffer,offset,length,crc);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLoop(buffer,offset,length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLoop(buffer,offset,length+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLoop(buffer,offset,length,current.in);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLoop(buffer,offset,length,CFH_LEN);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLimit(current.in,current.entry.getMethod(),current.entry.getMethod());
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLimit(current.entry.getMethod(),current.entry.getMethod(),buffer);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLimit(current.in.getMethod(),current.entry.getMethod());
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLimit(current.entry.getMethod(),current.entry.getMethod(),length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLimit(current.entry.getMethod(),current.entry.getMethod()+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLimit(current.entry.getMethod(),current.entry.getMethod(),size);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,length,fileNameLen+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,length,fileNameLen,CFH_LEN);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,length,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-read,buffer,bytesRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,length-bytesRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-read,bytesRead,max);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-read,bytesRead,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length,read-bytesRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-bytesRead,bytesRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,length,read,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,length,read,0);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,length,read-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,length,read,bytesRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length+1);if(read==0){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,length-offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length,read-offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read-offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor(current.in,current.entry.getMethod(),current.entry.getMethod()));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor(current.entry.getMethod(),current.entry.getMethod(),read));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor(current.entry.getMethod(),current.entry.getMethod()+1));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor(current.entry.getMethod(),current.entry.getMethod());
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor(current.entry.getMethod(),current.entry.getMethod()),read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,CFH_LEN,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,0,length,CFH_LEN);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,length,LFH_LEN);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-read,buffer.length+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read-buffer.length,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLenient(buffer,offset,length,current.in);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLenient(buffer,offset,length,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLenient(buffer,offset,length,CFH_LEN);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLenient(buffer,offset,length,0);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLenient(buffer,offset,length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLenient(buffer,offset,length,fileNameLen);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLenient(buffer,offset,length,size);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-1,crc,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,length-1,crc);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-1,crc.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-1,crc.in);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-1,crc,fileNameLen);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor(current.entry,read,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor(current.in,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor(current.entry,read,buffer);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor(current.entry,read,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor(current.entry,read,current.in);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor(current.entry,read,0);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor(current.entry,read,current.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=ze.read(buffer,offset,length+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset+length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=in.read(buffer,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=in.read(buffer);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=this.in.read(buffer,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length,read,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length,read,0);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length,read,bytesRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length,read-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length,read+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length-1);if(read!=0){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393reader=readDeflated(buffer,offset,length);if(read==0){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393reader=readDeflated(buffer,offset,length);if(read!=0){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length+1);if(read!=0){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length);if(read==0){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length,CFH_LEN,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length-1,CFH_LEN);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length,LFH_LEN);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length,CFH_LEN+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length,CFH_EXP_32);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length,LFH_LEN);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length,CFH_LEN+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length,CFH_EXP_32);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length,DFH_LEN);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,length+2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,length+1,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,length*2+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,length+3);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length,buffer.length+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-1,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,0,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length,buffer.length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length*2-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=in.read(buffer,offset,length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=in.read(buffer,offset,length,CFH_LEN);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=in.read(buffer,offset,length,current.in.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=in.read(buffer,offset,length,current.in.read());
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=in.read(buffer,offset,length,current.in.read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,current.in);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length,current.in,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length,current.in,crc);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length,reader,current.in);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length,CFH_LEN,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-1,CFH_LEN);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length,LFH_LEN);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,CFH_LEN);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length,bytesRead,0);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length,bytesRead,max);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length,bytesRead,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length,bytesRead,size);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor=read;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor=true;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor=hasUTF8Flag;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor=hasUTF8Flag?true:allowStoredEntriesWithDataDescriptor;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor=hasUTF8Flag?lastStoredEntry:allowStoredEntriesWithDataDescriptor;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor=hasUTF8Flag||allowStoredEntriesWithDataDescriptor;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor=hasUTF8Flag&&hasUTF8Flag;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLimit(current.in,current.entry.getMethod());
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLimit(current.entry.getMethod(),current.in);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLimit(current.in.getMethod());
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLimit(current.entry.getMethod(),current.entry.getEnd());
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLimit(current.in.read(buffer,offset,length));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLimit(current.entry.getMethod(),current.entry.getCharset());
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393reader=readRead(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393reader=readDeflated(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,off,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDecoded(buffer,offset,length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDecoded(buffer,offset,length+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDecoded(buffer,offset,length,current.in);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDecoded(buffer,offset,length,CFH_LEN);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDecoded(buffer,offset,length,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDecoded(buffer,offset,length,0);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length/2-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length*2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length*2+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read*2-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,length*2-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length+1,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length+1,crc);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.crc.update(buffer,offset,length+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,length-read,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,read,length-read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,length-read,size);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,length-read,fileNameLen);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.entry.read(buffer,offset,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,off,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,read,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,length,buffer.length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,read,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,length,buffer.length+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,length-1,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,length,fileNameLen);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(current.in,buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(current.entry,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393ReadBufferread=readDeflated(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-read,buffer,lastStoredEntry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-1,lastStoredEntry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read-lastStoredEntry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-read,lastStoredEntry,bytesRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length,read-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,off,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.entry.read(buffer,offset,length,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.entry.read(buffer,offset,length+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.entry.read(buffer,offset,length,CFH_LEN);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.entry.read(buffer,offset,length,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393reader.write(buffer,offset,length);if(read==0){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393if(length==0){read=in.read(buffer,offset,length);if(read==0){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,length-2,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,length-4);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,read-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length*2-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length-1+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length,1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length,2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length,3);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length-1,0);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(current.in,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length,current.in+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read-1,crc);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-1,crc,inputStream);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read-1,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-1,read,lastStoredEntry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-1,read,bytesRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-1,read,inputStream);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read*-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393currToken.update(buffer,offset,read-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,length*1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithFieldDescriptor(current.entry.getMethod(),current.entry.getMethod()));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDescriptor(current.entry.getMethod(),current.entry.getMethod()));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393enableStoredEntriesWithDataDescriptor(current.entry.getMethod(),current.entry.getMethod()));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,length,current.in.read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length-3);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393lastStoredEntry=entryEncoding.read(buffer,offset,length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393lastStoredEntry=entryEncoding.read(buffer,offset,length+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393lastStoredEntry=entryEncoding.read(buffer,offset,length,ze);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read-buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-read,buffer.length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-read,buffer.length-read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read-length,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read+length,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor?true:false;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor=hasUTF8Flag||allowStoredEntriesWithDataDescriptor?true:false;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor=!allowStoredEntriesWithDataDescriptor?true:false;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor=hasUTF8Flag?hasUTF8Flag:allowStoredEntriesWithDataDescriptor;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor=hasUTF8Flag||hasUTF8Flag;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor=hasUTF8Flag?read:allowStoredEntriesWithDataDescriptor;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,length-read+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,length*read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,length-read));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,length*1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,length*2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length);if(read>0){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,length-1+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,length,0);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,length,read+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length,LBH_LEN);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length,current.in.read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLenient(buffer,offset,length+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDelimiter(current.in,buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393if(read==0){current.crc.update(buffer,offset,read);}else{thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393if(read!=0){current.crc.update(buffer,offset,length);}else{thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393if(read!=0){current.crc.update(buffer,offset,read);}else{thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMetho
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393if(read!=0){read=current.in.read(buffer,offset,length);}else{thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393if(read!=0){current.crc.update(buffer,offset,read);}else{thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLoop(buffer,offset,length-2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLoop(buffer,offset,length+2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.entry.read(buffer,offset,length-2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.entry.read(buffer,offset,length-read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,length-3);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read-bytesRead,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read-bytesRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-read,0,bytesRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-read,max);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length);if(read>=0){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current.entry.getMet
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length+1);if(read>=0){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current.entry.getMet
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length-1);if(read==0){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current.entry
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length-1);if(read>=0){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current.entry.getMet
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393lastStoredEntry=entryEncoding.decode(buffer,offset,length+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393lastStoredEntry=entryEncoding.decode(buffer,offset,length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393lastStoredEntry=ZipEncoding.decode(current.entry,buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393lastStoredEntry=ZipArchiveEntry.decode(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length*4-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDelimiter(current.entry.getMethod(),current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDelimiter(current.entry.getMethod(),current.entry.getCharset());
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDelimiter(current.entry.getMethod(),current.entry.getValue());
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDelimiter(current.entry.getMethod(),current.entry.getEnd());
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDelimiter(current.entry.getMethod(),current.entry.getEntryCount());
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length-read+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length-read,lastStoredEntry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDecoded(buffer,offset,length-2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDecoded(buffer,offset,length+2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=in.read(buffer,offset,length+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length-1);if(read==0){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,buffer.length-2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length+1);if(read>=0){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393if(read!=0){current.crc.update(buffer,offset,length);}else{thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current.ent
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393if(read!=0){read=readDeflated(buffer,offset,length);}else{thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current.ent
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor(current.entry,read,ze);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor(current.entry,read,lastStoredEntry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor(current.entry,read,hasUTF8Flag);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,read+length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-read,fileNameLen);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-read,end);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=ze.in.read(buffer,offset,length+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=ze.in.read(buffer,offset,length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLimit(current.entry.getMethod(),current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLimit(current.entry.getMethod(),current.entry.getValue());
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLimit(current.entry.getMethod(),current.entry.getChars());
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLimit(current.entry.getMethod(),current.entry.getEntryCount());
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read-start,current.in);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-read,current.in,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read-buffer,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read-offset,current.in);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read-read,current.in);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor=hasUseUnicodeExtraFields||current.in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=read.read(buffer,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length/1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length*1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393if(read!=0){current.crc.update(buffer,offset,length);}else{thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current.
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length+2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length,DFH_LEN);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLimit(buffer,offset,length-2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readReadLimit(buffer,offset,length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length*1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length/1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read-offset+length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=read.read(buffer,offset,length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length-1+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length-3);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length,bytesRead+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length-bytesRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length,bytesReadFromStream);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393if(read!=0){read=readDeflated(buffer,offset,length);}else{thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393if(read!=0){read=readDeflated(buffer,offset,length+1);}else{thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current.entry
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393if(read!=0){read=readDeflated(buffer,offset,length);}else{thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393if(read!=0){read=readDeflated(buffer,offset,length);}else{thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current.
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393if(read!=0){read=readDeflated(buffer,off,length);}else{thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current.entry
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readRead(buffer,offset,length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readRead(buffer,offset,length+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor(read,hasUTF8Flag){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor,hasUTF8Flag){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor||hasUTF8Flag){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393enableStoredEntriesWithDataDescriptor=hasUTF8Flag&&current.in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=read.in.read(buffer,offset,length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=read.in.read(buffer,offset,length+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=ze.read(buffer,offset,length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=inputStream.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length-1+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-1,zipEncoding);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length,fileNameLen);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,length-0);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLimit(current.in.read(buffer,offset,length),current.entry.getMethod());
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLimit(current.entry.getMethod(),current.entry.getMethod())+1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length,current.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length-1,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,read-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,read+length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length/2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393if(read==0){current.crc.update(buffer,offset,read);}else{thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393if(read!=0){current.crc.update(buffer,offset,length);}else{thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length+1);if(read!=0){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length/2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length,DD);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read+length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,length*2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length,read,lastStoredEntry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLimits(buffer,offset,length+2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-1,current.in);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length,current.in,reader);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length,current.in,0);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length,DFH_LEN);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length,0,0);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,length-1,fileNameLen);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,length,reader);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readReadInputStream(buffer,offset,length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,length-read+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,length-read,lastStoredEntry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,length-read)+1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,length*read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset+length,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset+1,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393if(read!=0){current.crc=crc.update(buffer,offset,read);}else{thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length,LBH_LEN);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length,DD);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393lastStoredEntry=entryEncoding.read(buffer,offset,length,zipEncoding);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length,CFH_LEN,LFH_BUF);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length,CFH_LEN,LFH_LEN);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length-1);if(read>=0){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,length-read,off);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,length-read,end);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length,current.in,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length,current.in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393reader=current.in.read(buffer,offset,length);if(read>=0){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current.entry.getMet
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length-1);if(read>=0){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current.entry.
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length-1);if(read>=0){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current.entry
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length,current.entry.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length,bytesRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=this.in.read();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length,current.in,entryEncoding);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CRC32crc=current.in.read(buffer,offset,length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393if(read==0){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393if(current.in!=null){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393if(read==0){read=readDeflated(buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393if(read!=0){read=readDeflated(buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-off);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length,buffer,fileNameLen);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,length,buffer,fileNameLen);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length-1);if(read!=0){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=read.read(buffer,offset,length+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length,buffer.length-2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length,current.in.read-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length,current.in.read());
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length,CFH_EXP_32);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393if(read==0){read=readDeflated(buffer,offset,length);}else{thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current.entry
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length*2-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393if(current.in!=null){read=in.read(buffer,offset,length);if(read==0){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLenient(buffer,offset,length-2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDecoded(buffer,offset,length,zipEncoding);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length,DD);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length,LBH_LEN);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length,current.entry.offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length,reader);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length,current.in,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length,current.in,current.in);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-read,bytesRead,entryEncoding);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-bytesRead,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-1,read,current.in);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-1,inputStream);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-1,buffer,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-1,reader);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length*2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflatedByteBuffer(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-1,crc,entryEncoding);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.entry.in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-read,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-read,endpoint);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-read,buffer,firstEntry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-read,entryEncoding);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor=hasUTF8Flag?1:allowStoredEntriesWithDataDescriptor;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor=hasUTF8Flag?this:allowStoredEntriesWithDataDescriptor;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor=hasDataDescriptor&&current.in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor=allowedStoredEntriesWithDataDescriptor&&current.in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length*2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,length-16);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor(current.entry,ze);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLimit(current.entry.getMethod(),current.entry.getName());
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length,zipEncoding,entryEncoding);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length,reader,zipEncoding);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor(read,closed){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor(read,hasUTF8Flag)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor(read,closed)){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393lastStoredEntry=entryEncoding.decode(buffer,offset,length,zipEncoding);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393lastStoredEntry=entryEncoding.decode(buffer,offset,length,current.in);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor=allowedStoredEntriesWithDataDescriptor?true:false;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor=hasDataDescriptor?true:false;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor=allowStoredEntriesWithDataDescriptor?true:null;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393if(read!=0){current.crc=crc.update(buffer,offset,read);}else{thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current.
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393if(read==0){read=readDeflated(buffer,offset,length);}else{thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393if(read!=0){current.crc.update(buffer,offset,end);}else{thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read/2-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read-lastStoredEntry,current.in);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-read,current.in,entryEncoding);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-read,current.in,current.in);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length,current.in.read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDelimiter(buffer,offset,length,zipEncoding);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,length,reader);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDelimiter(current.entry.getMethod(),current.entry.getMethod());
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDelimiter(current.entry.getMethod(),current.entry.getName());
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-read,buffer.length-off);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-read,buffer.length-2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLimit(current.entry.getMethod(),current.entry.getMethod(),current.in);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readOutputStream(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.entry.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset+1,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,buffer.length-length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,buffer.length-off);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor=current.in||allowStoredEntriesWithDataDescriptor.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor=current.in||allowStoredEntriesWithDataDescriptor;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393if(read!=0){current.crc.update(buffer,offset,length+1);}else{thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current.entry
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length-1,current.in.read());
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length-1,current.in.read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=entry.in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length,current.entry.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,length,current.entry.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,length,current.length);
