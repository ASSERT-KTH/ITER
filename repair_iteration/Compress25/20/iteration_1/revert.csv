projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393if(read!=0){current.crc.update(buffer,offset,read);}else{thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393if(read!=0){current.crc.update(buffer,offset,read);}else{thrownewUnsupportedZipFeatureException(ZipMethod.IMPLODING,current.entry.getMethod());}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393if(read!=0){current.crc.update(buffer,offset,read);}else{thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current.entry
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393if(read!=0){current.crc.update(buffer,offset,read);}else{buffer=readDeflated(buffer,offset,length);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393if(read!=0){current.crc.update(buffer,offset,read);}else{thrownewUnsupportedZipFeatureException(ZipMethod.IMPLODING,entryEncoding);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length,CFH_LEN);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length,0);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,length,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,length+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.entry.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,length,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=read.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDecoded(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLimit(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLimits(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readRead(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor(current.entry,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-1,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-1,crc);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length*2-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-read,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-read,bytesRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,length-read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length);if(read==0){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=in.read(buffer,offset,length);if(read==0){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length);if(read!=0){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length);if(read==0){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current.entry.getMet
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length);if(read>=0){thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length);if(read!=0){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length,CFH_LEN);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readInputStream(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=read.read();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length,0);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length,CFH_LEN);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length,bytesRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor(current.entry.getMethod(),current.entry.getMethod()));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor=allowStoredEntriesWithDataDescriptor||current.in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor=allowStoredEntriesWithDataDescriptor;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor=allowStoredEntriesWithDataDescriptor&&current.in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor=allowStoredEntriesWithDataDescriptor?true:false;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLoop(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393allowStoredEntriesWithDataDescriptor){
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,length,CFH_LEN);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,length,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,length+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,length,fileNameLen);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length,current.in);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length,CFH_LEN);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length,0);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length+2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length-read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntrycurrent=current.in.read(buffer,offset,length-2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length-2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=current.in.read(buffer,offset,length+2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,length-2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read,0);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=read.in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLimit(current.entry.getMethod(),current.entry.getMethod());
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLimit(current.entry.getMethod());
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393if(read!=0){current.crc.update(buffer,offset,read);}else{thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393if(read!=0){current.crc.update(buffer,offset,read);}else{thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393if(read!=0){current.crc.update(buffer,offset,read);}else{thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current.
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393if(read!=0){current.crc.update(buffer,offset,read);}else{thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current.ent
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393if(read!=0){current.crc.update(buffer,offset,length);}else{thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current.entry
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDelimiter(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDeflated(buffer,offset,length-2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,length-2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393CurrentEntry<K,V>current=current.in.read(buffer,offset,length-read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read-length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,read-offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-read,lastStoredEntry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=ze.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=ze.in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length,current.in);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length,zipEncoding);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393if(read!=0){read=readDeflated(buffer,offset,length);}else{thrownewUnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),current.entry
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readLenient(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=readDelimiter(current.entry.getMethod());
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393lastStoredEntry=entryEncoding.decode(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393lastStoredEntry=entryEncoding.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=in.read();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393read=read.read(buffer);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java393current.crc.update(buffer,offset,length-read,current.in);
