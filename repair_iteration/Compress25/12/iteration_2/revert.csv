projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-current.bytesRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead+1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncsize;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-(current.bytesRead+length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead&&current.bytesRead<=length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return0;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead+csize;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead&&isEnabled(current.bytesRead));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead&&isEnabled(current.bytesRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead+length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-csize;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead+current.bytesRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead/csize;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead+csize+1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead+size;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead+csize+length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesReadFromStream;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead-toRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnin.read(buffer,toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesReadFromStream-toRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&isEnabled(current.bytesRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead,toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead&&isEnabled(current.bytesRead,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead&&isEnabled(toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&isEnabled(current.size);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead||isEnabled(current.bytesRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead&&current.bytesRead<length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead&&current.bytesRead<=offset;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead&&current.bytesRead>=length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead&&current.bytesRead==length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead&&current.bytesRead<=length-1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-current.bytesRead<=length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead&&toRead<=length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435thrownewIllegalStateException("");
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435thrownewIllegalArgumentException("");
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(toRead==0)?0:1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(toRead<0)?0:1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(toRead>=0)?0:1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&toRead<=0;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&isEnabled(toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&hasUTF8Flag;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&csize>current.bytesRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&isEnabled(current.size));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncsize+1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncsize+toRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnbytesRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnmax;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-current.bytesRead+1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncsize-current.bytesRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-current.bytesRead+length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead*current.bytesRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead/current.bytesRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435System.arraycopy(buf,offset,current.bytesRead,0,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){for(inti=0;i<length;++i){buf.get(buffer,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){for(inti=0;i<length;++i){buf.set(i,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435System.arraycopy(buf,offset,current.bytesRead,0,buf.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435System.arraycopy(buf,offset,current.bytesRead,0,length);buf.remaining();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435System.arraycopy(buf,offset,current.bytesRead,0,toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){for(inti=0;i<length;++i){buf.put(buffer,off,toRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead+1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead-1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead+csize;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead+length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead+toRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-(current.bytesRead+offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-(current.bytesRead*length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead-(toRead+length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-(current.bytesRead+length,buf.length());
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnlength-(current.bytesRead+toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-(current.bytesRead+off,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-(current.bytesRead+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-2;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-1L;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead/1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead+2;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead+1L;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncsize&&current.bytesRead<=length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead&&current.bytesRead!=length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead||current.bytesRead<=length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnhasDataDescriptor&&isEnabled(current.bytesRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnbytesReadFromStream;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncsize+bytesReadFromStream;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncsize+(current.bytesReadFromStream);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(toRead==0)?1:0;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrToRead-current.bytesRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&!current.allowStoredEntriesWithDataDescriptor);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&hasUTF8Flag());
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&hasUTF8Flag();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead-(int)Math.ceil(current.bytesRead)/(int)Math.ceil(toRead)+(int)Math.ceil(current.bytesRead)*(int)Math.ceil(
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead-(int)Math.ceil(current.bytesRead)/(int)Math.ceil(toRead)+(int)Math.ceil(current.bytesRead));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead-(int)Math.ceil(current.bytesRead)/(int)Math.ceil(toRead)+(int)Math.ceil(current.bytesRead)*(int)Math.ceil(current.
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead-(int)Math.ceil(current.bytesRead)/(int)Math.ceil(toRead)+(int)Math.ceil(current.bytesRead)*(int)Math.ceil(current
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(current.bytesRead==null){System.arraycopy(buf,offset,current.bytesRead,0,length);buf.remaining();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){System.arraycopy(buf,offset,current.bytesRead,0,length);buf.remaining();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(current.bytesRead==null){for(inti=0;i<length;++i){buf.get(i,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(current.bytesRead==null){System.arraycopy(buf,offset,current.bytesRead,0,length);buf.get(buffer,offset,toRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(current.bytesRead==null){System.arraycopy(buf,offset,current.bytesRead,0,length);}else{buf.remaining();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-(current.bytesRead+offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-(current.bytesRead+length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnbytesRead-(current.bytesRead+length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnlength-current.bytesRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)||isEnabled(current.bytesRead));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&isEnabled(current.inputStream));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&isEnabled(current.size());
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead<=toRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead&&current.bytesRead<=csize;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(current.bytesRead<0)?0:current.bytesRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(int)current.bytesRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(current.bytesRead<0)?0:1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead+offset;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.inputStream;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.cloneTree();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.cloneTreeLimit;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.cloneTree;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.cloneTwin();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){for(inti=0;i<length;++i){buffer[i]=inputStream.read(buffer,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){for(inti=0;i<length;++i){buf.remaining();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){System.arraycopy(current.bytesRead,0,buffer,offset,length);current.bytesRead+=length;}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){for(inti=0;i<length;++i){buf.reset();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){System.arraycopy(buf,offset,current.bytesRead,0,length);buffer.remaining();}else{buf.put(buffer,offset,toRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){System.arraycopy(current.bytesRead,0,buffer,offset,length);current.bytesRead+=length;}else{buf.put(buffer,offset,toRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnthis.inputStream;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.size;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncsize-(current.bytesRead+length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead&&toRead<=length-1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead&&toRead<=csize;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead&&toRead==length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead&&toRead<=toRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead&&toRead<length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435System.arraycopy(current.bytesRead,offset,buffer.bytesRead,0,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435System.arraycopy(current.bytesRead,offset,buf.length,0,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435System.arraycopy(buf,offset,current.bytesRead,0,current.bytesRead.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435System.arraycopy(current.bytesRead,offset,buffer,0,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435System.arraycopy(buf,offset,current.bytesRead,0,current.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435System.arraycopy(current.bytesRead,offset,buf.offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435while(current.bytesRead!=null){for(inti=0;i<length;++i){buf.get(i,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435||current.bytesRead==null){for(inti=0;i<length;++i){buf.get(i,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435while(current.bytesRead!=null){for(inti=0;i<length;++i){current.bytesRead=buf.get(i,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435while(current.bytesRead!=null&&current.bytesRead<=length){for(inti=0;i<length;++i){buf.get(i,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435while(current.bytesRead!=null&&current.bytesRead<length){for(inti=0;i<length;++i){buf.get(i,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435while(current.bytesRead!=null){if(length==0){for(inti=0;i<length;++i){buf.get(i,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead-length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnthis.bytesRead-current.bytesRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnbytesRead-current.bytesRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnfromRead-current.bytesRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnin.read(current.bytesRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead+(csize);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead+(current.bytesReadFromStream);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncsize+(current.bytesReadFromStream+length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnin.read(buf,csize+current.bytesReadFromStream);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnbuffer+(current.bytesReadFromStream);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnbuf.length+(current.bytesReadFromStream);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnbytesRead+(current.bytesReadFromStream);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnhasUTF8Flag()&&isEnabled(current.bytesRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnhasUTF8Flag()&&isEnabled(current.bytesRead));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnhasUTF8Flag(current.bytesRead)&&isEnabled(current.bytesRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)||hasUTF8Flag());
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&hasUTF8Flag()&&fileNameLen;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&hasUTF8Flag()&&buffer.length()>toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435allowStoredEntriesWithDataDescriptor){for(inti=0;i<length;++i){buf.set(i,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435allowStoredEntriesWithDataDescriptor(current.bytesRead,offset,length)){for(inti=0;i<length;++i){buf.set(i,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435allowStoredEntriesWithDataDescriptor){for(inti=0;i<current.bytesRead;++i){buf.set(i,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435allowStoredEntriesWithDataDescriptor){for(inti=0;i<toRead;++i){buf.set(i,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435allowStoredEntriesWithDataDescriptor){for(inti=0;i<size;++i){buf.set(i,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435||length>0){for(inti=0;i<length;++i){buf.set(i,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435allowStoredEntriesWithDataDescriptor&&current.bytesRead<=length){for(inti=0;i<length;++i){buf.set(i,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(current.bytesRead<=0)?0:1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(current.bytesRead>=0)?0:1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(current.bytesRead<0)?0:2;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(current.bytesRead<0)?1:1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(current.bytesRead==0)?0:1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead-(length+toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncsize-(current.bytesRead+toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnfromRead-(current.bytesRead+length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead+(current.bytesRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead*(current.bytesRead+length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnin.read(current.bytesRead+length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-size;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead/size;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead+size-1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnhasUTF8Flag&&isEnabled(current.bytesRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)||hasUTF8Flag;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&hasUTF8Flag||hasDataDescriptor;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&hasUTF8Flag||csize;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&!hasUTF8Flag;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead-(long)Math.ceil(current.bytesRead)/(long)Math.ceil(toRead)+(long)Math.ceil(current.bytesRead)*(long)Math.ceil(current.
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead-(int)Math.ceil(current.bytesRead)/(int)Math.ceil(toRead)+(int)Math.ceil(current.bytesRead)*(int)Math.ceil
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead/1L;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-1L+length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-1L<<length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead*1L;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-1L--length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncsize-toRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead*csize;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-max;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-(current.bytesRead+length*2-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-(current.bytesRead+offset,length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-(current.bytesRead+offset-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead-(toRead+length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-(current.bytesRead+length/1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-(current.bytesRead*length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnlength-(current.bytesRead+csize);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead-(csize+length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncsize-(current.bytesRead*length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnlength-(current.bytesRead+size);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnsize-(current.bytesRead+toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead&&current.bytesRead==offset;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead&&current.bytesRead>=offset;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead&&current.bytesRead<offset;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead&&current.bytesRead!=offset;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead||current.bytesRead<=offset;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead&&current.bytesRead<csize;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead&&current.bytesRead<size;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead&&current.bytesRead==csize;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead&&current.bytesRead>=csize;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead&&current.bytesRead<=size;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead&&current.bytesRead!=csize;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(byte)current.bytesRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(int)current.bytesRead+1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(int)current.bytesRead&0xff;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(int)current.bytesReadFromStream;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(int)current.bytesRead-1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(int)current.bytesRead-toRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead/2;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-offset;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead<=length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead<toRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead<current.bytesRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead<=csize;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead<=toRead+1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead<=0;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnbytesRead.length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnbytesRead-toRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnbytesRead&0xff;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead-2;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead/1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead-1L;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead&&current.bytesRead+length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead&&current.bytesRead>length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead&&toRead>=length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead&&current.bytesRead>=buffer.length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesReadFromStream-toRead+1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesReadFromStream+toRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesReadFromStream/toRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesReadFromStream-toRead+length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435System.arraycopy(current.bytesRead,offset,current.bytesRead,0,length);buf.remaining();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){System.arraycopy(buf,offset,current.bytesRead,0,length);current.bytesRead.remaining();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435System.arraycopy(current.bytesRead,offset,current.bytesRead,0,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){System.arraycopy(buf,offset,current.bytesRead,0,current.bytesRead.length);buf.remaining();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){System.arraycopy(buf,offset,current.bytesRead,0,current.bytesRead);buf.remaining();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){System.arraycopy(buffer,offset,current.bytesRead,0,length);buf.remaining();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-(current.bytesRead*offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead-(toRead+toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead-(toRead+offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesReadFromStream.cloneTree();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.cloneTree()&&length>0;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.cloneTree(),toRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.cloneTree()&&buffer.length()>0;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.clone();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-(current.bytesRead+offset,toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead-(toRead+off,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-(current.bytesRead+offset,length-current.bytesRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-(current.bytesRead+offset,current.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead-(toRead+offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead+length+csize;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead+current.bytesRead+length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncsize+toRead+length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead+offset+length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead+csize+current.bytesRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead+csize+length+1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){thrownewIllegalArgumentException("");}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435Throwables.thrownewIllegalArgumentException("");
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){thrownewIllegalArgumentException("".getMessage());}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435thrownewIllegalArgumentException("InputStreamisnotsupportedby:"+csize);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.cloneTreeLimit+toRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.cloneTreeLimit-toRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.cloneTreeLimit+1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.cloneTreeLimit+length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.cloneTreeLimit-1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnbytesRead-(current.bytesRead+toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnbytesRead-(current.bytesRead+offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnbytesRead-(current.bytesRead*length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnlength-(current.bytesRead+bytesRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnbytesRead-(current.bytesRead+length,toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead-(bytesRead+length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435allowStoredEntriesWithDataDescriptor){for(inti=0;i<length;++i){buf.get(buffer,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435allowStoredEntriesWithDataDescriptor){for(inti=0;i<size;++i){buf.get(buffer,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435allowStoredEntriesWithDataDescriptor){for(inti=0;i<toRead;++i){buf.get(buffer,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435allowStoredEntriesWithDataDescriptor(current.bytesRead,offset,length)){for(inti=0;i<length;++i){buf.get(buffer,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435allowStoredEntriesWithDataDescriptor){for(inti=0;i<current.bytesRead;++i){buf.get(buffer,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435allowStoredEntriesWithDataDescriptor&&current.bytesRead<=length){for(inti=0;i<length;++i){buf.get(buffer,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435allowStoredEntriesWithDataDescriptor&&current.bytesRead<length){for(inti=0;i<length;++i){buf.get(buffer,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead+offset;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead+length-1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead+buf.length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead+buffer.length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435System.arraycopy(current.bytesRead,offset,buf.bytesRead,0,toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435System.arraycopy(current.bytesRead,offset,buffer.bytesRead,0,toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435System.arraycopy(current.bytesRead,offset,buf.length,0,toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435System.arraycopy(current.bytesRead,offset,buffer,0,toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435System.arraycopy(buffer,offset,current.bytesRead,0,toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435System.arraycopy(current.bytesRead,offset,current.bytesRead,0,toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead*toRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead*current.bytesRead+length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead*current.bytesRead+1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead*current.bytesRead-1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncsize*current.bytesRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead+current.bytesRead+1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead+length+1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead+csize+2;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-csize+1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead+max+1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncsize+toRead+1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead-(long)Math.ceil(current.bytesRead)/(long)Math.ceil(toRead)+(long)Math.ceil(current.bytesRead)*(long)Math.ceil(current
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead-(int)Math.ceil(current.bytesRead)/(int)Math.ceil(toRead)+(int)Math.ceil(current.bytesRead)*(int)Math.ce
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(toRead==1)?0:1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(toRead==0)?1:1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(toRead==0)?0:2;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(toRead==0)?-1:1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(toRead!=0)?0:1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length==0){System.arraycopy(buf,offset,current.bytesRead,0,current.bytesRead.length);buf.remaining();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(current.bytesRead==null){System.arraycopy(buf,offset,current.bytesRead,0,length);current.bytesRead.remaining();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length!=0){System.arraycopy(buf,offset,current.bytesRead,0,current.bytesRead.length);buf.remaining();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead||isEnabled(current.bytesRead));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead,csize);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead-toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead&&current.bytesRead==0;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead&&current.bytesRead==buffer.length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead||current.bytesRead==length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnin.read(buffer,toRead,current.bytesRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnin.read(buffer,offset,toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead?max:bytesReadFromStream;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead+buffer.length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead+offset,length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnoffset+toRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-(current.bytesRead+length,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-(current.bytesRead+length,current.offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-(current.bytesRead+offset,length,buf.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(toRead>0)?0:1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(toRead>>0)?0:1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(toRead>=1)?0:1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead||current.bytesRead<length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead||current.bytesRead<length-1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead||toRead<=length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead||current.bytesRead<length+1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead||current.bytesRead<=length-1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead||current.bytesRead>=length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead-currToRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrToRead-current.bytesRead+1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrToRead/current.bytesRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrToRead-current.bytesRead+length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){thrownewIllegalStateException("");}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435Throwables.thrownewIllegalStateException("");
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){thrownewIllegalStateException("");}else{System.arraycopy(buf,offset,current.bytesRead,0,current.bytesRead);buf.put(buffer,offset,toRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435thrownewIllegalStateException("Failedtoreadfromstream:"+buf.remaining());
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){thrownewIllegalStateException("");}else{System.arraycopy(buf,offset,current.bytesRead,0,current.bytesRead);buf.remaining();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){thrownewIllegalStateException("");}else{System.arraycopy(buf,offset,current.bytesRead,0,toRead);buf.put(buffer,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnbytesReadFromStream-current.bytesRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnbytesReadFromStream-toRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnbytesReadFromStream.length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead+2;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead+0;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead,off,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead,buf.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead,offset+length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){System.arraycopy(current.bytesRead,0,buffer,offset,toRead);current.bytesRead+=length;}else{buf.put(buffer,offset,toRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){System.arraycopy(buffer,0,current.bytesRead,offset,length);current.bytesRead+=length;}else{buf.put(buffer,offset,toRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){System.arraycopy(current.bytesRead,0,buffer,offset,toRead);current.bytesRead+=length;}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){System.arraycopy(current.bytesRead,0,buf,offset,length);current.bytesRead+=length;}else{buf.put(buffer,offset,toRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435System.arraycopy(current.bytesRead,0,buffer,offset,toRead);current.bytesRead+=length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&toRead==0;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&toRead<0;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&toRead>=0;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&toRead!=0;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&toRead<=1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&toRead<=length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead-csize;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncsize-current.bytesRead+1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead-size;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)||isEnabled(toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&isEnabled(toRead,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&isEnabled(buf,toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(toRead)&&isEnabled(current.bytesRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead&&csize<=length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncsize-current.bytesRead<=length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncsize&&current.bytesRead<=toRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncsize&&current.bytesRead<length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncsize-current.bytesRead+length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncsize&&current.bytesRead==length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(toRead<=0)?0:1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(toRead<1)?0:1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(toRead<0)?1:1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-(int)Math.ceil(current.bytesRead)/(int)Math.ceil(current.bytesRead)+(int)Math.ceil(current.bytesRead));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead-(long)Math.ceil(current.bytesRead)/(long)Math.ceil(toRead)+(long)Math.ceil(current.bytesRead));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncsize-(int)Math.ceil(current.bytesRead)/(int)Math.ceil(toRead)+(int)Math.ceil(current.bytesRead));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-(int)Math.ceil(current.bytesRead)/(int)Math.ceil(toRead)+(int)Math.ceil(current.bytesRead));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead*(int)Math.ceil(current.bytesRead)/(int)Math.ceil(toRead)+(int)Math.ceil(current.bytesRead));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead-(int)Math.ceil(current.bytesRead)/(int)Math.ceil(current.bytesRead)+(int)Math.ceil(current.bytesRead));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncsize+current.bytesRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead+csize+1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead+bytesRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnbytesRead+csize;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnin.read(buf,offset+bytesReadFromStream);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnbuffer+bytesReadFromStream;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnin.read(buf,csize+bytesReadFromStream);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnoffset+bytesReadFromStream;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&isEnabled(current.size()-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&isEnabled(current.size()-toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&isEnabled(current.size()+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)||isEnabled(current.size());
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&isEnabled(current.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&isEnabled(current.size()-2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&isEnabled(current.remaining());
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead+0L;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead+1,length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-(current.bytesRead*1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead-(toRead+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-(current.bytesRead+2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-(current.bytesRead-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-(current.bytesRead+length*2);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&!current.allowStoredEntriesWithDataDescriptor||hasUTF8Flag;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&!current.allowStoredEntriesWithDataDescriptor;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&!current.allowStoredEntriesWithDataDescriptor,hasUTF8Flag);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&!current.allowStoredEntriesWithDataDescriptor&&hasUTF8Flag;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435System.arraycopy(current.bytesRead,offset,buffer.bytesRead,0,length);buf.remaining();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435System.arraycopy(buffer,offset,current.bytesRead,0,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length==0){System.arraycopy(buf,offset,current.bytesRead,0,length);}else{buf.remaining();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length==0){System.arraycopy(buf,offset,current.bytesRead,0,current.bytesRead.length);}else{buf.remaining();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(current.bytesRead==null){System.arraycopy(buffer,offset,current.bytesRead,0,length);}else{buf.remaining();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length==0){System.arraycopy(buf,offset,current.bytesRead,0,size);}else{buf.remaining();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.size-toRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.size-1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.size+1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.size+toRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.size+bytesReadFromStream;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)||hasUTF8Flag();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&hasUTF8Flag(toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&hasUTF8Flag(length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-current.bytesRead-length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-current.bytesRead<length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-current.bytesRead<=length-1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-current.bytesRead<=offset;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead-toRead<=length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead,length));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead),length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead,offset));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead+length));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435while(current.bytesRead<length){if(length>0){for(inti=0;i<length;++i){buffer[i]=inputStream.read(buffer,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435allowStoredEntriesWithDataDescriptor){for(inti=0;i<length;++i){buffer[i]=inputStream.read(buffer,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435allowStoredEntriesWithDataDescriptor(current.bytesRead,offset,length)){for(inti=0;i<length;++i){buffer[i]=inputStream.read(buffer,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435allowStoredEntriesWithDataDescriptor){for(inti=0;i<size;++i){buffer[i]=inputStream.read(buffer,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435allowStoredEntriesWithDataDescriptor(current.bytesRead,length)){for(inti=0;i<length;++i){buffer[i]=inputStream.read(buffer,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435while(current.bytesRead<length){for(inti=0;i<length;++i){buffer[i]=inputStream.read(buffer,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435allowStoredEntriesWithDataDescriptor){for(inti=0;i<current.bytesRead;++i){buffer[i]=inputStream.read(buffer,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)||isEnabled(current.bytesRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&isEnabled(current.bytesRead,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&isEnabled(current.bytesRead,toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&isEnabled(current.inputStream,length));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)||isEnabled(current.inputStream));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&isEnabled(current.inputStream,buf.length()));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&isEnabled(current.inputStream,csize));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&isEnabled(current.inputStream,offset+length));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&isEnabled(current.inputStream,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.inputStream)&&isEnabled(current.bytesRead));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead&&toRead!=length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead&&current.bytesRead!=0;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&isEnabled(current.size-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&isEnabled(current.size+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&isEnabled(current.size,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)||isEnabled(current.size);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&isEnabled(current.size-toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&isEnabled(current.size,toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-buffer.length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnlength-toRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead/length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead*length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(toRead==1)?1:0;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(toRead==0)?2:0;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(toRead==0)?1:-1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(toRead>=0)?1:0;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(toRead==0)?1L:0;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(toRead!=0)?1:0;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-(current.bytesRead*length+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-(current.bytesRead*offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead-(toRead*length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-(current.bytesRead*length,buf.length());
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-(current.bytesRead*buf.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-(current.bytesRead*size);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435allowStoredEntriesWithDataDescriptor){for(inti=0;i<length;++i){buf.put(buffer,offset,toRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435allowStoredEntriesWithDataDescriptor){for(inti=0;i<toRead;++i){buf.put(buffer,offset,toRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435allowStoredEntriesWithDataDescriptor){for(inti=0;i<current.bytesRead;++i){buf.put(buffer,offset,toRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435allowStoredEntriesWithDataDescriptor){for(inti=0;i<size;++i){buf.put(buffer,offset,toRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435allowStoredEntriesWithDataDescriptor){for(inti=0;i<length;++i){buf.put(buffer,off,toRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435allowStoredEntriesWithDataDescriptor){for(inti=0;i<size;++i){buf.put(buffer,off,toRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435||length>0){for(inti=0;i<length;++i){buf.put(buffer,offset,toRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead*1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead/4;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead%2;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead-(toRead+length,buf.length());
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead-(toRead+length,toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){System.arraycopy(buf,offset,current.bytesRead,0,length);buffer.remaining();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){System.arraycopy(buffer,offset,current.bytesRead,0,length);buffer.remaining();}else{buf.put(buffer,offset,toRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){System.arraycopy(buf,offset,current.bytesRead,0,toRead);buffer.remaining();}else{buf.put(buffer,offset,toRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){System.arraycopy(current.bytesRead,offset,current.bytesRead,0,length);buffer.remaining();}else{buf.put(buffer,offset,toRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){System.arraycopy(buf,offset,current.bytesRead,0,size);buffer.remaining();}else{buf.put(buffer,offset,toRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435System.arraycopy(current.bytesRead,offset,current.bytesRead,0,length);buffer.remaining();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&isEnabled(current.size-1));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&isEnabled(current.size+1));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&isEnabled(current.size,length));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)||isEnabled(current.size));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&isEnabled(current.size),length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&isEnabled(current.size-toRead));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&isEnabled(current.size+2));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead-toRead+1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-current.bytesRead+2;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.inputStream-toRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.inputStream-1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.inputStream+1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.inputStream-offset;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.inputStream-start;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncsize/toRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead/toRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead/csize;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead||isEnabled(toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead||isEnabled(current.bytesRead,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncsize||isEnabled(current.bytesRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead.read(buffer,toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnbuf.read(buffer,toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead.read(buffer,in);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnbuf.read(buffer,offset,toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead.read(buffer,in);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.read(buffer,toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead+length-1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead&&current.bytesRead<buf.length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead&&current.bytesRead<buffer.length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead&&current.bytesRead<length-1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-current.bytesRead+offset;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead-toRead+length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnlength-current.bytesRead+toRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-current.bytesRead+buffer.length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-current.bytesRead+offset+length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-(current.bytesRead+offset,buf.length());
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-(current.bytesRead+length,buf.length()-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-(buf.length+length,current.bytesRead.length());
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-(current.bytesRead+offset,current.bytesRead.length());
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-(buf.length()+length,current.bytesRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-(buf.length+length,current.bytesRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead&&isEnabled(toRead,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesReadFromStream.cloneTwin();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.cloneTwin()&&hasUTF8Flag();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.cloneTwin()&&length>0;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.cloneTwin(toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead/current.bytesRead+length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead/current.bytesRead+1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncsize/current.bytesRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead/current.bytesRead,length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead+current.bytesRead-1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435System.arraycopy(current.bytesRead,0,buffer,offset,length);current.bytesRead+=length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){System.arraycopy(buffer,0,current.bytesRead,offset,length);current.bytesRead+=length;}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435readStored(current.bytesRead,0,buffer,offset,length);current.bytesRead+=length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435read(buffer,offset,length);current.bytesRead+=length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435while(current.bytesRead!=null){if(length>0){for(inti=0;i<length;++i){buf.reset();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435while(current.bytesRead<length){if(length>0){for(inti=0;i<length;++i){buf.reset();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){for(inti=0;i<toRead;++i){buf.reset();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){for(inti=0;i<size;++i){buf.reset();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435while(current.bytesRead<length){for(inti=0;i<length;++i){buf.reset();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){for(inti=0;i<current.bytesRead;++i){buf.reset();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesReadFromStream+1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesReadFromStream-1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesReadFromStream+length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesReadFromStream+csize;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesReadFromStream-bytesRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435while(current.bytesRead!=null){if(length>0){for(inti=0;i<length;++i){buf.remaining();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435while(current.bytesRead<length){if(length>0){for(inti=0;i<length;++i){buf.remaining();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){for(inti=0;i<toRead;++i){buf.remaining();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435while(current.bytesRead<length){for(inti=0;i<length;++i){buf.remaining();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){for(inti=0;i<size;++i){buf.remaining();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){for(inti=0;i<current.bytesRead;++i){buf.remaining();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead&&current.bytesRead>=length-1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead&&current.bytesRead<=offset-1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead&&current.bytesRead==length-1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(current.bytesRead<=0)?0:current.bytesRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(current.bytesRead<0)?0:current.bytesRead+1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(current.bytesRead<0)?1:current.bytesRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(current.bytesRead<0)?0:toRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(current.bytesRead<1)?0:current.bytesRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(current.bytesRead<0)?0:buf.length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead-toRead,length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead,offset,toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead,toRead,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead,length-toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead,off,toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(toRead,current.bytesRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnhasDataDescriptor&&isEnabled(current.bytesRead,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnhasDataDescriptor||isEnabled(current.bytesRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnhasDataDescriptor&&isEnabled(current.bytesRead,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnhasDataDescriptor&&isEnabled(current.bytesRead,toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnhasDataDescriptor&&isEnabled(current.bytesRead,size);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncsize+2;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncsize+1L;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnfromRead+1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&isEnabled(current.bytesRead));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)||isEnabled(current.bytesRead,length));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)||isEnabled(current.bytesRead+length));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)||isEnabled(current.bytesRead+1));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.cloneTree&&length>0;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.cloneTree+toRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.cloneTree||csize;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.cloneTree,toRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length==0){System.arraycopy(buf,offset,current.bytesRead,0,current.bytesRead);buf.get(buffer,offset,toRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435System.arraycopy(buf,offset,current.bytesRead,0,length);buf.get(buffer,offset,toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length==0){System.arraycopy(buf,offset,current.bytesRead,0,length);buf.get(buffer,offset,toRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435System.arraycopy(current.bytesRead,offset,current.bytesRead,0,length);buf.get(buffer,offset,toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435System.arraycopy(current.bytesRead,0,buffer,offset,toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435System.arraycopy(current.bytesRead,offset,buffer,0,length);current.bytesRead.get(buffer,offset,toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435System.arraycopy(buf,offset,current.bytesRead,0,toRead);buf.get(buffer,offset,toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435System.arraycopy(buf,offset,buf,0,current.bytesRead.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435System.arraycopy(buf,offset,current.bytesRead,0,buf.length-toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435System.arraycopy(buf,offset,current.bytesRead,0,buf.length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435System.arraycopy(buf,offset,buffer,0,current.bytesRead.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435System.arraycopy(buf,offset,current.bytesRead,0,buf.length+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-(int)Math.ceil(current.bytesRead)/(int)Math.ceil(toRead)+(int)Math.ceil(current.bytesRead)*(int)Math.ceil(
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435(int)Math.ceil(current.bytesRead)/(int)Math.ceil(toRead)+(int)Math.ceil(current.bytesRead)*(int)Math.ceil(
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead-(long)Math.ceil(current.bytesRead)/(long)Math.ceil(toRead)+(long)Math.ceil(current.bytesRead)*(long)Math.ceil(
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&csize<current.bytesRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&csize>=current.bytesRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&csize==current.bytesRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&csize<=current.bytesRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&length>current.bytesRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&csize>max);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&csize>toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(inputStream==null)?this.inputStream:inputStream;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(inputStream!=null)?this.inputStream:inputStream;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(inputStream==0)?this.inputStream:inputStream;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(inputStream==null)?this.inputStream:in;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(inputStream==0)?this.inputStream:in;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&hasUTF8Flag()&&current.lastStoredEntry;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&hasUTF8Flag()&&buffer.length()>0;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&hasUTF8Flag()+1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncsize+bytesReadFromStream+1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead+bytesReadFromStream;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncsize+bytesReadFromStream,buf.length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncsize+bytesReadFromStream.length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead/(int)Math.ceil(current.bytesRead)/(int)Math.ceil(toRead)+(int)Math.ceil(current.bytesRead));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead-(int)Math.ceil(current.bytesRead)/(int)Math.ceil(toRead)+(int)Math.ceil(current.bytesRead)+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead-(int)Math.ceil(current.bytesRead)/(int)Math.ceil(toRead)+(int)Math.ceil(current.bytesRead)-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnhasUTF8Flag&&isEnabled(current.bytesRead)&&!current.allowStoredEntriesWithDataDescriptor);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435System.arraycopy(current.bytesRead,offset,buf.offset,toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435System.arraycopy(current.bytesRead,offset,buf.length,toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return-(current.bytesRead+length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435thrownewIllegalArgumentException("Failedtoreadfromstream:"+buf.remaining());
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435thrownewIllegalArgumentException("Failedtoread:"+buf.remaining());
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435newIllegalArgumentException("");
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-(current.bytesReadFromStream);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnfromRead&&current.bytesRead<=length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncsize||current.bytesRead<=length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead+|current.bytesRead<=length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncsize+bytesRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead-toRead));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead+1));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(current.bytesRead==null){thrownewIllegalStateException("");}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435newIllegalStateException("");
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(current.bytesRead==null){thrownewIllegalStateException("".getMessage());}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead*(int)Math.ceil(current.bytesRead)/(int)Math.ceil(toRead)+(int)Math.ceil(current.bytesRead)*(int)Math.ceil(
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnlength-(current.bytesRead+toRead,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead-(toRead+length,current.bytesRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-(current.bytesRead+length,current.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-(current.bytesRead+length,buf.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-(current.bytesRead+length*1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnlength-(current.bytesRead+toRead-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead+3;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&isEnabled(buf);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&isEnabled(current.inputStream);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){for(inti=0;i<toRead;++i){buf.set(i,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){for(inti=0;i<current.bytesRead;++i){buf.set(i,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){for(inti=0;i<size;++i){buf.set(i,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435read(buffer,offset,length)){for(inti=0;i<length;++i){buf.set(i,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){for(inti=0;i<in.length;++i){buf.set(i,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){for(inti=0;i<offset;++i){buf.set(i,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead-(toRead+length,buf.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(current.bytesRead<0)?-1:current.bytesRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(current.bytesRead>=0)?0:current.bytesRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.size)&&isEnabled(current.bytesRead));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&isEnabled(current.length));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead&&current.bytesRead>=0;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncsize&&current.bytesRead!=toRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead||current.bytesRead!=length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead-(int)Math.ceil(current.length)/(int)Math.ceil(toRead)+(int)Math.ceil(current.bytesRead)*(int)Math.ceil(current
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnlength-(current.bytesRead*toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnbuffer-(current.bytesRead+length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnbytesRead+1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrToRead*current.bytesRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrToRead-toRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(current.bytesRead!=null){System.arraycopy(buf,offset,current.bytesRead,0,length);}else{buf.remaining();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(current.bytesRead==null){System.arraycopy(buf,offset,current.bytesRead,0,toRead);}else{buf.remaining();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length==0){System.arraycopy(current.bytesRead,offset,current.bytesRead,0,length);}else{buf.remaining();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(current.bytesRead-csize);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead&&toRead<=offset;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){System.arraycopy(current.bytesRead,0,buffer,offset,length+1);current.bytesRead+=length;}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){System.arraycopy(current.bytesRead,0,buf,offset,length);current.bytesRead+=length;}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435System.arraycopy(current.bytesRead,0,buf,offset,length);current.bytesRead+=length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.cloneTree&&hasUTF8Flag;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.cloneTree+1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncsize&&current.bytesRead<=length-1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-current.bytesRead+length-1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.cloneTreeLimit+lfh;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.cloneTreeLimit();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnbuffer-(current.bytesRead+toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(int)current.bytesRead=0;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(int)current.bytesRead+length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&hasUTF8Flag+1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&hasUTF8Flag&&current.lastStoredEntry;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&hasUTF8Flag&&current.inputStream;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){for(inti=0;i<toRead;++i){buf.get(buffer,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){for(inti=0;i<size;++i){buf.get(buffer,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){for(inti=0;i<current.bytesRead;++i){buf.get(buffer,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435read(buf,offset,length)){for(inti=0;i<length;++i){buf.get(buffer,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){for(inti=0;i<in.length;++i){buf.get(buffer,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){for(inti=0;i<offset;++i){buf.get(buffer,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435System.arraycopy(current.bytesRead,offset,buffer.length,0,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435System.arraycopy(current,offset,buf.bytesRead,0,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnin.read(buf,toRead+current.bytesRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(current.bytesRead==0)?1:0;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(toRead==0)?1:0L;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(current.bytesRead!=null){for(inti=0;i<length;++i){buf.get(i,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length==0){for(inti=0;i<current.bytesRead;++i){buf.get(i,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length==0){for(inti=0;i<length;++i){buf.get(i,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435while(current.bytesRead<length){for(inti=0;i<length;++i){buf.get(i,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length==0){for(inti=0;i<size;++i){buf.get(i,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){System.arraycopy(current.bytesRead,offset,current.bytesRead,0,length);buf.remaining();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){System.arraycopy(buf,offset,current.bytesRead,0,toRead);buf.remaining();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&bytesRead<=0;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){for(inti=0;i<end;++i){buf.remaining();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){for(inti=0;i<in.length;++i){buf.remaining();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){for(inti=0;i<len;++i){buf.remaining();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.storedEntry.cloneTwin();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.cloneTwin(buf);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.cloneByteBuffer();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.cloneFile();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435luate(current.bytesRead,offset,length)){for(inti=0;i<length;++i){buf.reset();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(current.bytesRead==null){for(inti=0;i<length;++i){buf.reset();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(current.bytesRead!=null){for(inti=0;i<length;++i){buf.reset();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead+512L;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead+0.5;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnbytesRead-(current.bytesRead+offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnbytesRead-(current.bytesRead+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncsize&&current.bytesRead<toRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){System.arraycopy(current.bytesRead,0,buffer.length);buffer.remaining();}else{buf.put(buffer,offset,toRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){System.arraycopy(current.bytesRead,0,buffer.length);buffer.remaining();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){System.arraycopy(current.bytesRead,0,buf.length);buffer.remaining();}else{buf.put(buffer,offset,toRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)||isEnabled(current.length));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)||isEnabled(current.copyCurrentStructure));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(current.bytesRead<0)?-1:1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(current.bytesRead>0)?0:1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&current.size>toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){for(inti=0;i<size;++i){buffer[i]=inputStream.read(buffer,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){for(inti=0;i<toRead;++i){buffer[i]=inputStream.read(buffer,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){for(inti=0;i<current.bytesRead;++i){buffer[i]=inputStream.read(buffer,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){for(inti=0;i<offset;++i){buffer[i]=inputStream.read(buffer,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){for(inti=0;i<buffer.length;++i){buffer[i]=inputStream.read(buffer,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){for(inti=0;i<len;++i){buffer[i]=inputStream.read(buffer,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnbytesRead||isEnabled(current.bytesRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.cloneTree(toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.cloneTree()&&hasUTF8Flag();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.cloneTree()&&hasUTF8Flag;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead-(int)Math.ceil(current.length)/(int)Math.ceil(toRead)+(int)Math.ceil(current.bytesRead)*(int)Math.ceil(current.
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead,size);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){System.arraycopy(current.bytesRead,0,buffer,offset,length+1);current.bytesRead+=length;}else{buf.put(buffer,offset,toRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(current.bytesRead!=null){System.arraycopy(buf,offset,current.bytesRead,0,length);buf.get(buffer,offset,toRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(current.bytesRead==null){System.arraycopy(buf,offset,current.bytesRead,0,toRead);buf.get(buffer,offset,toRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435System.arraycopy(current.bytesRead,0,buf.length);current.bytesRead=buf.get(buffer,offset,toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(current.bytesRead==null){System.arraycopy(buf,offset,current.bytesRead,0,size);buf.get(buffer,offset,toRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.inputStream+length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-(current.bytesRead+length,buffer);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.size+bytesRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead+=toRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.in.read(buffer,toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnin.read(buf,offset,toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returninputStream.read(buffer,toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnze.read(buffer,toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead+0;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesReadFromStream-offset;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(current.bytesRead==null){System.arraycopy(buffer,offset,current.bytesRead,0,length);buf.remaining();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(current.bytesRead!=null){System.arraycopy(buf,offset,current.bytesRead,0,length);buf.remaining();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(current.bytesRead==null){System.arraycopy(buf,offset,current.bytesRead,0,toRead);buf.remaining();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead-1+toRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&isEnabled(current.max);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnsize+toRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&isEnabled(current.inputStream,buffer.length));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&isEnabled(current.inputStream,buf.length));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&hasUTF7Flag();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&hasUTF3Flag();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&hasUTF4Flag();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnhasUTF8Flag(current.bytesRead)&&isEnabled(current.useUnicodeExtraFields);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncsize-length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&isEnabled(current.length());
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&isEnabled(current.arrayOffset());
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead+csize+1L;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-current.bytesRead+1L;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnlength+csize+toRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnbuffer+csize+length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncsize+(current.bytesReadFromStream+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncsize+(current.bytesReadFromStream+toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(current.inputStream!=null)?this:current.inputStream;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(current.inputStream==null)?this:current.inputStream;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnbytesReadFromStream+1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnbytesReadFromStream-1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnbytesReadFromStream,current.bytesRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435System.arraycopy(current.bytesRead,offset,buffer.length,0,length);buf.remaining();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435System.arraycopy(current.bytesRead,0,buffer.bytesRead,0,length);buf.remaining();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435System.arraycopy(current.bytesRead,offset,buf.remaining(),length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnfromRead/current.bytesRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnbytesRead/csize;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncsize-(current.bytesRead+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-current.bytesReadLen;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-(current.bytesRead+length,current.buf.length());
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead-(current.bytesRead+length,buf.length());
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-(current.bytesRead+length,buf.remaining());
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){for(inti=0;i<length;++i){buf.put(buffer,offset,toRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){for(inti=0;i<toRead;++i){buf.put(buffer,offset,toRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){for(inti=0;i<current.bytesRead;++i){buf.put(buffer,offset,toRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){for(inti=0;i<size;++i){buf.put(buffer,offset,toRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){for(inti=0;i<current.bytesRead;++i){buf.put(buffer,off,toRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){for(inti=0;i<toRead;++i){buf.put(buffer,off,toRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&isEnabled(current.valueLen);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&isEnabled(current.library);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead,offset+toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435System.arraycopy(current.bytesRead,offset,buf.length,0,current.bytesRead.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435System.arraycopy(current.bytesRead,offset,buf.length,0,current.bytesRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-current.bytesReadFromStream;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesReadFromStream-length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnhasDataDescriptor&&isEnabled(current.bytesRead)&&isEnabled(toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnthis.current.bytesRead-toRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead-offset;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead&&current.bytesRead<=bytesRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnhasUTF8Flag||isEnabled(current.bytesRead)&&hasUTF8Flag;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead&&toRead<=this.length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.size();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){System.arraycopy(current.bytesRead,0,buffer.remaining(),length);buffer.remaining();}else{buf.put(buffer,offset,toRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435System.arraycopy(current.bytesRead,offset,buf,0,current.bytesRead.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435System.arraycopy(current.bytesRead,offset,buffer,0,buf.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead+csize+length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435read(){for(inti=0;i<length;++i){buf.get(buffer,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435while(current.bytesRead<length){for(inti=0;i<length;++i){buf.get(buffer,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnoffset-(current.bytesRead+length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead+bytesReadFromStream;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncsize&&current.bytesRead!=length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead&&current.bytesRead!=bytesRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.inputStream&&isEnabled(Feature.QUOTE_FIELD_NAMES);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnin;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.inputStream-in.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(current.bytesRead<length){System.arraycopy(buf,offset,current.bytesRead,0,length);buf.get(buffer,offset,toRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(current.bytesRead==null){System.arraycopy(current.bytesRead,0,buffer,offset,length);buf.get(buffer,offset,toRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(current.bytesRead==null){System.arraycopy(current.bytesRead,0,buffer,offset,length);current.bytesRead.get(buffer,offset,toRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(current.bytesRead>0)?0:current.bytesRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnsize-current.bytesRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnfromStream-current.bytesRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(current.bytesRead==null){System.arraycopy(current.bytesRead,offset,current.bytesRead,0,length);}else{buf.remaining();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(current.bytesRead!=null){System.arraycopy(current.bytesRead,offset,current.bytesRead,0,length);}else{buf.remaining();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(current.bytesRead==null||length>current.bytesRead){System.arraycopy(buf,offset,current.bytesRead,0,length);}else{buf.remaining();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435read(){for(inti=0;i<length;++i){buf.put(buffer,offset,toRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435read(){for(inti=0;i<length;++i){buf.put(buffer,off,toRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435while(current.bytesRead<length){for(inti=0;i<length;++i){buf.put(buffer,off,toRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435read(buf,offset,length)){for(inti=0;i<length;++i){buf.put(buffer,off,toRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435while(current.bytesRead<length){for(inti=0;i<length;++i){buf.put(buffer,offset,toRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnlength&&current.bytesRead<=csize;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnoffset&&current.bytesRead<=length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.cloneTree&&isEnabled(Feature.QUOTE_FIELD_NAMES);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.cloneTree&&this.allowStoredEntriesWithDataDescriptor;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.cloneTree&&isEnabled(Feature.AUTO_CLOSE_SOURCE);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.cloneTree&&isEnabled(Feature.AUTO_CLOSE_PREFIX);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.cloneTree&&isEnabled(Feature.FLUSH_EXP_32);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(current.bytesRead==null){for(inti=0;i<length;++i){buf.get(i,buffer,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(current.bytesRead==null){for(inti=0;i<length;++i){buf.get(buffer,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnhasDataDescriptor&&isEnabled(current.bytesRead+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnin.read()+offset;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&hasUTF8Flag()||hasUTF8Flag());
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&containsUTF8Flag();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&hasUTF8Flag()&&buffer.length>0;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnoffset-(current.bytesRead+toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnlength-(current.bytesRead+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){System.arraycopy(current.bytesRead,0,buffer,offset,current.bytesRead);current.bytesRead+=length;}else{buf.put(buffer,offset,toRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){System.arraycopy(current.bytesRead,0,buffer,offset,length-1);current.bytesRead+=length;}else{buf.put(buffer,offset,toRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){System.arraycopy(current.bytesRead,0,buffer,offset,fromRead);current.bytesRead+=length;}else{buf.put(buffer,offset,toRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnthis.in.read(buffer,toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.read(buffer,in.read(toRead));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncsize&&current.bytesRead<=offset;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead&&current.bytesRead<end;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(current.inputStream>=null)?this:current.inputStream;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(toRead<2)?0:1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnthis.currToRead-current.bytesRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead||isEnabled(toRead));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435thrownewIllegalStateException("Currententryisnull.");
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435thrownewIllegalStateException("Currententryisnotimplementedby");
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435thrownewIllegalStateException("Currententryisnotsupported.");
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435thrownewIllegalStateException("Currententryisnotsupportedby");
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435thrownewIllegalStateException("Currententryisnotaninstanceoftype");
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){System.arraycopy(buf,offset,current.bytesRead,0,length);current.bytesReadFromStream.remaining();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){System.arraycopy(buf,offset,current.bytesRead,0,length);current.bytesRead=buf.remaining();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&isEnabled(current.versionMadeBy));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&isEnabled(current.library));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435current.bytesRead+=length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){System.arraycopy(current.bytesRead,0,buffer,offset,current.length);current.bytesRead+=length;}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){System.arraycopy(current.bytesRead,0,buffer,offset,length-1);current.bytesRead+=length;}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&csize>0;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&csize>0);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-1L+1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435System.arraycopy(current.bytesRead,offset,buf,0,toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435System.arraycopy(current.bytesRead,offset,buf.offset,0,toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435System.arraycopy(current.bytesRead,buffer,offset,toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnthis.current.bytesRead-length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnoffset-current.bytesRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead+offset+1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435read(buffer,offset,length)){for(inti=0;i<length;++i){buf.reset();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(current.bytesRead<length){for(inti=0;i<length;++i){buf.reset();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-(current.bytesRead+length,current.length());
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-(current.bytesRead+offset,length-toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnlength-(current.bytesRead+offset,toRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.entryEncoding.cloneTwin();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.crc.cloneTwin();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.entryEncoding.clone();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnlength/csize;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(current.bytesRead<length){for(inti=0;i<length;++i){buf.remaining();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(long)current.bytesRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(char)current.bytesRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnhasDataDescriptor&&!current.allowStoredEntriesWithDataDescriptor);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncsize-(current.bytesRead+offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead+1L;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead-(current.bytesRead+length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435thrownewIllegalArgumentException("Currententryisnotsupported.");
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435thrownewIllegalArgumentException("Currententryisnull.");
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435thrownewIllegalArgumentException("Unabletoreadcsize:");
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.bytesRead-(int)Math.ceil(current.bytesRead)/(int)Math.ceil(toRead)/(int)Math.ceil(current.bytesRead));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnin.read()-(int)Math.ceil(current.bytesRead)/(int)Math.ceil(toRead)+(int)Math.ceil(current.bytesRead));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnlength/current.bytesRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435read(){for(inti=0;i<length;++i){buf.set(i,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435while(current.bytesRead<length){for(inti=0;i<length;++i){buf.set(i,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435while(current.bytesRead<length){if(length>0){for(inti=0;i<length;++i){buf.set(i,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead&&current.bytesRead<0;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(toRead>=0)?1:1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.cloneTreeLimit&&this.lastStoredEntry==null?this.lastStoredEntry:current.cloneTreeLimit;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.cloneTreeLimit&&this.allowStoredEntriesWithDataDescriptor;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.cloneTreeLimit&&isEnabled(Feature.QUOTE_FIELD_NAMES);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(current.bytesRead<1)?0:1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-current.bytesRemaining;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435read(){for(inti=0;i<length;++i){buffer[i]=inputStream.read(buffer,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){for(inti=0;i<in.length;++i){buffer[i]=inputStream.read(buffer,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(length>0){for(inti=0;i<end;++i){buffer[i]=inputStream.read(buffer,offset,current.bytesRead);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncsize+length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.entryEncoding.cloneTree();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.crc.cloneTree();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.ceilingEntry();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.storedEntry;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncurrent.entrySize();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(current.bytesRead==null){System.arraycopy(current.bytesRead,offset,current.bytesRead,0,length);buf.remaining();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(current.bytesRead==null){System.arraycopy(buf,offset,current.bytesRead,0,length);current.bytesRead=buf.remaining();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435if(current.bytesRead!=null){System.arraycopy(current.bytesRead,offset,current.bytesRead,0,length);buf.remaining();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnin.read()+(current.bytesReadFromStream);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncsize+(current.bytesReadFromStream,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(toRead-current.bytesRead)+1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnlength*current.bytesRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncsize+bytesReadFromStream,current.bytesRead);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncsize+bytesReadFromStream,current.bytesRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnin.read()+bytesReadFromStream;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435System.arraycopy(current.bytesRead,offset,buf,0,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnhasUTF8Flag()&&current.bytesRead;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)&&isEnabled(current.inputStream)+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(toRead<0)?1:0;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(toRead==2)?1:0;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returntoRead-(current.bytesRead+length*length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returncsize-(current.bytesRead+length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435returnisEnabled(current.bytesRead)||isEnabled(current.library));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(toRead==1)?1:1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java435return(toRead==2)?0:1;
