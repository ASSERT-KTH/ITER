bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] toRead = (int) (csize - current.bytesRead); [FE] arrays first differed [CONTEXT] } buf.limit(l); count(buf.limit()); current.bytesReadFromStream += buf.limit(); } int toRead = Math.min(buf.remaining(), length); if ((csize - current.bytesRead) < toRead) {  [BUGGY] toRead = (int) (csize - current.bytesRead); [BUGGY] } buf.get(buffer, offset, toRead); current.bytesRead += toRead; return toRead; } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] readStored [RETURN_TYPE] int  byte[] buffer int offset int length [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen l length off offset read toRead versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream csize max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	
2	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] } buf.limit(l); count(buf.limit()); current.bytesReadFromStream += buf.limit(); } int toRead = Math.min(buf.remaining(), length); if ((csize - current.bytesRead) < toRead) {  [BUGGY] [BUGGY] toRead = (int) (csize - current.bytesRead); } buf.get(buffer, offset, toRead); current.bytesRead += toRead; return toRead; } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] readStored [RETURN_TYPE] int  byte[] buffer int offset int length [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen l length off offset read toRead versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream csize max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	add	
3	[BUG] [BUGGY] read = readStored(buffer, offset, length); [FE] arrays first differed [CONTEXT] } ZipUtil.checkRequestedFeatures(current.entry); if (!supportsDataDescriptorFor(current.entry)) { throw new UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR, current.entry); } int read; if (current.entry.getMethod() == ZipArchiveOutputStream.STORED) { [BUGGY] read = readStored(buffer, offset, length); [BUGGY] } else if (current.entry.getMethod() == ZipArchiveOutputStream.DEFLATED) { read = readDeflated(buffer, offset, length); } else if (current.entry.getMethod() == ZipMethod.UNSHRINKING.getCode() || current.entry.getMethod() == ZipMethod.IMPLODING.getCode()) { read = current.in.read(buffer, offset, length); } else { throw new UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()), current.entry); }  [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] read [RETURN_TYPE] int  byte[] buffer int offset int length [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen length off offset read versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	381	381	1	replace	
4	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] } ZipUtil.checkRequestedFeatures(current.entry); if (!supportsDataDescriptorFor(current.entry)) { throw new UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR, current.entry); } int read; if (current.entry.getMethod() == ZipArchiveOutputStream.STORED) { [BUGGY] [BUGGY] read = readStored(buffer, offset, length); } else if (current.entry.getMethod() == ZipArchiveOutputStream.DEFLATED) { read = readDeflated(buffer, offset, length); } else if (current.entry.getMethod() == ZipMethod.UNSHRINKING.getCode() || current.entry.getMethod() == ZipMethod.IMPLODING.getCode()) { read = current.in.read(buffer, offset, length); } else { throw new UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()), current.entry); }  [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] read [RETURN_TYPE] int  byte[] buffer int offset int length [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen length off offset read versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	381	381	1	add	
5	[BUG] [BUGGY] if (current.hasDataDescriptor) { [FE] arrays first differed [CONTEXT] private int readStored(byte[] buffer, int offset, int length) throws IOException { [BUGGY] if (current.hasDataDescriptor) { [BUGGY] if (lastStoredEntry == null) { readStoredEntry(); } return lastStoredEntry.read(buffer, offset, length); } long csize = current.entry.getSize(); if (current.bytesRead >= csize) { return -1; } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] readStored [RETURN_TYPE] int  byte[] buffer int offset int length [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen l length off offset read toRead versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream csize max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	404	404	1	replace	
6	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] private int readStored(byte[] buffer, int offset, int length) throws IOException { [BUGGY] [BUGGY] if (current.hasDataDescriptor) { if (lastStoredEntry == null) { readStoredEntry(); } return lastStoredEntry.read(buffer, offset, length); } long csize = current.entry.getSize(); if (current.bytesRead >= csize) { return -1; } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] readStored [RETURN_TYPE] int  byte[] buffer int offset int length [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen l length off offset read toRead versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream csize max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	404	404	1	add	
7	[BUG] [BUGGY] long csize = current.entry.getSize(); [FE] arrays first differed [CONTEXT] private int readStored(byte[] buffer, int offset, int length) throws IOException { if (current.hasDataDescriptor) { if (lastStoredEntry == null) { readStoredEntry(); } return lastStoredEntry.read(buffer, offset, length); } [BUGGY] long csize = current.entry.getSize(); [BUGGY] if (current.bytesRead >= csize) { return -1; } if (buf.position() >= buf.limit()) { buf.position(0); int l = in.read(buf.array()); if (l == -1) { return -1; } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] readStored [RETURN_TYPE] int  byte[] buffer int offset int length [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen l length off offset read toRead versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream csize max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	
8	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] private int readStored(byte[] buffer, int offset, int length) throws IOException { if (current.hasDataDescriptor) { if (lastStoredEntry == null) { readStoredEntry(); } return lastStoredEntry.read(buffer, offset, length); } [BUGGY] [BUGGY] long csize = current.entry.getSize(); if (current.bytesRead >= csize) { return -1; } if (buf.position() >= buf.limit()) { buf.position(0); int l = in.read(buf.array()); if (l == -1) { return -1; } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] readStored [RETURN_TYPE] int  byte[] buffer int offset int length [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen l length off offset read toRead versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream csize max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	add	
9	[BUG] [BUGGY] if (current.bytesRead >= csize) { [FE] arrays first differed [CONTEXT] private int readStored(byte[] buffer, int offset, int length) throws IOException { if (current.hasDataDescriptor) { if (lastStoredEntry == null) { readStoredEntry(); } return lastStoredEntry.read(buffer, offset, length); } long csize = current.entry.getSize(); [BUGGY] if (current.bytesRead >= csize) { [BUGGY] return -1; } if (buf.position() >= buf.limit()) { buf.position(0); int l = in.read(buf.array()); if (l == -1) { return -1; } buf.limit(l); [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] readStored [RETURN_TYPE] int  byte[] buffer int offset int length [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen l length off offset read toRead versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream csize max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	
10	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] private int readStored(byte[] buffer, int offset, int length) throws IOException { if (current.hasDataDescriptor) { if (lastStoredEntry == null) { readStoredEntry(); } return lastStoredEntry.read(buffer, offset, length); } long csize = current.entry.getSize(); [BUGGY] [BUGGY] if (current.bytesRead >= csize) { return -1; } if (buf.position() >= buf.limit()) { buf.position(0); int l = in.read(buf.array()); if (l == -1) { return -1; } buf.limit(l); [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] readStored [RETURN_TYPE] int  byte[] buffer int offset int length [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen l length off offset read toRead versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream csize max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	add	
11	[BUG] [BUGGY] return -1; [FE] arrays first differed [CONTEXT] if (current.hasDataDescriptor) { if (lastStoredEntry == null) { readStoredEntry(); } return lastStoredEntry.read(buffer, offset, length); } long csize = current.entry.getSize(); if (current.bytesRead >= csize) { [BUGGY] return -1; [BUGGY] } if (buf.position() >= buf.limit()) { buf.position(0); int l = in.read(buf.array()); if (l == -1) { return -1; } buf.limit(l);  [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] readStored [RETURN_TYPE] int  byte[] buffer int offset int length [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen l length off offset read toRead versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream csize max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	
12	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] if (current.hasDataDescriptor) { if (lastStoredEntry == null) { readStoredEntry(); } return lastStoredEntry.read(buffer, offset, length); } long csize = current.entry.getSize(); if (current.bytesRead >= csize) { [BUGGY] [BUGGY] return -1; } if (buf.position() >= buf.limit()) { buf.position(0); int l = in.read(buf.array()); if (l == -1) { return -1; } buf.limit(l);  [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] readStored [RETURN_TYPE] int  byte[] buffer int offset int length [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen l length off offset read toRead versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream csize max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	add	
13	[BUG] [BUGGY] if (buf.position() >= buf.limit()) { [FE] arrays first differed [CONTEXT] readStoredEntry(); } return lastStoredEntry.read(buffer, offset, length); } long csize = current.entry.getSize(); if (current.bytesRead >= csize) { return -1; } [BUGGY] if (buf.position() >= buf.limit()) { [BUGGY] buf.position(0); int l = in.read(buf.array()); if (l == -1) { return -1; } buf.limit(l); count(buf.limit()); current.bytesReadFromStream += buf.limit(); } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] readStored [RETURN_TYPE] int  byte[] buffer int offset int length [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen l length off offset read toRead versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream csize max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	416	416	1	replace	
14	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] readStoredEntry(); } return lastStoredEntry.read(buffer, offset, length); } long csize = current.entry.getSize(); if (current.bytesRead >= csize) { return -1; } [BUGGY] [BUGGY] if (buf.position() >= buf.limit()) { buf.position(0); int l = in.read(buf.array()); if (l == -1) { return -1; } buf.limit(l); count(buf.limit()); current.bytesReadFromStream += buf.limit(); } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] readStored [RETURN_TYPE] int  byte[] buffer int offset int length [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen l length off offset read toRead versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream csize max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	416	416	1	add	
15	[BUG] [BUGGY] int toRead = Math.min(buf.remaining(), length); [FE] arrays first differed [CONTEXT] int l = in.read(buf.array()); if (l == -1) { return -1; } buf.limit(l); count(buf.limit()); current.bytesReadFromStream += buf.limit(); } [BUGGY] int toRead = Math.min(buf.remaining(), length); [BUGGY] if ((csize - current.bytesRead) < toRead) {  toRead = (int) (csize - current.bytesRead); } buf.get(buffer, offset, toRead); current.bytesRead += toRead; return toRead; } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] readStored [RETURN_TYPE] int  byte[] buffer int offset int length [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen l length off offset read toRead versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream csize max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	
16	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] int l = in.read(buf.array()); if (l == -1) { return -1; } buf.limit(l); count(buf.limit()); current.bytesReadFromStream += buf.limit(); } [BUGGY] [BUGGY] int toRead = Math.min(buf.remaining(), length); if ((csize - current.bytesRead) < toRead) {  toRead = (int) (csize - current.bytesRead); } buf.get(buffer, offset, toRead); current.bytesRead += toRead; return toRead; } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] readStored [RETURN_TYPE] int  byte[] buffer int offset int length [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen l length off offset read toRead versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream csize max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	add	
17	[BUG] [BUGGY] if ((csize - current.bytesRead) < toRead) { [FE] arrays first differed [CONTEXT] if (l == -1) { return -1; } buf.limit(l); count(buf.limit()); current.bytesReadFromStream += buf.limit(); } int toRead = Math.min(buf.remaining(), length); [BUGGY] if ((csize - current.bytesRead) < toRead) { [BUGGY]  toRead = (int) (csize - current.bytesRead); } buf.get(buffer, offset, toRead); current.bytesRead += toRead; return toRead; } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] readStored [RETURN_TYPE] int  byte[] buffer int offset int length [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen l length off offset read toRead versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream csize max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	
18	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] if (l == -1) { return -1; } buf.limit(l); count(buf.limit()); current.bytesReadFromStream += buf.limit(); } int toRead = Math.min(buf.remaining(), length); [BUGGY] [BUGGY] if ((csize - current.bytesRead) < toRead) {  toRead = (int) (csize - current.bytesRead); } buf.get(buffer, offset, toRead); current.bytesRead += toRead; return toRead; } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] readStored [RETURN_TYPE] int  byte[] buffer int offset int length [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen l length off offset read toRead versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream csize max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	add	
19	[BUG] [BUGGY] buf.get(buffer, offset, toRead); [FE] arrays first differed [CONTEXT] count(buf.limit()); current.bytesReadFromStream += buf.limit(); } int toRead = Math.min(buf.remaining(), length); if ((csize - current.bytesRead) < toRead) {  toRead = (int) (csize - current.bytesRead); } [BUGGY] buf.get(buffer, offset, toRead); [BUGGY] current.bytesRead += toRead; return toRead; } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] readStored [RETURN_TYPE] int  byte[] buffer int offset int length [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen l length off offset read toRead versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream csize max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	replace	
20	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] count(buf.limit()); current.bytesReadFromStream += buf.limit(); } int toRead = Math.min(buf.remaining(), length); if ((csize - current.bytesRead) < toRead) {  toRead = (int) (csize - current.bytesRead); } [BUGGY] [BUGGY] buf.get(buffer, offset, toRead); current.bytesRead += toRead; return toRead; } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] readStored [RETURN_TYPE] int  byte[] buffer int offset int length [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen l length off offset read toRead versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream csize max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	433	433	1	add	
21	[BUG] [BUGGY] current.bytesRead += toRead; [FE] arrays first differed [CONTEXT] count(buf.limit()); current.bytesReadFromStream += buf.limit(); } int toRead = Math.min(buf.remaining(), length); if ((csize - current.bytesRead) < toRead) {  toRead = (int) (csize - current.bytesRead); } buf.get(buffer, offset, toRead); [BUGGY] current.bytesRead += toRead; [BUGGY] return toRead; } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] readStored [RETURN_TYPE] int  byte[] buffer int offset int length [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen l length off offset read toRead versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream csize max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	
22	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] count(buf.limit()); current.bytesReadFromStream += buf.limit(); } int toRead = Math.min(buf.remaining(), length); if ((csize - current.bytesRead) < toRead) {  toRead = (int) (csize - current.bytesRead); } buf.get(buffer, offset, toRead); [BUGGY] [BUGGY] current.bytesRead += toRead; return toRead; } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] readStored [RETURN_TYPE] int  byte[] buffer int offset int length [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen l length off offset read toRead versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream csize max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	add	
23	[BUG] [BUGGY] return toRead; [FE] arrays first differed [CONTEXT] current.bytesReadFromStream += buf.limit(); } int toRead = Math.min(buf.remaining(), length); if ((csize - current.bytesRead) < toRead) {  toRead = (int) (csize - current.bytesRead); } buf.get(buffer, offset, toRead); current.bytesRead += toRead; [BUGGY] return toRead; [BUGGY] } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] readStored [RETURN_TYPE] int  byte[] buffer int offset int length [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen l length off offset read toRead versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream csize max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	435	435	1	replace	
24	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] current.bytesReadFromStream += buf.limit(); } int toRead = Math.min(buf.remaining(), length); if ((csize - current.bytesRead) < toRead) {  toRead = (int) (csize - current.bytesRead); } buf.get(buffer, offset, toRead); current.bytesRead += toRead; [BUGGY] [BUGGY] return toRead; } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] readStored [RETURN_TYPE] int  byte[] buffer int offset int length [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen l length off offset read toRead versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream csize max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	435	435	1	add	
25	[BUG] [BUGGY] if (closed) { [FE] arrays first differed [CONTEXT] public int read(byte[] buffer, int offset, int length) throws IOException { [BUGGY] if (closed) { [BUGGY] throw new IOException("The stream is closed"); } if (current == null) { return -1; }  if (offset > buffer.length || length < 0 || offset < 0 || buffer.length - offset < length) { throw new ArrayIndexOutOfBoundsException(); [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] read [RETURN_TYPE] int  byte[] buffer int offset int length [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen length off offset read versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	
26	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] public int read(byte[] buffer, int offset, int length) throws IOException { [BUGGY] [BUGGY] if (closed) { throw new IOException("The stream is closed"); } if (current == null) { return -1; }  if (offset > buffer.length || length < 0 || offset < 0 || buffer.length - offset < length) { throw new ArrayIndexOutOfBoundsException(); [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] read [RETURN_TYPE] int  byte[] buffer int offset int length [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen length off offset read versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	add	
27	[BUG] [BUGGY] if (current == null) { [FE] arrays first differed [CONTEXT] public int read(byte[] buffer, int offset, int length) throws IOException { if (closed) { throw new IOException("The stream is closed"); } [BUGGY] if (current == null) { [BUGGY] return -1; }  if (offset > buffer.length || length < 0 || offset < 0 || buffer.length - offset < length) { throw new ArrayIndexOutOfBoundsException(); } ZipUtil.checkRequestedFeatures(current.entry); if (!supportsDataDescriptorFor(current.entry)) { [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] read [RETURN_TYPE] int  byte[] buffer int offset int length [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen length off offset read versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	replace	
28	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] public int read(byte[] buffer, int offset, int length) throws IOException { if (closed) { throw new IOException("The stream is closed"); } [BUGGY] [BUGGY] if (current == null) { return -1; }  if (offset > buffer.length || length < 0 || offset < 0 || buffer.length - offset < length) { throw new ArrayIndexOutOfBoundsException(); } ZipUtil.checkRequestedFeatures(current.entry); if (!supportsDataDescriptorFor(current.entry)) { [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] read [RETURN_TYPE] int  byte[] buffer int offset int length [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen length off offset read versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	364	364	1	add	
29	[BUG] [BUGGY] if (offset > buffer.length || length < 0 || offset < 0 || buffer.length - offset < length) { [FE] arrays first differed [CONTEXT] public int read(byte[] buffer, int offset, int length) throws IOException { if (closed) { throw new IOException("The stream is closed"); } if (current == null) { return -1; }  [BUGGY] if (offset > buffer.length || length < 0 || offset < 0 || buffer.length - offset < length) { [BUGGY] throw new ArrayIndexOutOfBoundsException(); } ZipUtil.checkRequestedFeatures(current.entry); if (!supportsDataDescriptorFor(current.entry)) { throw new UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR, current.entry); } int read; [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] read [RETURN_TYPE] int  byte[] buffer int offset int length [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen length off offset read versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	
30	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] public int read(byte[] buffer, int offset, int length) throws IOException { if (closed) { throw new IOException("The stream is closed"); } if (current == null) { return -1; }  [BUGGY] [BUGGY] if (offset > buffer.length || length < 0 || offset < 0 || buffer.length - offset < length) { throw new ArrayIndexOutOfBoundsException(); } ZipUtil.checkRequestedFeatures(current.entry); if (!supportsDataDescriptorFor(current.entry)) { throw new UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR, current.entry); } int read; [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] read [RETURN_TYPE] int  byte[] buffer int offset int length [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen length off offset read versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	add	
31	[BUG] [BUGGY] ZipUtil.checkRequestedFeatures(current.entry); [FE] arrays first differed [CONTEXT] if (current == null) { return -1; }  if (offset > buffer.length || length < 0 || offset < 0 || buffer.length - offset < length) { throw new ArrayIndexOutOfBoundsException(); } [BUGGY] ZipUtil.checkRequestedFeatures(current.entry); [BUGGY] if (!supportsDataDescriptorFor(current.entry)) { throw new UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR, current.entry); } int read; if (current.entry.getMethod() == ZipArchiveOutputStream.STORED) { read = readStored(buffer, offset, length); } else if (current.entry.getMethod() == ZipArchiveOutputStream.DEFLATED) { read = readDeflated(buffer, offset, length); [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] read [RETURN_TYPE] int  byte[] buffer int offset int length [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen length off offset read versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	
32	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] if (current == null) { return -1; }  if (offset > buffer.length || length < 0 || offset < 0 || buffer.length - offset < length) { throw new ArrayIndexOutOfBoundsException(); } [BUGGY] [BUGGY] ZipUtil.checkRequestedFeatures(current.entry); if (!supportsDataDescriptorFor(current.entry)) { throw new UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR, current.entry); } int read; if (current.entry.getMethod() == ZipArchiveOutputStream.STORED) { read = readStored(buffer, offset, length); } else if (current.entry.getMethod() == ZipArchiveOutputStream.DEFLATED) { read = readDeflated(buffer, offset, length); [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] read [RETURN_TYPE] int  byte[] buffer int offset int length [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen length off offset read versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	add	
33	[BUG] [BUGGY] if (!supportsDataDescriptorFor(current.entry)) { [FE] arrays first differed [CONTEXT] if (current == null) { return -1; }  if (offset > buffer.length || length < 0 || offset < 0 || buffer.length - offset < length) { throw new ArrayIndexOutOfBoundsException(); } ZipUtil.checkRequestedFeatures(current.entry); [BUGGY] if (!supportsDataDescriptorFor(current.entry)) { [BUGGY] throw new UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR, current.entry); } int read; if (current.entry.getMethod() == ZipArchiveOutputStream.STORED) { read = readStored(buffer, offset, length); } else if (current.entry.getMethod() == ZipArchiveOutputStream.DEFLATED) { read = readDeflated(buffer, offset, length); } else if (current.entry.getMethod() == ZipMethod.UNSHRINKING.getCode() [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] read [RETURN_TYPE] int  byte[] buffer int offset int length [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen length off offset read versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	
34	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] if (current == null) { return -1; }  if (offset > buffer.length || length < 0 || offset < 0 || buffer.length - offset < length) { throw new ArrayIndexOutOfBoundsException(); } ZipUtil.checkRequestedFeatures(current.entry); [BUGGY] [BUGGY] if (!supportsDataDescriptorFor(current.entry)) { throw new UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR, current.entry); } int read; if (current.entry.getMethod() == ZipArchiveOutputStream.STORED) { read = readStored(buffer, offset, length); } else if (current.entry.getMethod() == ZipArchiveOutputStream.DEFLATED) { read = readDeflated(buffer, offset, length); } else if (current.entry.getMethod() == ZipMethod.UNSHRINKING.getCode() [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] read [RETURN_TYPE] int  byte[] buffer int offset int length [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen length off offset read versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	add	
35	[BUG] [BUGGY] if (current.entry.getMethod() == ZipArchiveOutputStream.STORED) { [FE] arrays first differed [CONTEXT] throw new ArrayIndexOutOfBoundsException(); } ZipUtil.checkRequestedFeatures(current.entry); if (!supportsDataDescriptorFor(current.entry)) { throw new UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR, current.entry); } int read; [BUGGY] if (current.entry.getMethod() == ZipArchiveOutputStream.STORED) { [BUGGY] read = readStored(buffer, offset, length); } else if (current.entry.getMethod() == ZipArchiveOutputStream.DEFLATED) { read = readDeflated(buffer, offset, length); } else if (current.entry.getMethod() == ZipMethod.UNSHRINKING.getCode() || current.entry.getMethod() == ZipMethod.IMPLODING.getCode()) { read = current.in.read(buffer, offset, length); } else { throw new UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()), current.entry); } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] read [RETURN_TYPE] int  byte[] buffer int offset int length [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen length off offset read versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	380	380	1	replace	
36	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] throw new ArrayIndexOutOfBoundsException(); } ZipUtil.checkRequestedFeatures(current.entry); if (!supportsDataDescriptorFor(current.entry)) { throw new UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR, current.entry); } int read; [BUGGY] [BUGGY] if (current.entry.getMethod() == ZipArchiveOutputStream.STORED) { read = readStored(buffer, offset, length); } else if (current.entry.getMethod() == ZipArchiveOutputStream.DEFLATED) { read = readDeflated(buffer, offset, length); } else if (current.entry.getMethod() == ZipMethod.UNSHRINKING.getCode() || current.entry.getMethod() == ZipMethod.IMPLODING.getCode()) { read = current.in.read(buffer, offset, length); } else { throw new UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()), current.entry); } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] read [RETURN_TYPE] int  byte[] buffer int offset int length [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen length off offset read versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	380	380	1	add	
37	[BUG] [BUGGY] if (read >= 0) { [FE] arrays first differed [CONTEXT] } else if (current.entry.getMethod() == ZipArchiveOutputStream.DEFLATED) { read = readDeflated(buffer, offset, length); } else if (current.entry.getMethod() == ZipMethod.UNSHRINKING.getCode() || current.entry.getMethod() == ZipMethod.IMPLODING.getCode()) { read = current.in.read(buffer, offset, length); } else { throw new UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()), current.entry); } [BUGGY] if (read >= 0) { [BUGGY] current.crc.update(buffer, offset, read); } return read; } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] read [RETURN_TYPE] int  byte[] buffer int offset int length [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen length off offset read versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	replace	
38	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] } else if (current.entry.getMethod() == ZipArchiveOutputStream.DEFLATED) { read = readDeflated(buffer, offset, length); } else if (current.entry.getMethod() == ZipMethod.UNSHRINKING.getCode() || current.entry.getMethod() == ZipMethod.IMPLODING.getCode()) { read = current.in.read(buffer, offset, length); } else { throw new UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()), current.entry); } [BUGGY] [BUGGY] if (read >= 0) { current.crc.update(buffer, offset, read); } return read; } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] read [RETURN_TYPE] int  byte[] buffer int offset int length [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen length off offset read versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	392	392	1	add	
39	[BUG] [BUGGY] current.crc.update(buffer, offset, read); [FE] arrays first differed [CONTEXT] read = readDeflated(buffer, offset, length); } else if (current.entry.getMethod() == ZipMethod.UNSHRINKING.getCode() || current.entry.getMethod() == ZipMethod.IMPLODING.getCode()) { read = current.in.read(buffer, offset, length); } else { throw new UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()), current.entry); } if (read >= 0) { [BUGGY] current.crc.update(buffer, offset, read); [BUGGY] } return read; } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] read [RETURN_TYPE] int  byte[] buffer int offset int length [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen length off offset read versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	replace	
40	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] read = readDeflated(buffer, offset, length); } else if (current.entry.getMethod() == ZipMethod.UNSHRINKING.getCode() || current.entry.getMethod() == ZipMethod.IMPLODING.getCode()) { read = current.in.read(buffer, offset, length); } else { throw new UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()), current.entry); } if (read >= 0) { [BUGGY] [BUGGY] current.crc.update(buffer, offset, read); } return read; } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] read [RETURN_TYPE] int  byte[] buffer int offset int length [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen length off offset read versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	393	393	1	add	
41	[BUG] [BUGGY] return read; [FE] arrays first differed [CONTEXT] read = current.in.read(buffer, offset, length); } else { throw new UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()), current.entry); } if (read >= 0) { current.crc.update(buffer, offset, read); } [BUGGY] return read; [BUGGY] } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] read [RETURN_TYPE] int  byte[] buffer int offset int length [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen length off offset read versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	
42	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] read = current.in.read(buffer, offset, length); } else { throw new UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()), current.entry); } if (read >= 0) { current.crc.update(buffer, offset, read); } [BUGGY] [BUGGY] return read; } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] read [RETURN_TYPE] int  byte[] buffer int offset int length [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen length off offset read versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	add	
43	[BUG] [BUGGY] return !entry.getGeneralPurposeBit().usesDataDescriptor()  || (allowStoredEntriesWithDataDescriptor && entry.getMethod() == ZipEntry.STORED) [FE] arrays first differed [CONTEXT] private boolean supportsDataDescriptorFor(ZipArchiveEntry entry) { [BUGGY] return !entry.getGeneralPurposeBit().usesDataDescriptor()        || (allowStoredEntriesWithDataDescriptor && entry.getMethod() == ZipEntry.STORED) [BUGGY]  || (allowStoredEntriesWithDataDescriptor && entry.getMethod() == ZipEntry.STORED) || entry.getMethod() == ZipEntry.DEFLATED; } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] supportsDataDescriptorFor [RETURN_TYPE] boolean  ZipArchiveEntry entry [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN count diff entriesRead extraLen fileNameLen i l length off offset read toRead versionMadeBy x long TWO_EXP_32 bytesRead bytesReadFromStream csize inB max n pos rem remaining size skipped time value byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF b buffer expected extraData fileName lfh missedLfhBytes signature CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	713	715	1	replace	
44	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] private boolean supportsDataDescriptorFor(ZipArchiveEntry entry) { [BUGGY] [BUGGY] return !entry.getGeneralPurposeBit().usesDataDescriptor()        || (allowStoredEntriesWithDataDescriptor && entry.getMethod() == ZipEntry.STORED) || (allowStoredEntriesWithDataDescriptor && entry.getMethod() == ZipEntry.STORED) || entry.getMethod() == ZipEntry.DEFLATED; } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] supportsDataDescriptorFor [RETURN_TYPE] boolean  ZipArchiveEntry entry [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN count diff entriesRead extraLen fileNameLen i l length off offset read toRead versionMadeBy x long TWO_EXP_32 bytesRead bytesReadFromStream csize inB max n pos rem remaining size skipped time value byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF b buffer expected extraData fileName lfh missedLfhBytes signature CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	713	715	1	add	
45	[BUG] [BUGGY] } else if (current.entry.getMethod() == ZipMethod.IMPLODING.getCode()) { [FE] arrays first differed [CONTEXT] if (!hasUTF8Flag && useUnicodeExtraFields) { ZipUtil.setNameAndCommentFromExtraFields(current.entry, fileName, null); } processZip64Extra(size, cSize); if (current.entry.getCompressedSize() != -1) { if (current.entry.getMethod() == ZipMethod.UNSHRINKING.getCode()) { current.in = new UnshrinkingInputStream(new BoundedInputStream(in, current.entry.getCompressedSize())); [BUGGY] } else if (current.entry.getMethod() == ZipMethod.IMPLODING.getCode()) { [BUGGY] current.in = new ExplodingInputStream( current.entry.getGeneralPurposeBit().getSlidingDictionarySize(), current.entry.getGeneralPurposeBit().getNumberOfShannonFanoTrees(), new BoundedInputStream(in, current.entry.getCompressedSize())); } } entriesRead++; return current.entry; } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream GeneralPurposeBit gpFlag ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen off versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF extraData fileName CurrentEntry current ZipLong cSize sig size boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry EOFException e ZipArchiveEntry entry Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	279	279	1	replace	
46	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] if (!hasUTF8Flag && useUnicodeExtraFields) { ZipUtil.setNameAndCommentFromExtraFields(current.entry, fileName, null); } processZip64Extra(size, cSize); if (current.entry.getCompressedSize() != -1) { if (current.entry.getMethod() == ZipMethod.UNSHRINKING.getCode()) { current.in = new UnshrinkingInputStream(new BoundedInputStream(in, current.entry.getCompressedSize())); [BUGGY] [BUGGY] } else if (current.entry.getMethod() == ZipMethod.IMPLODING.getCode()) { current.in = new ExplodingInputStream( current.entry.getGeneralPurposeBit().getSlidingDictionarySize(), current.entry.getGeneralPurposeBit().getNumberOfShannonFanoTrees(), new BoundedInputStream(in, current.entry.getCompressedSize())); } } entriesRead++; return current.entry; } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream GeneralPurposeBit gpFlag ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen off versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF extraData fileName CurrentEntry current ZipLong cSize sig size boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry EOFException e ZipArchiveEntry entry Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	279	279	1	add	
47	[BUG] [BUGGY] if (!closed) { [FE] arrays first differed [CONTEXT] public void close() throws IOException { [BUGGY] if (!closed) { [BUGGY] closed = true; in.close(); inf.end(); } } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] close [RETURN_TYPE] void  [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen l length off offset read toRead versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream csize max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	485	485	1	replace	
48	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] public void close() throws IOException { [BUGGY] [BUGGY] if (!closed) { closed = true; in.close(); inf.end(); } } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] close [RETURN_TYPE] void  [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen l length off offset read toRead versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream csize max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	485	485	1	add	
49	[BUG] [BUGGY] closed = true; [FE] arrays first differed [CONTEXT] public void close() throws IOException { if (!closed) { [BUGGY] closed = true; [BUGGY] in.close(); inf.end(); } } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] close [RETURN_TYPE] void  [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen l length off offset read toRead versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream csize max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	486	486	1	replace	
50	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] public void close() throws IOException { if (!closed) { [BUGGY] [BUGGY] closed = true; in.close(); inf.end(); } } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] close [RETURN_TYPE] void  [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen l length off offset read toRead versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream csize max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	486	486	1	add	
51	[BUG] [BUGGY] in.close(); [FE] arrays first differed [CONTEXT] public void close() throws IOException { if (!closed) { closed = true; [BUGGY] in.close(); [BUGGY] inf.end(); } } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] close [RETURN_TYPE] void  [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen l length off offset read toRead versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream csize max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	487	487	1	replace	
52	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] public void close() throws IOException { if (!closed) { closed = true; [BUGGY] [BUGGY] in.close(); inf.end(); } } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] close [RETURN_TYPE] void  [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen l length off offset read toRead versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream csize max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	487	487	1	add	
53	[BUG] [BUGGY] inf.end(); [FE] arrays first differed [CONTEXT] public void close() throws IOException { if (!closed) { closed = true; in.close(); [BUGGY] inf.end(); [BUGGY] } } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] close [RETURN_TYPE] void  [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen l length off offset read toRead versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream csize max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	488	488	1	replace	
54	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] public void close() throws IOException { if (!closed) { closed = true; in.close(); [BUGGY] [BUGGY] inf.end(); } } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] close [RETURN_TYPE] void  [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen l length off offset read toRead versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream csize max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	488	488	1	add	
55	[BUG] [BUGGY] } [FE] arrays first differed [CONTEXT] public void close() throws IOException { if (!closed) { closed = true; in.close(); inf.end(); } [BUGGY] } [BUGGY]  [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] close [RETURN_TYPE] void  [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen l length off offset read toRead versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream csize max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	490	490	1	replace	
56	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] public void close() throws IOException { if (!closed) { closed = true; in.close(); inf.end(); } [BUGGY] [BUGGY] } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] close [RETURN_TYPE] void  [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen l length off offset read toRead versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream csize max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	490	490	1	add	
57	[BUG] [BUGGY] this(inputStream, ZipEncodingHelper.UTF8); [FE] arrays first differed [CONTEXT] public ZipArchiveInputStream(InputStream inputStream) { [BUGGY] this(inputStream, ZipEncodingHelper.UTF8); [BUGGY] } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] <init> [RETURN_TYPE] InputStream)  InputStream inputStream [VARIABLES] ZipEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead long TWO_EXP_32 bytesRead bytesReadFromStream max pos byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed hasDataDescriptor hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4082482904638631	143	143	1	replace	
58	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] public ZipArchiveInputStream(InputStream inputStream) { [BUGGY] [BUGGY] this(inputStream, ZipEncodingHelper.UTF8); } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] <init> [RETURN_TYPE] InputStream)  InputStream inputStream [VARIABLES] ZipEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead long TWO_EXP_32 bytesRead bytesReadFromStream max pos byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed hasDataDescriptor hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4082482904638631	143	143	1	add	
59	[BUG] [BUGGY] } [FE] arrays first differed [CONTEXT] public ZipArchiveInputStream(InputStream inputStream) { this(inputStream, ZipEncodingHelper.UTF8); [BUGGY] } [BUGGY]  [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] <init> [RETURN_TYPE] InputStream)  InputStream inputStream [VARIABLES] ZipEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead long TWO_EXP_32 bytesRead bytesReadFromStream max pos byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed hasDataDescriptor hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4082482904638631	144	144	1	replace	
60	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] public ZipArchiveInputStream(InputStream inputStream) { this(inputStream, ZipEncodingHelper.UTF8); [BUGGY] [BUGGY] } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] <init> [RETURN_TYPE] InputStream)  InputStream inputStream [VARIABLES] ZipEncoding zipEncoding CRC32 crc InputStream in inputStream ByteBuffer buf int CFH_LEN LFH_LEN entriesRead long TWO_EXP_32 bytesRead bytesReadFromStream max pos byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed hasDataDescriptor hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4082482904638631	144	144	1	add	
61	[BUG] [BUGGY] this(inputStream, encoding, true); [FE] arrays first differed [CONTEXT] public ZipArchiveInputStream(InputStream inputStream, String encoding) { [BUGGY] this(inputStream, encoding, true); [BUGGY] } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] <init> [RETURN_TYPE] String)  InputStream inputStream String encoding [VARIABLES] ZipEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN entriesRead long TWO_EXP_32 bytesRead bytesReadFromStream max pos byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed hasDataDescriptor hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4082482904638631	152	152	1	replace	
62	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] public ZipArchiveInputStream(InputStream inputStream, String encoding) { [BUGGY] [BUGGY] this(inputStream, encoding, true); } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] <init> [RETURN_TYPE] String)  InputStream inputStream String encoding [VARIABLES] ZipEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN entriesRead long TWO_EXP_32 bytesRead bytesReadFromStream max pos byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed hasDataDescriptor hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4082482904638631	152	152	1	add	
63	[BUG] [BUGGY] } [FE] arrays first differed [CONTEXT] public ZipArchiveInputStream(InputStream inputStream, String encoding) { this(inputStream, encoding, true); [BUGGY] } [BUGGY]  [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] <init> [RETURN_TYPE] String)  InputStream inputStream String encoding [VARIABLES] ZipEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN entriesRead long TWO_EXP_32 bytesRead bytesReadFromStream max pos byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed hasDataDescriptor hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4082482904638631	153	153	1	replace	
64	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] public ZipArchiveInputStream(InputStream inputStream, String encoding) { this(inputStream, encoding, true); [BUGGY] [BUGGY] } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] <init> [RETURN_TYPE] String)  InputStream inputStream String encoding [VARIABLES] ZipEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN entriesRead long TWO_EXP_32 bytesRead bytesReadFromStream max pos byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed hasDataDescriptor hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4082482904638631	153	153	1	add	
65	[BUG] [BUGGY] this(inputStream, encoding, useUnicodeExtraFields, false); [FE] arrays first differed [CONTEXT] public ZipArchiveInputStream(InputStream inputStream, String encoding, boolean useUnicodeExtraFields) { [BUGGY] this(inputStream, encoding, useUnicodeExtraFields, false); [BUGGY] } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] <init> [RETURN_TYPE] String,boolean)  InputStream inputStream String encoding boolean useUnicodeExtraFields [VARIABLES] ZipEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN entriesRead long TWO_EXP_32 bytesRead bytesReadFromStream max pos byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed hasDataDescriptor hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4082482904638631	162	162	1	replace	
66	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] public ZipArchiveInputStream(InputStream inputStream, String encoding, boolean useUnicodeExtraFields) { [BUGGY] [BUGGY] this(inputStream, encoding, useUnicodeExtraFields, false); } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] <init> [RETURN_TYPE] String,boolean)  InputStream inputStream String encoding boolean useUnicodeExtraFields [VARIABLES] ZipEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN entriesRead long TWO_EXP_32 bytesRead bytesReadFromStream max pos byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed hasDataDescriptor hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4082482904638631	162	162	1	add	
67	[BUG] [BUGGY] } [FE] arrays first differed [CONTEXT] public ZipArchiveInputStream(InputStream inputStream, String encoding, boolean useUnicodeExtraFields) { this(inputStream, encoding, useUnicodeExtraFields, false); [BUGGY] } [BUGGY]  [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] <init> [RETURN_TYPE] String,boolean)  InputStream inputStream String encoding boolean useUnicodeExtraFields [VARIABLES] ZipEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN entriesRead long TWO_EXP_32 bytesRead bytesReadFromStream max pos byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed hasDataDescriptor hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4082482904638631	163	163	1	replace	
68	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] public ZipArchiveInputStream(InputStream inputStream, String encoding, boolean useUnicodeExtraFields) { this(inputStream, encoding, useUnicodeExtraFields, false); [BUGGY] [BUGGY] } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] <init> [RETURN_TYPE] String,boolean)  InputStream inputStream String encoding boolean useUnicodeExtraFields [VARIABLES] ZipEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN entriesRead long TWO_EXP_32 bytesRead bytesReadFromStream max pos byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed hasDataDescriptor hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4082482904638631	163	163	1	add	
69	[BUG] [BUGGY] boolean allowStoredEntriesWithDataDescriptor) { [FE] arrays first differed [CONTEXT] public ZipArchiveInputStream(InputStream inputStream, String encoding, boolean useUnicodeExtraFields, [BUGGY] boolean allowStoredEntriesWithDataDescriptor) { [BUGGY] zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); this.useUnicodeExtraFields = useUnicodeExtraFields; in = new PushbackInputStream(inputStream, buf.capacity()); this.allowStoredEntriesWithDataDescriptor = allowStoredEntriesWithDataDescriptor;  } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] <init> [RETURN_TYPE] String,boolean,boolean)  InputStream inputStream String encoding boolean useUnicodeExtraFields boolean allowStoredEntriesWithDataDescriptor [VARIABLES] ZipEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN entriesRead long TWO_EXP_32 bytesRead bytesReadFromStream max pos byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed hasDataDescriptor hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4082482904638631	177	177	1	replace	
70	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] public ZipArchiveInputStream(InputStream inputStream, String encoding, boolean useUnicodeExtraFields, [BUGGY] [BUGGY] boolean allowStoredEntriesWithDataDescriptor) { zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); this.useUnicodeExtraFields = useUnicodeExtraFields; in = new PushbackInputStream(inputStream, buf.capacity()); this.allowStoredEntriesWithDataDescriptor = allowStoredEntriesWithDataDescriptor;  } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] <init> [RETURN_TYPE] String,boolean,boolean)  InputStream inputStream String encoding boolean useUnicodeExtraFields boolean allowStoredEntriesWithDataDescriptor [VARIABLES] ZipEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN entriesRead long TWO_EXP_32 bytesRead bytesReadFromStream max pos byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed hasDataDescriptor hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4082482904638631	177	177	1	add	
71	[BUG] [BUGGY] private final Inflater inf = new Inflater(true); [FE] arrays first differed [CONTEXT] [BUGGY] private final Inflater inf = new Inflater(true); [BUGGY]  [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream  [VARIABLES] 	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4082482904638631	71	71	1	replace	
72	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] [BUGGY] [BUGGY] private final Inflater inf = new Inflater(true); [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream  [VARIABLES] 	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4082482904638631	71	71	1	add	
73	[BUG] [BUGGY] private final ByteBuffer buf = ByteBuffer.allocate(ZipArchiveOutputStream.BUFFER_SIZE); [FE] arrays first differed [CONTEXT] [BUGGY] private final ByteBuffer buf = ByteBuffer.allocate(ZipArchiveOutputStream.BUFFER_SIZE); [BUGGY]  [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream  [VARIABLES] 	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4082482904638631	74	74	1	replace	
74	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] [BUGGY] [BUGGY] private final ByteBuffer buf = ByteBuffer.allocate(ZipArchiveOutputStream.BUFFER_SIZE); [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream  [VARIABLES] 	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4082482904638631	74	74	1	add	
75	[BUG] [BUGGY] private CurrentEntry current = null; [FE] arrays first differed [CONTEXT] [BUGGY] private CurrentEntry current = null; [BUGGY]  [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream  [VARIABLES] 	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4082482904638631	77	77	1	replace	
76	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] [BUGGY] [BUGGY] private CurrentEntry current = null; [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream  [VARIABLES] 	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4082482904638631	77	77	1	add	
77	[BUG] [BUGGY] private boolean closed = false; [FE] arrays first differed [CONTEXT] [BUGGY] private boolean closed = false; [BUGGY]  [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream  [VARIABLES] 	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4082482904638631	80	80	1	replace	
78	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] [BUGGY] [BUGGY] private boolean closed = false; [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream  [VARIABLES] 	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4082482904638631	80	80	1	add	
79	[BUG] [BUGGY] private boolean hitCentralDirectory = false; [FE] arrays first differed [CONTEXT] [BUGGY] private boolean hitCentralDirectory = false; [BUGGY]  [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream  [VARIABLES] 	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4082482904638631	83	83	1	replace	
80	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] [BUGGY] [BUGGY] private boolean hitCentralDirectory = false; [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream  [VARIABLES] 	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4082482904638631	83	83	1	add	
81	[BUG] [BUGGY] private ByteArrayInputStream lastStoredEntry = null; [FE] arrays first differed [CONTEXT] [BUGGY] private ByteArrayInputStream lastStoredEntry = null; [BUGGY]  [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream  [VARIABLES] 	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4082482904638631	90	90	1	replace	
82	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] [BUGGY] [BUGGY] private ByteArrayInputStream lastStoredEntry = null; [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream  [VARIABLES] 	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4082482904638631	90	90	1	add	
83	[BUG] [BUGGY] private boolean allowStoredEntriesWithDataDescriptor = false; [FE] arrays first differed [CONTEXT] [BUGGY] private boolean allowStoredEntriesWithDataDescriptor = false; [BUGGY]  [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream  [VARIABLES] 	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4082482904638631	93	93	1	replace	
84	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] [BUGGY] [BUGGY] private boolean allowStoredEntriesWithDataDescriptor = false; [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream  [VARIABLES] 	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4082482904638631	93	93	1	add	
85	[BUG] [BUGGY] private final byte[] LFH_BUF = new byte[LFH_LEN]; [FE] arrays first differed [CONTEXT] [BUGGY] private final byte[] LFH_BUF = new byte[LFH_LEN]; [BUGGY]  [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream  [VARIABLES] 	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4082482904638631	134	134	1	replace	
86	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] [BUGGY] [BUGGY] private final byte[] LFH_BUF = new byte[LFH_LEN]; [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream  [VARIABLES] 	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4082482904638631	134	134	1	add	
87	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] private final byte[] LFH_BUF = new byte[LFH_LEN]; [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream  [VARIABLES] 	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4082482904638631	135	135	1	replace	
88	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] private final byte[] LFH_BUF = new byte[LFH_LEN]; [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream  [VARIABLES] 	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4082482904638631	135	135	1	add	
89	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] private final byte[] LFH_BUF = new byte[LFH_LEN]; [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream  [VARIABLES] 	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4082482904638631	136	136	1	replace	
90	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] private final byte[] LFH_BUF = new byte[LFH_LEN]; [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream  [VARIABLES] 	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4082482904638631	136	136	1	add	
91	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] private final byte[] SKIP_BUF = new byte[1024]; [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream  [VARIABLES] 	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4082482904638631	137	137	1	replace	
92	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] private final byte[] SKIP_BUF = new byte[1024]; [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream  [VARIABLES] 	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4082482904638631	137	137	1	add	
93	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] private final byte[] SHORT_BUF = new byte[SHORT]; [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream  [VARIABLES] 	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4082482904638631	138	138	1	replace	
94	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] private final byte[] SHORT_BUF = new byte[SHORT]; [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream  [VARIABLES] 	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4082482904638631	138	138	1	add	
95	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] private final byte[] TWO_DWORD_BUF = new byte[2 * DWORD]; [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream  [VARIABLES] 	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4082482904638631	140	140	1	replace	
96	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] private final byte[] TWO_DWORD_BUF = new byte[2 * DWORD]; [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream  [VARIABLES] 	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4082482904638631	140	140	1	add	
97	[BUG] [BUGGY] zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); [FE] arrays first differed [CONTEXT] public ZipArchiveInputStream(InputStream inputStream, String encoding, boolean useUnicodeExtraFields, boolean allowStoredEntriesWithDataDescriptor) { [BUGGY] zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); [BUGGY] this.useUnicodeExtraFields = useUnicodeExtraFields; in = new PushbackInputStream(inputStream, buf.capacity()); this.allowStoredEntriesWithDataDescriptor = allowStoredEntriesWithDataDescriptor;  } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] <init> [RETURN_TYPE] String,boolean,boolean)  InputStream inputStream String encoding boolean useUnicodeExtraFields boolean allowStoredEntriesWithDataDescriptor [VARIABLES] ZipEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN entriesRead long TWO_EXP_32 bytesRead bytesReadFromStream max pos byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed hasDataDescriptor hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4082482904638631	178	178	1	replace	
98	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] public ZipArchiveInputStream(InputStream inputStream, String encoding, boolean useUnicodeExtraFields, boolean allowStoredEntriesWithDataDescriptor) { [BUGGY] [BUGGY] zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); this.useUnicodeExtraFields = useUnicodeExtraFields; in = new PushbackInputStream(inputStream, buf.capacity()); this.allowStoredEntriesWithDataDescriptor = allowStoredEntriesWithDataDescriptor;  } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] <init> [RETURN_TYPE] String,boolean,boolean)  InputStream inputStream String encoding boolean useUnicodeExtraFields boolean allowStoredEntriesWithDataDescriptor [VARIABLES] ZipEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN entriesRead long TWO_EXP_32 bytesRead bytesReadFromStream max pos byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed hasDataDescriptor hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4082482904638631	178	178	1	add	
99	[BUG] [BUGGY] this.useUnicodeExtraFields = useUnicodeExtraFields; [FE] arrays first differed [CONTEXT] public ZipArchiveInputStream(InputStream inputStream, String encoding, boolean useUnicodeExtraFields, boolean allowStoredEntriesWithDataDescriptor) { zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); [BUGGY] this.useUnicodeExtraFields = useUnicodeExtraFields; [BUGGY] in = new PushbackInputStream(inputStream, buf.capacity()); this.allowStoredEntriesWithDataDescriptor = allowStoredEntriesWithDataDescriptor;  } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] <init> [RETURN_TYPE] String,boolean,boolean)  InputStream inputStream String encoding boolean useUnicodeExtraFields boolean allowStoredEntriesWithDataDescriptor [VARIABLES] ZipEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN entriesRead long TWO_EXP_32 bytesRead bytesReadFromStream max pos byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed hasDataDescriptor hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4082482904638631	179	179	1	replace	
100	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] public ZipArchiveInputStream(InputStream inputStream, String encoding, boolean useUnicodeExtraFields, boolean allowStoredEntriesWithDataDescriptor) { zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); [BUGGY] [BUGGY] this.useUnicodeExtraFields = useUnicodeExtraFields; in = new PushbackInputStream(inputStream, buf.capacity()); this.allowStoredEntriesWithDataDescriptor = allowStoredEntriesWithDataDescriptor;  } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] <init> [RETURN_TYPE] String,boolean,boolean)  InputStream inputStream String encoding boolean useUnicodeExtraFields boolean allowStoredEntriesWithDataDescriptor [VARIABLES] ZipEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN entriesRead long TWO_EXP_32 bytesRead bytesReadFromStream max pos byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed hasDataDescriptor hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry Inflater inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4082482904638631	179	179	1	add	
