bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(csize  >=  current.bytesRead  ||  csize  ==  bytesRead)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >=  current.bytesRead  ||  csize  ==  bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >=  current.bytesRead  ||  csize  ==  bytesRead)  {	  if(csize    ==    current.bytesRead    ||    csize    ==    bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
2	[BUG]  [BUGGY]  if(csize  ==  current.bytesRead  ||  csize!=  bytesRead)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  ==  current.bytesRead  ||  csize!=  bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  ==  current.bytesRead  ||  csize!=  bytesRead)  {	  if(csize    ==    current.bytesRead    ||    csize    ==    bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
3	[BUG]  [BUGGY]  if(csize  ==  bytesRead  ||  csize  ==  current.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  ==  bytesRead  ||  csize  ==  current.bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  ==  bytesRead  ||  csize  ==  current.bytesRead)  {	  if(csize    ==    current.bytesRead    ||    csize    ==    bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
4	[BUG]  [BUGGY]  if(csize  ==  0  ||  csize  ==  bytesRead)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  ==  0  ||  csize  ==  bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  ==  0  ||  csize  ==  bytesRead)  {	  if(csize    ==    current.bytesRead    ||    csize    ==    bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
5	[BUG]  [BUGGY]  if(csize  ==  current.bytesRead  ||  csize  >=  bytesRead)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  ==  current.bytesRead  ||  csize  >=  bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  ==  current.bytesRead  ||  csize  >=  bytesRead)  {	  if(csize    ==    current.bytesRead    ||    csize    ==    bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
6	[BUG]  [BUGGY]  if(csize  <  lastStoredEntry.bytesRead  ||  csize  >  current.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  lastStoredEntry.bytesRead  ||  csize  >  current.bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  lastStoredEntry.bytesRead  ||  csize  >  current.bytesRead)  {	  if(csize    <    lastStoredEntry.bytesRead    ||    csize    <    current.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
7	[BUG]  [BUGGY]  if(csize  <  current.bytesRead  ||  csize  <  lastStoredEntry.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  current.bytesRead  ||  csize  <  lastStoredEntry.bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  current.bytesRead  ||  csize  <  lastStoredEntry.bytesRead)  {	  if(csize    <    lastStoredEntry.bytesRead    ||    csize    <    current.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
8	[BUG]  [BUGGY]  if(csize  <  =  lastStoredEntry.bytesRead  ||  csize  <  current.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  =  lastStoredEntry.bytesRead  ||  csize  <  current.bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  =  lastStoredEntry.bytesRead  ||  csize  <  current.bytesRead)  {	  if(csize    <    lastStoredEntry.bytesRead    ||    csize    <    current.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
9	[BUG]  [BUGGY]  if(csize  <  lastStoredEntry.bytesRead  ||  csize  >=  current.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  lastStoredEntry.bytesRead  ||  csize  >=  current.bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  lastStoredEntry.bytesRead  ||  csize  >=  current.bytesRead)  {	  if(csize    <    lastStoredEntry.bytesRead    ||    csize    <    current.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
10	[BUG]  [BUGGY]  if(csize  >  lastStoredEntry.bytesRead  ||  csize  <  current.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >  lastStoredEntry.bytesRead  ||  csize  <  current.bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >  lastStoredEntry.bytesRead  ||  csize  <  current.bytesRead)  {	  if(csize    <    lastStoredEntry.bytesRead    ||    csize    <    current.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
11	[BUG]  [BUGGY]  if(csize  <  lastStoredEntry.bytesRead  ||  csize  ==  current.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  lastStoredEntry.bytesRead  ||  csize  ==  current.bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  lastStoredEntry.bytesRead  ||  csize  ==  current.bytesRead)  {	  if(csize    <    lastStoredEntry.bytesRead    ||    csize    <    current.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
12	[BUG]  [BUGGY]  if(csize  <  =  max)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  =  max)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  =  max)  {	  if(csize    <    max)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
13	[BUG]  [BUGGY]  if(csize  >  max)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >  max)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >  max)  {	  if(csize    <    max)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
14	[BUG]  [BUGGY]  if(csize  <  length)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  length)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  length)  {	  if(csize    <    max)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
15	[BUG]  [BUGGY]  if(csize  <  0)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  0)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  0)  {	  if(csize    <    max)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
16	[BUG]  [BUGGY]  if(csize  <  size)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  size)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  size)  {	  if(csize    <    max)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
17	[BUG]  [BUGGY]  if(csize  >=  max)  {  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >=  max)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >=  max)  {	  if(csize    <    max)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
18	[BUG]  [BUGGY]  if(csize  ==  current.bytesRead  ||  csize  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  ==  current.bytesRead  ||  csize  <  =  0)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  ==  current.bytesRead  ||  csize  <  =  0)  {	  if(csize    ==    current.bytesRead    ||    csize    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
19	[BUG]  [BUGGY]  if(csize!=  current.bytesRead  ||  csize  >  0)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize!=  current.bytesRead  ||  csize  >  0)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize!=  current.bytesRead  ||  csize  >  0)  {	  if(csize    ==    current.bytesRead    ||    csize    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
20	[BUG]  [BUGGY]  if(csize  ==  current.bytesRead  ||  csize  >=  0)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  ==  current.bytesRead  ||  csize  >=  0)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  ==  current.bytesRead  ||  csize  >=  0)  {	  if(csize    ==    current.bytesRead    ||    csize    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
21	[BUG]  [BUGGY]  if(csize  ==  current.bytesRead  ||  csize  >  1)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  ==  current.bytesRead  ||  csize  >  1)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  ==  current.bytesRead  ||  csize  >  1)  {	  if(csize    ==    current.bytesRead    ||    csize    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
22	[BUG]  [BUGGY]  if(csize  >  current.bytesRead  ||  csize  >  0)  {  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >  current.bytesRead  ||  csize  >  0)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >  current.bytesRead  ||  csize  >  0)  {	  if(csize    ==    current.bytesRead    ||    csize    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
23	[BUG]  [BUGGY]  if(csize!=  current.bytesRead  ||  csize!=  lastStoredEntry.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize!=  current.bytesRead  ||  csize!=  lastStoredEntry.bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize!=  current.bytesRead  ||  csize!=  lastStoredEntry.bytesRead)  {	  if(csize!=    lastStoredEntry.bytesRead    ||    csize!=    current.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
24	[BUG]  [BUGGY]  if(csize!=  lastStoredEntry.bytesRead  ||  csize  ==  current.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize!=  lastStoredEntry.bytesRead  ||  csize  ==  current.bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize!=  lastStoredEntry.bytesRead  ||  csize  ==  current.bytesRead)  {	  if(csize!=    lastStoredEntry.bytesRead    ||    csize!=    current.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
25	[BUG]  [BUGGY]  if(csize  >=  lastStoredEntry.bytesRead  ||  csize!=  current.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >=  lastStoredEntry.bytesRead  ||  csize!=  current.bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >=  lastStoredEntry.bytesRead  ||  csize!=  current.bytesRead)  {	  if(csize!=    lastStoredEntry.bytesRead    ||    csize!=    current.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
26	[BUG]  [BUGGY]  if(csize!=  lastStoredEntry.bytesRead  ||  csize  >=  current.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize!=  lastStoredEntry.bytesRead  ||  csize  >=  current.bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize!=  lastStoredEntry.bytesRead  ||  csize  >=  current.bytesRead)  {	  if(csize!=    lastStoredEntry.bytesRead    ||    csize!=    current.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
27	[BUG]  [BUGGY]  if(csize  ==  lastStoredEntry.bytesRead  ||  csize!=  current.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  ==  lastStoredEntry.bytesRead  ||  csize!=  current.bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  ==  lastStoredEntry.bytesRead  ||  csize!=  current.bytesRead)  {	  if(csize!=    lastStoredEntry.bytesRead    ||    csize!=    current.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
28	[BUG]  [BUGGY]  if(csize  >=  current.bytesRead  ||  csize!=  lastStoredEntry.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >=  current.bytesRead  ||  csize!=  lastStoredEntry.bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >=  current.bytesRead  ||  csize!=  lastStoredEntry.bytesRead)  {	  if(csize!=    lastStoredEntry.bytesRead    ||    csize!=    current.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
29	[BUG]  [BUGGY]  if(csize  >  0  &&  csize  <  current.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >  0  &&  csize  <  current.bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >  0  &&  csize  <  current.bytesRead)  {	  if(csize    >    0    ||    csize    <    current.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
30	[BUG]  [BUGGY]  if(csize  >  0  ||  csize  <  =  current.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >  0  ||  csize  <  =  current.bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >  0  ||  csize  <  =  current.bytesRead)  {	  if(csize    >    0    ||    csize    <    current.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
31	[BUG]  [BUGGY]  if(csize  <  0  ||  csize  <  current.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  0  ||  csize  <  current.bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  0  ||  csize  <  current.bytesRead)  {	  if(csize    >    0    ||    csize    <    current.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
32	[BUG]  [BUGGY]  if(csize  >  0  ||  csize  <  lastStoredEntry.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >  0  ||  csize  <  lastStoredEntry.bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >  0  ||  csize  <  lastStoredEntry.bytesRead)  {	  if(csize    >    0    ||    csize    <    current.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
33	[BUG]  [BUGGY]  if(csize  >  0  ||  csize  <  max)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >  0  ||  csize  <  max)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >  0  ||  csize  <  max)  {	  if(csize    >    0    ||    csize    <    current.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
34	[BUG]  [BUGGY]  if(csize  >  0  ||  csize  <  length)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >  0  ||  csize  <  length)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >  0  ||  csize  <  length)  {	  if(csize    >    0    ||    csize    <    current.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
35	[BUG]  [BUGGY]  if(csize  >  current.entry.bytesRead)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >  current.entry.bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >  current.entry.bytesRead)  {	  if(csize!=    current.entry.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
36	[BUG]  [BUGGY]  if(csize  >>  current.entry.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >>  current.entry.bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >>  current.entry.bytesRead)  {	  if(csize!=    current.entry.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
37	[BUG]  [BUGGY]  if(csize!=  current.entry.bytesRead  ||  csize!=  lastStoredEntry.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize!=  current.entry.bytesRead  ||  csize!=  lastStoredEntry.bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize!=  current.entry.bytesRead  ||  csize!=  lastStoredEntry.bytesRead)  {	  if(csize!=    current.entry.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
38	[BUG]  [BUGGY]  if(csize!=  current.entry.bytesRead  ||  csize!=  bytesRead)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize!=  current.entry.bytesRead  ||  csize!=  bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize!=  current.entry.bytesRead  ||  csize!=  bytesRead)  {	  if(csize!=    current.entry.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
39	[BUG]  [BUGGY]  int  l  =  in.read(buffer,  offset,  csize);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  l  =  in.read(buffer,  offset,  csize);  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  l  =  in.read(buffer,  offset,  csize);	  int    l    =    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
40	[BUG]  [BUGGY]  int  l  =  in.read(buffer,  offset,  length,  csize);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  l  =  in.read(buffer,  offset,  length,  csize);  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  l  =  in.read(buffer,  offset,  length,  csize);	  int    l    =    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
41	[BUG]  [BUGGY]  int  l  =  current.in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  l  =  current.in.read(buffer,  offset,  length);  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  l  =  current.in.read(buffer,  offset,  length);	  int    l    =    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
42	[BUG]  [BUGGY]  int  l  =  current.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  l  =  current.read(buffer,  offset,  length);  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  l  =  current.read(buffer,  offset,  length);	  int    l    =    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
43	[BUG]  [BUGGY]  int  l  =  in.read(buffer,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  l  =  in.read(buffer,  offset,  length  +  1);  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  l  =  in.read(buffer,  offset,  length  +  1);	  int    l    =    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
44	[BUG]  [BUGGY]  if(csize  ==  0  ||(csize  <  =  0  &&  current.isEnabled(Feature.AUTO_CLOSE_SOURCE)))  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  ==  0  ||(csize  <  =  0  &&  current.isEnabled(Feature.AUTO_CLOSE_SOURCE)))  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  ==  0  ||(csize  <  =  0  &&  current.isEnabled(Feature.AUTO_CLOSE_SOURCE)))  {	  if    (current.bytesRead    ==    csize    ||(csize    <    =    0    &&    current.isEnabled(Feature.AUTO_CLOSE_SOURCE)))    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
45	[BUG]  [BUGGY]  if(csize  >=  0  ||(csize  <  =  0  &&  current.isEnabled(Feature.AUTO_CLOSE_SOURCE)))  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >=  0  ||(csize  <  =  0  &&  current.isEnabled(Feature.AUTO_CLOSE_SOURCE)))  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >=  0  ||(csize  <  =  0  &&  current.isEnabled(Feature.AUTO_CLOSE_SOURCE)))  {	  if    (current.bytesRead    ==    csize    ||(csize    <    =    0    &&    current.isEnabled(Feature.AUTO_CLOSE_SOURCE)))    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
46	[BUG]  [BUGGY]  if(csize  <  =  0  ||(csize  <  =  0  &&  current.isEnabled(Feature.AUTO_CLOSE_SOURCE)))  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  =  0  ||(csize  <  =  0  &&  current.isEnabled(Feature.AUTO_CLOSE_SOURCE)))  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  =  0  ||(csize  <  =  0  &&  current.isEnabled(Feature.AUTO_CLOSE_SOURCE)))  {	  if    (current.bytesRead    ==    csize    ||(csize    <    =    0    &&    current.isEnabled(Feature.AUTO_CLOSE_SOURCE)))    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
47	[BUG]  [BUGGY]  if(csize!=  0  ||(csize  <  =  0  &&  current.isEnabled(Feature.AUTO_CLOSE_SOURCE)))  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize!=  0  ||(csize  <  =  0  &&  current.isEnabled(Feature.AUTO_CLOSE_SOURCE)))  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize!=  0  ||(csize  <  =  0  &&  current.isEnabled(Feature.AUTO_CLOSE_SOURCE)))  {	  if    (current.bytesRead    ==    csize    ||(csize    <    =    0    &&    current.isEnabled(Feature.AUTO_CLOSE_SOURCE)))    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
48	[BUG]  [BUGGY]  if  (csize  <  =  0  ||(current.isEnabled(Feature.AUTO_CLOSE_SOURCE)))  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if  (csize  <  =  0  ||(current.isEnabled(Feature.AUTO_CLOSE_SOURCE)))  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if  (csize  <  =  0  ||(current.isEnabled(Feature.AUTO_CLOSE_SOURCE)))  {	  if    (current.bytesRead    ==    csize    ||(csize    <    =    0    &&    current.isEnabled(Feature.AUTO_CLOSE_SOURCE)))    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
49	[BUG]  [BUGGY]  long  csize  =  current.entry.getLength();  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  long  csize  =  current.entry.getLength();  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	long  csize  =  current.entry.getLength();	  int    csize    =    current.entry.getLength();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
50	[BUG]  [BUGGY]  int  csize  =  current.entry.getLength()  +  1;  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  csize  =  current.entry.getLength()  +  1;  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  csize  =  current.entry.getLength()  +  1;	  int    csize    =    current.entry.getLength();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
51	[BUG]  [BUGGY]  int  csize  =  lastStoredEntry.getLength();  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  csize  =  lastStoredEntry.getLength();  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  csize  =  lastStoredEntry.getLength();	  int    csize    =    current.entry.getLength();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
52	[BUG]  [BUGGY]  if(csize  >  lastStoredEntry.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >  lastStoredEntry.bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >  lastStoredEntry.bytesRead)  {	  if(csize    >    current.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
53	[BUG]  [BUGGY]  if(csize  >  0)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >  0)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >  0)  {	  if(csize    >    current.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
54	[BUG]  [BUGGY]  if(csize  ==  0  ||(csize  <  =  0  &&  current.hasDataDescriptor))  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  ==  0  ||(csize  <  =  0  &&  current.hasDataDescriptor))  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  ==  0  ||(csize  <  =  0  &&  current.hasDataDescriptor))  {	  if    (current.bytesRead    ==    csize    ||(csize    <    =    0    &&    current.hasDataDescriptor))    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
55	[BUG]  [BUGGY]  if(csize  >=  0  ||(csize  <  =  0  &&  current.hasDataDescriptor))  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >=  0  ||(csize  <  =  0  &&  current.hasDataDescriptor))  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >=  0  ||(csize  <  =  0  &&  current.hasDataDescriptor))  {	  if    (current.bytesRead    ==    csize    ||(csize    <    =    0    &&    current.hasDataDescriptor))    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
56	[BUG]  [BUGGY]  if(csize  <  =  0  ||(csize  <  =  0  &&  current.hasDataDescriptor))  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  =  0  ||(csize  <  =  0  &&  current.hasDataDescriptor))  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  =  0  ||(csize  <  =  0  &&  current.hasDataDescriptor))  {	  if    (current.bytesRead    ==    csize    ||(csize    <    =    0    &&    current.hasDataDescriptor))    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
57	[BUG]  [BUGGY]  if(csize  <  lastStoredEntry.bytesRead  ||  csize  >  0)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  lastStoredEntry.bytesRead  ||  csize  >  0)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  lastStoredEntry.bytesRead  ||  csize  >  0)  {	  if(csize    <    current.bytesRead    ||    csize    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
58	[BUG]  [BUGGY]  if(csize  <  =  current.bytesRead  ||  csize  >  0)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  =  current.bytesRead  ||  csize  >  0)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  =  current.bytesRead  ||  csize  >  0)  {	  if(csize    <    current.bytesRead    ||    csize    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
59	[BUG]  [BUGGY]  if(csize  <  current.bytesRead  ||  csize  >  1)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  current.bytesRead  ||  csize  >  1)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  current.bytesRead  ||  csize  >  1)  {	  if(csize    <    current.bytesRead    ||    csize    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
60	[BUG]  [BUGGY]  if(csize  <  max  ||  csize  >  0)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  max  ||  csize  >  0)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  max  ||  csize  >  0)  {	  if(csize    <    current.bytesRead    ||    csize    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
61	[BUG]  [BUGGY]  if(csize  <  =  0  ||  csize  >  0)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  =  0  ||  csize  >  0)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  =  0  ||  csize  >  0)  {	  if(csize    <    current.bytesRead    ||    csize    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
62	[BUG]  [BUGGY]  if(csize  <  size  ||  csize  >  0)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  size  ||  csize  >  0)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  size  ||  csize  >  0)  {	  if(csize    <    current.bytesRead    ||    csize    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
63	[BUG]  [BUGGY]  Inflater  inf  =  current.entry.getInputStream();  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  Inflater  inf  =  current.entry.getInputStream();  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	Inflater  inf  =  current.entry.getInputStream();	  Inflater    inf    =    current.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
64	[BUG]  [BUGGY]  Inflater  inf  =  current.getInputStream(csize);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  Inflater  inf  =  current.getInputStream(csize);  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	Inflater  inf  =  current.getInputStream(csize);	  Inflater    inf    =    current.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
65	[BUG]  [BUGGY]  Inflater  inf  =  current.getInputStream(),  csize);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  Inflater  inf  =  current.getInputStream(),  csize);  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	Inflater  inf  =  current.getInputStream(),  csize);	  Inflater    inf    =    current.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
66	[BUG]  [BUGGY]  Inflater  inf  =  current.currentEntry.getInputStream();  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  Inflater  inf  =  current.currentEntry.getInputStream();  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	Inflater  inf  =  current.currentEntry.getInputStream();	  Inflater    inf    =    current.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
67	[BUG]  [BUGGY]  Inflater  inf  =  current.hasDataDescriptor?  current.getInputStream()  :  csize;  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  Inflater  inf  =  current.hasDataDescriptor?  current.getInputStream()  :  csize;  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	Inflater  inf  =  current.hasDataDescriptor?  current.getInputStream()  :  csize;	  Inflater    inf    =    current.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
68	[BUG]  [BUGGY]  Inflater  inf  =  current.getInputStream(),  csize;  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  Inflater  inf  =  current.getInputStream(),  csize;  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	Inflater  inf  =  current.getInputStream(),  csize;	  Inflater    inf    =    current.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
69	[BUG]  [BUGGY]  if(csize  ==  0  ||(csize  <  =  0  &&  current.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  ==  0  ||(csize  <  =  0  &&  current.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  ==  0  ||(csize  <  =  0  &&  current.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {	  if    (current.bytesRead    ==    csize    ||(csize    <    =    0    &&    current.isEnabled(Feature.QUOTE_FIELD_NAMES)))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
70	[BUG]  [BUGGY]  if(csize  >=  0  ||(csize  <  =  0  &&  current.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >=  0  ||(csize  <  =  0  &&  current.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >=  0  ||(csize  <  =  0  &&  current.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {	  if    (current.bytesRead    ==    csize    ||(csize    <    =    0    &&    current.isEnabled(Feature.QUOTE_FIELD_NAMES)))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
71	[BUG]  [BUGGY]  if(csize  <  =  0  ||(csize  <  =  0  &&  current.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  =  0  ||(csize  <  =  0  &&  current.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  =  0  ||(csize  <  =  0  &&  current.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {	  if    (current.bytesRead    ==    csize    ||(csize    <    =    0    &&    current.isEnabled(Feature.QUOTE_FIELD_NAMES)))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
72	[BUG]  [BUGGY]  if(csize!=  0  ||(csize  <  =  0  &&  current.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize!=  0  ||(csize  <  =  0  &&  current.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize!=  0  ||(csize  <  =  0  &&  current.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {	  if    (current.bytesRead    ==    csize    ||(csize    <    =    0    &&    current.isEnabled(Feature.QUOTE_FIELD_NAMES)))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
73	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
74	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
75	[BUG]  [BUGGY]  while(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  while(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	while(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
76	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
77	[BUG]  [BUGGY]  while(csize  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  while(csize  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	while(csize  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
78	[BUG]  [BUGGY]  while(csize  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  while(csize  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	while(csize  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
79	[BUG]  [BUGGY]  if(csize  <  =  lastStoredEntry.bytesRead)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  =  lastStoredEntry.bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  =  lastStoredEntry.bytesRead)  {	  if(csize    >=    lastStoredEntry.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
80	[BUG]  [BUGGY]  while(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  while(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  length);  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	while(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  length);  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
81	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  length);  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  length);  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
82	[BUG]  [BUGGY]  if(csize  <  =  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  =  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  length);  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  =  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  length);  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
83	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  length);  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  length);  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
84	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  length);  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  length);  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
85	[BUG]  [BUGGY]  while(csize  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  while(csize  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  length);  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	while(csize  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  length);  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
86	[BUG]  [BUGGY]  while(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.reset();  }  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  while(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.reset();  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	while(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.reset();  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buf.reset();    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
87	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.reset();  }  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.reset();  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.reset();  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buf.reset();    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
88	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.reset();  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.reset();  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	for(int  i  =  0;  i  <  csize;  ++i)  {  buf.reset();  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buf.reset();    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
89	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.reset();  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.reset();  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.reset();  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buf.reset();    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
90	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buf.reset();  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buf.reset();  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buf.reset();  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buf.reset();    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
91	[BUG]  [BUGGY]  while(csize  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.reset();  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  while(csize  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.reset();  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	while(csize  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.reset();  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buf.reset();    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
92	[BUG]  [BUGGY]  if(csize  >=  current.bytesRead  ||  csize  <  =  0)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >=  current.bytesRead  ||  csize  <  =  0)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >=  current.bytesRead  ||  csize  <  =  0)  {	  if(csize    >=    current.bytesRead    ||    csize    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
93	[BUG]  [BUGGY]  if(csize  >=  current.bytesRead  ||  csize  >  1)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >=  current.bytesRead  ||  csize  >  1)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >=  current.bytesRead  ||  csize  >  1)  {	  if(csize    >=    current.bytesRead    ||    csize    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
94	[BUG]  [BUGGY]  if(csize  >>  current.bytesRead  ||  csize  >  0)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >>  current.bytesRead  ||  csize  >  0)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >>  current.bytesRead  ||  csize  >  0)  {	  if(csize    >=    current.bytesRead    ||    csize    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
95	[BUG]  [BUGGY]  if(csize  <  current.entry.bytesRead)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  current.entry.bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  current.entry.bytesRead)  {	  if(csize    >=    current.entry.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
96	[BUG]  [BUGGY]  if(csize  <  =  current.entry.bytesRead)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  =  current.entry.bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  =  current.entry.bytesRead)  {	  if(csize    >=    current.entry.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
97	[BUG]  [BUGGY]  int  size  =  current.entry.size()  -  1;  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  size  =  current.entry.size()  -  1;  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  size  =  current.entry.size()  -  1;	  int    size    =    current.entry.size();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
98	[BUG]  [BUGGY]  int  size  =  current.entry.size()  -  csize;  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  size  =  current.entry.size()  -  csize;  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  size  =  current.entry.size()  -  csize;	  int    size    =    current.entry.size();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
99	[BUG]  [BUGGY]  int  size  =  current.entry.size()  +  1;  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  size  =  current.entry.size()  +  1;  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  size  =  current.entry.size()  +  1;	  int    size    =    current.entry.size();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
100	[BUG]  [BUGGY]  int  size  =  current.entry.size()  +  csize;  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  size  =  current.entry.size()  +  csize;  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  size  =  current.entry.size()  +  csize;	  int    size    =    current.entry.size();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
101	[BUG]  [BUGGY]  int  size  =  current.entry.size()  *  csize;  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  size  =  current.entry.size()  *  csize;  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  size  =  current.entry.size()  *  csize;	  int    size    =    current.entry.size();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
102	[BUG]  [BUGGY]  int  size  =  current.entry.size()  -  2;  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  size  =  current.entry.size()  -  2;  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  size  =  current.entry.size()  -  2;	  int    size    =    current.entry.size();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
103	[BUG]  [BUGGY]  for(int  pos  =  0;  pos  <  csize;  pos++)  {  buf.reset();  }  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  for(int  pos  =  0;  pos  <  csize;  pos++)  {  buf.reset();  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	for(int  pos  =  0;  pos  <  csize;  pos++)  {  buf.reset();  }	  if(csize    >    0)    {    for(int    pos    =    0;    pos    <    csize;    pos++)    {    buf.reset();    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
104	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  pos  =  0;  pos  <  size;  pos++)  {  buf.reset();  }  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >  0)  {  for(int  pos  =  0;  pos  <  size;  pos++)  {  buf.reset();  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >  0)  {  for(int  pos  =  0;  pos  <  size;  pos++)  {  buf.reset();  }	  if(csize    >    0)    {    for(int    pos    =    0;    pos    <    csize;    pos++)    {    buf.reset();    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
105	[BUG]  [BUGGY]  while(csize  >  0)  {  for(int  pos  =  0;  pos  <  csize;  pos++)  {  buf.reset();  }  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  while(csize  >  0)  {  for(int  pos  =  0;  pos  <  csize;  pos++)  {  buf.reset();  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	while(csize  >  0)  {  for(int  pos  =  0;  pos  <  csize;  pos++)  {  buf.reset();  }	  if(csize    >    0)    {    for(int    pos    =    0;    pos    <    csize;    pos++)    {    buf.reset();    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
106	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  pos  =  0;  pos  <  length;  pos++)  {  buf.reset();  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >  0)  {  for(int  pos  =  0;  pos  <  length;  pos++)  {  buf.reset();  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >  0)  {  for(int  pos  =  0;  pos  <  length;  pos++)  {  buf.reset();  }	  if(csize    >    0)    {    for(int    pos    =    0;    pos    <    csize;    pos++)    {    buf.reset();    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
107	[BUG]  [BUGGY]  while(csize  >  0)  {  for(int  pos  =  0;  pos  <  size;  pos++)  {  buf.reset();  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  while(csize  >  0)  {  for(int  pos  =  0;  pos  <  size;  pos++)  {  buf.reset();  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	while(csize  >  0)  {  for(int  pos  =  0;  pos  <  size;  pos++)  {  buf.reset();  }	  if(csize    >    0)    {    for(int    pos    =    0;    pos    <    csize;    pos++)    {    buf.reset();    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
108	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  pos  =  0;  pos  <  max;  pos++)  {  buf.reset();  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >  0)  {  for(int  pos  =  0;  pos  <  max;  pos++)  {  buf.reset();  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >  0)  {  for(int  pos  =  0;  pos  <  max;  pos++)  {  buf.reset();  }	  if(csize    >    0)    {    for(int    pos    =    0;    pos    <    csize;    pos++)    {    buf.reset();    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
109	[BUG]  [BUGGY]  if(csize  <  lastStoredEntry.bytesRead  ||  csize  >  512)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  lastStoredEntry.bytesRead  ||  csize  >  512)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  lastStoredEntry.bytesRead  ||  csize  >  512)  {	  if(csize    <    current.bytesRead    ||    csize    >    512)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
110	[BUG]  [BUGGY]  if(csize  <  =  0  ||  csize  >  512)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  =  0  ||  csize  >  512)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  =  0  ||  csize  >  512)  {	  if(csize    <    current.bytesRead    ||    csize    >    512)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
111	[BUG]  [BUGGY]  if(csize  <  =  current.bytesRead  ||  csize  >  512)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  =  current.bytesRead  ||  csize  >  512)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  =  current.bytesRead  ||  csize  >  512)  {	  if(csize    <    current.bytesRead    ||    csize    >    512)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
112	[BUG]  [BUGGY]  if(csize  <  0  ||  csize  >  512)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  0  ||  csize  >  512)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  0  ||  csize  >  512)  {	  if(csize    <    current.bytesRead    ||    csize    >    512)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
113	[BUG]  [BUGGY]  if(csize  <  max  ||  csize  >  512)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  max  ||  csize  >  512)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  max  ||  csize  >  512)  {	  if(csize    <    current.bytesRead    ||    csize    >    512)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
114	[BUG]  [BUGGY]  if(csize  <  size  ||  csize  >  512)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  size  ||  csize  >  512)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  size  ||  csize  >  512)  {	  if(csize    <    current.bytesRead    ||    csize    >    512)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
115	[BUG]  [BUGGY]  long  csize  =  current.entry.array();  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  long  csize  =  current.entry.array();  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	long  csize  =  current.entry.array();	  int    csize    =    current.entry.array();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
116	[BUG]  [BUGGY]  int  csize  =  lastStoredEntry.array();  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  csize  =  lastStoredEntry.array();  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  csize  =  lastStoredEntry.array();	  int    csize    =    current.entry.array();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
117	[BUG]  [BUGGY]  byte  csize  =  current.entry.array();  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  byte  csize  =  current.entry.array();  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	byte  csize  =  current.entry.array();	  int    csize    =    current.entry.array();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
118	[BUG]  [BUGGY]  int  csize  =  current.entry.length();  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  csize  =  current.entry.length();  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  csize  =  current.entry.length();	  int    csize    =    current.entry.array();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
119	[BUG]  [BUGGY]  int  size  =  current.entry.getSize()  -  csize;  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  size  =  current.entry.getSize()  -  csize;  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  size  =  current.entry.getSize()  -  csize;	  int    size    =    current.entry.getSize();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
120	[BUG]  [BUGGY]  int  size  =  current.entry.getSize()  +  csize;  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  size  =  current.entry.getSize()  +  csize;  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  size  =  current.entry.getSize()  +  csize;	  int    size    =    current.entry.getSize();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
121	[BUG]  [BUGGY]  int  size  =  current.entry.getSize()  +  1;  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  size  =  current.entry.getSize()  +  1;  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  size  =  current.entry.getSize()  +  1;	  int    size    =    current.entry.getSize();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
122	[BUG]  [BUGGY]  int  size  =  current.entry.getSize()  *  csize;  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  size  =  current.entry.getSize()  *  csize;  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  size  =  current.entry.getSize()  *  csize;	  int    size    =    current.entry.getSize();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
123	[BUG]  [BUGGY]  int  size  =  current.entry.getLength();  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  size  =  current.entry.getLength();  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  size  =  current.entry.getLength();	  int    size    =    current.entry.getSize();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
124	[BUG]  [BUGGY]  int  l  =  current.entry.read(buffer,  offset,  csize);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  l  =  current.entry.read(buffer,  offset,  csize);  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  l  =  current.entry.read(buffer,  offset,  csize);	  int    l    =    current.entry.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
125	[BUG]  [BUGGY]  int  l  =  current.entry.read(buffer,  offset,  length,  csize);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  l  =  current.entry.read(buffer,  offset,  length,  csize);  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  l  =  current.entry.read(buffer,  offset,  length,  csize);	  int    l    =    current.entry.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
126	[BUG]  [BUGGY]  int  l  =  lastStoredEntry.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  l  =  lastStoredEntry.read(buffer,  offset,  length);  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  l  =  lastStoredEntry.read(buffer,  offset,  length);	  int    l    =    current.entry.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
127	[BUG]  [BUGGY]  int  l  =  current.entry.read(buffer,  offset,  size);  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  l  =  current.entry.read(buffer,  offset,  size);  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  l  =  current.entry.read(buffer,  offset,  size);	  int    l    =    current.entry.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
128	[BUG]  [BUGGY]  int  l  =  this.current.entry.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  l  =  this.current.entry.read(buffer,  offset,  length);  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  l  =  this.current.entry.read(buffer,  offset,  length);	  int    l    =    current.entry.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
129	[BUG]  [BUGGY]  if(csize  <  lastStoredEntry.bytesRead  ||  csize  >  256)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  lastStoredEntry.bytesRead  ||  csize  >  256)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  lastStoredEntry.bytesRead  ||  csize  >  256)  {	  if(csize    <    current.bytesRead    ||    csize    >    256)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
130	[BUG]  [BUGGY]  if(csize  <  =  0  ||  csize  >  256)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  =  0  ||  csize  >  256)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  =  0  ||  csize  >  256)  {	  if(csize    <    current.bytesRead    ||    csize    >    256)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
131	[BUG]  [BUGGY]  if(csize  <  0  ||  csize  >  256)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  0  ||  csize  >  256)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  0  ||  csize  >  256)  {	  if(csize    <    current.bytesRead    ||    csize    >    256)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
132	[BUG]  [BUGGY]  if(csize  <  =  current.bytesRead  ||  csize  >  256)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  =  current.bytesRead  ||  csize  >  256)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  =  current.bytesRead  ||  csize  >  256)  {	  if(csize    <    current.bytesRead    ||    csize    >    256)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
133	[BUG]  [BUGGY]  if(csize  <  max  ||  csize  >  256)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  max  ||  csize  >  256)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  max  ||  csize  >  256)  {	  if(csize    <    current.bytesRead    ||    csize    >    256)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
134	[BUG]  [BUGGY]  if(csize  <  current.bytesRead  ||  csize  >  16)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  current.bytesRead  ||  csize  >  16)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  current.bytesRead  ||  csize  >  16)  {	  if(csize    <    current.bytesRead    ||    csize    >    256)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
135	[BUG]  [BUGGY]  int  csize  =  current.entry.read(buffer,  offset,  length,  csize);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  csize  =  current.entry.read(buffer,  offset,  length,  csize);  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  csize  =  current.entry.read(buffer,  offset,  length,  csize);	  int    csize    =    current.entry.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
136	[BUG]  [BUGGY]  int  csize  =  current.entry.read(buffer,  offset,  csize);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  csize  =  current.entry.read(buffer,  offset,  csize);  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  csize  =  current.entry.read(buffer,  offset,  csize);	  int    csize    =    current.entry.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
137	[BUG]  [BUGGY]  int  csize  =  current.entry.read(buffer,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  csize  =  current.entry.read(buffer,  offset,  length  +  1);  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  csize  =  current.entry.read(buffer,  offset,  length  +  1);	  int    csize    =    current.entry.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
138	[BUG]  [BUGGY]  int  csize  =  current.entry.read(buffer,  offset,  length,  size);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  csize  =  current.entry.read(buffer,  offset,  length,  size);  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  csize  =  current.entry.read(buffer,  offset,  length,  size);	  int    csize    =    current.entry.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
139	[BUG]  [BUGGY]  int  csize  =  current.entry.read(buffer,  offset,  length,  buffer.length);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  csize  =  current.entry.read(buffer,  offset,  length,  buffer.length);  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  csize  =  current.entry.read(buffer,  offset,  length,  buffer.length);	  int    csize    =    current.entry.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
140	[BUG]  [BUGGY]  long  csize  =  current.entry.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  long  csize  =  current.entry.read(buffer,  offset,  length);  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	long  csize  =  current.entry.read(buffer,  offset,  length);	  int    csize    =    current.entry.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
141	[BUG]  [BUGGY]  if(csize  <  lastStoredEntry.bytesRead  ||  csize  >  lastStoredEntry.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  lastStoredEntry.bytesRead  ||  csize  >  lastStoredEntry.bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  lastStoredEntry.bytesRead  ||  csize  >  lastStoredEntry.bytesRead)  {	  if(csize    <    lastStoredEntry.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
142	[BUG]  [BUGGY]  if(csize  <  lastStoredEntry.bytesRead  ||  csize  >  max)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  lastStoredEntry.bytesRead  ||  csize  >  max)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  lastStoredEntry.bytesRead  ||  csize  >  max)  {	  if(csize    <    lastStoredEntry.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
143	[BUG]  [BUGGY]  if(csize  <  lastStoredEntry.bytesRead  ||  csize  <  =  current.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  lastStoredEntry.bytesRead  ||  csize  <  =  current.bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  lastStoredEntry.bytesRead  ||  csize  <  =  current.bytesRead)  {	  if(csize    <    =    current.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
144	[BUG]  [BUGGY]  if(csize  <  =  0  ||  csize  <  =  current.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  =  0  ||  csize  <  =  current.bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  =  0  ||  csize  <  =  current.bytesRead)  {	  if(csize    <    =    current.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
145	[BUG]  [BUGGY]  if(csize  <  current.bytesRead  ||  csize  <  =  current.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  current.bytesRead  ||  csize  <  =  current.bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  current.bytesRead  ||  csize  <  =  current.bytesRead)  {	  if(csize    <    =    current.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
146	[BUG]  [BUGGY]  if(csize  ==  0  ||(csize  <  =  0  &&  current.isEnabled(Feature.QUOTE_FIELD_NAMES)||  csize  >  0))  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  ==  0  ||(csize  <  =  0  &&  current.isEnabled(Feature.QUOTE_FIELD_NAMES)||  csize  >  0))  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  ==  0  ||(csize  <  =  0  &&  current.isEnabled(Feature.QUOTE_FIELD_NAMES)||  csize  >  0))  {	  if    (current.bytesRead    ==    csize    ||(csize    <    =    0    &&    current.isEnabled(Feature.QUOTE_FIELD_NAMES)||    csize    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
147	[BUG]  [BUGGY]  if(csize  >=  0  ||(csize  <  =  0  &&  current.isEnabled(Feature.QUOTE_FIELD_NAMES)||  csize  >  0))  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >=  0  ||(csize  <  =  0  &&  current.isEnabled(Feature.QUOTE_FIELD_NAMES)||  csize  >  0))  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >=  0  ||(csize  <  =  0  &&  current.isEnabled(Feature.QUOTE_FIELD_NAMES)||  csize  >  0))  {	  if    (current.bytesRead    ==    csize    ||(csize    <    =    0    &&    current.isEnabled(Feature.QUOTE_FIELD_NAMES)||    csize    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
148	[BUG]  [BUGGY]  if(csize  <  =  0  ||(csize  <  =  0  &&  current.isEnabled(Feature.QUOTE_FIELD_NAMES)||  csize  >  0))  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  =  0  ||(csize  <  =  0  &&  current.isEnabled(Feature.QUOTE_FIELD_NAMES)||  csize  >  0))  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  =  0  ||(csize  <  =  0  &&  current.isEnabled(Feature.QUOTE_FIELD_NAMES)||  csize  >  0))  {	  if    (current.bytesRead    ==    csize    ||(csize    <    =    0    &&    current.isEnabled(Feature.QUOTE_FIELD_NAMES)||    csize    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
149	[BUG]  [BUGGY]  if  (csize  <  =  0  ||(current.isEnabled(Feature.QUOTE_FIELD_NAMES)||  csize  >  0))  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if  (csize  <  =  0  ||(current.isEnabled(Feature.QUOTE_FIELD_NAMES)||  csize  >  0))  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if  (csize  <  =  0  ||(current.isEnabled(Feature.QUOTE_FIELD_NAMES)||  csize  >  0))  {	  if    (current.bytesRead    ==    csize    ||(csize    <    =    0    &&    current.isEnabled(Feature.QUOTE_FIELD_NAMES)||    csize    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
150	[BUG]  [BUGGY]  int  l  =  current.entry.array()  +  csize;  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  l  =  current.entry.array()  +  csize;  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  l  =  current.entry.array()  +  csize;	  int    l    =    current.entry.array();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
151	[BUG]  [BUGGY]  int  l  =  lastStoredEntry.array();  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  l  =  lastStoredEntry.array();  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  l  =  lastStoredEntry.array();	  int    l    =    current.entry.array();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
152	[BUG]  [BUGGY]  int  l  =  current.entry.arrayOffset();  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  l  =  current.entry.arrayOffset();  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  l  =  current.entry.arrayOffset();	  int    l    =    current.entry.array();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
153	[BUG]  [BUGGY]  Integer  l  =  current.entry.array();  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  Integer  l  =  current.entry.array();  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	Integer  l  =  current.entry.array();	  int    l    =    current.entry.array();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
154	[BUG]  [BUGGY]  int  l  =  current.entry.getLength()  +  1;  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  l  =  current.entry.getLength()  +  1;  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  l  =  current.entry.getLength()  +  1;	  int    l    =    current.entry.getLength();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
155	[BUG]  [BUGGY]  int  l  =  current.entry.getLength()  -  csize;  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  l  =  current.entry.getLength()  -  csize;  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  l  =  current.entry.getLength()  -  csize;	  int    l    =    current.entry.getLength();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
156	[BUG]  [BUGGY]  int  l  =  current.entry.getLength()  +  csize;  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  l  =  current.entry.getLength()  +  csize;  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  l  =  current.entry.getLength()  +  csize;	  int    l    =    current.entry.getLength();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
157	[BUG]  [BUGGY]  int  l  =  current.entry.getLength()  *  csize;  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  l  =  current.entry.getLength()  *  csize;  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  l  =  current.entry.getLength()  *  csize;	  int    l    =    current.entry.getLength();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
158	[BUG]  [BUGGY]  int  l  =  current.entry.getLength()  -  1;  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  l  =  current.entry.getLength()  -  1;  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  l  =  current.entry.getLength()  -  1;	  int    l    =    current.entry.getLength();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
159	[BUG]  [BUGGY]  int  l  =  current.entry.getLength()  +  2;  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  l  =  current.entry.getLength()  +  2;  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  l  =  current.entry.getLength()  +  2;	  int    l    =    current.entry.getLength();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
160	[BUG]  [BUGGY]  if(csize  ==  0  ||(csize  <  =  0  &&  current.isEnabled(Feature.QUOTE_FILES)||  csize  >  0))  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  ==  0  ||(csize  <  =  0  &&  current.isEnabled(Feature.QUOTE_FILES)||  csize  >  0))  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  ==  0  ||(csize  <  =  0  &&  current.isEnabled(Feature.QUOTE_FILES)||  csize  >  0))  {	  if    (current.bytesRead    ==    csize    ||(csize    <    =    0    &&    current.isEnabled(Feature.QUOTE_FILES)||    csize    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
161	[BUG]  [BUGGY]  if(csize  >=  0  ||(csize  <  =  0  &&  current.isEnabled(Feature.QUOTE_FILES)||  csize  >  0))  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >=  0  ||(csize  <  =  0  &&  current.isEnabled(Feature.QUOTE_FILES)||  csize  >  0))  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >=  0  ||(csize  <  =  0  &&  current.isEnabled(Feature.QUOTE_FILES)||  csize  >  0))  {	  if    (current.bytesRead    ==    csize    ||(csize    <    =    0    &&    current.isEnabled(Feature.QUOTE_FILES)||    csize    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
162	[BUG]  [BUGGY]  if(csize  <  =  0  ||(csize  <  =  0  &&  current.isEnabled(Feature.QUOTE_FILES)||  csize  >  0))  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  =  0  ||(csize  <  =  0  &&  current.isEnabled(Feature.QUOTE_FILES)||  csize  >  0))  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  =  0  ||(csize  <  =  0  &&  current.isEnabled(Feature.QUOTE_FILES)||  csize  >  0))  {	  if    (current.bytesRead    ==    csize    ||(csize    <    =    0    &&    current.isEnabled(Feature.QUOTE_FILES)||    csize    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
163	[BUG]  [BUGGY]  if  (csize  <  =  0  ||(current.isEnabled(Feature.QUOTE_FILES)||  csize  >  0))  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if  (csize  <  =  0  ||(current.isEnabled(Feature.QUOTE_FILES)||  csize  >  0))  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if  (csize  <  =  0  ||(current.isEnabled(Feature.QUOTE_FILES)||  csize  >  0))  {	  if    (current.bytesRead    ==    csize    ||(csize    <    =    0    &&    current.isEnabled(Feature.QUOTE_FILES)||    csize    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
164	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  csize;  ++i)  {  buffer[i]  =  current.entry.getValue();  }  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  for(int  i  =  0;  i  <  csize;  ++i)  {  buffer[i]  =  current.entry.getValue();  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	for(int  i  =  0;  i  <  csize;  ++i)  {  buffer[i]  =  current.entry.getValue();  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buffer[i]    =    current.entry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
165	[BUG]  [BUGGY]  while(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buffer[i]  =  current.entry.getValue();  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  while(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buffer[i]  =  current.entry.getValue();  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	while(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buffer[i]  =  current.entry.getValue();  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buffer[i]    =    current.entry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
166	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  current.entry.getValue();  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  current.entry.getValue();  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  current.entry.getValue();  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buffer[i]    =    current.entry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
167	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer[i]  =  current.entry.getValue();  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer[i]  =  current.entry.getValue();  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer[i]  =  current.entry.getValue();  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buffer[i]    =    current.entry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
168	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  current.entry.getValue();  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  current.entry.getValue();  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  current.entry.getValue();  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buffer[i]    =    current.entry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
169	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  lastStoredEntry.length;  ++i)  {  buffer[i]  =  current.entry.getValue();  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  lastStoredEntry.length;  ++i)  {  buffer[i]  =  current.entry.getValue();  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >  0)  {  for(int  i  =  0;  i  <  lastStoredEntry.length;  ++i)  {  buffer[i]  =  current.entry.getValue();  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buffer[i]    =    current.entry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
170	[BUG]  [BUGGY]  int  l  =  in.read(csize,  buffer.length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  l  =  in.read(csize,  buffer.length);  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  l  =  in.read(csize,  buffer.length);	  int    l    =    in.read(csize);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
171	[BUG]  [BUGGY]  int  l  =  in.read(csize,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  l  =  in.read(csize,  length);  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  l  =  in.read(csize,  length);	  int    l    =    in.read(csize);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
172	[BUG]  [BUGGY]  int  l  =  in.read(csize,  buffer);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  l  =  in.read(csize,  buffer);  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  l  =  in.read(csize,  buffer);	  int    l    =    in.read(csize);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
173	[BUG]  [BUGGY]  int  l  =  in.read(buffer,  csize);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  l  =  in.read(buffer,  csize);  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  l  =  in.read(buffer,  csize);	  int    l    =    in.read(csize);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
174	[BUG]  [BUGGY]  int  l  =  in.read(csize,  0,  csize);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  l  =  in.read(csize,  0,  csize);  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  l  =  in.read(csize,  0,  csize);	  int    l    =    in.read(csize);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
175	[BUG]  [BUGGY]  int  l  =  in.read(csize,  offset);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  l  =  in.read(csize,  offset);  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  l  =  in.read(csize,  offset);	  int    l    =    in.read(csize);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
176	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  csize);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  csize);  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  csize);  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset,    csize);    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
177	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  csize);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  csize);  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  csize);  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset,    csize);    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
178	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  csize);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  csize);  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  csize);  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset,    csize);    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
179	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  in.read(buffer,  offset,  csize);  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  in.read(buffer,  offset,  csize);  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  in.read(buffer,  offset,  csize);  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset,    csize);    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
180	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buffer[i]  =  in.read(buffer,  offset,  csize);  }  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buffer[i]  =  in.read(buffer,  offset,  csize);  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buffer[i]  =  in.read(buffer,  offset,  csize);  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset,    csize);    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
181	[BUG]  [BUGGY]  if(csize  ==  current.entry.bytesRead  ||  csize  >  0)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  ==  current.entry.bytesRead  ||  csize  >  0)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  ==  current.entry.bytesRead  ||  csize  >  0)  {	  if(csize    ==    current.entry.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
182	[BUG]  [BUGGY]  if(csize  ==  current.entry.bytesRead  ||  csize  ==  bytesRead)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  ==  current.entry.bytesRead  ||  csize  ==  bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  ==  current.entry.bytesRead  ||  csize  ==  bytesRead)  {	  if(csize    ==    current.entry.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
183	[BUG]  [BUGGY]  int  csize  =  current.entry.getSize()  +  1;  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  csize  =  current.entry.getSize()  +  1;  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  csize  =  current.entry.getSize()  +  1;	  int    csize    =    current.entry.getSize();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
184	[BUG]  [BUGGY]  long  csize  =  current.entry.getSize();  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  long  csize  =  current.entry.getSize();  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	long  csize  =  current.entry.getSize();	  int    csize    =    current.entry.getSize();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
185	[BUG]  [BUGGY]  int  csize  =  current.entry.getSize()  +  length;  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  csize  =  current.entry.getSize()  +  length;  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  csize  =  current.entry.getSize()  +  length;	  int    csize    =    current.entry.getSize();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
186	[BUG]  [BUGGY]  int  csize  =  lastStoredEntry.getSize();  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  csize  =  lastStoredEntry.getSize();  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  csize  =  lastStoredEntry.getSize();	  int    csize    =    current.entry.getSize();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
187	[BUG]  [BUGGY]  int  csize  =  current.entry.getCurrentSize();  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  csize  =  current.entry.getCurrentSize();  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  csize  =  current.entry.getCurrentSize();	  int    csize    =    current.entry.getSize();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
188	[BUG]  [BUGGY]  if(csize!=  current.bytesRead  ||  csize  >=  bytesRead)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize!=  current.bytesRead  ||  csize  >=  bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize!=  current.bytesRead  ||  csize  >=  bytesRead)  {	  if(csize!=    current.bytesRead    ||    csize    ==    bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
189	[BUG]  [BUGGY]  if(csize!=  lastStoredEntry.bytesRead  ||  csize  ==  bytesRead)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize!=  lastStoredEntry.bytesRead  ||  csize  ==  bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize!=  lastStoredEntry.bytesRead  ||  csize  ==  bytesRead)  {	  if(csize!=    current.bytesRead    ||    csize    ==    bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
190	[BUG]  [BUGGY]  if(csize  >=  current.bytesRead  ||  csize!=  bytesRead)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >=  current.bytesRead  ||  csize!=  bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >=  current.bytesRead  ||  csize!=  bytesRead)  {	  if(csize!=    current.bytesRead    ||    csize    ==    bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
191	[BUG]  [BUGGY]  if(csize!=  current.bytesRead  ||  csize  <  bytesRead)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize!=  current.bytesRead  ||  csize  <  bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize!=  current.bytesRead  ||  csize  <  bytesRead)  {	  if(csize!=    current.bytesRead    ||    csize    ==    bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
192	[BUG]  [BUGGY]  if(csize  ==  0)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  ==  0)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  ==  0)  {	  if    (current.bytesRead    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
193	[BUG]  [BUGGY]  if(csize  ==  0  ||  current.bytesRead  ==  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  ==  0  ||  current.bytesRead  ==  0)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  ==  0  ||  current.bytesRead  ==  0)  {	  if    (current.bytesRead    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
194	[BUG]  [BUGGY]  if(csize  <  0  ||  current.bytesRead  ==  0)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  0  ||  current.bytesRead  ==  0)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  0  ||  current.bytesRead  ==  0)  {	  if    (current.bytesRead    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
195	[BUG]  [BUGGY]  if(csize!=  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize!=  0)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize!=  0)  {	  if    (current.bytesRead    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
196	[BUG]  [BUGGY]  if(csize  >=  0)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >=  0)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >=  0)  {	  if    (current.bytesRead    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
197	[BUG]  [BUGGY]  if(csize  ==  0  ||  buffer.bytesRead  ==  0)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  ==  0  ||  buffer.bytesRead  ==  0)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  ==  0  ||  buffer.bytesRead  ==  0)  {	  if    (current.bytesRead    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
198	[BUG]  [BUGGY]  if(csize  ==  current.bytesRead  ||  csize  ==  lastStoredEntry.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  ==  current.bytesRead  ||  csize  ==  lastStoredEntry.bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  ==  current.bytesRead  ||  csize  ==  lastStoredEntry.bytesRead)  {	  if(csize    ==    lastStoredEntry.bytesRead    ||    csize    ==    current.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
199	[BUG]  [BUGGY]  if(csize  >=  lastStoredEntry.bytesRead  ||  csize  ==  current.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >=  lastStoredEntry.bytesRead  ||  csize  ==  current.bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >=  lastStoredEntry.bytesRead  ||  csize  ==  current.bytesRead)  {	  if(csize    ==    lastStoredEntry.bytesRead    ||    csize    ==    current.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
200	[BUG]  [BUGGY]  if(csize  ==  lastStoredEntry.bytesRead  ||  csize  >  current.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  ==  lastStoredEntry.bytesRead  ||  csize  >  current.bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  ==  lastStoredEntry.bytesRead  ||  csize  >  current.bytesRead)  {	  if(csize    ==    lastStoredEntry.bytesRead    ||    csize    ==    current.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
201	[BUG]  [BUGGY]  if(csize  >  lastStoredEntry.bytesRead  ||  csize  ==  current.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >  lastStoredEntry.bytesRead  ||  csize  ==  current.bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >  lastStoredEntry.bytesRead  ||  csize  ==  current.bytesRead)  {	  if(csize    ==    lastStoredEntry.bytesRead    ||    csize    ==    current.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
202	[BUG]  [BUGGY]  if(csize  ==  max)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  ==  max)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  ==  max)  {	  if(csize    <    max)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
203	[BUG]  [BUGGY]  if(csize!=  max)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize!=  max)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize!=  max)  {	  if(csize    <    max)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
204	[BUG]  [BUGGY]  if(csize  <  next.bytesRead  ||  csize  >  0)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  next.bytesRead  ||  csize  >  0)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  next.bytesRead  ||  csize  >  0)  {	  if(csize    <    current.bytesRead    ||    csize    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
205	[BUG]  [BUGGY]  if(csize  <  0  ||  csize  >  0)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  0  ||  csize  >  0)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  0  ||  csize  >  0)  {	  if(csize    <    current.bytesRead    ||    csize    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
206	[BUG]  [BUGGY]  if(csize  >=  current.entry.length)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >=  current.entry.length)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >=  current.entry.length)  {	  if(csize    >=    current.entry.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
207	[BUG]  [BUGGY]  int  l  =  in.read(buffer);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  l  =  in.read(buffer);  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  l  =  in.read(buffer);	  int    l    =    in.read(csize);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
208	[BUG]  [BUGGY]  int  l  =  in.read(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  l  =  in.read(buffer,  offset,  length  -  1);  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  l  =  in.read(buffer,  offset,  length  -  1);	  int    l    =    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
209	[BUG]  [BUGGY]  int  l  =  in.read(buffer,  offset,  size);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  l  =  in.read(buffer,  offset,  size);  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  l  =  in.read(buffer,  offset,  size);	  int    l    =    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
210	[BUG]  [BUGGY]  if(csize  ==  lastStoredEntry.bytesRead  ||  csize  >=  current.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  ==  lastStoredEntry.bytesRead  ||  csize  >=  current.bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  ==  lastStoredEntry.bytesRead  ||  csize  >=  current.bytesRead)  {	  if(csize    ==    lastStoredEntry.bytesRead    ||    csize    ==    current.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
211	[BUG]  [BUGGY]  if(csize  <  =  current.bytesRead  ||  csize  >  max)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  =  current.bytesRead  ||  csize  >  max)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  =  current.bytesRead  ||  csize  >  max)  {	  if(csize    <    =    current.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
212	[BUG]  [BUGGY]  if(csize  ==  lastStoredEntry.bytesRead  ||  csize  >  0)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  ==  lastStoredEntry.bytesRead  ||  csize  >  0)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  ==  lastStoredEntry.bytesRead  ||  csize  >  0)  {	  if(csize    ==    current.bytesRead    ||    csize    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
213	[BUG]  [BUGGY]  if(csize  ==  current.bytesRead  ||  csize!=  0)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  ==  current.bytesRead  ||  csize!=  0)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  ==  current.bytesRead  ||  csize!=  0)  {	  if(csize    ==    current.bytesRead    ||    csize    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
214	[BUG]  [BUGGY]  if(csize  ==  current.entry.length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  ==  current.entry.length)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  ==  current.entry.length)  {	  if(csize    ==    current.entry.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
215	[BUG]  [BUGGY]  if(csize  ==  0  &&  current.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  ==  0  &&  current.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  ==  0  &&  current.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {	  if    (current.bytesRead    ==    csize    ||(csize    <    =    0    &&    current.isEnabled(Feature.QUOTE_FIELD_NAMES)))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
216	[BUG]  [BUGGY]  if(csize  <  =  0  &&  current.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  =  0  &&  current.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  =  0  &&  current.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {	  if    (current.bytesRead    ==    csize    ||(csize    <    =    0    &&    current.isEnabled(Feature.QUOTE_FIELD_NAMES)))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
217	[BUG]  [BUGGY]  if(csize  <  =  0  ||  current.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  =  0  ||  current.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  =  0  ||  current.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {	  if    (current.bytesRead    ==    csize    ||(csize    <    =    0    &&    current.isEnabled(Feature.QUOTE_FIELD_NAMES)))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
218	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  csize;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  for(int  i  =  0;  i  <  csize;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	for(int  i  =  0;  i  <  csize;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
219	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  lastStoredEntry.length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  lastStoredEntry.length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >  0)  {  for(int  i  =  0;  i  <  lastStoredEntry.length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
220	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
221	[BUG]  [BUGGY]  if(csize  >=  0  ||  csize  <  current.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >=  0  ||  csize  <  current.bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >=  0  ||  csize  <  current.bytesRead)  {	  if(csize    >    0    ||    csize    <    current.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
222	[BUG]  [BUGGY]  int  size  =  lastStoredEntry.size();  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  size  =  lastStoredEntry.size();  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  size  =  lastStoredEntry.size();	  int    size    =    current.entry.size();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
223	[BUG]  [BUGGY]  int  size  =  lastStoredEntry.getSize();  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  size  =  lastStoredEntry.getSize();  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  size  =  lastStoredEntry.getSize();	  int    size    =    current.entry.getSize();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
224	[BUG]  [BUGGY]  int  size  =  current.entry.getSize()  -  1;  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  size  =  current.entry.getSize()  -  1;  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  size  =  current.entry.getSize()  -  1;	  int    size    =    current.entry.getSize();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
225	[BUG]  [BUGGY]  if(csize  >=  lastStoredEntry.bytesRead  ||  csize  >  lastStoredEntry.bytesRead)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >=  lastStoredEntry.bytesRead  ||  csize  >  lastStoredEntry.bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >=  lastStoredEntry.bytesRead  ||  csize  >  lastStoredEntry.bytesRead)  {	  if(csize    >=    lastStoredEntry.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
226	[BUG]  [BUGGY]  if(csize  <  =  0)  {  for(int  pos  =  0;  pos  <  csize;  pos++)  {  buf.reset();  }  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  =  0)  {  for(int  pos  =  0;  pos  <  csize;  pos++)  {  buf.reset();  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  =  0)  {  for(int  pos  =  0;  pos  <  csize;  pos++)  {  buf.reset();  }	  if(csize    >    0)    {    for(int    pos    =    0;    pos    <    csize;    pos++)    {    buf.reset();    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
227	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  pos  =  0;  pos  <  lastStoredEntry.length;  pos++)  {  buf.reset();  }  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >  0)  {  for(int  pos  =  0;  pos  <  lastStoredEntry.length;  pos++)  {  buf.reset();  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >  0)  {  for(int  pos  =  0;  pos  <  lastStoredEntry.length;  pos++)  {  buf.reset();  }	  if(csize    >    0)    {    for(int    pos    =    0;    pos    <    csize;    pos++)    {    buf.reset();    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
228	[BUG]  [BUGGY]  if  (csize  <  =  0  ||  current.isEnabled(Feature.QUOTE_FIELD_NAMES)||  csize  >  0)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if  (csize  <  =  0  ||  current.isEnabled(Feature.QUOTE_FIELD_NAMES)||  csize  >  0)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if  (csize  <  =  0  ||  current.isEnabled(Feature.QUOTE_FIELD_NAMES)||  csize  >  0)  {	  if    (current.bytesRead    ==    csize    ||(csize    <    =    0    &&    current.isEnabled(Feature.QUOTE_FIELD_NAMES)||    csize    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
229	[BUG]  [BUGGY]  if  (csize  <  =  0  &&  current.isEnabled(Feature.QUOTE_FIELD_NAMES)||  csize  >  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if  (csize  <  =  0  &&  current.isEnabled(Feature.QUOTE_FIELD_NAMES)||  csize  >  0)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if  (csize  <  =  0  &&  current.isEnabled(Feature.QUOTE_FIELD_NAMES)||  csize  >  0)  {	  if    (current.bytesRead    ==    csize    ||(csize    <    =    0    &&    current.isEnabled(Feature.QUOTE_FIELD_NAMES)||    csize    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
230	[BUG]  [BUGGY]  int  l  =  current.entry.getHeaderLength();  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  l  =  current.entry.getHeaderLength();  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  l  =  current.entry.getHeaderLength();	  int    l    =    current.entry.getLength();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
231	[BUG]  [BUGGY]  int  l  =  lastStoredEntry.getLength();  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  l  =  lastStoredEntry.getLength();  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  l  =  lastStoredEntry.getLength();	  int    l    =    current.entry.getLength();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
232	[BUG]  [BUGGY]  int  l  =  current.entry.getChars(offset,  length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  l  =  current.entry.getChars(offset,  length);  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  l  =  current.entry.getChars(offset,  length);	  int    l    =    current.entry.getLength();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
233	[BUG]  [BUGGY]  int  l  =  current.entry.getColumnLength();  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  l  =  current.entry.getColumnLength();  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  l  =  current.entry.getColumnLength();	  int    l    =    current.entry.getLength();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
234	[BUG]  [BUGGY]  int  csize  =  current.entry.read(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  csize  =  current.entry.read(buffer,  offset,  length  -  1);  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  csize  =  current.entry.read(buffer,  offset,  length  -  1);	  int    csize    =    current.entry.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
235	[BUG]  [BUGGY]  int  csize  =  current.entry.read(buffer,  offset,  length  +  2);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  csize  =  current.entry.read(buffer,  offset,  length  +  2);  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  csize  =  current.entry.read(buffer,  offset,  length  +  2);	  int    csize    =    current.entry.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
236	[BUG]  [BUGGY]  if(csize  >=  lastStoredEntry.bytesRead  ||  csize  <  current.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >=  lastStoredEntry.bytesRead  ||  csize  <  current.bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >=  lastStoredEntry.bytesRead  ||  csize  <  current.bytesRead)  {	  if(csize    <    lastStoredEntry.bytesRead    ||    csize    <    current.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
237	[BUG]  [BUGGY]  if(csize!=  lastStoredEntry.bytesRead  ||  csize  ==  lastStoredEntry.length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize!=  lastStoredEntry.bytesRead  ||  csize  ==  lastStoredEntry.length)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize!=  lastStoredEntry.bytesRead  ||  csize  ==  lastStoredEntry.length)  {	  if(csize!=    lastStoredEntry.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
238	[BUG]  [BUGGY]  if(csize!=  lastStoredEntry.bytesRead  ||  csize  >=  lastStoredEntry.length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize!=  lastStoredEntry.bytesRead  ||  csize  >=  lastStoredEntry.length)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize!=  lastStoredEntry.bytesRead  ||  csize  >=  lastStoredEntry.length)  {	  if(csize!=    lastStoredEntry.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
239	[BUG]  [BUGGY]  if(csize!=  lastStoredEntry.bytesRead  ||  csize  ==  lastStoredEntry.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize!=  lastStoredEntry.bytesRead  ||  csize  ==  lastStoredEntry.bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize!=  lastStoredEntry.bytesRead  ||  csize  ==  lastStoredEntry.bytesRead)  {	  if(csize!=    lastStoredEntry.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
240	[BUG]  [BUGGY]  if(csize  ==  current.bytesRead  ||  csize  >  bytesRead)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  ==  current.bytesRead  ||  csize  >  bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  ==  current.bytesRead  ||  csize  >  bytesRead)  {	  if(csize    ==    current.bytesRead    ||    csize    ==    bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
241	[BUG]  [BUGGY]  if(csize  ==  lastStoredEntry.bytesRead  ||  csize  ==  bytesRead)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  ==  lastStoredEntry.bytesRead  ||  csize  ==  bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  ==  lastStoredEntry.bytesRead  ||  csize  ==  bytesRead)  {	  if(csize    ==    current.bytesRead    ||    csize    ==    bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
242	[BUG]  [BUGGY]  if(csize  >  current.bytesRead  ||  csize  ==  bytesRead)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >  current.bytesRead  ||  csize  ==  bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >  current.bytesRead  ||  csize  ==  bytesRead)  {	  if(csize    ==    current.bytesRead    ||    csize    ==    bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
243	[BUG]  [BUGGY]  Inflater  inf  =  current.hasDataDescriptor?  lastStoredEntry.getInputStream()  :  csize;  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  Inflater  inf  =  current.hasDataDescriptor?  lastStoredEntry.getInputStream()  :  csize;  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	Inflater  inf  =  current.hasDataDescriptor?  lastStoredEntry.getInputStream()  :  csize;	  Inflater    inf    =    current.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
244	[BUG]  [BUGGY]  Inflater  inf  =  current.current.getInputStream();  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  Inflater  inf  =  current.current.getInputStream();  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	Inflater  inf  =  current.current.getInputStream();	  Inflater    inf    =    current.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
245	[BUG]  [BUGGY]  Inflater  inf  =  current.hasDataDescriptor?  lastStoredEntry.getInputStream()  :  buffer.getInputStream();  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  Inflater  inf  =  current.hasDataDescriptor?  lastStoredEntry.getInputStream()  :  buffer.getInputStream();  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	Inflater  inf  =  current.hasDataDescriptor?  lastStoredEntry.getInputStream()  :  buffer.getInputStream();	  Inflater    inf    =    current.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
246	[BUG]  [BUGGY]  if(csize  <  =  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.reset();  }  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  =  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.reset();  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  =  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.reset();  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buf.reset();    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
247	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  lastStoredEntry.length;  ++i)  {  buf.reset();  }  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  lastStoredEntry.length;  ++i)  {  buf.reset();  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >  0)  {  for(int  i  =  0;  i  <  lastStoredEntry.length;  ++i)  {  buf.reset();  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buf.reset();    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
248	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  csize);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  csize);  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  csize);  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset,    csize);    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
249	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  csize);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  csize);  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  csize);  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset,    csize);    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
250	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  count;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  csize);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  count;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  csize);  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >  0)  {  for(int  i  =  0;  i  <  count;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  csize);  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset,    csize);    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
251	[BUG]  [BUGGY]  if(csize  >=  lastStoredEntry.bytesRead  ||  csize  >  0)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >=  lastStoredEntry.bytesRead  ||  csize  >  0)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >=  lastStoredEntry.bytesRead  ||  csize  >  0)  {	  if(csize    >=    current.bytesRead    ||    csize    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
252	[BUG]  [BUGGY]  if(csize  >=  current.bytesRead  ||  csize  ==  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >=  current.bytesRead  ||  csize  ==  0)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >=  current.bytesRead  ||  csize  ==  0)  {	  if(csize    >=    current.bytesRead    ||    csize    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
253	[BUG]  [BUGGY]  int  csize  =  current.entry.getChars(offset,  offset+length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  csize  =  current.entry.getChars(offset,  offset+length);  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  csize  =  current.entry.getChars(offset,  offset+length);	  int    csize    =    current.entry.getSize();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
254	[BUG]  [BUGGY]  int  l  =  current.entry.array()  +  1;  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  l  =  current.entry.array()  +  1;  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  l  =  current.entry.array()  +  1;	  int    l    =    current.entry.array();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
255	[BUG]  [BUGGY]  if(csize  <  lastStoredEntry.bytesRead  ||  csize  >  lastStoredEntry.length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  lastStoredEntry.bytesRead  ||  csize  >  lastStoredEntry.length)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  lastStoredEntry.bytesRead  ||  csize  >  lastStoredEntry.length)  {	  if(csize    <    lastStoredEntry.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
256	[BUG]  [BUGGY]  if(csize!=  current.entry.length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize!=  current.entry.length)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize!=  current.entry.length)  {	  if(csize!=    current.entry.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
257	[BUG]  [BUGGY]  if(csize  <  current.bytesRead  ||  csize  >  32)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  current.bytesRead  ||  csize  >  32)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  current.bytesRead  ||  csize  >  32)  {	  if(csize    <    current.bytesRead    ||    csize    >    256)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
258	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  lastStoredEntry.length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  lastStoredEntry.length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  length);  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >  0)  {  for(int  i  =  0;  i  <  lastStoredEntry.length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  length);  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
259	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  length);  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  length);  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
260	[BUG]  [BUGGY]  if  (current.bytesRead  ==  csize  ||(csize  <  0  &&  current.hasDataDescriptor))  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if  (current.bytesRead  ==  csize  ||(csize  <  0  &&  current.hasDataDescriptor))  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if  (current.bytesRead  ==  csize  ||(csize  <  0  &&  current.hasDataDescriptor))  {	  if    (current.bytesRead    ==    csize    ||(csize    <    =    0    &&    current.hasDataDescriptor))    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
261	[BUG]  [BUGGY]  if  (csize  ==  current.bytesRead  ||(csize  <  =  0  &&  current.hasDataDescriptor))  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if  (csize  ==  current.bytesRead  ||(csize  <  =  0  &&  current.hasDataDescriptor))  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if  (csize  ==  current.bytesRead  ||(csize  <  =  0  &&  current.hasDataDescriptor))  {	  if    (current.bytesRead    ==    csize    ||(csize    <    =    0    &&    current.hasDataDescriptor))    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
262	[BUG]  [BUGGY]  if(csize  ==  0  &&  current.hasDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  ==  0  &&  current.hasDataDescriptor)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  ==  0  &&  current.hasDataDescriptor)  {	  if    (current.bytesRead    ==    csize    ||(csize    <    =    0    &&    current.hasDataDescriptor))    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
263	[BUG]  [BUGGY]  if(csize  <  =  0  &&  current.hasDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  =  0  &&  current.hasDataDescriptor)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  =  0  &&  current.hasDataDescriptor)  {	  if    (current.bytesRead    ==    csize    ||(csize    <    =    0    &&    current.hasDataDescriptor))    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
264	[BUG]  [BUGGY]  if(csize!=  current.bytesRead  ||  csize  >  bytesRead)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize!=  current.bytesRead  ||  csize  >  bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize!=  current.bytesRead  ||  csize  >  bytesRead)  {	  if(csize!=    current.bytesRead    ||    csize    ==    bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
265	[BUG]  [BUGGY]  if(csize  ==  lastStoredEntry.bytesRead  ||  csize  >  lastStoredEntry.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  ==  lastStoredEntry.bytesRead  ||  csize  >  lastStoredEntry.bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  ==  lastStoredEntry.bytesRead  ||  csize  >  lastStoredEntry.bytesRead)  {	  if(csize    ==    lastStoredEntry.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
266	[BUG]  [BUGGY]  if(csize  <  next.bytesRead  ||  csize  >  512)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  next.bytesRead  ||  csize  >  512)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  next.bytesRead  ||  csize  >  512)  {	  if(csize    <    current.bytesRead    ||    csize    >    512)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
267	[BUG]  [BUGGY]  int  l  =  current.entry.read(buffer,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  l  =  current.entry.read(buffer,  offset,  length  +  1);  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  l  =  current.entry.read(buffer,  offset,  length  +  1);	  int    l    =    current.entry.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
268	[BUG]  [BUGGY]  int  l  =  current.entry.read(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  l  =  current.entry.read(buffer,  offset,  length  -  1);  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  l  =  current.entry.read(buffer,  offset,  length  -  1);	  int    l    =    current.entry.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
269	[BUG]  [BUGGY]  if  (csize  <  =  0  &&  current.isEnabled(Feature.QUOTE_FILES)||  csize  >  0)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if  (csize  <  =  0  &&  current.isEnabled(Feature.QUOTE_FILES)||  csize  >  0)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if  (csize  <  =  0  &&  current.isEnabled(Feature.QUOTE_FILES)||  csize  >  0)  {	  if    (current.bytesRead    ==    csize    ||(csize    <    =    0    &&    current.isEnabled(Feature.QUOTE_FILES)||    csize    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
270	[BUG]  [BUGGY]  if  (csize  <  =  0  ||  current.isEnabled(Feature.QUOTE_FILES)||  csize  >  0)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if  (csize  <  =  0  ||  current.isEnabled(Feature.QUOTE_FILES)||  csize  >  0)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if  (csize  <  =  0  ||  current.isEnabled(Feature.QUOTE_FILES)||  csize  >  0)  {	  if    (current.bytesRead    ==    csize    ||(csize    <    =    0    &&    current.isEnabled(Feature.QUOTE_FILES)||    csize    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
271	[BUG]  [BUGGY]  int  csize  =  current.entry.getCurrentLength();  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  csize  =  current.entry.getCurrentLength();  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  csize  =  current.entry.getCurrentLength();	  int    csize    =    current.entry.getLength();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
272	[BUG]  [BUGGY]  if(csize  ==  0  &&  current.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  ==  0  &&  current.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  ==  0  &&  current.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {	  if    (current.bytesRead    ==    csize    ||(csize    <    =    0    &&    current.isEnabled(Feature.AUTO_CLOSE_SOURCE)))    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
273	[BUG]  [BUGGY]  if(csize  <  =  0  &&  current.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  =  0  &&  current.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  =  0  &&  current.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {	  if    (current.bytesRead    ==    csize    ||(csize    <    =    0    &&    current.isEnabled(Feature.AUTO_CLOSE_SOURCE)))    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
274	[BUG]  [BUGGY]  if(csize  <  =  0  ||  current.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  =  0  ||  current.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  =  0  ||  current.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {	  if    (current.bytesRead    ==    csize    ||(csize    <    =    0    &&    current.isEnabled(Feature.AUTO_CLOSE_SOURCE)))    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
275	[BUG]  [BUGGY]  if(csize  ==  current.bytesRead  ||  csize!=  lastStoredEntry.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  ==  current.bytesRead  ||  csize!=  lastStoredEntry.bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  ==  current.bytesRead  ||  csize!=  lastStoredEntry.bytesRead)  {	  if(csize!=    lastStoredEntry.bytesRead    ||    csize!=    current.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
276	[BUG]  [BUGGY]  if(csize  <  lastStoredEntry.length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  lastStoredEntry.length)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  lastStoredEntry.length)  {	  if(csize    <    lastStoredEntry.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
277	[BUG]  [BUGGY]  int  csize  =  current.entry.size();  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  csize  =  current.entry.size();  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  csize  =  current.entry.size();	  int    csize    =    current.entry.array();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
278	[BUG]  [BUGGY]  int  csize  =  current.entry.getChar();  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  csize  =  current.entry.getChar();  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  csize  =  current.entry.getChar();	  int    csize    =    current.entry.getSize();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
279	[BUG]  [BUGGY]  int  csize  =  current.entry.getCompletedSize();  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  csize  =  current.entry.getCompletedSize();  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  csize  =  current.entry.getCompletedSize();	  int    csize    =    current.entry.getSize();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
280	[BUG]  [BUGGY]  if(csize  <  =  csize  ||  csize  >  0)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  =  csize  ||  csize  >  0)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  =  csize  ||  csize  >  0)  {	  if(csize    ==    current.bytesRead    ||    csize    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
281	[BUG]  [BUGGY]  if(csize  <  =  0  ||  csize  ==  lastStoredEntry.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  =  0  ||  csize  ==  lastStoredEntry.bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  =  0  ||  csize  ==  lastStoredEntry.bytesRead)  {	  if(csize    ==    lastStoredEntry.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
282	[BUG]  [BUGGY]  int  csize  =  current.entry.getChars(offset,  length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  csize  =  current.entry.getChars(offset,  length);  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  csize  =  current.entry.getChars(offset,  length);	  int    csize    =    current.entry.getLength();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
283	[BUG]  [BUGGY]  if(csize  <  =  0  ||(csize  <  0  &&  current.isEnabled(Feature.QUOTE_FILES)||  csize  >  0))  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  =  0  ||(csize  <  0  &&  current.isEnabled(Feature.QUOTE_FILES)||  csize  >  0))  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  =  0  ||(csize  <  0  &&  current.isEnabled(Feature.QUOTE_FILES)||  csize  >  0))  {	  if    (current.bytesRead    ==    csize    ||(csize    <    =    0    &&    current.isEnabled(Feature.QUOTE_FILES)||    csize    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
284	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  csize;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  for(int  i  =  0;  i  <  csize;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  length);  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	for(int  i  =  0;  i  <  csize;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  length);  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
285	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buffer[i]  =  in.read(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buffer[i]  =  in.read(buffer,  offset,  length);  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buffer[i]  =  in.read(buffer,  offset,  length);  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
286	[BUG]  [BUGGY]  if(csize  <  =  0  ||  current.bytesRead  ==  0)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  =  0  ||  current.bytesRead  ==  0)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  =  0  ||  current.bytesRead  ==  0)  {	  if    (current.bytesRead    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
287	[BUG]  [BUGGY]  if(csize  <  =  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  =  0)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  =  0)  {	  if    (current.bytesRead    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
288	[BUG]  [BUGGY]  int  l  =  current.entry.getChars(offset,  csize);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  l  =  current.entry.getChars(offset,  csize);  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  l  =  current.entry.getChars(offset,  csize);	  int    l    =    current.entry.getLength();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
289	[BUG]  [BUGGY]  if(csize  >  current.bytesRead  ||  csize  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >  current.bytesRead  ||  csize  <  =  0)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >  current.bytesRead  ||  csize  <  =  0)  {	  if(csize    >    current.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
290	[BUG]  [BUGGY]  int  l  =  in.read(csize,  buffer.array());  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  l  =  in.read(csize,  buffer.array());  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  l  =  in.read(csize,  buffer.array());	  int    l    =    in.read(csize);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
291	[BUG]  [BUGGY]  int  l  =  in.read(csize,  buffer.position());  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  l  =  in.read(csize,  buffer.position());  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  l  =  in.read(csize,  buffer.position());	  int    l    =    in.read(csize);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
292	[BUG]  [BUGGY]  if(csize  <  0  ||(csize  <  =  0  &&  current.isEnabled(Feature.AUTO_CLOSE_SOURCE)))  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  0  ||(csize  <  =  0  &&  current.isEnabled(Feature.AUTO_CLOSE_SOURCE)))  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  0  ||(csize  <  =  0  &&  current.isEnabled(Feature.AUTO_CLOSE_SOURCE)))  {	  if    (current.bytesRead    ==    csize    ||(csize    <    =    0    &&    current.isEnabled(Feature.AUTO_CLOSE_SOURCE)))    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
293	[BUG]  [BUGGY]  if(csize  <  =  0  ||  csize  <  current.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  =  0  ||  csize  <  current.bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  =  0  ||  csize  <  current.bytesRead)  {	  if(csize    >    0    ||    csize    <    current.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
294	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buffer[i]  =  current.entry.getKey();  }  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buffer[i]  =  current.entry.getKey();  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buffer[i]  =  current.entry.getKey();  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buffer[i]    =    current.entry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
295	[BUG]  [BUGGY]  if(csize  <  lastStoredEntry.length  ||  csize  <  current.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  lastStoredEntry.length  ||  csize  <  current.bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  lastStoredEntry.length  ||  csize  <  current.bytesRead)  {	  if(csize    <    lastStoredEntry.bytesRead    ||    csize    <    current.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
296	[BUG]  [BUGGY]  Integer  l  =  current.entry.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  Integer  l  =  current.entry.read(buffer,  offset,  length);  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	Integer  l  =  current.entry.read(buffer,  offset,  length);	  int    l    =    current.entry.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
297	[BUG]  [BUGGY]  Inflater  inf  =  current.inputStream;  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  Inflater  inf  =  current.inputStream;  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	Inflater  inf  =  current.inputStream;	  Inflater    inf    =    current.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
298	[BUG]  [BUGGY]  Inflater  inf  =  current.current.getInputStream(csize);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  Inflater  inf  =  current.current.getInputStream(csize);  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	Inflater  inf  =  current.current.getInputStream(csize);	  Inflater    inf    =    current.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
299	[BUG]  [BUGGY]  if(csize  <  =  0  ||  current.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  =  0  ||  current.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  =  0  ||  current.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (current.bytesRead    ==    csize    ||(csize    <    =    0    &&    current.isEnabled(Feature.QUOTE_FIELD_NAMES)))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
300	[BUG]  [BUGGY]  if(csize  <  0  ||(csize  <  =  0  &&  current.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  0  ||(csize  <  =  0  &&  current.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  0  ||(csize  <  =  0  &&  current.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {	  if    (current.bytesRead    ==    csize    ||(csize    <    =    0    &&    current.isEnabled(Feature.QUOTE_FIELD_NAMES)))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
301	[BUG]  [BUGGY]  while(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  csize);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  while(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  csize);  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	while(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  csize);  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset,    csize);    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
302	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  csize;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  csize);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  for(int  i  =  0;  i  <  csize;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  csize);  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	for(int  i  =  0;  i  <  csize;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  csize);  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset,    csize);    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
303	[BUG]  [BUGGY]  int  l  =  this.current.entry.array();  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  int  l  =  this.current.entry.array();  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	int  l  =  this.current.entry.array();	  int    l    =    current.entry.array();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
304	[BUG]  [BUGGY]  if(csize  >=  current.bytesRead  ||  csize  ==  lastStoredEntry.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >=  current.bytesRead  ||  csize  ==  lastStoredEntry.bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >=  current.bytesRead  ||  csize  ==  lastStoredEntry.bytesRead)  {	  if(csize    ==    lastStoredEntry.bytesRead    ||    csize    ==    current.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
305	[BUG]  [BUGGY]  if(csize!=  current.entry.bytesRead  ||  csize  ==  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize!=  current.entry.bytesRead  ||  csize  ==  0)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize!=  current.entry.bytesRead  ||  csize  ==  0)  {	  if(csize!=    current.entry.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
306	[BUG]  [BUGGY]  if(csize!=  current.entry.bytesRead  ||  csize!=  current.size)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize!=  current.entry.bytesRead  ||  csize!=  current.size)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize!=  current.entry.bytesRead  ||  csize!=  current.size)  {	  if(csize!=    current.entry.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
307	[BUG]  [BUGGY]  if(csize  <  0  ||(csize  <  =  0  &&  current.isEnabled(Feature.QUOTE_FIELD_NAMES)||  csize  >  0))  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  0  ||(csize  <  =  0  &&  current.isEnabled(Feature.QUOTE_FIELD_NAMES)||  csize  >  0))  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  0  ||(csize  <  =  0  &&  current.isEnabled(Feature.QUOTE_FIELD_NAMES)||  csize  >  0))  {	  if    (current.bytesRead    ==    csize    ||(csize    <    =    0    &&    current.isEnabled(Feature.QUOTE_FIELD_NAMES)||    csize    >    0))    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
308	[BUG]  [BUGGY]  if(csize  <  =  csize  ||  csize  ==  bytesRead)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  =  csize  ||  csize  ==  bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  =  csize  ||  csize  ==  bytesRead)  {	  if(csize    ==    current.bytesRead    ||    csize    ==    bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
309	[BUG]  [BUGGY]  if(csize  <  =  0  ||  csize  ==  bytesRead)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  =  0  ||  csize  ==  bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  =  0  ||  csize  ==  bytesRead)  {	  if(csize    ==    current.bytesRead    ||    csize    ==    bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
310	[BUG]  [BUGGY]  if(csize  >  0  ||  csize  ==  bytesRead)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >  0  ||  csize  ==  bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >  0  ||  csize  ==  bytesRead)  {	  if(csize    ==    current.bytesRead    ||    csize    ==    bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
311	[BUG]  [BUGGY]  if(csize  >=  current.entry.bytesRead  ||  csize  >  0)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >=  current.entry.bytesRead  ||  csize  >  0)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >=  current.entry.bytesRead  ||  csize  >  0)  {	  if(csize    >=    current.entry.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
312	[BUG]  [BUGGY]  if(csize!=  lastStoredEntry.bytesRead  ||  csize  >=  lastStoredEntry.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize!=  lastStoredEntry.bytesRead  ||  csize  >=  lastStoredEntry.bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize!=  lastStoredEntry.bytesRead  ||  csize  >=  lastStoredEntry.bytesRead)  {	  if(csize!=    lastStoredEntry.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
313	[BUG]  [BUGGY]  if(csize  >=  lastStoredEntry.bytesRead  ||  csize!=  lastStoredEntry.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >=  lastStoredEntry.bytesRead  ||  csize!=  lastStoredEntry.bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >=  lastStoredEntry.bytesRead  ||  csize!=  lastStoredEntry.bytesRead)  {	  if(csize!=    lastStoredEntry.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
314	[BUG]  [BUGGY]  if(csize  <  =  MAX_TWO_EXP_32)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  =  MAX_TWO_EXP_32)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  =  MAX_TWO_EXP_32)  {	  if(csize    <    max)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
315	[BUG]  [BUGGY]  if(csize  <  =  MAX_SIZE)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  =  MAX_SIZE)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  =  MAX_SIZE)  {	  if(csize    <    max)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
316	[BUG]  [BUGGY]  if(csize  <  =  MAXIMUM_SIZE)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  <  =  MAXIMUM_SIZE)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  <  =  MAXIMUM_SIZE)  {	  if(csize    <    max)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
317	[BUG]  [BUGGY]  if(csize!=  current.bytesRead  ||  csize  ==  bytesReadFromStream)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize!=  current.bytesRead  ||  csize  ==  bytesReadFromStream)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize!=  current.bytesRead  ||  csize  ==  bytesReadFromStream)  {	  if(csize!=    current.bytesRead    ||    csize    ==    bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
318	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  length);  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  length);  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  length);  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
319	[BUG]  [BUGGY]  while(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  length);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  while(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  length);  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	while(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  length);  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
320	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  csize;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  length);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  for(int  i  =  0;  i  <  csize;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  length);  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	for(int  i  =  0;  i  <  csize;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  length);  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
321	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  1,  length);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  1,  length);  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  1,  length);  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
322	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  length);  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  length);  }  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  length);  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
323	[BUG]  [BUGGY]  if(csize  >  512  ||  csize  <  current.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();      [BUGGY]  if(csize  >  512  ||  csize  <  current.bytesRead)  {  [BUGGY]      return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	412	412	1	replace	if(csize  >  512  ||  csize  <  current.bytesRead)  {	  if(csize    <    current.bytesRead    ||    csize    >    512)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
