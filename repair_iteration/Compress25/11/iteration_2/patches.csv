bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
2	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
3	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
4	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  in.read(buffer,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  in.read(buffer,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  in.read(buffer,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
5	[BUG]  [BUGGY]  read(buffer,  offset,  toRead);  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  read(buffer,  offset,  toRead);  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	read(buffer,  offset,  toRead);	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
6	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  inStream.read(buffer,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  inStream.read(buffer,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  inStream.read(buffer,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
7	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  1);  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  1);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  1);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
8	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  1);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  1);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  1);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
9	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  1);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  1);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  1);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
10	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  in.read(buffer,  offset  +  1);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  in.read(buffer,  offset  +  1);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  in.read(buffer,  offset  +  1);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
11	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset);  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
12	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  1,  toRead);  }  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  1,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  1,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
13	[BUG]  [BUGGY]  current.bytesRead  +=  toRead  /  4;  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  toRead  /  4;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  toRead  /  4;	  current.bytesRead    +=    toRead    /    2;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
14	[BUG]  [BUGGY]  current.bytesRead  +=  toRead  /  2L;  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  toRead  /  2L;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  toRead  /  2L;	  current.bytesRead    +=    toRead    /    2;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
15	[BUG]  [BUGGY]  current.bytesRead  +=  toRead  /  3;  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  toRead  /  3;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  toRead  /  3;	  current.bytesRead    +=    toRead    /    2;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
16	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  buf,  0,  toRead.length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  System.arraycopy(buf,  offset,  buf,  0,  toRead.length);  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	System.arraycopy(buf,  offset,  buf,  0,  toRead.length);	  System.arraycopy(buf,    offset,    toRead,    0,    buf.length);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
17	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  current.bytesRead,  0,  buf.length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  System.arraycopy(buf,  offset,  current.bytesRead,  0,  buf.length);  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	System.arraycopy(buf,  offset,  current.bytesRead,  0,  buf.length);	  System.arraycopy(buf,    offset,    toRead,    0,    buf.length);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
18	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  toRead,  0,  buf.length  -  1);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  System.arraycopy(buf,  offset,  toRead,  0,  buf.length  -  1);  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	System.arraycopy(buf,  offset,  toRead,  0,  buf.length  -  1);	  System.arraycopy(buf,    offset,    toRead,    0,    buf.length);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
19	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  buf,  0,  length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  System.arraycopy(buf,  offset,  buf,  0,  length);  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	System.arraycopy(buf,  offset,  buf,  0,  length);	  System.arraycopy(buf,    offset,    toRead,    0,    buf.length);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
20	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  toRead,  0,  buf.length  -  toRead);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  System.arraycopy(buf,  offset,  toRead,  0,  buf.length  -  toRead);  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	System.arraycopy(buf,  offset,  toRead,  0,  buf.length  -  toRead);	  System.arraycopy(buf,    offset,    toRead,    0,    buf.length);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
21	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  toRead,  0,  buf.length  +  1);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  System.arraycopy(buf,  offset,  toRead,  0,  buf.length  +  1);  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	System.arraycopy(buf,  offset,  toRead,  0,  buf.length  +  1);	  System.arraycopy(buf,    offset,    toRead,    0,    buf.length);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
22	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  buffer,  0,  buf.length);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  System.arraycopy(buf,  offset,  buffer,  0,  buf.length);  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	System.arraycopy(buf,  offset,  buffer,  0,  buf.length);	  System.arraycopy(buf,    offset,    toRead,    0,    buf.length);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
23	[BUG]  [BUGGY]  current.bytesRead  +=  length  /  1;  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  length  /  1;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  length  /  1;	  current.bytesRead    +=    toRead    /    1;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
24	[BUG]  [BUGGY]  current.bytesRead  +=  buf.length()  -  1;  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  buf.length()  -  1;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  buf.length()  -  1;	  current.bytesRead    +=    buf.length();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
25	[BUG]  [BUGGY]  current.bytesRead  +=  buf.length()  -  toRead;  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  buf.length()  -  toRead;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  buf.length()  -  toRead;	  current.bytesRead    +=    buf.length();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
26	[BUG]  [BUGGY]  current.bytesRead  +=  buf.length()  -  2;  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  buf.length()  -  2;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  buf.length()  -  2;	  current.bytesRead    +=    buf.length();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
27	[BUG]  [BUGGY]  current.bytesRead  +=  buf.length()  +  1;  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  buf.length()  +  1;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  buf.length()  +  1;	  current.bytesRead    +=    buf.length();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
28	[BUG]  [BUGGY]  current.bytesRead  +=  buf.length()  *  length;  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  buf.length()  *  length;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  buf.length()  *  length;	  current.bytesRead    +=    buf.length();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
29	[BUG]  [BUGGY]  current.bytesRead  +=  toRead  +  1;  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  toRead  +  1;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  toRead  +  1;	  current.bytesRead    +=    csize    +    1;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
30	[BUG]  [BUGGY]  current.bytesRead  +=  csize  +  2;  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  csize  +  2;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  csize  +  2;	  current.bytesRead    +=    csize    +    1;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
31	[BUG]  [BUGGY]  current.bytesRead  +=  csize  +  3;  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  csize  +  3;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  csize  +  3;	  current.bytesRead    +=    csize    +    1;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
32	[BUG]  [BUGGY]  current.bytesRead  -=  toRead  -  1;  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  toRead  -  1;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  toRead  -  1;	  current.bytesRead    -=    length    -    1;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
33	[BUG]  [BUGGY]  current.bytesRead  -=  fromRead  -  1;  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  fromRead  -  1;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  fromRead  -  1;	  current.bytesRead    -=    length    -    1;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
34	[BUG]  [BUGGY]  current.bytesRead  -=  buffer.length  -  1;  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  buffer.length  -  1;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  buffer.length  -  1;	  current.bytesRead    -=    length    -    1;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
35	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.put(buffer,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.put(buffer,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
36	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.put(buffer,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.put(buffer,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
37	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.put(buffer,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.put(buffer,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
38	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.put(buffer,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.put(buffer,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
39	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  fileNameLen))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.put(buffer,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  fileNameLen))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor(current,  fileNameLen))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.put(buffer,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
40	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  &&(int  i  =  0;  i  <  length;  ++i)  {  buf.put(buffer,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor  &&(int  i  =  0;  i  <  length;  ++i)  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor  &&(int  i  =  0;  i  <  length;  ++i)  {  buf.put(buffer,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
41	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.put(buffer,  off,  toRead);  }  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.put(buffer,  off,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.put(buffer,  off,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
42	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.get(buffer,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.get(buffer,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.get(buffer,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.get(i,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
43	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.get(buffer,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.get(buffer,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.get(buffer,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.get(i,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
44	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.get(i,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.get(i,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.get(i,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.get(i,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
45	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.get(i,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.get(i,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.get(i,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.get(i,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
46	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.get(i,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.get(i,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.get(i,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.get(i,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
47	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.get(buffer,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.get(buffer,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.get(buffer,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.get(i,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
48	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.get(buffer,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.get(buffer,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.get(buffer,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.get(i,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
49	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.remove(i,  offset);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.remove(i,  offset);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.remove(i,  offset);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remove(i,    offset);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
50	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i,  offset);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i,  offset);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i,  offset);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remove(i,    offset);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
51	[BUG]  [BUGGY]  while(i  <  length)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i,  offset);  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  while(i  <  length)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i,  offset);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	while(i  <  length)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i,  offset);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remove(i,    offset);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
52	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.remove(i,  offset);  }  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.remove(i,  offset);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.remove(i,  offset);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remove(i,    offset);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
53	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i,  offset);  }  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i,  offset);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor(current,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i,  offset);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remove(i,    offset);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
54	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  length))  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.remove(i,  offset);  }  [CE]  illegal  start  of  type  [FE]                                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  length))  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.remove(i,  offset);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor(current,  length))  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.remove(i,  offset);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remove(i,    offset);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
55	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  length)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.remove(i,  offset);  }  [CE]  illegal  start  of  type  [FE]                                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  length)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.remove(i,  offset);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor(current,  length)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.remove(i,  offset);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remove(i,    offset);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
56	[BUG]  [BUGGY]  current.bytesRead  -=  toRead  *  length  +  1;  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  toRead  *  length  +  1;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  toRead  *  length  +  1;	  current.bytesRead    -=    toRead    *    length;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
57	[BUG]  [BUGGY]  current.bytesRead  -=  length  *  current.bytesRead;  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  length  *  current.bytesRead;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  length  *  current.bytesRead;	  current.bytesRead    -=    toRead    *    length;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
58	[BUG]  [BUGGY]  current.bytesRead  -=  toRead  *  buf.length;  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  toRead  *  buf.length;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  toRead  *  buf.length;	  current.bytesRead    -=    toRead    *    length;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
59	[BUG]  [BUGGY]  current.bytesRead  -=  toRead  *  offset;  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  toRead  *  offset;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  toRead  *  offset;	  current.bytesRead    -=    toRead    *    length;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
60	[BUG]  [BUGGY]  current.bytesRead  -=  toRead  *  csize;  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  toRead  *  csize;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  toRead  *  csize;	  current.bytesRead    -=    toRead    *    length;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
61	[BUG]  [BUGGY]  current.bytesRead  -=  toRead  +  2;  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  toRead  +  2;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  toRead  +  2;	  current.bytesRead    -=    toRead    +    1;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
62	[BUG]  [BUGGY]  current.bytesRead  -=  toRead  +  1L;  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  toRead  +  1L;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  toRead  +  1L;	  current.bytesRead    -=    toRead    +    1;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
63	[BUG]  [BUGGY]  current.bytesRead  -=  toRead  *  1;  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  toRead  *  1;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  toRead  *  1;	  current.bytesRead    -=    toRead    +    1;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
64	[BUG]  [BUGGY]  current.bytesRead  -=  toRead  +  4;  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  toRead  +  4;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  toRead  +  4;	  current.bytesRead    -=    toRead    +    1;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
65	[BUG]  [BUGGY]  current.bytesRead  -=  toRead  +  3;  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  toRead  +  3;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  toRead  +  3;	  current.bytesRead    -=    toRead    +    1;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
66	[BUG]  [BUGGY]  ||  length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.reset();  }  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  ||  length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.reset();  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	||  length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.reset();  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.reset();    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
67	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.reset();  }  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.reset();  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.reset();  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.reset();    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
68	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.reset();  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.reset();  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.reset();  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.reset();    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
69	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buf.reset();  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buf.reset();  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buf.reset();  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.reset();    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
70	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buf.reset();  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buf.reset();  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buf.reset();  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.reset();    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
71	[BUG]  [BUGGY]  ||  length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.reset();  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  ||  length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.reset();  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	||  length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.reset();  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.reset();    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
72	[BUG]  [BUGGY]  current.bytesRead  +=  csize  +  toRead;  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  csize  +  toRead;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  csize  +  toRead;	  current.bytesRead    +=    length    +    toRead;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
73	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.set(i,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.set(i,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.set(i,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.set(i,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
74	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.set(i,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.set(i,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.set(i,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.set(i,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
75	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.set(i,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.set(i,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.set(i,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.set(i,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
76	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  fileNameLen))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.set(i,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  fileNameLen))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.set(i,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor(current,  fileNameLen))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.set(i,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.set(i,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
77	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current.bytesRead,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.set(i,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor(current.bytesRead,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.set(i,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor(current.bytesRead,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.set(i,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.set(i,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
78	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.set(i,  buffer,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.set(i,  buffer,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.set(i,  buffer,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.set(i,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
79	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.set(i,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.set(i,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.set(i,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.set(i,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
80	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i,  offset  +  1);  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i,  offset  +  1);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i,  offset  +  1);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remove(i,    offset    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
81	[BUG]  [BUGGY]  while(i  <  length)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i,  offset  +  1);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  while(i  <  length)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i,  offset  +  1);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	while(i  <  length)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i,  offset  +  1);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remove(i,    offset    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
82	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.remove(i,  offset  +  1);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.remove(i,  offset  +  1);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.remove(i,  offset  +  1);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remove(i,    offset    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
83	[BUG]  [BUGGY]  luate(buffer,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i,  offset  +  1);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  luate(buffer,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i,  offset  +  1);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	luate(buffer,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i,  offset  +  1);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remove(i,    offset    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
84	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i,  offset  +  1);  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i,  offset  +  1);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor(current,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i,  offset  +  1);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remove(i,    offset    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
85	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current.bytesRead,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i,  offset  +  1);  }  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor(current.bytesRead,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i,  offset  +  1);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor(current.bytesRead,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i,  offset  +  1);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remove(i,    offset    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
86	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.remove(i,  offset  +  1);  }  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.remove(i,  offset  +  1);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.remove(i,  offset  +  1);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remove(i,    offset    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
87	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.remaining();  }  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.remaining();  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.remaining();  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remaining();    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
88	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remaining();  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remaining();  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remaining();  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remaining();    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
89	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.remaining();  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.remaining();  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.remaining();  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remaining();    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
90	[BUG]  [BUGGY]  while(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remaining();  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  while(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remaining();  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	while(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remaining();  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remaining();    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
91	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.remaining();  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.remaining();  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.remaining();  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remaining();    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
92	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.remaining();  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.remaining();  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.remaining();  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remaining();    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
93	[BUG]  [BUGGY]  current.bytesRead  -=  toRead  +  offset;  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  toRead  +  offset;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  toRead  +  offset;	  current.bytesRead    -=    toRead    +    length;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
94	[BUG]  [BUGGY]  current.bytesRead  -=  toRead  +  length  +  1;  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  toRead  +  length  +  1;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  toRead  +  length  +  1;	  current.bytesRead    -=    toRead    +    length;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
95	[BUG]  [BUGGY]  current.bytesRead  -=  toRead  +  length  *  2;  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  toRead  +  length  *  2;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  toRead  +  length  *  2;	  current.bytesRead    -=    toRead    +    length;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
96	[BUG]  [BUGGY]  current.bytesRead  -=  toRead  +  length,  buf.length());  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  toRead  +  length,  buf.length());  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  toRead  +  length,  buf.length());	  current.bytesRead    -=    toRead    +    length;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
97	[BUG]  [BUGGY]  current.bytesRead  +=  toRead  +  size;  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  toRead  +  size;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  toRead  +  size;	  current.bytesRead    +=    length    +    size;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
98	[BUG]  [BUGGY]  current.bytesRead  +=  size  +  length;  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  size  +  length;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  size  +  length;	  current.bytesRead    +=    length    +    size;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
99	[BUG]  [BUGGY]  current.bytesRead  +=  csize  +  size;  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  csize  +  size;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  csize  +  size;	  current.bytesRead    +=    length    +    size;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
100	[BUG]  [BUGGY]  current.bytesRead  +=  csize  -  toRead;  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  csize  -  toRead;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  csize  -  toRead;	  current.bytesRead    +=    length    -    toRead;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
101	[BUG]  [BUGGY]  current.bytesRead  +=  length  /  toRead;  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  length  /  toRead;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  length  /  toRead;	  current.bytesRead    +=    length    -    toRead;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
102	[BUG]  [BUGGY]  current.bytesRead  +=  fromRead  -  length;  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  fromRead  -  length;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  fromRead  -  length;	  current.bytesRead    +=    length    -    toRead;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
103	[BUG]  [BUGGY]  current.bytesRead  -=  buf.length  -  1;  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  buf.length  -  1;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  buf.length  -  1;	  current.bytesRead    -=    buf.length;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
104	[BUG]  [BUGGY]  current.bytesRead  -=  buf.length  +  1;  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  buf.length  +  1;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  buf.length  +  1;	  current.bytesRead    -=    buf.length;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
105	[BUG]  [BUGGY]  current.bytesRead  -=  buf.length  -  2;  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  buf.length  -  2;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  buf.length  -  2;	  current.bytesRead    -=    buf.length;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
106	[BUG]  [BUGGY]  current.bytesRead  -=  buf.length,  toRead);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  buf.length,  toRead);  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  buf.length,  toRead);	  current.bytesRead    -=    buf.length;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
107	[BUG]  [BUGGY]  current.bytesRead  -=  buf.length  -  toRead;  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  buf.length  -  toRead;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  buf.length  -  toRead;	  current.bytesRead    -=    buf.length;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
108	[BUG]  [BUGGY]  current.bytesRead  -=  size;  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  size;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  size;	  current.bytesRead    -=    csize;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
109	[BUG]  [BUGGY]  current.bytesRead  -=  fromRead;  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  fromRead;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  fromRead;	  current.bytesRead    -=    csize;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
110	[BUG]  [BUGGY]  current.bytesRead  -=  max;  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  max;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  max;	  current.bytesRead    -=    csize;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
111	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.put(buffer,  off,  toRead);  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.put(buffer,  off,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.put(buffer,  off,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.put(buffer,    off,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
112	[BUG]  [BUGGY]  ||  length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.put(buffer,  off,  toRead);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  ||  length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.put(buffer,  off,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	||  length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.put(buffer,  off,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.put(buffer,    off,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
113	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.put(buffer,  off,  toRead);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.put(buffer,  off,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.put(buffer,  off,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.put(buffer,    off,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
114	[BUG]  [BUGGY]  current.bytesRead  +=  length  *  1;  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  length  *  1;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  length  *  1;	  current.bytesRead    +=    toRead    *    1;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
115	[BUG]  [BUGGY]  current.bytesRead  -=  toRead  *  4;  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  toRead  *  4;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  toRead  *  4;	  current.bytesRead    -=    toRead    *    2;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
116	[BUG]  [BUGGY]  current.bytesRead  -=  toRead  *  2  +  length;  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  toRead  *  2  +  length;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  toRead  *  2  +  length;	  current.bytesRead    -=    toRead    *    2;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
117	[BUG]  [BUGGY]  current.bytesRead  -=  toRead  *  3;  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  toRead  *  3;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  toRead  *  3;	  current.bytesRead    -=    toRead    *    2;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
118	[BUG]  [BUGGY]  current.bytesRead  -=  toRead  *  2L;  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  toRead  *  2L;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  toRead  *  2L;	  current.bytesRead    -=    toRead    *    2;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
119	[BUG]  [BUGGY]  current.bytesRead  +=  length  *  4;  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  length  *  4;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  length  *  4;	  current.bytesRead    +=    length    *    2;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
120	[BUG]  [BUGGY]  current.bytesRead  +=  toRead  /  2  -  1;  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  toRead  /  2  -  1;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  toRead  /  2  -  1;	  current.bytesRead    +=    toRead    *    2    -    1;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
121	[BUG]  [BUGGY]  current.bytesRead  +=  length  *  2  -  1;  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  length  *  2  -  1;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  length  *  2  -  1;	  current.bytesRead    +=    toRead    *    2    -    1;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
122	[BUG]  [BUGGY]  current.bytesRead  +=  toRead  *  4  -  1;  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  toRead  *  4  -  1;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  toRead  *  4  -  1;	  current.bytesRead    +=    toRead    *    2    -    1;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
123	[BUG]  [BUGGY]  current.bytesRead  +=  toRead  *  2  /  1;  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  toRead  *  2  /  1;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  toRead  *  2  /  1;	  current.bytesRead    +=    toRead    *    2    -    1;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
124	[BUG]  [BUGGY]  current.bytesRead  +=  length  /  4;  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  length  /  4;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  length  /  4;	  current.bytesRead    +=    length    /    2;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
125	[BUG]  [BUGGY]  current.bytesRead  +=  toRead  -  buf.length;  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  toRead  -  buf.length;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  toRead  -  buf.length;	  current.bytesRead    +=    buf.length    -    toRead;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
126	[BUG]  [BUGGY]  current.bytesRead  +=  buf.length  /  toRead;  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  buf.length  /  toRead;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  buf.length  /  toRead;	  current.bytesRead    +=    buf.length    -    toRead;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
127	[BUG]  [BUGGY]  current.bytesRead  +=  fromRead  -  buf.length;  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  fromRead  -  buf.length;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  fromRead  -  buf.length;	  current.bytesRead    +=    buf.length    -    toRead;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
128	[BUG]  [BUGGY]  current.bytesRead  +=  toRead  +  length  /  2;  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  toRead  +  length  /  2;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  toRead  +  length  /  2;	  current.bytesRead    +=    toRead    +    length    *    2;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
129	[BUG]  [BUGGY]  current.bytesRead  +=  toRead  +  length  *  4;  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  toRead  +  length  *  4;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  toRead  +  length  *  4;	  current.bytesRead    +=    toRead    +    length    *    2;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
130	[BUG]  [BUGGY]  current.bytesRead  +=  toRead  +  length  *  2  -  1;  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  toRead  +  length  *  2  -  1;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  toRead  +  length  *  2  -  1;	  current.bytesRead    +=    toRead    +    length    *    2;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
131	[BUG]  [BUGGY]  ||  length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i);  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  ||  length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	||  length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remove(i);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
132	[BUG]  [BUGGY]  while(i  <  length)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i);  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  while(i  <  length)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	while(i  <  length)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remove(i);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
133	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.remove(i);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.remove(i);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.remove(i);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remove(i);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
134	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remove(i);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
135	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current.bytesRead,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor(current.bytesRead,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor(current.bytesRead,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remove(i);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
136	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i);  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor(current,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remove(i);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
137	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  length)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.remove(i);  }  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  length)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.remove(i);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor(current,  length)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.remove(i);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remove(i);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
138	[BUG]  [BUGGY]  current.bytesRead  +=  toRead  +  2;  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  toRead  +  2;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  toRead  +  2;	  current.bytesRead    +=    length    +    2;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
139	[BUG]  [BUGGY]  current.bytesRead  +=  length  -  2;  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  length  -  2;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  length  -  2;	  current.bytesRead    +=    length    +    2;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
140	[BUG]  [BUGGY]  current.bytesRead  +=  buf.length  /  2;  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  buf.length  /  2;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  buf.length  /  2;	  current.bytesRead    +=    buf.length    -    2;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
141	[BUG]  [BUGGY]  current.bytesRead  +=  buf.length  -  3;  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  buf.length  -  3;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  buf.length  -  3;	  current.bytesRead    +=    buf.length    -    2;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
142	[BUG]  [BUGGY]  current.bytesRead  +=  buf.length  -  4;  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  buf.length  -  4;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  buf.length  -  4;	  current.bytesRead    +=    buf.length    -    2;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
143	[BUG]  [BUGGY]  current.bytesRead  +=  toRead  /  8;  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  toRead  /  8;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  toRead  /  8;	  current.bytesRead    +=    toRead    *    8;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
144	[BUG]  [BUGGY]  current.bytesRead  +=  buf.length  /  1;  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  buf.length  /  1;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  buf.length  /  1;	  current.bytesRead    +=    buf.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
145	[BUG]  [BUGGY]  current.bytesRead  +=  length  +  toRead  -  1;  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  length  +  toRead  -  1;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  length  +  toRead  -  1;	  current.bytesRead    +=    toRead    +    length    -    1;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
146	[BUG]  [BUGGY]  current.bytesRead  +=  toRead  +  length  /  1;  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  toRead  +  length  /  1;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  toRead  +  length  /  1;	  current.bytesRead    +=    toRead    +    length    -    1;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
147	[BUG]  [BUGGY]  current.bytesRead  -=  length  +  1;  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  length  +  1;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  length  +  1;	  current.bytesRead    -=    length;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
148	[BUG]  [BUGGY]  current.bytesRead  +=  toRead  /  1L;  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  toRead  /  1L;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  toRead  /  1L;	  current.bytesRead    +=    toRead    -    1L;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
149	[BUG]  [BUGGY]  current.bytesRead  +=  toRead  -  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  toRead  -  1);  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  toRead  -  1);	  current.bytesRead    +=    toRead    -    1L;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
150	[BUG]  [BUGGY]  current.bytesRead  +=  toRead  *  1L;  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  toRead  *  1L;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  toRead  *  1L;	  current.bytesRead    +=    toRead    -    1L;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
151	[BUG]  [BUGGY]  current.bytesRead  +=  csize  /  1;  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  csize  /  1;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  csize  /  1;	  current.bytesRead    +=    csize    -    1;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
152	[BUG]  [BUGGY]  current.bytesRead  +=  csize  -  2;  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  csize  -  2;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  csize  -  2;	  current.bytesRead    +=    csize    -    1;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
153	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining()  -  length);  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining()  -  length);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining()  -  length);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf.remaining()    -    length);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
154	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining()  -  length);  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining()  -  length);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining()  -  length);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf.remaining()    -    length);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
155	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current.bytesRead,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining()  -  length);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor(current.bytesRead,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining()  -  length);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor(current.bytesRead,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining()  -  length);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf.remaining()    -    length);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
156	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.setLength(buf.remaining()  -  length);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.setLength(buf.remaining()  -  length);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.setLength(buf.remaining()  -  length);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf.remaining()    -    length);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
157	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining()  -  length);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining()  -  length);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor(current,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining()  -  length);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf.remaining()    -    length);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
158	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  false)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining()  -  length);  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  false)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining()  -  length);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor(current,  false)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining()  -  length);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf.remaining()    -    length);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
159	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining()  *  length);  }  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining()  *  length);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining()  *  length);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf.remaining()    -    length);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
160	[BUG]  [BUGGY]  current.bytesRead  +=  toRead  -  offset;  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  toRead  -  offset;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  toRead  -  offset;	  current.bytesRead    +=    toRead    -    length;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
161	[BUG]  [BUGGY]  current.bytesRead  +=  toRead  /  length;  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  toRead  /  length;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  toRead  /  length;	  current.bytesRead    +=    toRead    -    length;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
162	[BUG]  [BUGGY]  current.bytesRead  +=  csize  -  length;  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  csize  -  length;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  csize  -  length;	  current.bytesRead    +=    toRead    -    length;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
163	[BUG]  [BUGGY]  current.bytesRead  +=  toRead  *  length;  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  toRead  *  length;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  toRead  *  length;	  current.bytesRead    +=    toRead    -    length;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
164	[BUG]  [BUGGY]  current.bytesRead  +=  offset  +  bytesRead;  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  offset  +  bytesRead;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  offset  +  bytesRead;	  current.bytesRead    +=    length    +    bytesRead;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
165	[BUG]  [BUGGY]  current.bytesRead  +=  csize  +  bytesRead;  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  csize  +  bytesRead;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  csize  +  bytesRead;	  current.bytesRead    +=    length    +    bytesRead;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
166	[BUG]  [BUGGY]  current.bytesRead  +=  toRead  +  length  *  2  +  1;  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  toRead  +  length  *  2  +  1;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  toRead  +  length  *  2  +  1;	  current.bytesRead    +=    toRead    +    length    +    1;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
167	[BUG]  [BUGGY]  current.bytesRead  +=  toRead  +  length  +  2;  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  toRead  +  length  +  2;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  toRead  +  length  +  2;	  current.bytesRead    +=    toRead    +    length    +    1;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
168	[BUG]  [BUGGY]  current.bytesRead  -=  buffer.length  +  1;  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  buffer.length  +  1;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  buffer.length  +  1;	  current.bytesRead    -=    buffer.length;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
169	[BUG]  [BUGGY]  current.bytesRead  -=  buffer.length  -  toRead;  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  buffer.length  -  toRead;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  buffer.length  -  toRead;	  current.bytesRead    -=    buffer.length;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
170	[BUG]  [BUGGY]  current.bytesRead  -=  buffer.length,  toRead);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  buffer.length,  toRead);  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  buffer.length,  toRead);	  current.bytesRead    -=    buffer.length;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
171	[BUG]  [BUGGY]  current.bytesRead  +=  csize  +  length;  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  csize  +  length;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  csize  +  length;	  current.bytesRead    +=    length    +    csize;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
172	[BUG]  [BUGGY]  current.bytesRead  +=  toRead  +  csize;  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  toRead  +  csize;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  toRead  +  csize;	  current.bytesRead    +=    length    +    csize;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
173	[BUG]  [BUGGY]  ||  length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.reset(i);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  ||  length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.reset(i);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	||  length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.reset(i);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.reset(i);    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
174	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.reset(i);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.reset(i);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.reset(i);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.reset(i);    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
175	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.reset(i);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.reset(i);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.reset(i);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.reset(i);    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
176	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.reset(i);  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.reset(i);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor(current,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.reset(i);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.reset(i);    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
177	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current.bytesRead,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.reset(i);  }  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor(current.bytesRead,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.reset(i);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor(current.bytesRead,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.reset(i);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.reset(i);    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
178	[BUG]  [BUGGY]  while(i  <  length)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.reset(i);  }  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  while(i  <  length)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.reset(i);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	while(i  <  length)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.reset(i);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.reset(i);    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
179	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  offset,  length))  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.reset(i);  }  [CE]  illegal  start  of  type  [FE]                                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  offset,  length))  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.reset(i);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor(current,  offset,  length))  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.reset(i);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.reset(i);    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
180	[BUG]  [BUGGY]  ||  length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.get(buffer,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  ||  length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.get(buffer,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	||  length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.get(buffer,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
181	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  &&  length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.get(buffer,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor  &&  length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.get(buffer,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor  &&  length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.get(buffer,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
182	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor  &&  length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.get(buffer,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor  &&  length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.get(buffer,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor  &&  length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.get(buffer,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
183	[BUG]  [BUGGY]  current.bytesRead  +=  offset  +  toRead;  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  offset  +  toRead;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  offset  +  toRead;	  current.bytesRead    +=    toRead    +    offset;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
184	[BUG]  [BUGGY]  current.bytesRead  +=  csize  +  offset;  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  csize  +  offset;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  csize  +  offset;	  current.bytesRead    +=    toRead    +    offset;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
185	[BUG]  [BUGGY]  current.bytesRead  +=  toRead  *  offset;  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  toRead  *  offset;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  toRead  *  offset;	  current.bytesRead    +=    toRead    +    offset;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
186	[BUG]  [BUGGY]  current.bytesRead  +=  bytesRead.length;  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  bytesRead.length;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  bytesRead.length;	  current.bytesRead    +=    bytesRead;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
187	[BUG]  [BUGGY]  current.bytesRead  -=  bytesRead;  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  bytesRead;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  bytesRead;	  current.bytesRead    +=    bytesRead;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
188	[BUG]  [BUGGY]  current.bytesRead  -=  toRead,  offset,  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  toRead,  offset,  length);  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  toRead,  offset,  length);	  current.bytesRead    -=    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
189	[BUG]  [BUGGY]  current.bytesRead  -=  toRead,  off,  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  toRead,  off,  length);  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  toRead,  off,  length);	  current.bytesRead    -=    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
190	[BUG]  [BUGGY]  current.bytesRead  -=  toRead,  buf.length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  toRead,  buf.length);  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  toRead,  buf.length);	  current.bytesRead    -=    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
191	[BUG]  [BUGGY]  current.bytesRead  -=  length,  toRead);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  length,  toRead);  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  length,  toRead);	  current.bytesRead    -=    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
192	[BUG]  [BUGGY]  current.bytesRead  -=  toRead,  buffer.length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  toRead,  buffer.length);  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  toRead,  buffer.length);	  current.bytesRead    -=    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
193	[BUG]  [BUGGY]  current.bytesRead  -=  toRead,  buf.length());  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  toRead,  buf.length());  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  toRead,  buf.length());	  current.bytesRead    -=    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
194	[BUG]  [BUGGY]  current.bytesRead  -=  offset,  length);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  offset,  length);  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  offset,  length);	  current.bytesRead    -=    offset;    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
195	[BUG]  [BUGGY]  current.bytesRead  -=  offset,  length;  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  offset,  length;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  offset,  length;	  current.bytesRead    -=    offset;    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
196	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
197	[BUG]  [BUGGY]  safeInputStream())  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  safeInputStream())  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	safeInputStream())  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
198	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
199	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
200	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  in.read(buffer,  offset  +  i);  }  [CE]  illegal  start  of  type  [FE]                                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  in.read(buffer,  offset  +  i);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  in.read(buffer,  offset  +  i);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
201	[BUG]  [BUGGY]  safeInputStream())  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  in.read(buffer,  offset  +  i);  }  [CE]  illegal  start  of  type  [FE]                                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  safeInputStream())  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  in.read(buffer,  offset  +  i);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	safeInputStream())  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  in.read(buffer,  offset  +  i);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
202	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining(),  length);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining(),  length);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining(),  length);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf.remaining(),    length);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
203	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.setLength(buf.remaining(),  length);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.setLength(buf.remaining(),  length);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.setLength(buf.remaining(),  length);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf.remaining(),    length);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
204	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining(),  toRead);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining(),  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining(),  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf.remaining(),    length);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
205	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current.bytesRead,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining(),  length);  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor(current.bytesRead,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining(),  length);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor(current.bytesRead,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining(),  length);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf.remaining(),    length);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
206	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining(),  length);  }  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining(),  length);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining(),  length);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf.remaining(),    length);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
207	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining(),  length);  }  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining(),  length);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor(current,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining(),  length);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf.remaining(),    length);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
208	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  false)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining(),  length);  }  [CE]  illegal  start  of  type  [FE]                                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  false)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining(),  length);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor(current,  false)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining(),  length);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf.remaining(),    length);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
209	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.set(i,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.set(i,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.set(i,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.set(i,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
210	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.set(i,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.set(i,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.set(i,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.set(i,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
211	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.set(i,  buffer,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.set(i,  buffer,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.set(i,  buffer,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.set(i,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
212	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  buf.set(i,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  buf.set(i,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  buf.set(i,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.set(i,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
213	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  shortLength;  ++i)  {  buf.set(i,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  shortLength;  ++i)  {  buf.set(i,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  shortLength;  ++i)  {  buf.set(i,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.set(i,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
214	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buf.set(i,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buf.set(i,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buf.set(i,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.set(i,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
215	[BUG]  [BUGGY]  current.bytesRead  +=  length  *  3;  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  length  *  3;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  length  *  3;	  current.bytesRead    +=    toRead    *    3;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
216	[BUG]  [BUGGY]  current.bytesRead  +=  toRead  /  2  *  length;  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  toRead  /  2  *  length;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  toRead  /  2  *  length;	  current.bytesRead    +=    toRead    /    2;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
217	[BUG]  [BUGGY]  current.bytesRead  -=  length  +  toRead;  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  length  +  toRead;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  length  +  toRead;	  current.bytesRead    -=    toRead    +    length;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
218	[BUG]  [BUGGY]  current.bytesRead  +=  csize  *  2  -  1;  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  csize  *  2  -  1;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  csize  *  2  -  1;	  current.bytesRead    +=    toRead    *    2    -    1;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
219	[BUG]  [BUGGY]  current.bytesRead  +=  length  *  2  +  1;  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  length  *  2  +  1;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  length  *  2  +  1;	  current.bytesRead    +=    length    *    2;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
220	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining(),  length);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining(),  length);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining(),  length);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf.remaining(),    length);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
221	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.setLength(buf.remaining(),  length);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.setLength(buf.remaining(),  length);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.setLength(buf.remaining(),  length);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf.remaining(),    length);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
222	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buf.setLength(buf.remaining(),  length);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buf.setLength(buf.remaining(),  length);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buf.setLength(buf.remaining(),  length);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf.remaining(),    length);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
223	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.setLength(buf.remaining(),  length);  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.setLength(buf.remaining(),  length);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.setLength(buf.remaining(),  length);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf.remaining(),    length);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
224	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buf.setLength(buf.remaining(),  length);  }  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buf.setLength(buf.remaining(),  length);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buf.setLength(buf.remaining(),  length);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf.remaining(),    length);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
225	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining(),  toRead);  }  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining(),  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining(),  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf.remaining(),    length);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
226	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i,  offset);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i,  offset);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i,  offset);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remove(i,    offset);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
227	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.remove(i,  offset);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.remove(i,  offset);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.remove(i,  offset);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remove(i,    offset);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
228	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.remove(i,  offset);  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.remove(i,  offset);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.remove(i,  offset);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remove(i,    offset);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
229	[BUG]  [BUGGY]  luate(buffer,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i,  offset);  }  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  luate(buffer,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i,  offset);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	luate(buffer,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i,  offset);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remove(i,    offset);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
230	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buf.remove(i,  offset);  }  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buf.remove(i,  offset);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buf.remove(i,  offset);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remove(i,    offset);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
231	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  buf.remove(i,  offset);  }  [CE]  illegal  start  of  type  [FE]                                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  buf.remove(i,  offset);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  buf.remove(i,  offset);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remove(i,    offset);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
232	[BUG]  [BUGGY]  current.bytesRead  +=  length  -  buf.length;  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  length  -  buf.length;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  length  -  buf.length;	  current.bytesRead    +=    length    -    toRead;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
233	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.reset(i);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.reset(i);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.reset(i);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.reset(i);    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
234	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.reset(i);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.reset(i);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.reset(i);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.reset(i);    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
235	[BUG]  [BUGGY]  luate(buffer,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.reset(i);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  luate(buffer,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.reset(i);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	luate(buffer,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.reset(i);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.reset(i);    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
236	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.reset(i);  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.reset(i);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.reset(i);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.reset(i);    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
237	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  buf.reset(i);  }  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  buf.reset(i);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  buf.reset(i);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.reset(i);    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
238	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buf.reset(i);  }  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buf.reset(i);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buf.reset(i);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.reset(i);    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
239	[BUG]  [BUGGY]  current.bytesRead  +=  length  -  current.bytesRead;  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  length  -  current.bytesRead;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  length  -  current.bytesRead;	  current.bytesRead    +=    toRead    -    length;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
240	[BUG]  [BUGGY]  current.bytesRead  +=  length  -  size;  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  length  -  size;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  length  -  size;	  current.bytesRead    +=    toRead    -    length;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
241	[BUG]  [BUGGY]  current.bytesRead  +=  length  -  3;  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  length  -  3;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  length  -  3;	  current.bytesRead    +=    length    -    1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
242	[BUG]  [BUGGY]  current.bytesRead  +=  length  *  2L;  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  length  *  2L;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  length  *  2L;	  current.bytesRead    +=    toRead    *    2L;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
243	[BUG]  [BUGGY]  current.bytesRead  +=  csize  *  1;  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  csize  *  1;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  csize  *  1;	  current.bytesRead    +=    toRead    *    1;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
244	[BUG]  [BUGGY]  current.bytesRead  +=  length  -  bytesRead;  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  length  -  bytesRead;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  length  -  bytesRead;	  current.bytesRead    +=    length    +    bytesRead;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
245	[BUG]  [BUGGY]  current.bytesRead  +=  length  /  bytesRead;  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  length  /  bytesRead;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  length  /  bytesRead;	  current.bytesRead    +=    length    +    bytesRead;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
246	[BUG]  [BUGGY]  current.bytesRead  -=  buf.length  +  2;  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  buf.length  +  2;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  buf.length  +  2;	  current.bytesRead    -=    buf.length;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
247	[BUG]  [BUGGY]  current.bytesRead  -=  buf.length  *  2;  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  buf.length  *  2;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  buf.length  *  2;	  current.bytesRead    -=    buf.length;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
248	[BUG]  [BUGGY]  current.bytesRead  +=  length  /  2  +  1;  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  length  /  2  +  1;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  length  /  2  +  1;	  current.bytesRead    +=    length    /    2;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
249	[BUG]  [BUGGY]  current.bytesRead  -=  length  *  2;  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  length  *  2;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  length  *  2;	  current.bytesRead    -=    toRead    *    2;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
250	[BUG]  [BUGGY]  current.bytesRead  -=  toRead  *  8;  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  toRead  *  8;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  toRead  *  8;	  current.bytesRead    -=    toRead    *    2;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
251	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  1);  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  1);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  1);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
252	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  1);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  1);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  1);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
253	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  1);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  1);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  1);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
254	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  1);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  1);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  1);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
255	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset);  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
256	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  1);  }  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  1);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  1);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
257	[BUG]  [BUGGY]  current.bytesRead  +=  length  /  csize;  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  length  /  csize;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  length  /  csize;	  current.bytesRead    +=    length    +    csize;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
258	[BUG]  [BUGGY]  current.bytesRead  +=  length  -  csize;  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  length  -  csize;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  length  -  csize;	  current.bytesRead    +=    length    +    csize;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
259	[BUG]  [BUGGY]  current.bytesRead  -=  length  -  2;  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  length  -  2;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  length  -  2;	  current.bytesRead    -=    length    -    1;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
260	[BUG]  [BUGGY]  current.bytesRead  -=  length  /  1;  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  length  /  1;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  length  /  1;	  current.bytesRead    -=    length    -    1;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
261	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.remove(i,  offset  +  1);  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.remove(i,  offset  +  1);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.remove(i,  offset  +  1);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remove(i,    offset    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
262	[BUG]  [BUGGY]  while(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i,  offset  +  1);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  while(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i,  offset  +  1);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	while(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i,  offset  +  1);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remove(i,    offset    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
263	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.remove(i,  offset  +  1);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.remove(i,  offset  +  1);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.remove(i,  offset  +  1);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remove(i,    offset    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
264	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buf.remove(i,  offset  +  1);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buf.remove(i,  offset  +  1);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buf.remove(i,  offset  +  1);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remove(i,    offset    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
265	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buf.remove(i,  offset  +  1);  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buf.remove(i,  offset  +  1);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buf.remove(i,  offset  +  1);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remove(i,    offset    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
266	[BUG]  [BUGGY]  current.bytesRead  +=  length  /  size;  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  length  /  size;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  length  /  size;	  current.bytesRead    +=    length    +    size;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
267	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.remove(i);  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.remove(i);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.remove(i);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remove(i);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
268	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i);  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remove(i);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
269	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.remove(i);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.remove(i);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.remove(i);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remove(i);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
270	[BUG]  [BUGGY]  luate(buffer,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  luate(buffer,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	luate(buffer,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remove(i);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
271	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.remove(i);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.remove(i);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.remove(i);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remove(i);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
272	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buf.remove(i);  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buf.remove(i);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buf.remove(i);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remove(i);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
273	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.get(i,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.get(i,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.get(i,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.get(i,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
274	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.get(i,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.get(i,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.get(i,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.get(i,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
275	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.get(i,  buffer,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.get(i,  buffer,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.get(i,  buffer,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.get(i,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
276	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.get(i,  buffer,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.get(i,  buffer,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.get(i,  buffer,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.get(i,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
277	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  buf.get(i,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  buf.get(i,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  buf.get(i,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.get(i,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
278	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  shortLength;  ++i)  {  buf.get(i,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  shortLength;  ++i)  {  buf.get(i,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  shortLength;  ++i)  {  buf.get(i,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.get(i,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
279	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
280	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
281	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
282	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
283	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
284	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  inStream.read(buffer,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  inStream.read(buffer,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  inStream.read(buffer,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
285	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  length;  ++i)  {  buf.reset();  }  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  for(int  i  =  0;  i  <  length;  ++i)  {  buf.reset();  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	for(int  i  =  0;  i  <  length;  ++i)  {  buf.reset();  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.reset();    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
286	[BUG]  [BUGGY]  luate(buffer,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.reset();  }  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  luate(buffer,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.reset();  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	luate(buffer,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.reset();  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.reset();    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
287	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.reset();  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.reset();  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.reset();  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.reset();    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
288	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  buf.reset();  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  buf.reset();  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  buf.reset();  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.reset();    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
289	[BUG]  [BUGGY]  luate(int)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining()  -  length);  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  luate(int)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining()  -  length);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	luate(int)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining()  -  length);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf.remaining()    -    length);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
290	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining()  -  length);  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining()  -  length);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining()  -  length);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf.remaining()    -    length);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
291	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.setLength(buf.remaining()  -  length);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.setLength(buf.remaining()  -  length);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.setLength(buf.remaining()  -  length);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf.remaining()    -    length);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
292	[BUG]  [BUGGY]  read(buffer,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining()  -  length);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  read(buffer,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining()  -  length);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	read(buffer,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining()  -  length);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf.remaining()    -    length);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
293	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining()  *  length);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining()  *  length);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining()  *  length);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf.remaining()    -    length);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
294	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buf.setLength(buf.remaining()  -  length);  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buf.setLength(buf.remaining()  -  length);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buf.setLength(buf.remaining()  -  length);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf.remaining()    -    length);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
295	[BUG]  [BUGGY]  current.bytesRead  +=  offset;  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  offset;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  offset;	  current.bytesRead    +=    bytesRead;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
296	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remaining();  }  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remaining();  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	for(int  i  =  0;  i  <  length;  ++i)  {  buf.remaining();  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remaining();    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
297	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.remaining();  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.remaining();  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.remaining();  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remaining();    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
298	[BUG]  [BUGGY]  luate(buffer,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remaining();  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  luate(buffer,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remaining();  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	luate(buffer,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remaining();  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remaining();    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
299	[BUG]  [BUGGY]  current.bytesRead  +=  length  *  8;  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  length  *  8;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  length  *  8;	  current.bytesRead    +=    toRead    *    8;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
300	[BUG]  [BUGGY]  current.bytesRead  +=  toRead  *  6;  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  toRead  *  6;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  toRead  *  6;	  current.bytesRead    +=    toRead    *    8;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
301	[BUG]  [BUGGY]  current.bytesRead  +=  toRead  +  length  *  1;  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  toRead  +  length  *  1;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  toRead  +  length  *  1;	  current.bytesRead    +=    toRead    +    length    +    1;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
302	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
303	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
304	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
305	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
306	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }  [CE]  illegal  start  of  type  [FE]                                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
307	[BUG]  [BUGGY]  current.bytesRead  +=  length  *  toRead;  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  length  *  toRead;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  length  *  toRead;	  current.bytesRead    +=    length    +    toRead;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
308	[BUG]  [BUGGY]  current.bytesRead  +=  buf.length  -  1L;  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  buf.length  -  1L;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  buf.length  -  1L;	  current.bytesRead    +=    buf.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
309	[BUG]  [BUGGY]  current.bytesRead  +=  toRead  +  length  *  3;  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  toRead  +  length  *  3;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  toRead  +  length  *  3;	  current.bytesRead    +=    toRead    +    length    *    2;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
310	[BUG]  [BUGGY]  current.bytesRead  -=  buffer.length  +  2;  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  buffer.length  +  2;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  buffer.length  +  2;	  current.bytesRead    -=    buffer.length;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
311	[BUG]  [BUGGY]  current.bytesRead  +=  csize  +  4;  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  csize  +  4;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  csize  +  4;	  current.bytesRead    +=    csize    +    1;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
312	[BUG]  [BUGGY]  current.bytesRead  -=  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  length,  current.bytesRead);  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  length,  current.bytesRead);	  current.bytesRead    -=    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
313	[BUG]  [BUGGY]  current.bytesRead  -=  toRead,  offset  +  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  toRead,  offset  +  length);  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  toRead,  offset  +  length);	  current.bytesRead    -=    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
314	[BUG]  [BUGGY]  current.bytesRead  -=  buffer,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  buffer,  length);  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  buffer,  length);	  current.bytesRead    -=    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
315	[BUG]  [BUGGY]  current.bytesRead  +=  length  *  toRead  -  1;  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  length  *  toRead  -  1;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  length  *  toRead  -  1;	  current.bytesRead    +=    toRead    +    length    -    1;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
316	[BUG]  [BUGGY]  current.bytesRead  +=  length  -  1L;  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  length  -  1L;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  length  -  1L;	  current.bytesRead    +=    toRead    -    1L;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
317	[BUG]  [BUGGY]  CurrentEntry.bytesRead  +=  toRead  -  1;  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  CurrentEntry.bytesRead  +=  toRead  -  1;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	CurrentEntry.bytesRead  +=  toRead  -  1;	  current.bytesRead    +=    toRead    -    1L;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
318	[BUG]  [BUGGY]  current.bytesRead  -=  toRead  *  buf.remaining();  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  toRead  *  buf.remaining();  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  toRead  *  buf.remaining();	  current.bytesRead    -=    toRead    *    length;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
319	[BUG]  [BUGGY]  current.bytesRead  -=  offset  +  length;  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  offset  +  length;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  offset  +  length;	  current.bytesRead    -=    offset;    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
320	[BUG]  [BUGGY]  current.bytesRead  +=  toRead.length();  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  toRead.length();  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  toRead.length();	  current.bytesRead    +=    buf.length();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
321	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.put(buffer,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.put(buffer,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.put(buffer,    off,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
322	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.put(buffer,  off,  toRead);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.put(buffer,  off,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.put(buffer,  off,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.put(buffer,    off,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
323	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.put(buffer,  off,  toRead);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.put(buffer,  off,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.put(buffer,  off,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.put(buffer,    off,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
324	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.put(buffer,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.put(buffer,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.put(buffer,    off,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
325	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buf.put(buffer,  off,  toRead);  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buf.put(buffer,  off,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buf.put(buffer,  off,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.put(buffer,    off,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
326	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.put(buffer,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.put(buffer,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
327	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  buf.put(buffer,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  buf.put(buffer,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
328	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  shortLength;  ++i)  {  buf.put(buffer,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  shortLength;  ++i)  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  shortLength;  ++i)  {  buf.put(buffer,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
329	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  end;  ++i)  {  buf.put(buffer,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  end;  ++i)  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  end;  ++i)  {  buf.put(buffer,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
330	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  buf,  0,  buf.length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  System.arraycopy(buf,  offset,  buf,  0,  buf.length);  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	System.arraycopy(buf,  offset,  buf,  0,  buf.length);	  System.arraycopy(buf,    offset,    toRead,    0,    buf.length);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
331	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  buf,  0,  buf.length  -  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  System.arraycopy(buf,  offset,  buf,  0,  buf.length  -  1);  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	System.arraycopy(buf,  offset,  buf,  0,  buf.length  -  1);	  System.arraycopy(buf,    offset,    toRead,    0,    buf.length);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
332	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.get(buffer,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.get(buffer,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.get(buffer,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
333	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.get(buffer,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.get(buffer,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.get(buffer,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
334	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.get(buffer,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.get(buffer,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.get(buffer,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
335	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  shortLength;  ++i)  {  buf.get(buffer,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  shortLength;  ++i)  {  buf.get(buffer,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  shortLength;  ++i)  {  buf.get(buffer,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
336	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  buf.get(buffer,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  buf.get(buffer,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  buf.get(buffer,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
337	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buf.get(buffer,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buf.get(buffer,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  offset;  ++i)  {  buf.get(buffer,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
338	[BUG]  [BUGGY]  current.bytesRead  +=  length  +  offset;  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  length  +  offset;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  length  +  offset;	  current.bytesRead    +=    toRead    +    offset;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
339	[BUG]  [BUGGY]  current.bytesRead  +=  offset  +  length;  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  offset  +  length;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  offset  +  length;	  current.bytesRead    +=    toRead    +    offset;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
340	[BUG]  [BUGGY]  current.bytesRead  +=  toRead  -  4;  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  toRead  -  4;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  toRead  -  4;	  current.bytesRead    +=    toRead    -    2;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
341	[BUG]  [BUGGY]  current.bytesRead  -=  offset  -  1;  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  offset  -  1;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  offset  -  1;	  current.bytesRead    -=    length    -    1;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
342	[BUG]  [BUGGY]  current.bytesRead  +=  size  +  1;  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  size  +  1;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  size  +  1;	  current.bytesRead    +=    csize    +    1;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
343	[BUG]  [BUGGY]  current.bytesRead  +=  size  -  1;  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  size  -  1;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  size  -  1;	  current.bytesRead    +=    csize    -    1;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
344	[BUG]  [BUGGY]  current.bytesRead  +=  length  -  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  length  -  current.bytesRead);  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  length  -  current.bytesRead);	  current.bytesRead    +=    toRead    -    length;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
345	[BUG]  [BUGGY]  current.bytesRead  -=  toRead  /  1;  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  toRead  /  1;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  toRead  /  1;	  current.bytesRead    +=    toRead    /    1;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
346	[BUG]  [BUGGY]  read()  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.get(buffer,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  read()  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.get(buffer,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	read()  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.get(buffer,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
347	[BUG]  [BUGGY]  read(buf,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.get(buffer,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  read(buf,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.get(buffer,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	read(buf,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.get(buffer,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
348	[BUG]  [BUGGY]  current.bytesRead  +=  length  /  8;  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  length  /  8;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  length  /  8;	  current.bytesRead    +=    toRead    *    8;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
349	[BUG]  [BUGGY]  read()  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.put(buffer,  off,  toRead);  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  read()  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.put(buffer,  off,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	read()  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.put(buffer,  off,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.put(buffer,    off,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
350	[BUG]  [BUGGY]  read()  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.put(buffer,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  read()  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	read()  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.put(buffer,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.put(buffer,    off,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
351	[BUG]  [BUGGY]  read(buf,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.put(buffer,  off,  toRead);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  read(buf,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.put(buffer,  off,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	read(buf,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.put(buffer,  off,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.put(buffer,    off,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
352	[BUG]  [BUGGY]  current.bytesRead  -=  offset  *  length;  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  offset  *  length;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  offset  *  length;	  current.bytesRead    -=    toRead    *    length;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
353	[BUG]  [BUGGY]  current.bytesRead  +=  length  *  bytesRead;  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  length  *  bytesRead;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  length  *  bytesRead;	  current.bytesRead    +=    length    +    bytesRead;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
354	[BUG]  [BUGGY]  while(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining(),  length);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  while(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining(),  length);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	while(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining(),  length);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf.remaining(),    length);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
355	[BUG]  [BUGGY]  read(buffer,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining(),  length);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  read(buffer,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining(),  length);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	read(buffer,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining(),  length);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf.remaining(),    length);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
356	[BUG]  [BUGGY]  read()  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.get(i,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  read()  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.get(i,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	read()  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.get(i,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.get(i,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
357	[BUG]  [BUGGY]  if(length  <  =  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.get(i,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  <  =  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.get(i,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  <  =  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.get(i,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.get(i,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
358	[BUG]  [BUGGY]  read(buffer,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.get(i,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  read(buffer,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.get(i,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	read(buffer,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.get(i,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.get(i,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
359	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.get(i,  buffer,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.get(i,  buffer,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.get(i,  buffer,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.get(i,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
360	[BUG]  [BUGGY]  read()  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.reset(i);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  read()  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.reset(i);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	read()  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.reset(i);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.reset(i);    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
361	[BUG]  [BUGGY]  read(buffer,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.reset(i);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  read(buffer,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.reset(i);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	read(buffer,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.reset(i);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.reset(i);    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
362	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  end;  ++i)  {  buf.reset(i);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  end;  ++i)  {  buf.reset(i);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  end;  ++i)  {  buf.reset(i);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.reset(i);    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
363	[BUG]  [BUGGY]  current.bytesRead  +=  length  /  2  -  1;  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  length  /  2  -  1;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  length  /  2  -  1;	  current.bytesRead    +=    toRead    *    2    -    1;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
364	[BUG]  [BUGGY]  read()  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining()  -  length);  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  read()  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining()  -  length);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	read()  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining()  -  length);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf.remaining()    -    length);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
365	[BUG]  [BUGGY]  while(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining()  *  length);  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  while(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining()  *  length);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	while(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining()  *  length);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf.remaining()    -    length);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
366	[BUG]  [BUGGY]  while(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining()  -  length);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  while(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining()  -  length);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	while(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining()  -  length);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.setLength(buf.remaining()    -    length);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
367	[BUG]  [BUGGY]  current.bytesRead  +=  buffer.length  -  1;  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  buffer.length  -  1;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  buffer.length  -  1;	  current.bytesRead    +=    buf.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
368	[BUG]  [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buf,  0,  toRead.length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buf,  0,  toRead.length);  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	System.arraycopy(current.bytesRead,  offset,  buf,  0,  toRead.length);	  System.arraycopy(buf,    offset,    toRead,    0,    buf.length);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
369	[BUG]  [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buf,  0,  buf.length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buf,  0,  buf.length);  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	System.arraycopy(current.bytesRead,  offset,  buf,  0,  buf.length);	  System.arraycopy(buf,    offset,    toRead,    0,    buf.length);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
370	[BUG]  [BUGGY]  current.bytesRead  +=  length  *  csize;  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  length  *  csize;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  length  *  csize;	  current.bytesRead    +=    length    +    csize;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
371	[BUG]  [BUGGY]  read()  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i);  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  read()  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	read()  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remove(i);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
372	[BUG]  [BUGGY]  while(i  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i);  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  while(i  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	while(i  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remove(i);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
373	[BUG]  [BUGGY]  read(buffer,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  read(buffer,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	read(buffer,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remove(i);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
374	[BUG]  [BUGGY]  current.bytesRead  +=  length  +  2  -  1;  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  length  +  2  -  1;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  length  +  2  -  1;	  current.bytesRead    +=    toRead    +    length    -    1;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
375	[BUG]  [BUGGY]  current.bytesRead  +=  offset  +  length  -  1;  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  offset  +  length  -  1;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  offset  +  length  -  1;	  current.bytesRead    +=    toRead    +    length    -    1;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
376	[BUG]  [BUGGY]  read()  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.set(i,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  read()  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.set(i,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	read()  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.set(i,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.set(i,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
377	[BUG]  [BUGGY]  if(length  <  =  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.set(i,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  <  =  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.set(i,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  <  =  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.set(i,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.set(i,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
378	[BUG]  [BUGGY]  read(buffer,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.set(i,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  read(buffer,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.set(i,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	read(buffer,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.set(i,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.set(i,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
379	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.set(i,  buffer,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.set(i,  buffer,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.set(i,  buffer,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.set(i,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
380	[BUG]  [BUGGY]  read()  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i,  offset);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  read()  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i,  offset);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	read()  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i,  offset);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remove(i,    offset);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
381	[BUG]  [BUGGY]  while(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i,  offset);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  while(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i,  offset);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	while(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i,  offset);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remove(i,    offset);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
382	[BUG]  [BUGGY]  read(buffer,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i,  offset);  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  read(buffer,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i,  offset);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	read(buffer,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i,  offset);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remove(i,    offset);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
383	[BUG]  [BUGGY]  current.bytesRead  +=  offset  +  length  +  1;  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  offset  +  length  +  1;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  offset  +  length  +  1;	  current.bytesRead    +=    toRead    +    length    +    1;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
384	[BUG]  [BUGGY]  current.bytesRead  +=  offset  -  toRead;  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  offset  -  toRead;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  offset  -  toRead;	  current.bytesRead    +=    length    -    toRead;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
385	[BUG]  [BUGGY]  read(buffer,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.reset();  }  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  read(buffer,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.reset();  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	read(buffer,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.reset();  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.reset();    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
386	[BUG]  [BUGGY]  while(toRead  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.reset();  }  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  while(toRead  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.reset();  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	while(toRead  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.reset();  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.reset();    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
387	[BUG]  [BUGGY]  read(buffer,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remaining();  }  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  read(buffer,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remaining();  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	read(buffer,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remaining();  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remaining();    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
388	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  buf.remaining();  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  buf.remaining();  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  in.length;  ++i)  {  buf.remaining();  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remaining();    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
389	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  end;  ++i)  {  buf.remaining();  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  end;  ++i)  {  buf.remaining();  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  end;  ++i)  {  buf.remaining();  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remaining();    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
390	[BUG]  [BUGGY]  current.bytesRead  -=  toRead,  off  +  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  -=  toRead,  off  +  length);  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  -=  toRead,  off  +  length);	  current.bytesRead    -=    toRead,    length);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
391	[BUG]  [BUGGY]  while(toRead  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i,  offset  +  1);  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  while(toRead  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i,  offset  +  1);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	while(toRead  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i,  offset  +  1);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remove(i,    offset    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
392	[BUG]  [BUGGY]  read()  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i,  offset  +  1);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  read()  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i,  offset  +  1);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	read()  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i,  offset  +  1);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remove(i,    offset    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
393	[BUG]  [BUGGY]  read(buffer,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i,  offset  +  1);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  read(buffer,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i,  offset  +  1);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	read(buffer,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.remove(i,  offset  +  1);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.remove(i,    offset    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
394	[BUG]  [BUGGY]  read()  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  1);  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  read()  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  1);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	read()  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  1);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
395	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  1,  length);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  1,  length);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  1,  length);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
396	[BUG]  [BUGGY]  current.bytesRead  +=  length  -  toRead  *  2;  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  length  -  toRead  *  2;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  length  -  toRead  *  2;	  current.bytesRead    +=    toRead    +    length    *    2;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
397	[BUG]  [BUGGY]  current.bytesRead  +=  length  *  size;  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  current.bytesRead  +=  length  *  size;  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	current.bytesRead  +=  length  *  size;	  current.bytesRead    +=    length    +    size;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
398	[BUG]  [BUGGY]  read()  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  read()  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	read()  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  i);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
399	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  2);  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  2);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset  +  2);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
400	[BUG]  [BUGGY]  read()  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  read()  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	read()  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
401	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  this.length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  this.length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  this.length;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
402	[BUG]  [BUGGY]  read()  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf[i]  =  inputStream.read(buffer,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  read()  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf[i]  =  inputStream.read(buffer,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	read()  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf[i]  =  inputStream.read(buffer,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buffer[i]    =    inputStream.read(buffer,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
403	[BUG]  [BUGGY]  read(buf,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.put(buffer,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  read(buf,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	read(buf,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.put(buffer,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
404	[BUG]  [BUGGY]  read(buffer,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.put(buffer,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  read(buffer,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	read(buffer,  offset,  length))  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.put(buffer,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
405	[BUG]  [BUGGY]  read()  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.put(buffer,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);      [BUGGY]  read()  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	434	434	1	replace	read()  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.put(buffer,  offset,  toRead);  }	  if(length    >    0)    {    for(int    i    =    0;    i    <    length;    ++i)    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
