bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  offset);  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  offset);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(current.entry,  offset);	  ZipUtil.checkDeclaredFeatures(current.entry);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
2	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(offset,  current.entry);  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkDeclaredFeatures(offset,  current.entry);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(offset,  current.entry);	  ZipUtil.checkDeclaredFeatures(current.entry);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
3	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  length);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  length);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(current.entry,  length);	  ZipUtil.checkDeclaredFeatures(current.entry);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
4	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(this.entry,  current.entry);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkDeclaredFeatures(this.entry,  current.entry);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(this.entry,  current.entry);	  ZipUtil.checkDeclaredFeatures(current.entry);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
5	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(length,  current.entry);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkDeclaredFeatures(length,  current.entry);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(length,  current.entry);	  ZipUtil.checkDeclaredFeatures(current.entry);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
6	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(read,  current.entry);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkDeclaredFeatures(read,  current.entry);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(read,  current.entry);	  ZipUtil.checkDeclaredFeatures(current.entry);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
7	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  offset);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  offset);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(current.entry,  offset);	  ZipUtil.checkDeprecatedFeatures(current.entry);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
8	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  length);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(current.entry,  length);	  ZipUtil.checkDeprecatedFeatures(current.entry);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
9	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(this.entry,  current.entry);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkDeprecatedFeatures(this.entry,  current.entry);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(this.entry,  current.entry);	  ZipUtil.checkDeprecatedFeatures(current.entry);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
10	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(offset,  current.entry);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkDeprecatedFeatures(offset,  current.entry);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(offset,  current.entry);	  ZipUtil.checkDeprecatedFeatures(current.entry);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
11	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(this.entry);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkDeprecatedFeatures(this.entry);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(this.entry);	  ZipUtil.checkDeprecatedFeatures(current.entry);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
12	[BUG]  [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  offset);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  offset);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptorFor(current.entry,  offset);	  ZipUtil.checkDescriptorFor(current.entry);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
13	[BUG]  [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  read);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  read);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptorFor(current.entry,  read);	  ZipUtil.checkDescriptorFor(current.entry);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
14	[BUG]  [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  length);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptorFor(current.entry,  length);	  ZipUtil.checkDescriptorFor(current.entry);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
15	[BUG]  [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  true);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  true);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptorFor(current.entry,  true);	  ZipUtil.checkDescriptorFor(current.entry);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
16	[BUG]  [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  buffer.length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  buffer.length);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptorFor(current.entry,  buffer.length);	  ZipUtil.checkDescriptorFor(current.entry);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
17	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  offset,  length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  offset,  length);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current.entry,  offset,  length);	  ZipUtil.checkRequestedFeatures(current.entry,    length);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
18	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(offset,  current.entry);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkRequestedFeatures(offset,  current.entry);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(offset,  current.entry);	  ZipUtil.checkRequestedFeatures(current.entry,    length);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
19	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(read,  current.entry);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkRequestedFeatures(read,  current.entry);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(read,  current.entry);	  ZipUtil.checkRequestedFeatures(current.entry,    length);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
20	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  offset  +  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  offset  +  length);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current.entry,  offset  +  length);	  ZipUtil.checkRequestedFeatures(current.entry,    length);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
21	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  buffer.length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  buffer.length);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current.entry,  buffer.length);	  ZipUtil.checkRequestedFeatures(current.entry,    length);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
22	[BUG]  [BUGGY]  Inflater  inf  =  current.getInputStream();  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  Inflater  inf  =  current.getInputStream();  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  current.getInputStream();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
23	[BUG]  [BUGGY]  Inflater  inf  =  currentEntry.getInputStream();  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  Inflater  inf  =  currentEntry.getInputStream();  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  currentEntry.getInputStream();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
24	[BUG]  [BUGGY]  Inflater  inf  =  current.entry.getInputStream();  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  Inflater  inf  =  current.entry.getInputStream();  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  current.entry.getInputStream();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
25	[BUG]  [BUGGY]  current.entry  =  entryEncoding.getValue();  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  current.entry  =  entryEncoding.getValue();  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	current.entry  =  entryEncoding.getValue();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
26	[BUG]  [BUGGY]  int  currentSize  =  current.size();  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  int  currentSize  =  current.size();  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	int  currentSize  =  current.size();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
27	[BUG]  [BUGGY]  Inflater  inf  =  current.getInputStream();  if(inf!=  null)  {  for(int  i  =  0,  length  =  inf.length;  i  <  length;  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  Inflater  inf  =  current.getInputStream();  if(inf!=  null)  {  for(int  i  =  0,  length  =  inf.length;  i  <  length;  ++i)  {  inputStream.close();  }  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  current.getInputStream();  if(inf!=  null)  {  for(int  i  =  0,  length  =  inf.length;  i  <  length;  ++i)  {  inputStream.close();  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
28	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream();  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  Inflater  inf  =  getInputStream();  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  getInputStream();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
29	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(length,  current.entry,  offset);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkRequestedFeatures(length,  current.entry,  offset);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(length,  current.entry,  offset);	  ZipUtil.checkRequestedFeatures(length,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
30	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(length,  buffer,  current.entry);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkRequestedFeatures(length,  buffer,  current.entry);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(length,  buffer,  current.entry);	  ZipUtil.checkRequestedFeatures(length,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
31	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(array,  current.entry);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkRequestedFeatures(array,  current.entry);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(array,  current.entry);	  ZipUtil.checkRequestedFeatures(length,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
32	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry!=  null  &&  current.entry.getMethod()  ==  ZipArchiveInputStream.DEFAULT);  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkState(current.entry!=  null  &&  current.entry.getMethod()  ==  ZipArchiveInputStream.DEFAULT);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry!=  null  &&  current.entry.getMethod()  ==  ZipArchiveInputStream.DEFAULT);	  ZipUtil.checkState(current.entry!=    null);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
33	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry!=  null  &&  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFAULT);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkState(current.entry!=  null  &&  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFAULT);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry!=  null  &&  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFAULT);	  ZipUtil.checkState(current.entry!=    null);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
34	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry  >=  null);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkState(current.entry  >=  null);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry  >=  null);	  ZipUtil.checkState(current.entry!=    null);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
35	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry!=  null  &&  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkState(current.entry!=  null  &&  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry!=  null  &&  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED);	  ZipUtil.checkState(current.entry!=    null);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
36	[BUG]  [BUGGY]  ZipUtil.checkState(this.entry!=  null);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkState(this.entry!=  null);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(this.entry!=  null);	  ZipUtil.checkState(current.entry!=    null);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
37	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  buffer,  offset);  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  buffer,  offset);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current.entry,  buffer,  offset);	  ZipUtil.checkRequestedFeatures(current.entry,    offset);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
38	[BUG]  [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  offset);  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  offset);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedDescriptor(current.entry,  offset);	  ZipUtil.checkRequestedDescriptor(current.entry);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
39	[BUG]  [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  length);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  length);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedDescriptor(current.entry,  length);	  ZipUtil.checkRequestedDescriptor(current.entry);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
40	[BUG]  [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  read);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  read);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedDescriptor(current.entry,  read);	  ZipUtil.checkRequestedDescriptor(current.entry);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
41	[BUG]  [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  hasDataDescriptor);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedDescriptor(current.entry,  hasDataDescriptor);	  ZipUtil.checkRequestedDescriptor(current.entry);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
42	[BUG]  [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  false);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  false);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedDescriptor(current.entry,  false);	  ZipUtil.checkRequestedDescriptor(current.entry);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
43	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(current.entry,  offset);  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkDeprecated(current.entry,  offset);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecated(current.entry,  offset);	  ZipUtil.checkDeprecated(current.entry);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
44	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(current.entry,  offset  +  length);  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkDeprecated(current.entry,  offset  +  length);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecated(current.entry,  offset  +  length);	  ZipUtil.checkDeprecated(current.entry);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
45	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(current.entry,  read);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkDeprecated(current.entry,  read);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecated(current.entry,  read);	  ZipUtil.checkDeprecated(current.entry);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
46	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(current.entry,  length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkDeprecated(current.entry,  length);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecated(current.entry,  length);	  ZipUtil.checkDeprecated(current.entry);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
47	[BUG]  [BUGGY]  ZipUtil.checkState(this.entry  ==  null);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkState(this.entry  ==  null);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(this.entry  ==  null);	  ZipUtil.checkState(current.entry    ==    null);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
48	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry  ==  null,  offset);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkState(current.entry  ==  null,  offset);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry  ==  null,  offset);	  ZipUtil.checkState(current.entry    ==    null);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
49	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry!=  null,  offset);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkState(current.entry!=  null,  offset);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry!=  null,  offset);	  ZipUtil.checkState(current.entry    ==    null);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
50	[BUG]  [BUGGY]  ZipUtil.checkAndFixDeprecated(current.entry);  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkAndFixDeprecated(current.entry);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkAndFixDeprecated(current.entry);	  ZipUtil.checkDeprecated(current.entry);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
51	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.deflateInflate(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  Inflater  inf  =  entryEncoding.deflateInflate(buffer,  offset,  length);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  entryEncoding.deflateInflate(buffer,  offset,  length);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
52	[BUG]  [BUGGY]  int  currentLen  =  current.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  int  currentLen  =  current.read(buffer,  offset,  length);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	int  currentLen  =  current.read(buffer,  offset,  length);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
53	[BUG]  [BUGGY]  byte[]  current  =  current.getDataDescriptor();  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  byte[]  current  =  current.getDataDescriptor();  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	byte[]  current  =  current.getDataDescriptor();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
54	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.getInputStream();  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  Inflater  inf  =  entryEncoding.getInputStream();  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  entryEncoding.getInputStream();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
55	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.deflate(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  Inflater  inf  =  entryEncoding.deflate(buffer,  offset,  length);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  entryEncoding.deflate(buffer,  offset,  length);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
56	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  buffer,  length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  buffer,  length);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current.entry,  buffer,  length);	  ZipUtil.checkRequestedFeatures(current.entry,    length);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
57	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry!=  null  &&  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFAULT));  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkState(current.entry!=  null  &&  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFAULT));  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry!=  null  &&  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFAULT));	  ZipUtil.checkState(current.entry!=    null);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
58	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry!=  null  &&  current.entry.getMethod()  ==  ZipArchiveEntry.DEFLATED);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkState(current.entry!=  null  &&  current.entry.getMethod()  ==  ZipArchiveEntry.DEFLATED);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry!=  null  &&  current.entry.getMethod()  ==  ZipArchiveEntry.DEFLATED);	  ZipUtil.checkState(current.entry!=    null);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
59	[BUG]  [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  hasDataDescriptor);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptorFor(current.entry,  hasDataDescriptor);	  ZipUtil.checkDescriptorFor(current.entry);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
60	[BUG]  [BUGGY]  ZipUtil.checkDescriptor(current.entry);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkDescriptor(current.entry);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptor(current.entry);	  ZipUtil.checkDescriptorFor(current.entry);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
61	[BUG]  [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  ze);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  ze);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptorFor(current.entry,  ze);	  ZipUtil.checkDescriptorFor(current.entry);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
62	[BUG]  [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  hasUTF8Flag);  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  hasUTF8Flag);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedDescriptor(current.entry,  hasUTF8Flag);	  ZipUtil.checkRequestedDescriptor(current.entry);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
63	[BUG]  [BUGGY]  ZipUtil.checkAndFixRequestedDescriptor(current.entry);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkAndFixRequestedDescriptor(current.entry);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkAndFixRequestedDescriptor(current.entry);	  ZipUtil.checkRequestedDescriptor(current.entry);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
64	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  buffer);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  buffer);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(current.entry,  buffer);	  ZipUtil.checkDeprecatedFeatures(current.entry);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
65	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  hasDataDescriptor);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(current.entry,  hasDataDescriptor);	  ZipUtil.checkDeprecatedFeatures(current.entry);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
66	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  false);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  false);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(current.entry,  false);	  ZipUtil.checkDeprecatedFeatures(current.entry);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
67	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  read);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  read);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(current.entry,  read);	  ZipUtil.checkDeprecatedFeatures(current.entry);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
68	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  hasDataDescriptor);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(current.entry,  hasDataDescriptor);	  ZipUtil.checkDeclaredFeatures(current.entry);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
69	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  false);  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  false);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(current.entry,  false);	  ZipUtil.checkDeclaredFeatures(current.entry);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
70	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry!=  null  &&  current.entry.getMethod()  ==  ZipArchiveEntry.DATA_DESCRIPTOR);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkState(current.entry!=  null  &&  current.entry.getMethod()  ==  ZipArchiveEntry.DATA_DESCRIPTOR);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry!=  null  &&  current.entry.getMethod()  ==  ZipArchiveEntry.DATA_DESCRIPTOR);	  ZipUtil.checkState(current.entry    ==    null);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
71	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  buffer);  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  buffer);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current.entry,  buffer);	  ZipUtil.checkRequestedFeatures(current.entry,    offset);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
72	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  offset  -  offset);  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  offset  -  offset);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current.entry,  offset  -  offset);	  ZipUtil.checkRequestedFeatures(current.entry,    offset);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
73	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  offset,  length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  offset,  length);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(current.entry,  offset,  length);	  ZipUtil.checkRequestedFeatures(current.entry,    length);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
74	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry  [Delete]  null);  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkState(current.entry  [Delete]  null);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry  [Delete]  null);	  ZipUtil.checkState(current.entry!=    null);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
75	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry  >>  null);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkState(current.entry  >>  null);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry  >>  null);	  ZipUtil.checkState(current.entry!=    null);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
76	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(remainder,  current.entry);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkRequestedFeatures(remainder,  current.entry);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(remainder,  current.entry);	  ZipUtil.checkRequestedFeatures(length,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
77	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(this.entry,  current.entry);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkRequestedFeatures(this.entry,  current.entry);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(this.entry,  current.entry);	  ZipUtil.checkRequestedFeatures(length,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
78	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(currToken,  current.entry);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkRequestedFeatures(currToken,  current.entry);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(currToken,  current.entry);	  ZipUtil.checkRequestedFeatures(length,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
79	[BUG]  [BUGGY]  current.entry  =  entryEncoding.decode(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  current.entry  =  entryEncoding.decode(buffer,  offset,  length);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	current.entry  =  entryEncoding.decode(buffer,  offset,  length);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
80	[BUG]  [BUGGY]  CurrentEntry  current  =  currentEntry.getValue();  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  CurrentEntry  current  =  currentEntry.getValue();  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	CurrentEntry  current  =  currentEntry.getValue();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
81	[BUG]  [BUGGY]  current.entry  =  entryEncoding.decodeBase64Entry(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  current.entry  =  entryEncoding.decodeBase64Entry(buffer,  offset,  length);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	current.entry  =  entryEncoding.decodeBase64Entry(buffer,  offset,  length);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
82	[BUG]  [BUGGY]  Integer  current  =  current.getEntry(offset);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  Integer  current  =  current.getEntry(offset);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Integer  current  =  current.getEntry(offset);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
83	[BUG]  [BUGGY]  current.entry  =  entryEncoding.decode(buffer,  offset  +  length,  current.length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  current.entry  =  entryEncoding.decode(buffer,  offset  +  length,  current.length);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	current.entry  =  entryEncoding.decode(buffer,  offset  +  length,  current.length);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
84	[BUG]  [BUGGY]  Integer  current  =  current.entry.getValue();  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  Integer  current  =  current.entry.getValue();  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Integer  current  =  current.entry.getValue();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
85	[BUG]  [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  offset  +  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  offset  +  length);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptorFor(current.entry,  offset  +  length);	  ZipUtil.checkDescriptorFor(current.entry);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
86	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(current.entry,  buffer.length);  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkDeprecated(current.entry,  buffer.length);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecated(current.entry,  buffer.length);	  ZipUtil.checkDeprecated(current.entry);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
87	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  true);  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  true);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(current.entry,  true);	  ZipUtil.checkDeclaredFeatures(current.entry);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
88	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  buffer.length);  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  buffer.length);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(current.entry,  buffer.length);	  ZipUtil.checkDeclaredFeatures(current.entry);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
89	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  ze);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  ze);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(current.entry,  ze);	  ZipUtil.checkDeclaredFeatures(current.entry);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
90	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  buffer.length);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  buffer.length);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(current.entry,  buffer.length);	  ZipUtil.checkDeprecatedFeatures(current.entry);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
91	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  ze);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  ze);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(current.entry,  ze);	  ZipUtil.checkDeprecatedFeatures(current.entry);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
92	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  true);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }    [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  true);  [BUGGY]    if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(current.entry,  true);	  ZipUtil.checkDeprecatedFeatures(current.entry);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
