bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  offset,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  offset,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptorFor(current.entry,  offset,  length);	  ZipUtil.checkDescriptorFor(current.entry,    offset);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
2	[BUG]  [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  buffer,  offset);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  buffer,  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptorFor(current.entry,  buffer,  offset);	  ZipUtil.checkDescriptorFor(current.entry,    offset);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
3	[BUG]  [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  offset,  buffer.length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  offset,  buffer.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptorFor(current.entry,  offset,  buffer.length);	  ZipUtil.checkDescriptorFor(current.entry,    offset);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
4	[BUG]  [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  offset,  read);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  offset,  read);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptorFor(current.entry,  offset,  read);	  ZipUtil.checkDescriptorFor(current.entry,    offset);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
5	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  hasUTF8Flag);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  hasUTF8Flag);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(current.entry,  hasUTF8Flag);	  ZipUtil.checkDeclaredFeatures(current.entry,    hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
6	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  hasUTF8Flag,  hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  hasUTF8Flag,  hasDataDescriptor);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(current.entry,  hasUTF8Flag,  hasDataDescriptor);	  ZipUtil.checkDeclaredFeatures(current.entry,    hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
7	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  offset,  hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  offset,  hasDataDescriptor);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(current.entry,  offset,  hasDataDescriptor);	  ZipUtil.checkDeclaredFeatures(current.entry,    hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
8	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  hasUTF8Flag  &&  hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  hasUTF8Flag  &&  hasDataDescriptor);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(current.entry,  hasUTF8Flag  &&  hasDataDescriptor);	  ZipUtil.checkDeclaredFeatures(current.entry,    hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
9	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  buffer,  hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  buffer,  hasDataDescriptor);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(current.entry,  buffer,  hasDataDescriptor);	  ZipUtil.checkDeclaredFeatures(current.entry,    hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
10	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  read);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  read);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(current.entry,  read);	  ZipUtil.checkDeclaredFeatures(read,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
11	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(read,  current.entry,  offset);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(read,  current.entry,  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(read,  current.entry,  offset);	  ZipUtil.checkDeclaredFeatures(read,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
12	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(read,  current.entry,  length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(read,  current.entry,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(read,  current.entry,  length);	  ZipUtil.checkDeclaredFeatures(read,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
13	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  buffer,  offset,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(current.entry,  buffer,  offset,  length);	  ZipUtil.checkDeclaredFeatures(current.entry,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
14	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  offset,  read);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  offset,  read);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(current.entry,  offset,  read);	  ZipUtil.checkDeclaredFeatures(current.entry,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
15	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  offset,  length,  buffer.length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  offset,  length,  buffer.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(current.entry,  offset,  length,  buffer.length);	  ZipUtil.checkDeclaredFeatures(current.entry,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
16	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  offset,  buffer.length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  offset,  buffer.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(current.entry,  offset,  buffer.length);	  ZipUtil.checkDeclaredFeatures(current.entry,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
17	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(read,  current.entry,  offset,  length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(read,  current.entry,  offset,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(read,  current.entry,  offset,  length);	  ZipUtil.checkDeclaredFeatures(current.entry,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
18	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  read,  offset,  length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  read,  offset,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(current.entry,  read,  offset,  length);	  ZipUtil.checkDeclaredFeatures(current.entry,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
19	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(length,  current.entry,  offset);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(length,  current.entry,  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(length,  current.entry,  offset);	  ZipUtil.checkDeclaredFeatures(current.entry,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
20	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(array,  offset,  current.entry);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(array,  offset,  current.entry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(array,  offset,  current.entry);	  ZipUtil.checkRequestedFeatures(array,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
21	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(array,  current.entry,  offset);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(array,  current.entry,  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(array,  current.entry,  offset);	  ZipUtil.checkRequestedFeatures(array,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
22	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(array,  current.entry,  length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(array,  current.entry,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(array,  current.entry,  length);	  ZipUtil.checkRequestedFeatures(array,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
23	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(array,  buffer,  current.entry);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(array,  buffer,  current.entry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(array,  buffer,  current.entry);	  ZipUtil.checkRequestedFeatures(array,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
24	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  array);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  array);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current.entry,  array);	  ZipUtil.checkRequestedFeatures(array,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
25	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  offset  -  offset,  length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  offset  -  offset,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current.entry,  offset  -  offset,  length);	  ZipUtil.checkRequestedFeatures(current.entry,    offset    -    offset);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
26	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  buffer.length  -  offset);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  buffer.length  -  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current.entry,  buffer.length  -  offset);	  ZipUtil.checkRequestedFeatures(current.entry,    offset    -    offset);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
27	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(offset,  current.entry.length  -  offset);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(offset,  current.entry.length  -  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(offset,  current.entry.length  -  offset);	  ZipUtil.checkRequestedFeatures(current.entry,    offset    -    offset);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
28	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  offset  -  offset  +  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  offset  -  offset  +  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current.entry,  offset  -  offset  +  length);	  ZipUtil.checkRequestedFeatures(current.entry,    offset    -    offset);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
29	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  offset,  length  -  offset);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  offset,  length  -  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current.entry,  offset,  length  -  offset);	  ZipUtil.checkRequestedFeatures(current.entry,    offset    -    offset);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
30	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  remaining);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  remaining);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current.entry,  remaining);	  ZipUtil.checkRequestedFeatures(remainder,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
31	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  mainDesc);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  mainDesc);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current.entry,  mainDesc);	  ZipUtil.checkRequestedFeatures(remainder,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
32	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  this.fileName);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  this.fileName);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(current.entry,  this.fileName);	  ZipUtil.checkDeprecatedFeatures(this.entry);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
33	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  this.read);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  this.read);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(current.entry,  this.read);	  ZipUtil.checkDeprecatedFeatures(this.entry);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
34	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(this,  current.entry);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(this,  current.entry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(this,  current.entry);	  ZipUtil.checkDeprecatedFeatures(this.entry);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
35	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(false,  current.entry);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(false,  current.entry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(false,  current.entry);	  ZipUtil.checkDeclaredFeatures(current.entry,    false);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
36	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(this.entry,  false);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(this.entry,  false);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(this.entry,  false);	  ZipUtil.checkDeclaredFeatures(current.entry,    false);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
37	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(offset,  current.entry,  false);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(offset,  current.entry,  false);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(offset,  current.entry,  false);	  ZipUtil.checkDeclaredFeatures(current.entry,    false);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
38	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  false,  offset);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  false,  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(current.entry,  false,  offset);	  ZipUtil.checkDeclaredFeatures(current.entry,    false);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
39	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  false,  buffer.length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  false,  buffer.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(current.entry,  false,  buffer.length);	  ZipUtil.checkDeclaredFeatures(current.entry,    false);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
40	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  false,  true);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  false,  true);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(current.entry,  false,  true);	  ZipUtil.checkDeclaredFeatures(current.entry,    false);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
41	[BUG]  [BUGGY]  Inflater  inf  =  current.currentEntry.getInputStream();  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  current.currentEntry.getInputStream();  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  current.currentEntry.getInputStream();	  Inflater    inf    =    currentEntry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
42	[BUG]  [BUGGY]  Inflater  inf  =  currentEntry.getInputStream(offset);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  currentEntry.getInputStream(offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  currentEntry.getInputStream(offset);	  Inflater    inf    =    currentEntry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
43	[BUG]  [BUGGY]  Inflater  inf  =  current.entry.getOutputStream();  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  current.entry.getOutputStream();  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  current.entry.getOutputStream();	  Inflater    inf    =    currentEntry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
44	[BUG]  [BUGGY]  Inflater  inf  =  currentEntry.getInputStream(),  offset);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  currentEntry.getInputStream(),  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  currentEntry.getInputStream(),  offset);	  Inflater    inf    =    currentEntry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
45	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  offset,  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  offset,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(current.entry,  offset,  length);	  ZipUtil.checkDeprecatedFeatures(current.entry,    length);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
46	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  offset  +  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  offset  +  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(current.entry,  offset  +  length);	  ZipUtil.checkDeprecatedFeatures(current.entry,    length);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
47	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry!=  null  ||  current.entry.getMethod()  ==  ZipArchiveEntry.DEFLATED);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry!=  null  ||  current.entry.getMethod()  ==  ZipArchiveEntry.DEFLATED);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry!=  null  ||  current.entry.getMethod()  ==  ZipArchiveEntry.DEFLATED);	  ZipUtil.checkState(current.entry!=    null    &&    current.entry.getMethod()    ==    ZipArchiveEntry.DEFLATED);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
48	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry  ==  null  ||  current.entry.getMethod()  ==  ZipArchiveEntry.DEFLATED);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry  ==  null  ||  current.entry.getMethod()  ==  ZipArchiveEntry.DEFLATED);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry  ==  null  ||  current.entry.getMethod()  ==  ZipArchiveEntry.DEFLATED);	  ZipUtil.checkState(current.entry!=    null    &&    current.entry.getMethod()    ==    ZipArchiveEntry.DEFLATED);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
49	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry  ==  null  &&  current.entry.getMethod()  ==  ZipArchiveEntry.DEFLATED);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry  ==  null  &&  current.entry.getMethod()  ==  ZipArchiveEntry.DEFLATED);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry  ==  null  &&  current.entry.getMethod()  ==  ZipArchiveEntry.DEFLATED);	  ZipUtil.checkState(current.entry!=    null    &&    current.entry.getMethod()    ==    ZipArchiveEntry.DEFLATED);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
50	[BUG]  [BUGGY]  ZipUtil.checkState(this.entry!=  null  &&  current.entry.getMethod()  ==  ZipArchiveEntry.DEFLATED);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(this.entry!=  null  &&  current.entry.getMethod()  ==  ZipArchiveEntry.DEFLATED);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(this.entry!=  null  &&  current.entry.getMethod()  ==  ZipArchiveEntry.DEFLATED);	  ZipUtil.checkState(current.entry!=    null    &&    current.entry.getMethod()    ==    ZipArchiveEntry.DEFLATED);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
51	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(this.entry,  true);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(this.entry,  true);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(this.entry,  true);	  ZipUtil.checkDeclaredFeatures(current.entry,    true);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
52	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(offset,  current.entry,  true);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(offset,  current.entry,  true);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(offset,  current.entry,  true);	  ZipUtil.checkDeclaredFeatures(current.entry,    true);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
53	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(length,  true);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(length,  true);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(length,  true);	  ZipUtil.checkDeclaredFeatures(current.entry,    true);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
54	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(offset,  true);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(offset,  true);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(offset,  true);	  ZipUtil.checkDeclaredFeatures(current.entry,    true);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
55	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(read,  true);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(read,  true);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(read,  true);	  ZipUtil.checkDeclaredFeatures(current.entry,    true);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
56	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  buffer,  offset,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current.entry,  buffer,  offset,  length);	  ZipUtil.checkRequestedFeatures(current.entry,    buffer,    offset);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
57	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  buffer,  offset  +  length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  buffer,  offset  +  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current.entry,  buffer,  offset  +  length);	  ZipUtil.checkRequestedFeatures(current.entry,    buffer,    offset);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
58	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  offset,  buffer.length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  offset,  buffer.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current.entry,  offset,  buffer.length);	  ZipUtil.checkRequestedFeatures(current.entry,    buffer,    offset);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
59	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(offset,  current.entry,  buffer,  offset);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(offset,  current.entry,  buffer,  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(offset,  current.entry,  buffer,  offset);	  ZipUtil.checkRequestedFeatures(current.entry,    buffer,    offset);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
60	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(offset,  buffer,  current.entry);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(offset,  buffer,  current.entry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(offset,  buffer,  current.entry);	  ZipUtil.checkRequestedFeatures(current.entry,    buffer,    offset);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
61	[BUG]  [BUGGY]  byte[]  current  =  current.entry.getDataDescriptor();  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  byte[]  current  =  current.entry.getDataDescriptor();  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	byte[]  current  =  current.entry.getDataDescriptor();	  byte[]    current    =    current.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
62	[BUG]  [BUGGY]  byte[]  current  =  current.getEntryDataDescriptor();  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  byte[]  current  =  current.getEntryDataDescriptor();  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	byte[]  current  =  current.getEntryDataDescriptor();	  byte[]    current    =    current.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
63	[BUG]  [BUGGY]  byte[]  current  =  current.current.getDataDescriptor();  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  byte[]  current  =  current.current.getDataDescriptor();  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	byte[]  current  =  current.current.getDataDescriptor();	  byte[]    current    =    current.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
64	[BUG]  [BUGGY]  byte[]  current  =  current.getDataDescriptor(offset);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  byte[]  current  =  current.getDataDescriptor(offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	byte[]  current  =  current.getDataDescriptor(offset);	  byte[]    current    =    current.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
65	[BUG]  [BUGGY]  CurrentEntry  current  =  current.entry.getValue();  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  CurrentEntry  current  =  current.entry.getValue();  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	CurrentEntry  current  =  current.entry.getValue();	  CurrentEntry    current    =    currentEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
66	[BUG]  [BUGGY]  CurrentEntry  current  =  currentEntry.getKey();  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  CurrentEntry  current  =  currentEntry.getKey();  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	CurrentEntry  current  =  currentEntry.getKey();	  CurrentEntry    current    =    currentEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
67	[BUG]  [BUGGY]  CurrentEntry  current  =  currentEntry.getNext();  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  CurrentEntry  current  =  currentEntry.getNext();  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	CurrentEntry  current  =  currentEntry.getNext();	  CurrentEntry    current    =    currentEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
68	[BUG]  [BUGGY]  CurrentEntry  current  =  currentEntry.getValue(),  offset);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  CurrentEntry  current  =  currentEntry.getValue(),  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	CurrentEntry  current  =  currentEntry.getValue(),  offset);	  CurrentEntry    current    =    currentEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
69	[BUG]  [BUGGY]  CurrentEntry  current  =  currentEntry.getValue(),  offset  +  length;  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  CurrentEntry  current  =  currentEntry.getValue(),  offset  +  length;  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	CurrentEntry  current  =  currentEntry.getValue(),  offset  +  length;	  CurrentEntry    current    =    currentEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
70	[BUG]  [BUGGY]  CurrentEntry  current  =  currentEntry.getValue()  +  1;  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  CurrentEntry  current  =  currentEntry.getValue()  +  1;  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	CurrentEntry  current  =  currentEntry.getValue()  +  1;	  CurrentEntry    current    =    currentEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
71	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  read,  offset);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  read,  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(current.entry,  read,  offset);	  ZipUtil.checkDeprecatedFeatures(current.entry,    read);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
72	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  read,  buffer.length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  read,  buffer.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(current.entry,  read,  buffer.length);	  ZipUtil.checkDeprecatedFeatures(current.entry,    read);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
73	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(read,  current.entry);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(read,  current.entry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(read,  current.entry);	  ZipUtil.checkDeprecatedFeatures(current.entry,    read);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
74	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  read,  buffer);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  read,  buffer);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(current.entry,  read,  buffer);	  ZipUtil.checkDeprecatedFeatures(current.entry,    read);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
75	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  offset,  read);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  offset,  read);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(current.entry,  offset,  read);	  ZipUtil.checkDeprecatedFeatures(current.entry,    read);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
76	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  read,  current.length);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  read,  current.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(current.entry,  read,  current.length);	  ZipUtil.checkDeprecatedFeatures(current.entry,    read);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
77	[BUG]  [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  offset,  length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  offset,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedDescriptor(current.entry,  offset,  length);	  ZipUtil.checkRequestedDescriptor(current.entry,    offset);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
78	[BUG]  [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  offset  +  length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  offset  +  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedDescriptor(current.entry,  offset  +  length);	  ZipUtil.checkRequestedDescriptor(current.entry,    offset);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
79	[BUG]  [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  buffer,  offset);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  buffer,  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedDescriptor(current.entry,  buffer,  offset);	  ZipUtil.checkRequestedDescriptor(current.entry,    offset);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
80	[BUG]  [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  buffer.length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  buffer.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedDescriptor(current.entry,  buffer.length);	  ZipUtil.checkRequestedDescriptor(current.entry,    offset);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
81	[BUG]  [BUGGY]  int  currentSize  =  current.size()  -  1;  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  int  currentSize  =  current.size()  -  1;  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	int  currentSize  =  current.size()  -  1;	  int    currentSize    =    current.size();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
82	[BUG]  [BUGGY]  int  currentSize  =  current.size()  -  offset;  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  int  currentSize  =  current.size()  -  offset;  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	int  currentSize  =  current.size()  -  offset;	  int    currentSize    =    current.size();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
83	[BUG]  [BUGGY]  int  currentSize  =  current.size()  +  1;  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  int  currentSize  =  current.size()  +  1;  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	int  currentSize  =  current.size()  +  1;	  int    currentSize    =    current.size();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
84	[BUG]  [BUGGY]  int  currentSize  =  current.length;  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  int  currentSize  =  current.length;  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	int  currentSize  =  current.length;	  int    currentSize    =    current.size();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
85	[BUG]  [BUGGY]  int  currentSize  =  current.size()  -  2;  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  int  currentSize  =  current.size()  -  2;  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	int  currentSize  =  current.size()  -  2;	  int    currentSize    =    current.size();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
86	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(current.entry,  offset  +  length,  current.length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecated(current.entry,  offset  +  length,  current.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecated(current.entry,  offset  +  length,  current.length);	  ZipUtil.checkDeprecated(current.entry,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
87	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(current.entry,  buffer.length  +  offset);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecated(current.entry,  buffer.length  +  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecated(current.entry,  buffer.length  +  offset);	  ZipUtil.checkDeprecated(current.entry,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
88	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(current.entry,  offset  +  length,  buffer.length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecated(current.entry,  offset  +  length,  buffer.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecated(current.entry,  offset  +  length,  buffer.length);	  ZipUtil.checkDeprecated(current.entry,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
89	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(current.entry,  buffer.length  +  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecated(current.entry,  buffer.length  +  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecated(current.entry,  buffer.length  +  length);	  ZipUtil.checkDeprecated(current.entry,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
90	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(current.entry,  offset  +  offset,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecated(current.entry,  offset  +  offset,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecated(current.entry,  offset  +  offset,  length);	  ZipUtil.checkDeprecated(current.entry,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
91	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(current.entry,  offset  +  length,  current.fileNameLen);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecated(current.entry,  offset  +  length,  current.fileNameLen);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecated(current.entry,  offset  +  length,  current.fileNameLen);	  ZipUtil.checkDeprecated(current.entry,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
92	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(current.entry,  offset  +  length,  current.offset);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecated(current.entry,  offset  +  length,  current.offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecated(current.entry,  offset  +  length,  current.offset);	  ZipUtil.checkDeprecated(current.entry,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
93	[BUG]  [BUGGY]  Integer  current  =  current.getEntry(offset,  length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Integer  current  =  current.getEntry(offset,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Integer  current  =  current.getEntry(offset,  length);	  Integer    current    =    current.getEntry(offset);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
94	[BUG]  [BUGGY]  Integer  current  =  current.entry;  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Integer  current  =  current.entry;  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Integer  current  =  current.entry;	  Integer    current    =    current.getEntry(offset);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
95	[BUG]  [BUGGY]  Integer  current  =  current.getEntry(length);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Integer  current  =  current.getEntry(length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Integer  current  =  current.getEntry(length);	  Integer    current    =    current.getEntry(offset);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
96	[BUG]  [BUGGY]  Integer  current  =  entryEncoding.getEntry(offset);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Integer  current  =  entryEncoding.getEntry(offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Integer  current  =  entryEncoding.getEntry(offset);	  Integer    current    =    current.getEntry(offset);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
97	[BUG]  [BUGGY]  Integer  current  =  current.getEntry(offset  +  length);  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Integer  current  =  current.getEntry(offset  +  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Integer  current  =  current.getEntry(offset  +  length);	  Integer    current    =    current.getEntry(offset);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
98	[BUG]  [BUGGY]  Integer  current  =  entry.getEntry(offset);  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Integer  current  =  entry.getEntry(offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Integer  current  =  entry.getEntry(offset);	  Integer    current    =    current.getEntry(offset);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
99	[BUG]  [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  false);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  false);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptorFor(current.entry,  false);	  ZipUtil.checkDescriptorFor(current.entry,    true);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
100	[BUG]  [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  true,  offset);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  true,  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptorFor(current.entry,  true,  offset);	  ZipUtil.checkDescriptorFor(current.entry,    true);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
101	[BUG]  [BUGGY]  ZipUtil.checkDescriptorFor(offset,  current.entry,  true);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDescriptorFor(offset,  current.entry,  true);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptorFor(offset,  current.entry,  true);	  ZipUtil.checkDescriptorFor(current.entry,    true);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
102	[BUG]  [BUGGY]  ZipUtil.checkDescriptorFor(this.entry,  true);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDescriptorFor(this.entry,  true);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptorFor(this.entry,  true);	  ZipUtil.checkDescriptorFor(current.entry,    true);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
103	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  buffer,  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  buffer,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(current.entry,  buffer,  length);	  ZipUtil.checkDeprecatedFeatures(current.entry,    ze);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
104	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  ze,  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  ze,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(current.entry,  ze,  length);	  ZipUtil.checkDeprecatedFeatures(current.entry,    ze);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
105	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  ze,  offset);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  ze,  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(current.entry,  ze,  offset);	  ZipUtil.checkDeprecatedFeatures(current.entry,    ze);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
106	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  fileName);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  fileName);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(current.entry,  fileName);	  ZipUtil.checkDeprecatedFeatures(current.entry,    ze);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
107	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(offset,  current.entry.length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(offset,  current.entry.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(offset,  current.entry.length);	  ZipUtil.checkRequestedFeatures(current.entry,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
108	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  buffer.length,  offset);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  buffer.length,  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current.entry,  buffer.length,  offset);	  ZipUtil.checkRequestedFeatures(current.entry,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
109	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(buffer,  current.entry.length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(buffer,  current.entry.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(buffer,  current.entry.length);	  ZipUtil.checkRequestedFeatures(current.entry,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
110	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(read,  current.entry,  buffer,  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(read,  current.entry,  buffer,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(read,  current.entry,  buffer,  length);	  ZipUtil.checkRequestedFeatures(current.entry,    buffer,    length);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
111	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(offset,  current.entry,  buffer,  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(offset,  current.entry,  buffer,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(offset,  current.entry,  buffer,  length);	  ZipUtil.checkRequestedFeatures(current.entry,    buffer,    length);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
112	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  read,  buffer,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  read,  buffer,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current.entry,  read,  buffer,  length);	  ZipUtil.checkRequestedFeatures(current.entry,    buffer,    length);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
113	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(offset,  current.entry,  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(offset,  current.entry,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(offset,  current.entry,  length);	  ZipUtil.checkRequestedFeatures(offset,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
114	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry!=  offset);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry!=  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry!=  offset);	  ZipUtil.checkRequestedFeatures(offset,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
115	[BUG]  [BUGGY]  ZipUtil.checkAndFixRequestedDescriptor(current.entry,  offset);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkAndFixRequestedDescriptor(current.entry,  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkAndFixRequestedDescriptor(current.entry,  offset);	  ZipUtil.checkAndFixRequestedDescriptor(current.entry);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
116	[BUG]  [BUGGY]  ZipUtil.checkAndFixRequestedDescriptor(current.entry,  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkAndFixRequestedDescriptor(current.entry,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkAndFixRequestedDescriptor(current.entry,  length);	  ZipUtil.checkAndFixRequestedDescriptor(current.entry);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
117	[BUG]  [BUGGY]  ZipUtil.checkAndFixRequestedDescriptor(current.entry,  read);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkAndFixRequestedDescriptor(current.entry,  read);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkAndFixRequestedDescriptor(current.entry,  read);	  ZipUtil.checkAndFixRequestedDescriptor(current.entry);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
118	[BUG]  [BUGGY]  ZipUtil.checkAndFixRequestedDescriptor(current.entry,  offset  +  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkAndFixRequestedDescriptor(current.entry,  offset  +  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkAndFixRequestedDescriptor(current.entry,  offset  +  length);	  ZipUtil.checkAndFixRequestedDescriptor(current.entry);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
119	[BUG]  [BUGGY]  ZipUtil.checkAndFixRequestedDescriptor(current.entry,  hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkAndFixRequestedDescriptor(current.entry,  hasDataDescriptor);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkAndFixRequestedDescriptor(current.entry,  hasDataDescriptor);	  ZipUtil.checkAndFixRequestedDescriptor(current.entry);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
120	[BUG]  [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  read,  offset);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  read,  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptorFor(current.entry,  read,  offset);	  ZipUtil.checkDescriptorFor(current.entry,    read);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
121	[BUG]  [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  read,  buffer.length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  read,  buffer.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptorFor(current.entry,  read,  buffer.length);	  ZipUtil.checkDescriptorFor(current.entry,    read);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
122	[BUG]  [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  read,  buffer);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  read,  buffer);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptorFor(current.entry,  read,  buffer);	  ZipUtil.checkDescriptorFor(current.entry,    read);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
123	[BUG]  [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  read,  current.length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  read,  current.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptorFor(current.entry,  read,  current.length);	  ZipUtil.checkDescriptorFor(current.entry,    read);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
124	[BUG]  [BUGGY]  ZipUtil.checkDescriptorFor(read,  current.entry);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDescriptorFor(read,  current.entry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptorFor(read,  current.entry);	  ZipUtil.checkDescriptorFor(current.entry,    read);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
125	[BUG]  [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  read,  off);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  read,  off);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptorFor(current.entry,  read,  off);	  ZipUtil.checkDescriptorFor(current.entry,    read);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
126	[BUG]  [BUGGY]  Inflater  inf  =  current.getInputStream(offset);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  current.getInputStream(offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  current.getInputStream(offset);	  Inflater    inf    =    current.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
127	[BUG]  [BUGGY]  Inflater  inf  =  current.getInputStream(),  offset);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  current.getInputStream(),  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  current.getInputStream(),  offset);	  Inflater    inf    =    current.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
128	[BUG]  [BUGGY]  Inflater  inf  =  current.getInputStream(),  offset  +  length;  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  current.getInputStream(),  offset  +  length;  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  current.getInputStream(),  offset  +  length;	  Inflater    inf    =    current.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
129	[BUG]  [BUGGY]  Inflater  inf  =  current.getInputStream(),  offset;  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  current.getInputStream(),  offset;  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  current.getInputStream(),  offset;	  Inflater    inf    =    current.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
130	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(current.entry,  read,  offset);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecated(current.entry,  read,  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecated(current.entry,  read,  offset);	  ZipUtil.checkDeprecated(current.entry,    read);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
131	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(current.entry,  read,  buffer.length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecated(current.entry,  read,  buffer.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecated(current.entry,  read,  buffer.length);	  ZipUtil.checkDeprecated(current.entry,    read);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
132	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(current.entry,  offset,  read);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecated(current.entry,  offset,  read);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecated(current.entry,  offset,  read);	  ZipUtil.checkDeprecated(current.entry,    read);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
133	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(current.entry,  read,  buffer);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecated(current.entry,  read,  buffer);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecated(current.entry,  read,  buffer);	  ZipUtil.checkDeprecated(current.entry,    read);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
134	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(current.entry,  read,  current.length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecated(current.entry,  read,  current.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecated(current.entry,  read,  current.length);	  ZipUtil.checkDeprecated(current.entry,    read);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
135	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(current.entry,  offset  +  read);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecated(current.entry,  offset  +  read);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecated(current.entry,  offset  +  read);	  ZipUtil.checkDeprecated(current.entry,    read);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
136	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry!=  null  ||  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFAULT));  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry!=  null  ||  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFAULT));  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry!=  null  ||  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFAULT));	  ZipUtil.checkState(current.entry!=    null    &&    current.entry.getMethod()    ==    ZipArchiveOutputStream.DEFAULT));    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
137	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry  ==  null  ||  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFAULT));  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry  ==  null  ||  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFAULT));  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry  ==  null  ||  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFAULT));	  ZipUtil.checkState(current.entry!=    null    &&    current.entry.getMethod()    ==    ZipArchiveOutputStream.DEFAULT));    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
138	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry  ==  null  &&  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFAULT));  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry  ==  null  &&  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFAULT));  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry  ==  null  &&  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFAULT));	  ZipUtil.checkState(current.entry!=    null    &&    current.entry.getMethod()    ==    ZipArchiveOutputStream.DEFAULT));    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
139	[BUG]  [BUGGY]  ZipUtil.checkState(this.entry!=  null  &&  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFAULT));  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(this.entry!=  null  &&  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFAULT));  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(this.entry!=  null  &&  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFAULT));	  ZipUtil.checkState(current.entry!=    null    &&    current.entry.getMethod()    ==    ZipArchiveOutputStream.DEFAULT));    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
140	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry  >=  null  ||  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFAULT));  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry  >=  null  ||  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFAULT));  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry  >=  null  ||  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFAULT));	  ZipUtil.checkState(current.entry!=    null    &&    current.entry.getMethod()    ==    ZipArchiveOutputStream.DEFAULT));    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
141	[BUG]  [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  fileNameLen);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  fileNameLen);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptorFor(current.entry,  fileNameLen);	  ZipUtil.checkDescriptorFor(current.entry,    length);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
142	[BUG]  [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  buffer,  length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  buffer,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptorFor(current.entry,  buffer,  length);	  ZipUtil.checkDescriptorFor(current.entry,    length);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
143	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  buffer);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  buffer);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(current.entry,  buffer);	  ZipUtil.checkDeclaredFeatures(current.entry,    ze);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
144	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  buffer,  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  buffer,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(current.entry,  buffer,  length);	  ZipUtil.checkDeclaredFeatures(current.entry,    ze);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
145	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  ze,  offset);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  ze,  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(current.entry,  ze,  offset);	  ZipUtil.checkDeclaredFeatures(current.entry,    ze);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
146	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(this.entry,  ze);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(this.entry,  ze);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(this.entry,  ze);	  ZipUtil.checkDeclaredFeatures(current.entry,    ze);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
147	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  currToken);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  currToken);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current.entry,  currToken);	  ZipUtil.checkRequestedFeatures(currToken,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
148	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(currToken,  buffer,  current.entry);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(currToken,  buffer,  current.entry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(currToken,  buffer,  current.entry);	  ZipUtil.checkRequestedFeatures(currToken,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
149	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(currToken,  current.entry);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(currToken,  current.entry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(currToken,  current.entry);	  ZipUtil.checkRequestedFeatures(currToken,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
150	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(currToken,  current.entry,  length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(currToken,  current.entry,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(currToken,  current.entry,  length);	  ZipUtil.checkRequestedFeatures(currToken,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
151	[BUG]  [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  hasUTF8);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  hasUTF8);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedDescriptor(current.entry,  hasUTF8);	  ZipUtil.checkRequestedDescriptor(current.entry,    hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
152	[BUG]  [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  dataDescriptor);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  dataDescriptor);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedDescriptor(current.entry,  dataDescriptor);	  ZipUtil.checkRequestedDescriptor(current.entry,    hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
153	[BUG]  [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  isUTF8Flag);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  isUTF8Flag);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedDescriptor(current.entry,  isUTF8Flag);	  ZipUtil.checkRequestedDescriptor(current.entry,    hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
154	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(current.entry,  offset,  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecated(current.entry,  offset,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecated(current.entry,  offset,  length);	  ZipUtil.checkDeprecated(current.entry,    length);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
155	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(current.entry,  off,  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecated(current.entry,  off,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecated(current.entry,  off,  length);	  ZipUtil.checkDeprecated(current.entry,    length);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
156	[BUG]  [BUGGY]  Inflater  inf  =  current.entry.getInputStream(offset);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  current.entry.getInputStream(offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  current.entry.getInputStream(offset);	  Inflater    inf    =    current.entry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
157	[BUG]  [BUGGY]  Inflater  inf  =  current.entry.getInputStream(),  offset);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  current.entry.getInputStream(),  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  current.entry.getInputStream(),  offset);	  Inflater    inf    =    current.entry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
158	[BUG]  [BUGGY]  Inflater  inf  =  current.entry.getInputStream(),  offset  +  length;  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  current.entry.getInputStream(),  offset  +  length;  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  current.entry.getInputStream(),  offset  +  length;	  Inflater    inf    =    current.entry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
159	[BUG]  [BUGGY]  Inflater  inf  =  current.entry.getInputStream(),  offset;  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  current.entry.getInputStream(),  offset;  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  current.entry.getInputStream(),  offset;	  Inflater    inf    =    current.entry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
160	[BUG]  [BUGGY]  Inflater  inf  =  current.entry.getFileInputStream();  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  current.entry.getFileInputStream();  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  current.entry.getFileInputStream();	  Inflater    inf    =    current.entry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
161	[BUG]  [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  buffer.length  +  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  buffer.length  +  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptorFor(current.entry,  buffer.length  +  length);	  ZipUtil.checkDescriptorFor(current.entry,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
162	[BUG]  [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  buffer.length  +  offset);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  buffer.length  +  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptorFor(current.entry,  buffer.length  +  offset);	  ZipUtil.checkDescriptorFor(current.entry,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
163	[BUG]  [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  offset  +  length,  current.length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  offset  +  length,  current.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptorFor(current.entry,  offset  +  length,  current.length);	  ZipUtil.checkDescriptorFor(current.entry,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
164	[BUG]  [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  offset  +  length,  buffer.length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  offset  +  length,  buffer.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptorFor(current.entry,  offset  +  length,  buffer.length);	  ZipUtil.checkDescriptorFor(current.entry,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
165	[BUG]  [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  offset  +  offset,  length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  offset  +  offset,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptorFor(current.entry,  offset  +  offset,  length);	  ZipUtil.checkDescriptorFor(current.entry,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
166	[BUG]  [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  buffer,  offset  +  length);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  buffer,  offset  +  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptorFor(current.entry,  buffer,  offset  +  length);	  ZipUtil.checkDescriptorFor(current.entry,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
167	[BUG]  [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  offset  +  length,  current.fileNameLen);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  offset  +  length,  current.fileNameLen);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptorFor(current.entry,  offset  +  length,  current.fileNameLen);	  ZipUtil.checkDescriptorFor(current.entry,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
168	[BUG]  [BUGGY]  int  currentLen  =  current.read(buffer,  offset,  length,  buffer.length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  int  currentLen  =  current.read(buffer,  offset,  length,  buffer.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	int  currentLen  =  current.read(buffer,  offset,  length,  buffer.length);	  int    currentLen    =    current.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
169	[BUG]  [BUGGY]  int  currentLen  =  current.read(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  int  currentLen  =  current.read(buffer,  offset,  length  -  1);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	int  currentLen  =  current.read(buffer,  offset,  length  -  1);	  int    currentLen    =    current.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
170	[BUG]  [BUGGY]  int  currentLen  =  current.read(buffer,  offset,  length,  CFH_LEN);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  int  currentLen  =  current.read(buffer,  offset,  length,  CFH_LEN);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	int  currentLen  =  current.read(buffer,  offset,  length,  CFH_LEN);	  int    currentLen    =    current.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
171	[BUG]  [BUGGY]  int  currentLen  =  current.read(buffer,  offset,  length,  fileNameLen);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  int  currentLen  =  current.read(buffer,  offset,  length,  fileNameLen);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	int  currentLen  =  current.read(buffer,  offset,  length,  fileNameLen);	  int    currentLen    =    current.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
172	[BUG]  [BUGGY]  int  currentLen  =  current.read(buffer,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  int  currentLen  =  current.read(buffer,  offset,  length  +  1);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	int  currentLen  =  current.read(buffer,  offset,  length  +  1);	  int    currentLen    =    current.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
173	[BUG]  [BUGGY]  int  currentLen  =  current.read(buffer,  offset,  length  -  offset);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  int  currentLen  =  current.read(buffer,  offset,  length  -  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	int  currentLen  =  current.read(buffer,  offset,  length  -  offset);	  int    currentLen    =    current.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
174	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry!=  null  ||  current.entry.getMethod()  ==  ZipArchiveInputStream.DEFAULT);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry!=  null  ||  current.entry.getMethod()  ==  ZipArchiveInputStream.DEFAULT);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry!=  null  ||  current.entry.getMethod()  ==  ZipArchiveInputStream.DEFAULT);	  ZipUtil.checkState(current.entry!=    null    &&    current.entry.getMethod()    ==    ZipArchiveInputStream.DEFAULT);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
175	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry  ==  null  ||  current.entry.getMethod()  ==  ZipArchiveInputStream.DEFAULT);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry  ==  null  ||  current.entry.getMethod()  ==  ZipArchiveInputStream.DEFAULT);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry  ==  null  ||  current.entry.getMethod()  ==  ZipArchiveInputStream.DEFAULT);	  ZipUtil.checkState(current.entry!=    null    &&    current.entry.getMethod()    ==    ZipArchiveInputStream.DEFAULT);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
176	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry  ==  null  &&  current.entry.getMethod()  ==  ZipArchiveInputStream.DEFAULT);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry  ==  null  &&  current.entry.getMethod()  ==  ZipArchiveInputStream.DEFAULT);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry  ==  null  &&  current.entry.getMethod()  ==  ZipArchiveInputStream.DEFAULT);	  ZipUtil.checkState(current.entry!=    null    &&    current.entry.getMethod()    ==    ZipArchiveInputStream.DEFAULT);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
177	[BUG]  [BUGGY]  ZipUtil.checkState(this.entry!=  null  &&  current.entry.getMethod()  ==  ZipArchiveInputStream.DEFAULT);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(this.entry!=  null  &&  current.entry.getMethod()  ==  ZipArchiveInputStream.DEFAULT);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(this.entry!=  null  &&  current.entry.getMethod()  ==  ZipArchiveInputStream.DEFAULT);	  ZipUtil.checkState(current.entry!=    null    &&    current.entry.getMethod()    ==    ZipArchiveInputStream.DEFAULT);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
178	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry  >=  null  ||  current.entry.getMethod()  ==  ZipArchiveInputStream.DEFAULT);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry  >=  null  ||  current.entry.getMethod()  ==  ZipArchiveInputStream.DEFAULT);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry  >=  null  ||  current.entry.getMethod()  ==  ZipArchiveInputStream.DEFAULT);	  ZipUtil.checkState(current.entry!=    null    &&    current.entry.getMethod()    ==    ZipArchiveInputStream.DEFAULT);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
179	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(current.entry,  buffer,  offset);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecated(current.entry,  buffer,  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecated(current.entry,  buffer,  offset);	  ZipUtil.checkDeprecated(current.entry,    offset);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
180	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(current.entry,  offset,  buffer.length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecated(current.entry,  offset,  buffer.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecated(current.entry,  offset,  buffer.length);	  ZipUtil.checkDeprecated(current.entry,    offset);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
181	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(current.entry,  offset  -  offset);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecated(current.entry,  offset  -  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecated(current.entry,  offset  -  offset);	  ZipUtil.checkDeprecated(current.entry,    offset);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
182	[BUG]  [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  true);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  true);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedDescriptor(current.entry,  true);	  ZipUtil.checkRequestedDescriptor(current.entry,    false);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
183	[BUG]  [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  false,  offset);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  false,  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedDescriptor(current.entry,  false,  offset);	  ZipUtil.checkRequestedDescriptor(current.entry,    false);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
184	[BUG]  [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  false,  true);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  false,  true);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedDescriptor(current.entry,  false,  true);	  ZipUtil.checkRequestedDescriptor(current.entry,    false);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
185	[BUG]  [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  false,  buffer.length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  false,  buffer.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedDescriptor(current.entry,  false,  buffer.length);	  ZipUtil.checkRequestedDescriptor(current.entry,    false);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
186	[BUG]  [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  false,  hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  false,  hasDataDescriptor);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedDescriptor(current.entry,  false,  hasDataDescriptor);	  ZipUtil.checkRequestedDescriptor(current.entry,    false);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
187	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  hasUTF8Flag);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  hasUTF8Flag);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(current.entry,  hasUTF8Flag);	  ZipUtil.checkDeprecatedFeatures(current.entry,    hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
188	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  hasUTF8Flag,  hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  hasUTF8Flag,  hasDataDescriptor);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(current.entry,  hasUTF8Flag,  hasDataDescriptor);	  ZipUtil.checkDeprecatedFeatures(current.entry,    hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
189	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  buffer,  hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  buffer,  hasDataDescriptor);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(current.entry,  buffer,  hasDataDescriptor);	  ZipUtil.checkDeprecatedFeatures(current.entry,    hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
190	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  hasUTF8);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  hasUTF8);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(current.entry,  hasUTF8);	  ZipUtil.checkDeprecatedFeatures(current.entry,    hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
191	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  fileName,  hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  fileName,  hasDataDescriptor);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(current.entry,  fileName,  hasDataDescriptor);	  ZipUtil.checkDeprecatedFeatures(current.entry,    hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
192	[BUG]  [BUGGY]  current.entry  =  entryEncoding.decode(buffer,  offset  +  length,  buffer.length);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  current.entry  =  entryEncoding.decode(buffer,  offset  +  length,  buffer.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	current.entry  =  entryEncoding.decode(buffer,  offset  +  length,  buffer.length);	  current.entry    =    entryEncoding.decode(buffer,    offset    +    length,    current.length);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
193	[BUG]  [BUGGY]  current.entry  =  entryEncoding.decode(buffer,  offset  +  length,  current.length  -  offset);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  current.entry  =  entryEncoding.decode(buffer,  offset  +  length,  current.length  -  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	current.entry  =  entryEncoding.decode(buffer,  offset  +  length,  current.length  -  offset);	  current.entry    =    entryEncoding.decode(buffer,    offset    +    length,    current.length);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
194	[BUG]  [BUGGY]  current.entry  =  zipEncoding.decode(buffer,  offset  +  length,  current.length);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  current.entry  =  zipEncoding.decode(buffer,  offset  +  length,  current.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	current.entry  =  zipEncoding.decode(buffer,  offset  +  length,  current.length);	  current.entry    =    entryEncoding.decode(buffer,    offset    +    length,    current.length);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
195	[BUG]  [BUGGY]  current.entry  =  current.decode(buffer,  offset  +  length,  current.length);  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  current.entry  =  current.decode(buffer,  offset  +  length,  current.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	current.entry  =  current.decode(buffer,  offset  +  length,  current.length);	  current.entry    =    entryEncoding.decode(buffer,    offset    +    length,    current.length);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
196	[BUG]  [BUGGY]  current.entry  =  entryEncoding.decode(buffer,  offset  +  1,  current.length);  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  current.entry  =  entryEncoding.decode(buffer,  offset  +  1,  current.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	current.entry  =  entryEncoding.decode(buffer,  offset  +  1,  current.length);	  current.entry    =    entryEncoding.decode(buffer,    offset    +    length,    current.length);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
197	[BUG]  [BUGGY]  current.entry  =  entryEncoding.decode(buffer,  offset  +  length,  current.length  -  1);  [CE]  illegal  start  of  type  [FE]                                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  current.entry  =  entryEncoding.decode(buffer,  offset  +  length,  current.length  -  1);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	current.entry  =  entryEncoding.decode(buffer,  offset  +  length,  current.length  -  1);	  current.entry    =    entryEncoding.decode(buffer,    offset    +    length,    current.length);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
198	[BUG]  [BUGGY]  current.entry  =  zipEncoding.decode(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  current.entry  =  zipEncoding.decode(buffer,  offset,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	current.entry  =  zipEncoding.decode(buffer,  offset,  length);	  current.entry    =    entryEncoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
199	[BUG]  [BUGGY]  current.entry  =  entryEncoding.decode(buffer,  offset,  length,  buffer.length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  current.entry  =  entryEncoding.decode(buffer,  offset,  length,  buffer.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	current.entry  =  entryEncoding.decode(buffer,  offset,  length,  buffer.length);	  current.entry    =    entryEncoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
200	[BUG]  [BUGGY]  current.entry  =  entryEncoding.decode(buffer,  offset,  read);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  current.entry  =  entryEncoding.decode(buffer,  offset,  read);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	current.entry  =  entryEncoding.decode(buffer,  offset,  read);	  current.entry    =    entryEncoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
201	[BUG]  [BUGGY]  current.entry  =  entryEncoding.decode(buffer,  offset,  length,  current.length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  current.entry  =  entryEncoding.decode(buffer,  offset,  length,  current.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	current.entry  =  entryEncoding.decode(buffer,  offset,  length,  current.length);	  current.entry    =    entryEncoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
202	[BUG]  [BUGGY]  current.entry  =  entryEncoding.decode(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  current.entry  =  entryEncoding.decode(buffer,  offset,  length  -  1);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	current.entry  =  entryEncoding.decode(buffer,  offset,  length  -  1);	  current.entry    =    entryEncoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
203	[BUG]  [BUGGY]  current.entry  =  entryEncoding.decode(buffer,  offset,  length,  current.read);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  current.entry  =  entryEncoding.decode(buffer,  offset,  length,  current.read);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	current.entry  =  entryEncoding.decode(buffer,  offset,  length,  current.read);	  current.entry    =    entryEncoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
204	[BUG]  [BUGGY]  current.entry  =  entryEncoding.decode(buffer,  offset,  length,  current.size);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  current.entry  =  entryEncoding.decode(buffer,  offset,  length,  current.size);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	current.entry  =  entryEncoding.decode(buffer,  offset,  length,  current.size);	  current.entry    =    entryEncoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
205	[BUG]  [BUGGY]  Inflater  inf  =  current.entryEncoding.getInputStream();  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  current.entryEncoding.getInputStream();  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  current.entryEncoding.getInputStream();	  Inflater    inf    =    entryEncoding.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
206	[BUG]  [BUGGY]  Inflater  inf  =  current.encoding.getInputStream();  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  current.encoding.getInputStream();  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  current.encoding.getInputStream();	  Inflater    inf    =    entryEncoding.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
207	[BUG]  [BUGGY]  Inflater  inf  =  current.zipEncoding.getInputStream();  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  current.zipEncoding.getInputStream();  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  current.zipEncoding.getInputStream();	  Inflater    inf    =    entryEncoding.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
208	[BUG]  [BUGGY]  Inflater  inf  =  current.getEntryEncoding();  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  current.getEntryEncoding();  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  current.getEntryEncoding();	  Inflater    inf    =    entryEncoding.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
209	[BUG]  [BUGGY]  Inflater  inf  =  current.in.read();  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  current.in.read();  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  current.in.read();	  Inflater    inf    =    entryEncoding.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
210	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(this.entry,  true);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(this.entry,  true);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(this.entry,  true);	  ZipUtil.checkDeprecatedFeatures(current.entry,    true);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
211	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(false,  current.entry);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(false,  current.entry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(false,  current.entry);	  ZipUtil.checkDeprecatedFeatures(current.entry,    true);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
212	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(offset,  current.entry,  true);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(offset,  current.entry,  true);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(offset,  current.entry,  true);	  ZipUtil.checkDeprecatedFeatures(current.entry,    true);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
213	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(null,  current.entry,  true);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(null,  current.entry,  true);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(null,  current.entry,  true);	  ZipUtil.checkDeprecatedFeatures(current.entry,    true);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
214	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(this.current.entry,  true);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(this.current.entry,  true);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(this.current.entry,  true);	  ZipUtil.checkDeprecatedFeatures(current.entry,    true);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
215	[BUG]  [BUGGY]  ZipUtil.checkAndFixDeprecated(current.entry,  offset);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkAndFixDeprecated(current.entry,  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkAndFixDeprecated(current.entry,  offset);	  ZipUtil.checkAndFixDeprecated(current.entry);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
216	[BUG]  [BUGGY]  ZipUtil.checkAndFixDeprecated(current.entry,  offset  +  length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkAndFixDeprecated(current.entry,  offset  +  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkAndFixDeprecated(current.entry,  offset  +  length);	  ZipUtil.checkAndFixDeprecated(current.entry);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
217	[BUG]  [BUGGY]  ZipUtil.checkAndFixDeprecated(current.entry,  off);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkAndFixDeprecated(current.entry,  off);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkAndFixDeprecated(current.entry,  off);	  ZipUtil.checkAndFixDeprecated(current.entry);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
218	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry  ==  null,  offset,  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry  ==  null,  offset,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry  ==  null,  offset,  length);	  ZipUtil.checkState(current.entry    ==    null,    offset);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
219	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry  ==  null,  offset  +  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry  ==  null,  offset  +  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry  ==  null,  offset  +  length);	  ZipUtil.checkState(current.entry    ==    null,    offset);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
220	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry!=  null,  offset,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry!=  null,  offset,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry!=  null,  offset,  length);	  ZipUtil.checkState(current.entry    ==    null,    offset);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
221	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry!=  null,  offset  +  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry!=  null,  offset  +  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry!=  null,  offset  +  length);	  ZipUtil.checkState(current.entry    ==    null,    offset);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
222	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry  ==  null,  offset  +  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry  ==  null,  offset  +  1);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry  ==  null,  offset  +  1);	  ZipUtil.checkState(current.entry    ==    null,    offset);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
223	[BUG]  [BUGGY]  InputStream  in  =  current.getInputStream();  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  InputStream  in  =  current.getInputStream();  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	InputStream  in  =  current.getInputStream();	  Inflater    inf    =    current.getInputStream();    if(inf!=    null)    {    for(int    i    =    0,    length    =    inf.length;    i    <    length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
224	[BUG]  [BUGGY]  InputStream  in  =  current.getInputStream();  if(in!=  null)  {  for(int  i  =  0,  length  =  inf.length;  i  <  length;  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  InputStream  in  =  current.getInputStream();  if(in!=  null)  {  for(int  i  =  0,  length  =  inf.length;  i  <  length;  ++i)  {  inputStream.close();  }  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	InputStream  in  =  current.getInputStream();  if(in!=  null)  {  for(int  i  =  0,  length  =  inf.length;  i  <  length;  ++i)  {  inputStream.close();  }	  Inflater    inf    =    current.getInputStream();    if(inf!=    null)    {    for(int    i    =    0,    length    =    inf.length;    i    <    length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
225	[BUG]  [BUGGY]  InputStream  inf  =  current.getInputStream();  if(inf!=  null)  {  for(int  i  =  0,  length  =  inf.length;  i  <  length;  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  InputStream  inf  =  current.getInputStream();  if(inf!=  null)  {  for(int  i  =  0,  length  =  inf.length;  i  <  length;  ++i)  {  inputStream.close();  }  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	InputStream  inf  =  current.getInputStream();  if(inf!=  null)  {  for(int  i  =  0,  length  =  inf.length;  i  <  length;  ++i)  {  inputStream.close();  }	  Inflater    inf    =    current.getInputStream();    if(inf!=    null)    {    for(int    i    =    0,    length    =    inf.length;    i    <    length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
226	[BUG]  [BUGGY]  InputStream  in  =  currentEntry.getInputStream();  if(in!=  null)  {  for(int  i  =  0,  length  =  inf.length;  i  <  length;  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  InputStream  in  =  currentEntry.getInputStream();  if(in!=  null)  {  for(int  i  =  0,  length  =  inf.length;  i  <  length;  ++i)  {  inputStream.close();  }  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	InputStream  in  =  currentEntry.getInputStream();  if(in!=  null)  {  for(int  i  =  0,  length  =  inf.length;  i  <  length;  ++i)  {  inputStream.close();  }	  Inflater    inf    =    current.getInputStream();    if(inf!=    null)    {    for(int    i    =    0,    length    =    inf.length;    i    <    length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
227	[BUG]  [BUGGY]  InputStream  in  =  current.getInputStream();  if(in  ==  null)  {  for(int  i  =  0,  length  =  inf.length;  i  <  length;  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  InputStream  in  =  current.getInputStream();  if(in  ==  null)  {  for(int  i  =  0,  length  =  inf.length;  i  <  length;  ++i)  {  inputStream.close();  }  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	InputStream  in  =  current.getInputStream();  if(in  ==  null)  {  for(int  i  =  0,  length  =  inf.length;  i  <  length;  ++i)  {  inputStream.close();  }	  Inflater    inf    =    current.getInputStream();    if(inf!=    null)    {    for(int    i    =    0,    length    =    inf.length;    i    <    length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
228	[BUG]  [BUGGY]  InputStream  inputStream  =  current.getInputStream();  if(inputStream!=  null)  {  for(int  i  =  0,  length  =  inf.length;  i  <  length;  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                                            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  InputStream  inputStream  =  current.getInputStream();  if(inputStream!=  null)  {  for(int  i  =  0,  length  =  inf.length;  i  <  length;  ++i)  {  inputStream.close();  }  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	InputStream  inputStream  =  current.getInputStream();  if(inputStream!=  null)  {  for(int  i  =  0,  length  =  inf.length;  i  <  length;  ++i)  {  inputStream.close();  }	  Inflater    inf    =    current.getInputStream();    if(inf!=    null)    {    for(int    i    =    0,    length    =    inf.length;    i    <    length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
229	[BUG]  [BUGGY]  ZipUtil.checkDescriptor(current.entry,  offset);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDescriptor(current.entry,  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptor(current.entry,  offset);	  ZipUtil.checkDescriptor(current.entry);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
230	[BUG]  [BUGGY]  ZipUtil.checkDescriptor(current.entry,  read);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDescriptor(current.entry,  read);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptor(current.entry,  read);	  ZipUtil.checkDescriptor(current.entry);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
231	[BUG]  [BUGGY]  ZipUtil.checkDescriptor(current.entry,  hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDescriptor(current.entry,  hasDataDescriptor);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptor(current.entry,  hasDataDescriptor);	  ZipUtil.checkDescriptor(current.entry);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
232	[BUG]  [BUGGY]  ZipUtil.checkDescriptor(current.entry,  length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDescriptor(current.entry,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptor(current.entry,  length);	  ZipUtil.checkDescriptor(current.entry);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
233	[BUG]  [BUGGY]  ZipUtil.checkDescriptor(current.entry,  buffer.length);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDescriptor(current.entry,  buffer.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptor(current.entry,  buffer.length);	  ZipUtil.checkDescriptor(current.entry);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
234	[BUG]  [BUGGY]  ZipUtil.checkDescriptor(current.entry,  true);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDescriptor(current.entry,  true);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptor(current.entry,  true);	  ZipUtil.checkDescriptor(current.entry);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
235	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  offset  +  length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  offset  +  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(current.entry,  offset  +  length);	  ZipUtil.checkDeclaredFeatures(current.entry,    length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
236	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(length,  current.entry);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(length,  current.entry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(length,  current.entry);	  ZipUtil.checkDeprecatedFeatures(offset,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
237	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(this.entry,  offset);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(this.entry,  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(this.entry,  offset);	  ZipUtil.checkDeprecatedFeatures(offset,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
238	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(offset,  current.entry,  length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(offset,  current.entry,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(offset,  current.entry,  length);	  ZipUtil.checkDeprecatedFeatures(offset,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
239	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  offset,  buffer.length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  offset,  buffer.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(current.entry,  offset,  buffer.length);	  ZipUtil.checkDeprecatedFeatures(current.entry,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
240	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  buffer,  offset);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  buffer,  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(current.entry,  buffer,  offset);	  ZipUtil.checkDeprecatedFeatures(current.entry,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
241	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  buffer.length,  offset);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  buffer.length,  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(current.entry,  buffer.length,  offset);	  ZipUtil.checkDeprecatedFeatures(current.entry,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
242	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  length,  buffer.length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  length,  buffer.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(current.entry,  length,  buffer.length);	  ZipUtil.checkDeprecatedFeatures(current.entry,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
243	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(offset,  current.entry.length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(offset,  current.entry.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(offset,  current.entry.length);	  ZipUtil.checkDeprecatedFeatures(current.entry,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
244	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(declaredFeatures,  current.entry);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(declaredFeatures,  current.entry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(declaredFeatures,  current.entry);	  ZipUtil.checkDeclaredFeatures(length,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
245	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry!=  null  ||  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFAULT);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry!=  null  ||  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFAULT);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry!=  null  ||  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFAULT);	  ZipUtil.checkState(current.entry!=    null    &&    current.entry.getMethod()    ==    ZipArchiveOutputStream.DEFAULT);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
246	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry  ==  null  ||  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFAULT);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry  ==  null  ||  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFAULT);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry  ==  null  ||  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFAULT);	  ZipUtil.checkState(current.entry!=    null    &&    current.entry.getMethod()    ==    ZipArchiveOutputStream.DEFAULT);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
247	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry  ==  null  &&  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFAULT);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry  ==  null  &&  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFAULT);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry  ==  null  &&  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFAULT);	  ZipUtil.checkState(current.entry!=    null    &&    current.entry.getMethod()    ==    ZipArchiveOutputStream.DEFAULT);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
248	[BUG]  [BUGGY]  ZipUtil.checkState(this.entry!=  null  &&  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFAULT);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(this.entry!=  null  &&  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFAULT);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(this.entry!=  null  &&  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFAULT);	  ZipUtil.checkState(current.entry!=    null    &&    current.entry.getMethod()    ==    ZipArchiveOutputStream.DEFAULT);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
249	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry  >=  null  ||  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFAULT);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry  >=  null  ||  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFAULT);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry  >=  null  ||  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFAULT);	  ZipUtil.checkState(current.entry!=    null    &&    current.entry.getMethod()    ==    ZipArchiveOutputStream.DEFAULT);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
250	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry!=  null  ||  current.entry.getMethod()  ==  ZipArchiveEntry.DATA_DESCRIPTOR);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry!=  null  ||  current.entry.getMethod()  ==  ZipArchiveEntry.DATA_DESCRIPTOR);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry!=  null  ||  current.entry.getMethod()  ==  ZipArchiveEntry.DATA_DESCRIPTOR);	  ZipUtil.checkState(current.entry!=    null    &&    current.entry.getMethod()    ==    ZipArchiveEntry.DATA_DESCRIPTOR);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
251	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry  ==  null  ||  current.entry.getMethod()  ==  ZipArchiveEntry.DATA_DESCRIPTOR);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry  ==  null  ||  current.entry.getMethod()  ==  ZipArchiveEntry.DATA_DESCRIPTOR);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry  ==  null  ||  current.entry.getMethod()  ==  ZipArchiveEntry.DATA_DESCRIPTOR);	  ZipUtil.checkState(current.entry!=    null    &&    current.entry.getMethod()    ==    ZipArchiveEntry.DATA_DESCRIPTOR);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
252	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry  ==  null  &&  current.entry.getMethod()  ==  ZipArchiveEntry.DATA_DESCRIPTOR);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry  ==  null  &&  current.entry.getMethod()  ==  ZipArchiveEntry.DATA_DESCRIPTOR);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry  ==  null  &&  current.entry.getMethod()  ==  ZipArchiveEntry.DATA_DESCRIPTOR);	  ZipUtil.checkState(current.entry!=    null    &&    current.entry.getMethod()    ==    ZipArchiveEntry.DATA_DESCRIPTOR);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
253	[BUG]  [BUGGY]  ZipUtil.checkState(this.entry!=  null  &&  current.entry.getMethod()  ==  ZipArchiveEntry.DATA_DESCRIPTOR);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(this.entry!=  null  &&  current.entry.getMethod()  ==  ZipArchiveEntry.DATA_DESCRIPTOR);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(this.entry!=  null  &&  current.entry.getMethod()  ==  ZipArchiveEntry.DATA_DESCRIPTOR);	  ZipUtil.checkState(current.entry!=    null    &&    current.entry.getMethod()    ==    ZipArchiveEntry.DATA_DESCRIPTOR);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
254	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  offset,  read);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  offset,  read);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current.entry,  offset,  read);	  ZipUtil.checkRequestedFeatures(current.entry,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
255	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  offset,  length,  buffer.length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  offset,  length,  buffer.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current.entry,  offset,  length,  buffer.length);	  ZipUtil.checkRequestedFeatures(current.entry,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
256	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(read,  current.entry,  offset,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(read,  current.entry,  offset,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(read,  current.entry,  offset,  length);	  ZipUtil.checkRequestedFeatures(current.entry,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
257	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  read,  offset,  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  read,  offset,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current.entry,  read,  offset,  length);	  ZipUtil.checkRequestedFeatures(current.entry,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
258	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(read,  current.entry,  length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(read,  current.entry,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(read,  current.entry,  length);	  ZipUtil.checkRequestedFeatures(current.entry,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
259	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  offset,  buffer);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  offset,  buffer);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(current.entry,  offset,  buffer);	  ZipUtil.checkDeprecatedFeatures(current.entry,    buffer);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
260	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  buffer,  off);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  buffer,  off);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(current.entry,  buffer,  off);	  ZipUtil.checkDeprecatedFeatures(current.entry,    buffer);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
261	[BUG]  [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  fileName,  buffer.length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  fileName,  buffer.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptorFor(current.entry,  fileName,  buffer.length);	  ZipUtil.checkDescriptorFor(current.entry,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
262	[BUG]  [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  buffer.length  -  offset);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  buffer.length  -  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptorFor(current.entry,  buffer.length  -  offset);	  ZipUtil.checkDescriptorFor(current.entry,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
263	[BUG]  [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  buffer.length,  offset);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  buffer.length,  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptorFor(current.entry,  buffer.length,  offset);	  ZipUtil.checkDescriptorFor(current.entry,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
264	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  offset,  buffer);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  offset,  buffer);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current.entry,  offset,  buffer);	  ZipUtil.checkRequestedFeatures(current.entry,    buffer);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
265	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  buffer,  off);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  buffer,  off);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current.entry,  buffer,  off);	  ZipUtil.checkRequestedFeatures(current.entry,    buffer);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
266	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(buffer,  current.entry);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(buffer,  current.entry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(buffer,  current.entry);	  ZipUtil.checkRequestedFeatures(current.entry,    buffer);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
267	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  this.entry);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  this.entry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current.entry,  this.entry);	  ZipUtil.checkRequestedFeatures(this.entry,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
268	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(this.entry,  buffer,  current.entry);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(this.entry,  buffer,  current.entry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(this.entry,  buffer,  current.entry);	  ZipUtil.checkRequestedFeatures(this.entry,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
269	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  this.entry);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  this.entry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(current.entry,  this.entry);	  ZipUtil.checkRequestedFeatures(this.entry,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
270	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  this.entry);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  this.entry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(current.entry,  this.entry);	  ZipUtil.checkRequestedFeatures(this.entry,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
271	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(this.entry,  current.entry,  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(this.entry,  current.entry,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(this.entry,  current.entry,  length);	  ZipUtil.checkDeclaredFeatures(this.entry,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
272	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(this.entry,  current.entry,  offset);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(this.entry,  current.entry,  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(this.entry,  current.entry,  offset);	  ZipUtil.checkDeclaredFeatures(this.entry,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
273	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(this.entry,  buffer,  current.entry);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(this.entry,  buffer,  current.entry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(this.entry,  buffer,  current.entry);	  ZipUtil.checkDeclaredFeatures(this.entry,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
274	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry!=  null  ||  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry!=  null  ||  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry!=  null  ||  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED);	  ZipUtil.checkState(current.entry!=    null    &&    current.entry.getMethod()    ==    ZipArchiveOutputStream.DEFLATED);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
275	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry  ==  null  ||  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry  ==  null  ||  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry  ==  null  ||  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED);	  ZipUtil.checkState(current.entry!=    null    &&    current.entry.getMethod()    ==    ZipArchiveOutputStream.DEFLATED);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
276	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry  ==  null  &&  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry  ==  null  &&  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry  ==  null  &&  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED);	  ZipUtil.checkState(current.entry!=    null    &&    current.entry.getMethod()    ==    ZipArchiveOutputStream.DEFLATED);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
277	[BUG]  [BUGGY]  ZipUtil.checkState(this.entry!=  null  &&  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(this.entry!=  null  &&  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(this.entry!=  null  &&  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED);	  ZipUtil.checkState(current.entry!=    null    &&    current.entry.getMethod()    ==    ZipArchiveOutputStream.DEFLATED);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
278	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry  >=  null  ||  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry  >=  null  ||  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry  >=  null  ||  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED);	  ZipUtil.checkState(current.entry!=    null    &&    current.entry.getMethod()    ==    ZipArchiveOutputStream.DEFLATED);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
279	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  buffer,  offset);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  buffer,  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(current.entry,  buffer,  offset);	  ZipUtil.checkDeclaredFeatures(current.entry,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
280	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  buffer.length,  offset);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  buffer.length,  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(current.entry,  buffer.length,  offset);	  ZipUtil.checkDeclaredFeatures(current.entry,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
281	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(buffer,  current.entry.length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(buffer,  current.entry.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(buffer,  current.entry.length);	  ZipUtil.checkDeclaredFeatures(current.entry,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
282	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(offset,  current.entry.length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(offset,  current.entry.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(offset,  current.entry.length);	  ZipUtil.checkDeclaredFeatures(current.entry,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
283	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  length,  buffer.length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  length,  buffer.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(current.entry,  length,  buffer.length);	  ZipUtil.checkDeclaredFeatures(current.entry,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
284	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream(offset);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  getInputStream(offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  getInputStream(offset);	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
285	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream(offset,  length);  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  getInputStream(offset,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  getInputStream(offset,  length);	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
286	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream(),  buffer.length);  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  getInputStream(),  buffer.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  getInputStream(),  buffer.length);	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
287	[BUG]  [BUGGY]  Inflater  inf  =  getOutputStream();  [CE]  illegal  start  of  type  [FE]                                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  getOutputStream();  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  getOutputStream();	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
288	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream(),  offset  +  length;  [CE]  illegal  start  of  type  [FE]                                            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  getInputStream(),  offset  +  length;  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  getInputStream(),  offset  +  length;	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
289	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry!=  null  &&  current.entry.getMethod()  ==  ZipArchiveEntry.DEFAULT);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry!=  null  &&  current.entry.getMethod()  ==  ZipArchiveEntry.DEFAULT);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry!=  null  &&  current.entry.getMethod()  ==  ZipArchiveEntry.DEFAULT);	  ZipUtil.checkState(this.entry!=    null);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
290	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(read,  buffer,  current.entry);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(read,  buffer,  current.entry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(read,  buffer,  current.entry);	  ZipUtil.checkRequestedFeatures(length,    buffer,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
291	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(length,  buffer,  offset,  current.entry);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(length,  buffer,  offset,  current.entry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(length,  buffer,  offset,  current.entry);	  ZipUtil.checkRequestedFeatures(length,    buffer,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
292	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(length,  current.entry,  buffer);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(length,  current.entry,  buffer);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(length,  current.entry,  buffer);	  ZipUtil.checkRequestedFeatures(length,    buffer,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
293	[BUG]  [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  buffer);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  buffer);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptorFor(current.entry,  buffer);	  ZipUtil.checkDescriptorFor(current.entry,    ze);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
294	[BUG]  [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  fileName);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  fileName);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptorFor(current.entry,  fileName);	  ZipUtil.checkDescriptorFor(current.entry,    ze);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
295	[BUG]  [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  ze,  offset);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  ze,  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptorFor(current.entry,  ze,  offset);	  ZipUtil.checkDescriptorFor(current.entry,    ze);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
296	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.deflateInflate(buffer,  offset,  length,  buffer.length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  entryEncoding.deflateInflate(buffer,  offset,  length,  buffer.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  entryEncoding.deflateInflate(buffer,  offset,  length,  buffer.length);	  Inflater    inf    =    entryEncoding.deflateInflate(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
297	[BUG]  [BUGGY]  Inflater  inf  =  current.entryEncoding.deflateInflate(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  current.entryEncoding.deflateInflate(buffer,  offset,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  current.entryEncoding.deflateInflate(buffer,  offset,  length);	  Inflater    inf    =    entryEncoding.deflateInflate(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
298	[BUG]  [BUGGY]  Inflater  inf  =  zipEncoding.deflateInflate(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  zipEncoding.deflateInflate(buffer,  offset,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  zipEncoding.deflateInflate(buffer,  offset,  length);	  Inflater    inf    =    entryEncoding.deflateInflate(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
299	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.deflateInflate(buffer,  offset,  length,  current.entry);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  entryEncoding.deflateInflate(buffer,  offset,  length,  current.entry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  entryEncoding.deflateInflate(buffer,  offset,  length,  current.entry);	  Inflater    inf    =    entryEncoding.deflateInflate(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
300	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.deflateInflate(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  entryEncoding.deflateInflate(buffer,  offset,  length  -  1);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  entryEncoding.deflateInflate(buffer,  offset,  length  -  1);	  Inflater    inf    =    entryEncoding.deflateInflate(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
301	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.deflateInflate(buffer,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  entryEncoding.deflateInflate(buffer,  offset,  length  +  1);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  entryEncoding.deflateInflate(buffer,  offset,  length  +  1);	  Inflater    inf    =    entryEncoding.deflateInflate(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
302	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.deflateInflate(buffer,  offset,  length,  current.entry.length);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  entryEncoding.deflateInflate(buffer,  offset,  length,  current.entry.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  entryEncoding.deflateInflate(buffer,  offset,  length,  current.entry.length);	  Inflater    inf    =    entryEncoding.deflateInflate(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
303	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry!=  null,  offset  -  offset);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry!=  null,  offset  -  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry!=  null,  offset  -  offset);	  ZipUtil.checkState(current.entry!=    null,    offset);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
304	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry!=  null,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry!=  null,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry!=  null,  length);	  ZipUtil.checkState(current.entry!=    null,    offset);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
305	[BUG]  [BUGGY]  current.entry  =  current.entry.getValue();  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  current.entry  =  current.entry.getValue();  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	current.entry  =  current.entry.getValue();	  current.entry    =    entryEncoding.getValue();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
306	[BUG]  [BUGGY]  current.entry  =  current.getValue();  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  current.entry  =  current.getValue();  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	current.entry  =  current.getValue();	  current.entry    =    entryEncoding.getValue();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
307	[BUG]  [BUGGY]  current.entry  =  zipEncoding.getValue();  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  current.entry  =  zipEncoding.getValue();  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	current.entry  =  zipEncoding.getValue();	  current.entry    =    entryEncoding.getValue();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
308	[BUG]  [BUGGY]  current.entry  =  current.entryEncoding.getValue();  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  current.entry  =  current.entryEncoding.getValue();  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	current.entry  =  current.entryEncoding.getValue();	  current.entry    =    entryEncoding.getValue();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
309	[BUG]  [BUGGY]  current.entry  =  current.entry;  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  current.entry  =  current.entry;  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	current.entry  =  current.entry;	  current.entry    =    entryEncoding.getValue();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
310	[BUG]  [BUGGY]  Integer  current  =  current.entry.getKey();  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Integer  current  =  current.entry.getKey();  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Integer  current  =  current.entry.getKey();	  Integer    current    =    current.entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
311	[BUG]  [BUGGY]  Integer  current  =  current.entry.getValue()  -  offset;  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Integer  current  =  current.entry.getValue()  -  offset;  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Integer  current  =  current.entry.getValue()  -  offset;	  Integer    current    =    current.entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
312	[BUG]  [BUGGY]  Integer  current  =  current.entry.getValue()  +  1;  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Integer  current  =  current.entry.getValue()  +  1;  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Integer  current  =  current.entry.getValue()  +  1;	  Integer    current    =    current.entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
313	[BUG]  [BUGGY]  Integer  current  =  current.entry.getValue()  +  offset;  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Integer  current  =  current.entry.getValue()  +  offset;  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Integer  current  =  current.entry.getValue()  +  offset;	  Integer    current    =    current.entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
314	[BUG]  [BUGGY]  Integer  current  =  current.entry.getRawValue();  [CE]  illegal  start  of  type  [FE]                                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Integer  current  =  current.entry.getRawValue();  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Integer  current  =  current.entry.getRawValue();	  Integer    current    =    current.entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
315	[BUG]  [BUGGY]  Integer  current  =  current.entry.getImplicitValue();  [CE]  illegal  start  of  type  [FE]                                            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Integer  current  =  current.entry.getImplicitValue();  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Integer  current  =  current.entry.getImplicitValue();	  Integer    current    =    current.entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
316	[BUG]  [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  read,  offset);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  read,  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedDescriptor(current.entry,  read,  offset);	  ZipUtil.checkRequestedDescriptor(current.entry,    read);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
317	[BUG]  [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  read,  buffer.length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  read,  buffer.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedDescriptor(current.entry,  read,  buffer.length);	  ZipUtil.checkRequestedDescriptor(current.entry,    read);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
318	[BUG]  [BUGGY]  ZipUtil.checkRequestedDescriptor(read,  current.entry);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedDescriptor(read,  current.entry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedDescriptor(read,  current.entry);	  ZipUtil.checkRequestedDescriptor(current.entry,    read);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
319	[BUG]  [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  read,  buffer);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  read,  buffer);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedDescriptor(current.entry,  read,  buffer);	  ZipUtil.checkRequestedDescriptor(current.entry,    read);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
320	[BUG]  [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  read,  length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  read,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedDescriptor(current.entry,  read,  length);	  ZipUtil.checkRequestedDescriptor(current.entry,    read);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
321	[BUG]  [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  read,  current.length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  read,  current.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedDescriptor(current.entry,  read,  current.length);	  ZipUtil.checkRequestedDescriptor(current.entry,    read);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
322	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(this.entry,  false);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(this.entry,  false);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(this.entry,  false);	  ZipUtil.checkDeprecatedFeatures(current.entry,    false);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
323	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(offset,  current.entry,  false);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(offset,  current.entry,  false);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(offset,  current.entry,  false);	  ZipUtil.checkDeprecatedFeatures(current.entry,    false);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
324	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(this.current.entry,  false);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(this.current.entry,  false);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(this.current.entry,  false);	  ZipUtil.checkDeprecatedFeatures(current.entry,    false);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
325	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  false,  offset);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  false,  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(current.entry,  false,  offset);	  ZipUtil.checkDeprecatedFeatures(current.entry,    false);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
326	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(current,  this.entry);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(current,  this.entry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(current,  this.entry);	  ZipUtil.checkDeprecatedFeatures(this.entry,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
327	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(this.entry,  current.entry,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(this.entry,  current.entry,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(this.entry,  current.entry,  length);	  ZipUtil.checkDeprecatedFeatures(this.entry,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
328	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeature(current.entry,  this.entry);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeature(current.entry,  this.entry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeature(current.entry,  this.entry);	  ZipUtil.checkDeprecatedFeatures(this.entry,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
329	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  read);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  read);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current.entry,  read);	  ZipUtil.checkRequestedFeatures(read,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
330	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(read,  current.entry,  offset);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(read,  current.entry,  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(read,  current.entry,  offset);	  ZipUtil.checkRequestedFeatures(read,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
331	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(read,  current.entry,  buffer.length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(read,  current.entry,  buffer.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(read,  current.entry,  buffer.length);	  ZipUtil.checkRequestedFeatures(read,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
332	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  offset  +  length,  current.length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  offset  +  length,  current.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current.entry,  offset  +  length,  current.length);	  ZipUtil.checkRequestedFeatures(current.entry,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
333	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  buffer.length  +  length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  buffer.length  +  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current.entry,  buffer.length  +  length);	  ZipUtil.checkRequestedFeatures(current.entry,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
334	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  offset  +  length,  buffer.length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  offset  +  length,  buffer.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current.entry,  offset  +  length,  buffer.length);	  ZipUtil.checkRequestedFeatures(current.entry,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
335	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  buffer.length  +  offset);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  buffer.length  +  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current.entry,  buffer.length  +  offset);	  ZipUtil.checkRequestedFeatures(current.entry,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
336	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  offset  +  length,  current.offset);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  offset  +  length,  current.offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current.entry,  offset  +  length,  current.offset);	  ZipUtil.checkRequestedFeatures(current.entry,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
337	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  offset  +  length,  current.fileNameLen);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  offset  +  length,  current.fileNameLen);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current.entry,  offset  +  length,  current.fileNameLen);	  ZipUtil.checkRequestedFeatures(current.entry,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
338	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(offset,  current.entry.length  +  length);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(offset,  current.entry.length  +  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(offset,  current.entry.length  +  length);	  ZipUtil.checkRequestedFeatures(current.entry,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
339	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(current.entry,  buffer.length,  offset);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecated(current.entry,  buffer.length,  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecated(current.entry,  buffer.length,  offset);	  ZipUtil.checkDeprecated(current.entry,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
340	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(current.entry,  buffer.length  -  offset);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecated(current.entry,  buffer.length  -  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecated(current.entry,  buffer.length  -  offset);	  ZipUtil.checkDeprecated(current.entry,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
341	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(buffer,  current.entry.length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecated(buffer,  current.entry.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecated(buffer,  current.entry.length);	  ZipUtil.checkDeprecated(current.entry,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
342	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(current.entry,  off,  buffer.length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecated(current.entry,  off,  buffer.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecated(current.entry,  off,  buffer.length);	  ZipUtil.checkDeprecated(current.entry,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
343	[BUG]  [BUGGY]  current.entry  =  entryEncoding.decodeBase64Entry(buffer,  offset,  length,  buffer.length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  current.entry  =  entryEncoding.decodeBase64Entry(buffer,  offset,  length,  buffer.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	current.entry  =  entryEncoding.decodeBase64Entry(buffer,  offset,  length,  buffer.length);	  current.entry    =    entryEncoding.decodeBase64Entry(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
344	[BUG]  [BUGGY]  current.entry  =  zipEncoding.decodeBase64Entry(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  current.entry  =  zipEncoding.decodeBase64Entry(buffer,  offset,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	current.entry  =  zipEncoding.decodeBase64Entry(buffer,  offset,  length);	  current.entry    =    entryEncoding.decodeBase64Entry(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
345	[BUG]  [BUGGY]  current.entry  =  entryEncoding.decodeBase64Entry(buffer,  offset,  read);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  current.entry  =  entryEncoding.decodeBase64Entry(buffer,  offset,  read);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	current.entry  =  entryEncoding.decodeBase64Entry(buffer,  offset,  read);	  current.entry    =    entryEncoding.decodeBase64Entry(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
346	[BUG]  [BUGGY]  current.entry  =  entryEncoding.decodeBase64Entry(buffer,  offset,  length,  current.length);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  current.entry  =  entryEncoding.decodeBase64Entry(buffer,  offset,  length,  current.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	current.entry  =  entryEncoding.decodeBase64Entry(buffer,  offset,  length,  current.length);	  current.entry    =    entryEncoding.decodeBase64Entry(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
347	[BUG]  [BUGGY]  current.entry  =  entryEncoding.decodeBase64Entry(buffer,  offset,  length,  CFH_LEN);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  current.entry  =  entryEncoding.decodeBase64Entry(buffer,  offset,  length,  CFH_LEN);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	current.entry  =  entryEncoding.decodeBase64Entry(buffer,  offset,  length,  CFH_LEN);	  current.entry    =    entryEncoding.decodeBase64Entry(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
348	[BUG]  [BUGGY]  current.entry  =  entryEncoding.decodeBase64Entry(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  current.entry  =  entryEncoding.decodeBase64Entry(buffer,  offset,  length  -  1);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	current.entry  =  entryEncoding.decodeBase64Entry(buffer,  offset,  length  -  1);	  current.entry    =    entryEncoding.decodeBase64Entry(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
349	[BUG]  [BUGGY]  current.entry  =  entryEncoding.decodeBase64Entry(buffer,  offset,  length,  fileNameLen);  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  current.entry  =  entryEncoding.decodeBase64Entry(buffer,  offset,  length,  fileNameLen);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	current.entry  =  entryEncoding.decodeBase64Entry(buffer,  offset,  length,  fileNameLen);	  current.entry    =    entryEncoding.decodeBase64Entry(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
350	[BUG]  [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  hasUTF8Flag,  offset);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  hasUTF8Flag,  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedDescriptor(current.entry,  hasUTF8Flag,  offset);	  ZipUtil.checkRequestedDescriptor(current.entry,    hasUTF8Flag);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
351	[BUG]  [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  hasUTF8Flag,  lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  hasUTF8Flag,  lastStoredEntry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedDescriptor(current.entry,  hasUTF8Flag,  lastStoredEntry);	  ZipUtil.checkRequestedDescriptor(current.entry,    hasUTF8Flag);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
352	[BUG]  [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  hasUTF8Flag,  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  hasUTF8Flag,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedDescriptor(current.entry,  hasUTF8Flag,  length);	  ZipUtil.checkRequestedDescriptor(current.entry,    hasUTF8Flag);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
353	[BUG]  [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  hasUTF8Flag,  0);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  hasUTF8Flag,  0);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedDescriptor(current.entry,  hasUTF8Flag,  0);	  ZipUtil.checkRequestedDescriptor(current.entry,    hasUTF8Flag);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
354	[BUG]  [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  hasUTF8Flag,  buffer.length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  hasUTF8Flag,  buffer.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedDescriptor(current.entry,  hasUTF8Flag,  buffer.length);	  ZipUtil.checkRequestedDescriptor(current.entry,    hasUTF8Flag);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
355	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  length,  current.length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  length,  current.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current.entry,  length,  current.length);	  ZipUtil.checkRequestedFeatures(length,    current.entry,    offset);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
356	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(length,  current.entry,  buffer.length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(length,  current.entry,  buffer.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(length,  current.entry,  buffer.length);	  ZipUtil.checkRequestedFeatures(length,    current.entry,    offset);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
357	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(length,  buffer,  offset);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(length,  buffer,  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(length,  buffer,  offset);	  ZipUtil.checkRequestedFeatures(length,    current.entry,    offset);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
358	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(buffer,  offset,  current.entry);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(buffer,  offset,  current.entry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(buffer,  offset,  current.entry);	  ZipUtil.checkRequestedFeatures(length,    current.entry,    offset);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
359	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.deflate(buffer,  offset,  length,  buffer.length);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  entryEncoding.deflate(buffer,  offset,  length,  buffer.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  entryEncoding.deflate(buffer,  offset,  length,  buffer.length);	  Inflater    inf    =    entryEncoding.deflate(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
360	[BUG]  [BUGGY]  Inflater  inf  =  current.entryEncoding.deflate(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  current.entryEncoding.deflate(buffer,  offset,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  current.entryEncoding.deflate(buffer,  offset,  length);	  Inflater    inf    =    entryEncoding.deflate(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
361	[BUG]  [BUGGY]  Inflater  inf  =  zipEncoding.deflate(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  zipEncoding.deflate(buffer,  offset,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  zipEncoding.deflate(buffer,  offset,  length);	  Inflater    inf    =    entryEncoding.deflate(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
362	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.deflate(buffer,  offset,  length,  current.entry);  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  entryEncoding.deflate(buffer,  offset,  length,  current.entry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  entryEncoding.deflate(buffer,  offset,  length,  current.entry);	  Inflater    inf    =    entryEncoding.deflate(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
363	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.deflate(buffer,  offset,  length,  current.entry.length);  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  entryEncoding.deflate(buffer,  offset,  length,  current.entry.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  entryEncoding.deflate(buffer,  offset,  length,  current.entry.length);	  Inflater    inf    =    entryEncoding.deflate(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
364	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.deflate(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  entryEncoding.deflate(buffer,  offset,  length  -  1);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  entryEncoding.deflate(buffer,  offset,  length  -  1);	  Inflater    inf    =    entryEncoding.deflate(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
365	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.deflate(buffer,  offset,  length,  fileNameLen);  [CE]  illegal  start  of  type  [FE]                                            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  entryEncoding.deflate(buffer,  offset,  length,  fileNameLen);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  entryEncoding.deflate(buffer,  offset,  length,  fileNameLen);	  Inflater    inf    =    entryEncoding.deflate(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
366	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(offset,  current.entry,  length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(offset,  current.entry,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(offset,  current.entry,  length);	  ZipUtil.checkDeclaredFeatures(offset,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
367	[BUG]  [BUGGY]  ZipUtil.checkRequestedDescriptor(length,  current.entry);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedDescriptor(length,  current.entry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedDescriptor(length,  current.entry);	  ZipUtil.checkRequestedDescriptor(current.entry,    length);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
368	[BUG]  [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  hasUTF8Flag);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  hasUTF8Flag);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptorFor(current.entry,  hasUTF8Flag);	  ZipUtil.checkDescriptorFor(current.entry,    hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
369	[BUG]  [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  fileName,  hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  fileName,  hasDataDescriptor);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptorFor(current.entry,  fileName,  hasDataDescriptor);	  ZipUtil.checkDescriptorFor(current.entry,    hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
370	[BUG]  [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  dataDescriptor);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  dataDescriptor);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptorFor(current.entry,  dataDescriptor);	  ZipUtil.checkDescriptorFor(current.entry,    hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
371	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(offset,  true);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(offset,  true);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(offset,  true);	  ZipUtil.checkDeprecatedFeatures(current.entry,    true);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
372	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(length,  true);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(length,  true);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(length,  true);	  ZipUtil.checkDeprecatedFeatures(current.entry,    true);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
373	[BUG]  [BUGGY]  ZipUtil.checkDescriptorFor(current.getEntry(),  true);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDescriptorFor(current.getEntry(),  true);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptorFor(current.getEntry(),  true);	  ZipUtil.checkDescriptorFor(current.entry,    true);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
374	[BUG]  [BUGGY]  ZipUtil.checkDescriptorFor(current.descriptor,  true);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDescriptorFor(current.descriptor,  true);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptorFor(current.descriptor,  true);	  ZipUtil.checkDescriptorFor(current.entry,    true);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
375	[BUG]  [BUGGY]  ZipUtil.checkDescriptor(current.entry,  false);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDescriptor(current.entry,  false);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptor(current.entry,  false);	  ZipUtil.checkDescriptorFor(current.entry,    true);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
376	[BUG]  [BUGGY]  Inflater  inf  =  current.current.getInputStream();  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  current.current.getInputStream();  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  current.current.getInputStream();	  Inflater    inf    =    current.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
377	[BUG]  [BUGGY]  Inflater  inf  =  current.getOutputStream();  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  current.getOutputStream();  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  current.getOutputStream();	  Inflater    inf    =    current.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
378	[BUG]  [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  offset  +  length,  hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  offset  +  length,  hasDataDescriptor);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptorFor(current.entry,  offset  +  length,  hasDataDescriptor);	  ZipUtil.checkDescriptorFor(current.entry,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
379	[BUG]  [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  offset  +  length  -  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  offset  +  length  -  1);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptorFor(current.entry,  offset  +  length  -  1);	  ZipUtil.checkDescriptorFor(current.entry,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
380	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  buffer.length  -  offset);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  buffer.length  -  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(current.entry,  buffer.length  -  offset);	  ZipUtil.checkDeclaredFeatures(current.entry,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
381	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  buffer.length,  length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  buffer.length,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(current.entry,  buffer.length,  length);	  ZipUtil.checkDeclaredFeatures(current.entry,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
382	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  buffer.length  +  offset);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  buffer.length  +  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(current.entry,  buffer.length  +  offset);	  ZipUtil.checkDeclaredFeatures(current.entry,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
383	[BUG]  [BUGGY]  Inflater  inf  =  current.entry.getFullInputStream();  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  current.entry.getFullInputStream();  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  current.entry.getFullInputStream();	  Inflater    inf    =    current.entry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
384	[BUG]  [BUGGY]  Inflater  inf  =  current.entry.getInputStream()  -  offset;  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  current.entry.getInputStream()  -  offset;  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  current.entry.getInputStream()  -  offset;	  Inflater    inf    =    current.entry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
385	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry  ==  null,  buffer.length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry  ==  null,  buffer.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry  ==  null,  buffer.length);	  ZipUtil.checkState(current.entry    ==    null,    offset);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
386	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry  ==  null,  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry  ==  null,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry  ==  null,  length);	  ZipUtil.checkState(current.entry    ==    null,    offset);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
387	[BUG]  [BUGGY]  Inflater  inf  =  handleUnicodeExtraFields(current.entry);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  handleUnicodeExtraFields(current.entry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  handleUnicodeExtraFields(current.entry);	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
388	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream(in);  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  getInputStream(in);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  getInputStream(in);	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
389	[BUG]  [BUGGY]  Inflater  inf  =  handleUnicodeExtraFields(current.entry,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  handleUnicodeExtraFields(current.entry,  offset,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  handleUnicodeExtraFields(current.entry,  offset,  length);	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
390	[BUG]  [BUGGY]  Inflater  inf  =  inputStream.getInputStream();  [CE]  illegal  start  of  type  [FE]                                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  inputStream.getInputStream();  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  inputStream.getInputStream();	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
391	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(buffer,  length,  current.entry);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(buffer,  length,  current.entry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(buffer,  length,  current.entry);	  ZipUtil.checkDeclaredFeatures(length,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
392	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(line,  current.entry);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(line,  current.entry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(line,  current.entry);	  ZipUtil.checkDeclaredFeatures(length,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
393	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.deflate(buffer,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  entryEncoding.deflate(buffer,  offset,  length  +  1);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  entryEncoding.deflate(buffer,  offset,  length  +  1);	  Inflater    inf    =    entryEncoding.deflate(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
394	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.deflate(buffer,  offset,  length  -  offset);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  entryEncoding.deflate(buffer,  offset,  length  -  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  entryEncoding.deflate(buffer,  offset,  length  -  offset);	  Inflater    inf    =    entryEncoding.deflate(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
395	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  offset  -  offset);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  offset  -  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(current.entry,  offset  -  offset);	  ZipUtil.checkDeprecatedFeatures(current.entry,    length);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
396	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  preserved);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  preserved);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current.entry,  preserved);	  ZipUtil.checkRequestedFeatures(remainder,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
397	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(lastStoredEntry,  ze);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(lastStoredEntry,  ze);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(lastStoredEntry,  ze);	  ZipUtil.checkDeclaredFeatures(current.entry,    ze);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
398	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  ze,  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  ze,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(current.entry,  ze,  length);	  ZipUtil.checkDeclaredFeatures(current.entry,    ze);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
399	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry  ==  null  &&  current.entry.getMethod()!=  ZipArchiveEntry.DEFLATED);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry  ==  null  &&  current.entry.getMethod()!=  ZipArchiveEntry.DEFLATED);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry  ==  null  &&  current.entry.getMethod()!=  ZipArchiveEntry.DEFLATED);	  ZipUtil.checkState(current.entry!=    null    &&    current.entry.getMethod()    ==    ZipArchiveEntry.DEFLATED);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
400	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry  >=  null  &&  current.entry.getMethod()  ==  ZipArchiveEntry.DEFLATED);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry  >=  null  &&  current.entry.getMethod()  ==  ZipArchiveEntry.DEFLATED);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry  >=  null  &&  current.entry.getMethod()  ==  ZipArchiveEntry.DEFLATED);	  ZipUtil.checkState(current.entry!=    null    &&    current.entry.getMethod()    ==    ZipArchiveEntry.DEFLATED);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
401	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry  >=  null  ||  current.entry.getMethod()  ==  ZipArchiveEntry.DEFLATED);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry  >=  null  ||  current.entry.getMethod()  ==  ZipArchiveEntry.DEFLATED);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry  >=  null  ||  current.entry.getMethod()  ==  ZipArchiveEntry.DEFLATED);	  ZipUtil.checkState(current.entry!=    null    &&    current.entry.getMethod()    ==    ZipArchiveEntry.DEFLATED);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
402	[BUG]  [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  buffer);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  buffer);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedDescriptor(current.entry,  buffer);	  ZipUtil.checkRequestedDescriptor(current.entry,    hasUTF8Flag);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
403	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  offset  +  length,  lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  offset  +  length,  lastStoredEntry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current.entry,  offset  +  length,  lastStoredEntry);	  ZipUtil.checkRequestedFeatures(current.entry,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
404	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  offset  +  length  -  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  offset  +  length  -  1);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current.entry,  offset  +  length  -  1);	  ZipUtil.checkRequestedFeatures(current.entry,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
405	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  isUTF8Flag?  hasUTF8Flag  :  hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  isUTF8Flag?  hasUTF8Flag  :  hasDataDescriptor);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(current.entry,  isUTF8Flag?  hasUTF8Flag  :  hasDataDescriptor);	  ZipUtil.checkDeprecatedFeatures(current.entry,    hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
406	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  dataDescriptor);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  dataDescriptor);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(current.entry,  dataDescriptor);	  ZipUtil.checkDeprecatedFeatures(current.entry,    hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
407	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  hasUTF8Flag  &&  hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  hasUTF8Flag  &&  hasDataDescriptor);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(current.entry,  hasUTF8Flag  &&  hasDataDescriptor);	  ZipUtil.checkDeprecatedFeatures(current.entry,    hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
408	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry!=  null,  buffer.length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry!=  null,  buffer.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry!=  null,  buffer.length);	  ZipUtil.checkState(current.entry!=    null,    offset);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
409	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry!=  null,  read);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry!=  null,  read);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry!=  null,  read);	  ZipUtil.checkState(current.entry!=    null,    offset);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
410	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(this.entry,  buffer);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(this.entry,  buffer);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(this.entry,  buffer);	  ZipUtil.checkDeclaredFeatures(this.entry,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
411	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(current,  this.entry);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(current,  this.entry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(current,  this.entry);	  ZipUtil.checkDeclaredFeatures(this.entry,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
412	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  length,  buffer.length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  length,  buffer.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current.entry,  length,  buffer.length);	  ZipUtil.checkRequestedFeatures(length,    current.entry,    offset);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
413	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  length,  current.entry);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  length,  current.entry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current.entry,  length,  current.entry);	  ZipUtil.checkRequestedFeatures(length,    current.entry,    offset);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
414	[BUG]  [BUGGY]  ZipUtil.checkAndFixDeprecatedFeatures(current.entry);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkAndFixDeprecatedFeatures(current.entry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkAndFixDeprecatedFeatures(current.entry);	  ZipUtil.checkDeprecatedFeatures(this.entry);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
415	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeature(current.entry);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeature(current.entry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeature(current.entry);	  ZipUtil.checkDeprecatedFeatures(this.entry);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
416	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  this.fileNameLen);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  this.fileNameLen);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(current.entry,  this.fileNameLen);	  ZipUtil.checkDeprecatedFeatures(this.entry);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
417	[BUG]  [BUGGY]  ZipUtil.checkAndFixDeprecatedFeatures(current.entry,  this.entry);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkAndFixDeprecatedFeatures(current.entry,  this.entry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkAndFixDeprecatedFeatures(current.entry,  this.entry);	  ZipUtil.checkDeprecatedFeatures(this.entry,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
418	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(this.entry,  buffer);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(this.entry,  buffer);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(this.entry,  buffer);	  ZipUtil.checkDeprecatedFeatures(this.entry,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
419	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(buffer,  current.entry,  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(buffer,  current.entry,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(buffer,  current.entry,  length);	  ZipUtil.checkRequestedFeatures(current.entry,    buffer,    length);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
420	[BUG]  [BUGGY]  Inflater  inf  =  current.sentry.getInputStream();  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  current.sentry.getInputStream();  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  current.sentry.getInputStream();	  Inflater    inf    =    currentEntry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
421	[BUG]  [BUGGY]  Integer  current  =  current.getEntry(buffer,  offset);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Integer  current  =  current.getEntry(buffer,  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Integer  current  =  current.getEntry(buffer,  offset);	  Integer    current    =    current.getEntry(offset);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
422	[BUG]  [BUGGY]  Integer  current  =  current.entry.getEntry(offset);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Integer  current  =  current.entry.getEntry(offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Integer  current  =  current.entry.getEntry(offset);	  Integer    current    =    current.getEntry(offset);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
423	[BUG]  [BUGGY]  Integer  current  =  current.getEntry(offset  -  1);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Integer  current  =  current.getEntry(offset  -  1);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Integer  current  =  current.getEntry(offset  -  1);	  Integer    current    =    current.getEntry(offset);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
424	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry  ==  null  &&  current.entry.getMethod()!=  ZipArchiveEntry.DATA_DESCRIPTOR);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry  ==  null  &&  current.entry.getMethod()!=  ZipArchiveEntry.DATA_DESCRIPTOR);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry  ==  null  &&  current.entry.getMethod()!=  ZipArchiveEntry.DATA_DESCRIPTOR);	  ZipUtil.checkState(current.entry!=    null    &&    current.entry.getMethod()    ==    ZipArchiveEntry.DATA_DESCRIPTOR);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
425	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry  >=  null  &&  current.entry.getMethod()  ==  ZipArchiveEntry.DATA_DESCRIPTOR);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry  >=  null  &&  current.entry.getMethod()  ==  ZipArchiveEntry.DATA_DESCRIPTOR);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry  >=  null  &&  current.entry.getMethod()  ==  ZipArchiveEntry.DATA_DESCRIPTOR);	  ZipUtil.checkState(current.entry!=    null    &&    current.entry.getMethod()    ==    ZipArchiveEntry.DATA_DESCRIPTOR);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
426	[BUG]  [BUGGY]  ZipUtil.checkAndFixDeprecated(current.entry,  length);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkAndFixDeprecated(current.entry,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkAndFixDeprecated(current.entry,  length);	  ZipUtil.checkAndFixDeprecated(current.entry);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
427	[BUG]  [BUGGY]  ZipUtil.checkAndFixDeprecated(current.entry,  buffer);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkAndFixDeprecated(current.entry,  buffer);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkAndFixDeprecated(current.entry,  buffer);	  ZipUtil.checkAndFixDeprecated(current.entry);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
428	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry  ==  null  &&  current.entry.getMethod()!=  ZipArchiveOutputStream.DEFAULT));  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry  ==  null  &&  current.entry.getMethod()!=  ZipArchiveOutputStream.DEFAULT));  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry  ==  null  &&  current.entry.getMethod()!=  ZipArchiveOutputStream.DEFAULT));	  ZipUtil.checkState(current.entry!=    null    &&    current.entry.getMethod()    ==    ZipArchiveOutputStream.DEFAULT));    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
429	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry  >=  null  &&  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFAULT));  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry  >=  null  &&  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFAULT));  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry  >=  null  &&  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFAULT));	  ZipUtil.checkState(current.entry!=    null    &&    current.entry.getMethod()    ==    ZipArchiveOutputStream.DEFAULT));    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
430	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(current.entry,  buffer);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecated(current.entry,  buffer);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecated(current.entry,  buffer);	  ZipUtil.checkDeprecated(current.entry,    read);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
431	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(current.entry,  read,  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecated(current.entry,  read,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecated(current.entry,  read,  length);	  ZipUtil.checkDeprecated(current.entry,    read);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
432	[BUG]  [BUGGY]  if(current.entry!=  null)  {  InputStream  inf  =  current.getInputStream();  if(inf!=  null)  {  for(int  i  =  0,  length  =  inf.length;  i  <  length;  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  if(current.entry!=  null)  {  InputStream  inf  =  current.getInputStream();  if(inf!=  null)  {  for(int  i  =  0,  length  =  inf.length;  i  <  length;  ++i)  {  inputStream.close();  }  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	if(current.entry!=  null)  {  InputStream  inf  =  current.getInputStream();  if(inf!=  null)  {  for(int  i  =  0,  length  =  inf.length;  i  <  length;  ++i)  {  inputStream.close();  }	  Inflater    inf    =    current.getInputStream();    if(inf!=    null)    {    for(int    i    =    0,    length    =    inf.length;    i    <    length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
433	[BUG]  [BUGGY]  if(current.entry!=  null)  {  InputStream  inf  =  current.getInputStream();  if(inf!=  null)  {  for(int  i  =  0,  length  =  inf.length;  i  <  length;  ++i)  {  inputStream.close();  }  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  if(current.entry!=  null)  {  InputStream  inf  =  current.getInputStream();  if(inf!=  null)  {  for(int  i  =  0,  length  =  inf.length;  i  <  length;  ++i)  {  inputStream.close();  }  }  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	if(current.entry!=  null)  {  InputStream  inf  =  current.getInputStream();  if(inf!=  null)  {  for(int  i  =  0,  length  =  inf.length;  i  <  length;  ++i)  {  inputStream.close();  }  }	  Inflater    inf    =    current.getInputStream();    if(inf!=    null)    {    for(int    i    =    0,    length    =    inf.length;    i    <    length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
434	[BUG]  [BUGGY]  if(current.entry!=  null)  {  Inflater  inf  =  current.getInputStream();  if(inf!=  null)  {  for(int  i  =  0,  length  =  inf.length;  i  <  length;  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  if(current.entry!=  null)  {  Inflater  inf  =  current.getInputStream();  if(inf!=  null)  {  for(int  i  =  0,  length  =  inf.length;  i  <  length;  ++i)  {  inputStream.close();  }  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	if(current.entry!=  null)  {  Inflater  inf  =  current.getInputStream();  if(inf!=  null)  {  for(int  i  =  0,  length  =  inf.length;  i  <  length;  ++i)  {  inputStream.close();  }	  Inflater    inf    =    current.getInputStream();    if(inf!=    null)    {    for(int    i    =    0,    length    =    inf.length;    i    <    length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
435	[BUG]  [BUGGY]  current.entry  =  entryEncoding.getEntry();  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  current.entry  =  entryEncoding.getEntry();  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	current.entry  =  entryEncoding.getEntry();	  current.entry    =    entryEncoding.getValue();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
436	[BUG]  [BUGGY]  current.entry  =  ze.getValue();  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  current.entry  =  ze.getValue();  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	current.entry  =  ze.getValue();	  current.entry    =    entryEncoding.getValue();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
437	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(current.entry,  this.entry);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecated(current.entry,  this.entry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecated(current.entry,  this.entry);	  ZipUtil.checkRequestedFeatures(this.entry,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
438	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(this.entry,  buffer);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(this.entry,  buffer);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(this.entry,  buffer);	  ZipUtil.checkRequestedFeatures(this.entry,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
439	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  buffer.length  -  offset);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  buffer.length  -  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(current.entry,  buffer.length  -  offset);	  ZipUtil.checkDeprecatedFeatures(current.entry,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
440	[BUG]  [BUGGY]  byte[]  current  =  current.array.getDataDescriptor();  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  byte[]  current  =  current.array.getDataDescriptor();  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	byte[]  current  =  current.array.getDataDescriptor();	  byte[]    current    =    current.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
441	[BUG]  [BUGGY]  byte[]  current  =  current.getValue();  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  byte[]  current  =  current.getValue();  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	byte[]  current  =  current.getValue();	  byte[]    current    =    current.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
442	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(current.entry,  hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecated(current.entry,  hasDataDescriptor);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecated(current.entry,  hasDataDescriptor);	  ZipUtil.checkRequestedDescriptor(current.entry,    hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
443	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  length  -  offset);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  length  -  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current.entry,  length  -  offset);	  ZipUtil.checkRequestedFeatures(current.entry,    offset    -    offset);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
444	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  offset  -  buffer.length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  offset  -  buffer.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current.entry,  offset  -  buffer.length);	  ZipUtil.checkRequestedFeatures(current.entry,    offset    -    offset);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
445	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  currToken);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  currToken);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(current.entry,  currToken);	  ZipUtil.checkRequestedFeatures(currToken,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
446	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(currToken,  buffer);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(currToken,  buffer);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(currToken,  buffer);	  ZipUtil.checkRequestedFeatures(currToken,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
447	[BUG]  [BUGGY]  current.entry  =  entryEncoding.decode(buffer,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  current.entry  =  entryEncoding.decode(buffer,  offset,  length  +  1);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	current.entry  =  entryEncoding.decode(buffer,  offset,  length  +  1);	  current.entry    =    entryEncoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
448	[BUG]  [BUGGY]  current.entry  =  entryEncoding.decode(buffer,  offset,  length  -  offset);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  current.entry  =  entryEncoding.decode(buffer,  offset,  length  -  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	current.entry  =  entryEncoding.decode(buffer,  offset,  length  -  offset);	  current.entry    =    entryEncoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
449	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(current.entry,  offset  +  length  -  1);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecated(current.entry,  offset  +  length  -  1);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecated(current.entry,  offset  +  length  -  1);	  ZipUtil.checkDeprecated(current.entry,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
450	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(current.entry,  offset  +  length,  lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecated(current.entry,  offset  +  length,  lastStoredEntry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecated(current.entry,  offset  +  length,  lastStoredEntry);	  ZipUtil.checkDeprecated(current.entry,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
451	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  isUTF8Flag?  hasUTF8Flag  :  hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  isUTF8Flag?  hasUTF8Flag  :  hasDataDescriptor);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(current.entry,  isUTF8Flag?  hasUTF8Flag  :  hasDataDescriptor);	  ZipUtil.checkDeclaredFeatures(current.entry,    hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
452	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  hasUTF8Flag?  hasUTF8Flag  :  hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  hasUTF8Flag?  hasUTF8Flag  :  hasDataDescriptor);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(current.entry,  hasUTF8Flag?  hasUTF8Flag  :  hasDataDescriptor);	  ZipUtil.checkDeclaredFeatures(current.entry,    hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
453	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  dataDescriptor);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  dataDescriptor);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(current.entry,  dataDescriptor);	  ZipUtil.checkDeclaredFeatures(current.entry,    hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
454	[BUG]  [BUGGY]  ZipUtil.checkDescriptor(current.entry,  hasUTF8Flag);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDescriptor(current.entry,  hasUTF8Flag);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptor(current.entry,  hasUTF8Flag);	  ZipUtil.checkDescriptor(current.entry);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
455	[BUG]  [BUGGY]  ZipUtil.checkAndFixDescriptor(current.entry);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkAndFixDescriptor(current.entry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkAndFixDescriptor(current.entry);	  ZipUtil.checkDescriptor(current.entry);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
456	[BUG]  [BUGGY]  current.entry  =  entryEncoding.decodeBase64Entry(buffer,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  current.entry  =  entryEncoding.decodeBase64Entry(buffer,  offset,  length  +  1);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	current.entry  =  entryEncoding.decodeBase64Entry(buffer,  offset,  length  +  1);	  current.entry    =    entryEncoding.decodeBase64Entry(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
457	[BUG]  [BUGGY]  current.entry  =  entryEncoding.decodeBase64Entry(buffer,  offset,  length,  lastStoredEntry);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  current.entry  =  entryEncoding.decodeBase64Entry(buffer,  offset,  length,  lastStoredEntry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	current.entry  =  entryEncoding.decodeBase64Entry(buffer,  offset,  length,  lastStoredEntry);	  current.entry    =    entryEncoding.decodeBase64Entry(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
458	[BUG]  [BUGGY]  ZipUtil.checkAndFixDeprecatedFeatures(current.entry,  offset);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkAndFixDeprecatedFeatures(current.entry,  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkAndFixDeprecatedFeatures(current.entry,  offset);	  ZipUtil.checkDeprecatedFeatures(offset,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
459	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(this.fileName,  current.entry);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(this.fileName,  current.entry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(this.fileName,  current.entry);	  ZipUtil.checkDeprecatedFeatures(offset,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
460	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  false,  buffer.length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  false,  buffer.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(current.entry,  false,  buffer.length);	  ZipUtil.checkDeprecatedFeatures(current.entry,    false);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
461	[BUG]  [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  ze,  length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  ze,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptorFor(current.entry,  ze,  length);	  ZipUtil.checkDescriptorFor(current.entry,    ze);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
462	[BUG]  [BUGGY]  ZipUtil.checkAndFixRequestedDescriptor(current.entry,  hasUTF8Flag);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkAndFixRequestedDescriptor(current.entry,  hasUTF8Flag);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkAndFixRequestedDescriptor(current.entry,  hasUTF8Flag);	  ZipUtil.checkAndFixRequestedDescriptor(current.entry);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
463	[BUG]  [BUGGY]  ZipUtil.checkAndFixRequestedDescriptor(current.entry,  buffer);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkAndFixRequestedDescriptor(current.entry,  buffer);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkAndFixRequestedDescriptor(current.entry,  buffer);	  ZipUtil.checkAndFixRequestedDescriptor(current.entry);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
464	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry  ==  read);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry  ==  read);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry  ==  read);	  ZipUtil.checkRequestedFeatures(read,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
465	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.deflateInflate(buffer,  offset,  length,  current.length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  entryEncoding.deflateInflate(buffer,  offset,  length,  current.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  entryEncoding.deflateInflate(buffer,  offset,  length,  current.length);	  Inflater    inf    =    entryEncoding.deflateInflate(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
466	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.deflateInflate(buffer,  offset,  length  -  offset);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  entryEncoding.deflateInflate(buffer,  offset,  length  -  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  entryEncoding.deflateInflate(buffer,  offset,  length  -  offset);	  Inflater    inf    =    entryEncoding.deflateInflate(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
467	[BUG]  [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  fileNameLen);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  fileNameLen);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedDescriptor(current.entry,  fileNameLen);	  ZipUtil.checkRequestedDescriptor(current.entry,    length);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
468	[BUG]  [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  read,  ze);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  read,  ze);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptorFor(current.entry,  read,  ze);	  ZipUtil.checkDescriptorFor(current.entry,    read);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
469	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  buffer,  offset  -  offset);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  buffer,  offset  -  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current.entry,  buffer,  offset  -  offset);	  ZipUtil.checkRequestedFeatures(current.entry,    buffer,    offset);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
470	[BUG]  [BUGGY]  Integer  current  =  current.entry.getEntryValue();  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Integer  current  =  current.entry.getEntryValue();  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Integer  current  =  current.entry.getEntryValue();	  Integer    current    =    current.entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
471	[BUG]  [BUGGY]  Integer  current  =  current.entry.getImplicitReturn();  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Integer  current  =  current.entry.getImplicitReturn();  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Integer  current  =  current.entry.getImplicitReturn();	  Integer    current    =    current.entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
472	[BUG]  [BUGGY]  int  currentLen  =  current.read(buffer,  offset,  length  -  off);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  int  currentLen  =  current.read(buffer,  offset,  length  -  off);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	int  currentLen  =  current.read(buffer,  offset,  length  -  off);	  int    currentLen    =    current.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
473	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(current.getEntry(),  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecated(current.getEntry(),  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecated(current.getEntry(),  length);	  ZipUtil.checkDeprecated(current.entry,    length);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
474	[BUG]  [BUGGY]  ZipUtil.checkNotState(current.entry!=  null);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkNotState(current.entry!=  null);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkNotState(current.entry!=  null);	  ZipUtil.checkState(this.entry!=    null);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
475	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  offset,  length  +  1);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current.entry,  offset,  length  +  1);	  ZipUtil.checkRequestedFeatures(current.entry,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
476	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  buffer,  offset,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(current.entry,  buffer,  offset,  length);	  ZipUtil.checkRequestedFeatures(current.entry,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
477	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry  ==  null  &&  current.entry.getMethod()!=  ZipArchiveOutputStream.DEFAULT);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry  ==  null  &&  current.entry.getMethod()!=  ZipArchiveOutputStream.DEFAULT);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry  ==  null  &&  current.entry.getMethod()!=  ZipArchiveOutputStream.DEFAULT);	  ZipUtil.checkState(current.entry!=    null    &&    current.entry.getMethod()    ==    ZipArchiveOutputStream.DEFAULT);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
478	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry  >=  null  &&  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFAULT);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry  >=  null  &&  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFAULT);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry  >=  null  &&  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFAULT);	  ZipUtil.checkState(current.entry!=    null    &&    current.entry.getMethod()    ==    ZipArchiveOutputStream.DEFAULT);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
479	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(array,  offset);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(array,  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(array,  offset);	  ZipUtil.checkRequestedFeatures(array,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
480	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(array,  offset  +  length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(array,  offset  +  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(array,  offset  +  length);	  ZipUtil.checkRequestedFeatures(array,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
481	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  offset,  length  +  1);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(current.entry,  offset,  length  +  1);	  ZipUtil.checkDeclaredFeatures(current.entry,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
482	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  offset,  length  -  1);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(current.entry,  offset,  length  -  1);	  ZipUtil.checkDeclaredFeatures(current.entry,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
483	[BUG]  [BUGGY]  int  currentSize  =  current.getSize();  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  int  currentSize  =  current.getSize();  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	int  currentSize  =  current.getSize();	  int    currentSize    =    current.size();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
484	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(lastStoredEntry,  false);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(lastStoredEntry,  false);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(lastStoredEntry,  false);	  ZipUtil.checkDeclaredFeatures(current.entry,    false);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
485	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(offset,  false);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(offset,  false);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(offset,  false);	  ZipUtil.checkDeclaredFeatures(current.entry,    false);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
486	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  buffer,  offset  +  length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  buffer,  offset  +  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(current.entry,  buffer,  offset  +  length);	  ZipUtil.checkDeprecatedFeatures(current.entry,    buffer);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
487	[BUG]  [BUGGY]  CurrentEntry  current  =  entryEncoding.decode(buffer,  offset  +  length,  current.length);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  CurrentEntry  current  =  entryEncoding.decode(buffer,  offset  +  length,  current.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	CurrentEntry  current  =  entryEncoding.decode(buffer,  offset  +  length,  current.length);	  current.entry    =    entryEncoding.decode(buffer,    offset    +    length,    current.length);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
488	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(this.read,  current.entry);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(this.read,  current.entry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(this.read,  current.entry);	  ZipUtil.checkDeclaredFeatures(read,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
489	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(declared,  current.entry);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(declared,  current.entry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(declared,  current.entry);	  ZipUtil.checkDeclaredFeatures(read,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
490	[BUG]  [BUGGY]  ZipUtil.checkNotState(current.entry  ==  null);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkNotState(current.entry  ==  null);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkNotState(current.entry  ==  null);	  ZipUtil.checkState(this.entry    ==    null);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
491	[BUG]  [BUGGY]  ZipUtil.checkDescriptor(current.entry  ==  null);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDescriptor(current.entry  ==  null);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptor(current.entry  ==  null);	  ZipUtil.checkState(this.entry    ==    null);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
492	[BUG]  [BUGGY]  CurrentEntry  current  =  current.getValue();  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  CurrentEntry  current  =  current.getValue();  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	CurrentEntry  current  =  current.getValue();	  CurrentEntry    current    =    currentEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
493	[BUG]  [BUGGY]  CurrentEntry  current  =  current.entry.getKey();  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  CurrentEntry  current  =  current.entry.getKey();  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	CurrentEntry  current  =  current.entry.getKey();	  CurrentEntry    current    =    currentEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
494	[BUG]  [BUGGY]  CurrentEntry  current  =  entry.getValue();  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  CurrentEntry  current  =  entry.getValue();  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	CurrentEntry  current  =  entry.getValue();	  CurrentEntry    current    =    currentEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
495	[BUG]  [BUGGY]  CurrentEntry  current  =  currentEntry.getDataEntry();  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  CurrentEntry  current  =  currentEntry.getDataEntry();  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	CurrentEntry  current  =  currentEntry.getDataEntry();	  CurrentEntry    current    =    currentEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
496	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length);	  Inflater    inf    =    entryEncoding.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
497	[BUG]  [BUGGY]  Inflater  inf  =  current.in.getInputStream();  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  current.in.getInputStream();  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  current.in.getInputStream();	  Inflater    inf    =    entryEncoding.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
498	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(buffer,  offset,  current.entry);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(buffer,  offset,  current.entry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(buffer,  offset,  current.entry);	  ZipUtil.checkDeclaredFeatures(offset,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
499	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry  ==  null  &&  current.entry.getMethod()!=  ZipArchiveInputStream.DEFAULT);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry  ==  null  &&  current.entry.getMethod()!=  ZipArchiveInputStream.DEFAULT);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry  ==  null  &&  current.entry.getMethod()!=  ZipArchiveInputStream.DEFAULT);	  ZipUtil.checkState(current.entry!=    null    &&    current.entry.getMethod()    ==    ZipArchiveInputStream.DEFAULT);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
500	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry  ==  offset);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry  ==  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry  ==  offset);	  ZipUtil.checkRequestedFeatures(offset,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
501	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(lastStoredEntry,  true);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(lastStoredEntry,  true);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(lastStoredEntry,  true);	  ZipUtil.checkDeclaredFeatures(current.entry,    true);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
502	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(this.closed,  current.entry,  true);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(this.closed,  current.entry,  true);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(this.closed,  current.entry,  true);	  ZipUtil.checkDeclaredFeatures(current.entry,    true);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
503	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry  ==  null  &&  current.entry.getMethod()!=  ZipArchiveOutputStream.DEFLATED);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry  ==  null  &&  current.entry.getMethod()!=  ZipArchiveOutputStream.DEFLATED);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry  ==  null  &&  current.entry.getMethod()!=  ZipArchiveOutputStream.DEFLATED);	  ZipUtil.checkState(current.entry!=    null    &&    current.entry.getMethod()    ==    ZipArchiveOutputStream.DEFLATED);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
504	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry  >=  null  &&  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry  >=  null  &&  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry  >=  null  &&  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED);	  ZipUtil.checkState(current.entry!=    null    &&    current.entry.getMethod()    ==    ZipArchiveOutputStream.DEFLATED);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
505	[BUG]  [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  hasUTF8Flag,  true);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  hasUTF8Flag,  true);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedDescriptor(current.entry,  hasUTF8Flag,  true);	  ZipUtil.checkRequestedDescriptor(current.entry,    hasUTF8Flag);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
506	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  offset  -  length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  offset  -  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current.entry,  offset  -  length);	  ZipUtil.checkRequestedFeatures(current.entry,    offset    -    offset);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
507	[BUG]  [BUGGY]  Inflater  inf  =  current.entry.getInputStream(),  offset  +  1;  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  current.entry.getInputStream(),  offset  +  1;  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  current.entry.getInputStream(),  offset  +  1;	  Inflater    inf    =    current.entry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
508	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  ZERO);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  ZERO);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(current.entry,  ZERO);	  ZipUtil.checkDeprecatedFeatures(current.entry,    ze);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
509	[BUG]  [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  offset  -  offset);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  offset  -  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedDescriptor(current.entry,  offset  -  offset);	  ZipUtil.checkRequestedDescriptor(current.entry,    offset);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
510	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream(offset  +  length);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  getInputStream(offset  +  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  getInputStream(offset  +  length);	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
511	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream(in,  buffer.length);  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  getInputStream(in,  buffer.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  getInputStream(in,  buffer.length);	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
512	[BUG]  [BUGGY]  current.entry  =  entryEncoding.encode(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  current.entry  =  entryEncoding.encode(buffer,  offset,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	current.entry  =  entryEncoding.encode(buffer,  offset,  length);	  current.entry    =    entryEncoding.getValue();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
513	[BUG]  [BUGGY]  current.entry  =  current.zipEncoding.getValue();  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  current.entry  =  current.zipEncoding.getValue();  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	current.entry  =  current.zipEncoding.getValue();	  current.entry    =    entryEncoding.getValue();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
514	[BUG]  [BUGGY]  byte[]  current  =  current.descriptor.getDataDescriptor();  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  byte[]  current  =  current.descriptor.getDataDescriptor();  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	byte[]  current  =  current.descriptor.getDataDescriptor();	  byte[]    current    =    current.getDataDescriptor();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
515	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry!=  null,  current.entry.getMethod()  ==  ZipArchiveEntry.DEFLATED);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry!=  null,  current.entry.getMethod()  ==  ZipArchiveEntry.DEFLATED);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry!=  null,  current.entry.getMethod()  ==  ZipArchiveEntry.DEFLATED);	  ZipUtil.checkState(current.entry!=    null    &&    current.entry.getMethod()    ==    ZipArchiveEntry.DEFLATED);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
516	[BUG]  [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  offset  +  length,  current.offset);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  offset  +  length,  current.offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptorFor(current.entry,  offset  +  length,  current.offset);	  ZipUtil.checkDescriptorFor(current.entry,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
517	[BUG]  [BUGGY]  ZipUtil.checkPermission(current.entry,  offset);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkPermission(current.entry,  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkPermission(current.entry,  offset);	  ZipUtil.checkRequestedFeatures(offset,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
518	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(this.current.entry,  true);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(this.current.entry,  true);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(this.current.entry,  true);	  ZipUtil.checkDeclaredFeatures(current.entry,    true);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
519	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry!=  null,  current.entry.getMethod()  ==  ZipArchiveEntry.DATA_DESCRIPTOR);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry!=  null,  current.entry.getMethod()  ==  ZipArchiveEntry.DATA_DESCRIPTOR);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry!=  null,  current.entry.getMethod()  ==  ZipArchiveEntry.DATA_DESCRIPTOR);	  ZipUtil.checkState(current.entry!=    null    &&    current.entry.getMethod()    ==    ZipArchiveEntry.DATA_DESCRIPTOR);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
520	[BUG]  [BUGGY]  ZipUtil.checkAndFixState(current.entry!=  null);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkAndFixState(current.entry!=  null);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkAndFixState(current.entry!=  null);	  ZipUtil.checkState(this.entry!=    null);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
521	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  length,  offset);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  length,  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current.entry,  length,  offset);	  ZipUtil.checkRequestedFeatures(length,    current.entry,    offset);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
522	[BUG]  [BUGGY]  ZimbraZipUtil.checkDeprecatedFeatures(current.entry,  false);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZimbraZipUtil.checkDeprecatedFeatures(current.entry,  false);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZimbraZipUtil.checkDeprecatedFeatures(current.entry,  false);	  ZipUtil.checkDeprecatedFeatures(current.entry,    true);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
523	[BUG]  [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  hasUTF8);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  hasUTF8);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptorFor(current.entry,  hasUTF8);	  ZipUtil.checkDescriptorFor(current.entry,    hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
524	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.deflate(buffer,  offset,  length,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  entryEncoding.deflate(buffer,  offset,  length,  zipEncoding);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  entryEncoding.deflate(buffer,  offset,  length,  zipEncoding);	  Inflater    inf    =    entryEncoding.deflate(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
525	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  hasDataDescriptor,  hasUTF8Flag);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  hasDataDescriptor,  hasUTF8Flag);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(current.entry,  hasDataDescriptor,  hasUTF8Flag);	  ZipUtil.checkDeprecatedFeatures(current.entry,    hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
526	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  hasUTF8Flag?  hasUTF8Flag  :  hasDataDescriptor);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  hasUTF8Flag?  hasUTF8Flag  :  hasDataDescriptor);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(current.entry,  hasUTF8Flag?  hasUTF8Flag  :  hasDataDescriptor);	  ZipUtil.checkDeprecatedFeatures(current.entry,    hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
527	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  hasUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  hasUnicodeExtraFields);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(current.entry,  hasUnicodeExtraFields);	  ZipUtil.checkDeprecatedFeatures(current.entry,    hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
528	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  buffer.length,  current.length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  buffer.length,  current.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(current.entry,  buffer.length,  current.length);	  ZipUtil.checkDeprecatedFeatures(current.entry,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
529	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  buffer.length,  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  buffer.length,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(current.entry,  buffer.length,  length);	  ZipUtil.checkDeprecatedFeatures(current.entry,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
530	[BUG]  [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  hasUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  hasUnicodeExtraFields);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedDescriptor(current.entry,  hasUnicodeExtraFields);	  ZipUtil.checkRequestedDescriptor(current.entry,    hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
531	[BUG]  [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  hasDataDescriptor,  hasUTF8Flag);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  hasDataDescriptor,  hasUTF8Flag);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedDescriptor(current.entry,  hasDataDescriptor,  hasUTF8Flag);	  ZipUtil.checkRequestedDescriptor(current.entry,    hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
532	[BUG]  [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  null);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDescriptorFor(current.entry,  null);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDescriptorFor(current.entry,  null);	  ZipUtil.checkDescriptorFor(current.entry,    true);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
533	[BUG]  [BUGGY]  current.entry  =  entryEncoding.decodeBase64Entry(buffer,  offset,  length,  current.size);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  current.entry  =  entryEncoding.decodeBase64Entry(buffer,  offset,  length,  current.size);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	current.entry  =  entryEncoding.decodeBase64Entry(buffer,  offset,  length,  current.size);	  current.entry    =    entryEncoding.decodeBase64Entry(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
534	[BUG]  [BUGGY]  current.entry  =  entryEncoding.decodeBase64Entry(buffer,  offset,  length,  current.fileNameLen);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  current.entry  =  entryEncoding.decodeBase64Entry(buffer,  offset,  length,  current.fileNameLen);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	current.entry  =  entryEncoding.decodeBase64Entry(buffer,  offset,  length,  current.fileNameLen);	  current.entry    =    entryEncoding.decodeBase64Entry(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
535	[BUG]  [BUGGY]  current.entry  =  entryEncoding.decodeBase64Entry(buffer,  offset,  length,  current.read);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  current.entry  =  entryEncoding.decodeBase64Entry(buffer,  offset,  length,  current.read);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	current.entry  =  entryEncoding.decodeBase64Entry(buffer,  offset,  length,  current.read);	  current.entry    =    entryEncoding.decodeBase64Entry(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
536	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  buffer.length,  current.length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  buffer.length,  current.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(current.entry,  buffer.length,  current.length);	  ZipUtil.checkDeclaredFeatures(current.entry,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
537	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  offset  -  offset);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  offset  -  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(current.entry,  offset  -  offset);	  ZipUtil.checkDeclaredFeatures(current.entry,    offset);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
538	[BUG]  [BUGGY]  ZipUtil.checkAndFixRequestedDescriptor(current.entry,  buffer.length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkAndFixRequestedDescriptor(current.entry,  buffer.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkAndFixRequestedDescriptor(current.entry,  buffer.length);	  ZipUtil.checkAndFixRequestedDescriptor(current.entry);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
539	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  buffer.length,  current.length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  buffer.length,  current.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current.entry,  buffer.length,  current.length);	  ZipUtil.checkRequestedFeatures(current.entry,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
540	[BUG]  [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  this.entryEncoding);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecatedFeatures(current.entry,  this.entryEncoding);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecatedFeatures(current.entry,  this.entryEncoding);	  ZipUtil.checkDeprecatedFeatures(this.entry,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
541	[BUG]  [BUGGY]  Inflater  inf  =  this.entryEncoding.getInputStream();  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  this.entryEncoding.getInputStream();  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  this.entryEncoding.getInputStream();	  Inflater    inf    =    entryEncoding.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
542	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.encode(current.entry);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  entryEncoding.encode(current.entry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  entryEncoding.encode(current.entry);	  Inflater    inf    =    entryEncoding.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
543	[BUG]  [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  false));  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  false));  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedDescriptor(current.entry,  false));	  ZipUtil.checkRequestedDescriptor(current.entry,    false);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
544	[BUG]  [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  null);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedDescriptor(current.entry,  null);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedDescriptor(current.entry,  null);	  ZipUtil.checkRequestedDescriptor(current.entry,    false);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
545	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  hasDataDescriptor,  hasUTF8Flag);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  hasDataDescriptor,  hasUTF8Flag);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(current.entry,  hasDataDescriptor,  hasUTF8Flag);	  ZipUtil.checkDeclaredFeatures(current.entry,    hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
546	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  hasUTF8);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  hasUTF8);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(current.entry,  hasUTF8);	  ZipUtil.checkDeclaredFeatures(current.entry,    hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
547	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  hasUnicodeExtraFields);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  hasUnicodeExtraFields);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(current.entry,  hasUnicodeExtraFields);	  ZipUtil.checkDeclaredFeatures(current.entry,    hasDataDescriptor);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
548	[BUG]  [BUGGY]  ZipUtil.checkAndFixState(current.entry  ==  null);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkAndFixState(current.entry  ==  null);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkAndFixState(current.entry  ==  null);	  ZipUtil.checkState(this.entry    ==    null);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
549	[BUG]  [BUGGY]  ZipUtil.checkState(this.entry!=  current.entry);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(this.entry!=  current.entry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(this.entry!=  current.entry);	  ZipUtil.checkState(this.entry    ==    null);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
550	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(array,  current.entry);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(array,  current.entry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(array,  current.entry);	  ZipUtil.checkRequestedFeatures(array,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
551	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(this.array,  current.entry);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(this.array,  current.entry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(this.array,  current.entry);	  ZipUtil.checkRequestedFeatures(array,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
552	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  array);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  array);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(current.entry,  array);	  ZipUtil.checkRequestedFeatures(array,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
553	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  persistent.entry);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  persistent.entry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current.entry,  persistent.entry);	  ZipUtil.checkRequestedFeatures(remainder,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
554	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  marker);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  marker);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current.entry,  marker);	  ZipUtil.checkRequestedFeatures(remainder,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
555	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  remainder);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  remainder);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current.entry,  remainder);	  ZipUtil.checkRequestedFeatures(remainder,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
556	[BUG]  [BUGGY]  if(current.entry!=  null)  {  ZipUtil.checkAndFixDeprecated(current.entry);  }  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  if(current.entry!=  null)  {  ZipUtil.checkAndFixDeprecated(current.entry);  }  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	if(current.entry!=  null)  {  ZipUtil.checkAndFixDeprecated(current.entry);  }	  ZipUtil.checkAndFixDeprecated(current.entry);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
557	[BUG]  [BUGGY]  ZipUtil.checkAndFixDeprecated(current.entry,  buffer.length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkAndFixDeprecated(current.entry,  buffer.length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkAndFixDeprecated(current.entry,  buffer.length);	  ZipUtil.checkAndFixDeprecated(current.entry);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
558	[BUG]  [BUGGY]  if(current.entry!=  null)  {  Inflater  inf  =  current.getInputStream();  if(inf!=  null)  {  for(int  i  =  0,  length  =  inf.length;  i  <  length;  ++i)  {  inputStream.close();  }  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  if(current.entry!=  null)  {  Inflater  inf  =  current.getInputStream();  if(inf!=  null)  {  for(int  i  =  0,  length  =  inf.length;  i  <  length;  ++i)  {  inputStream.close();  }  }  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	if(current.entry!=  null)  {  Inflater  inf  =  current.getInputStream();  if(inf!=  null)  {  for(int  i  =  0,  length  =  inf.length;  i  <  length;  ++i)  {  inputStream.close();  }  }	  Inflater    inf    =    current.getInputStream();    if(inf!=    null)    {    for(int    i    =    0,    length    =    inf.length;    i    <    length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
559	[BUG]  [BUGGY]  InputStream  in  =  current.entry.getInputStream();  if(in!=  null)  {  for(int  i  =  0,  length  =  inf.length;  i  <  length;  ++i)  {  inputStream.close();  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  InputStream  in  =  current.entry.getInputStream();  if(in!=  null)  {  for(int  i  =  0,  length  =  inf.length;  i  <  length;  ++i)  {  inputStream.close();  }  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	InputStream  in  =  current.entry.getInputStream();  if(in!=  null)  {  for(int  i  =  0,  length  =  inf.length;  i  <  length;  ++i)  {  inputStream.close();  }	  Inflater    inf    =    current.getInputStream();    if(inf!=    null)    {    for(int    i    =    0,    length    =    inf.length;    i    <    length;    ++i)    {    inputStream.close();    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
560	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  buffer,  offset  -  length);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  buffer,  offset  -  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current.entry,  buffer,  offset  -  length);	  ZipUtil.checkRequestedFeatures(current.entry,    buffer,    offset);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
561	[BUG]  [BUGGY]  current.entry  =  entryEncoding.decode(buffer,  offset,  length,  current.fileNameLen);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  current.entry  =  entryEncoding.decode(buffer,  offset,  length,  current.fileNameLen);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	current.entry  =  entryEncoding.decode(buffer,  offset,  length,  current.fileNameLen);	  current.entry    =    entryEncoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
562	[BUG]  [BUGGY]  current.entry  =  entryEncoding.decode(buffer,  offset,  length,  current.inputStream);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  current.entry  =  entryEncoding.decode(buffer,  offset,  length,  current.inputStream);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	current.entry  =  entryEncoding.decode(buffer,  offset,  length,  current.inputStream);	  current.entry    =    entryEncoding.decode(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
563	[BUG]  [BUGGY]  if(current.entry!=  null)  {  ZipUtil.checkDeprecatedFeatures(this.entry);  }  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  if(current.entry!=  null)  {  ZipUtil.checkDeprecatedFeatures(this.entry);  }  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	if(current.entry!=  null)  {  ZipUtil.checkDeprecatedFeatures(this.entry);  }	  ZipUtil.checkDeprecatedFeatures(this.entry);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
564	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry!=  null,  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFAULT);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry!=  null,  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFAULT);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry!=  null,  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFAULT);	  ZipUtil.checkState(current.entry!=    null    &&    current.entry.getMethod()    ==    ZipArchiveOutputStream.DEFAULT);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
565	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry!=  null;  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFAULT);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry!=  null;  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFAULT);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry!=  null;  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFAULT);	  ZipUtil.checkState(current.entry!=    null    &&    current.entry.getMethod()    ==    ZipArchiveOutputStream.DEFAULT);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
566	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  buffer.length,  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  buffer.length,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current.entry,  buffer.length,  length);	  ZipUtil.checkRequestedFeatures(current.entry,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
567	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  offset,  length  -  1);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current.entry,  offset,  length  -  1);	  ZipUtil.checkRequestedFeatures(current.entry,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
568	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.deflateInflate(buffer,  offset,  length,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Inflater  inf  =  entryEncoding.deflateInflate(buffer,  offset,  length,  zipEncoding);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Inflater  inf  =  entryEncoding.deflateInflate(buffer,  offset,  length,  zipEncoding);	  Inflater    inf    =    entryEncoding.deflateInflate(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
569	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry!=  null,  current.entry.getMethod()  ==  ZipArchiveInputStream.DEFAULT);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry!=  null,  current.entry.getMethod()  ==  ZipArchiveInputStream.DEFAULT);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry!=  null,  current.entry.getMethod()  ==  ZipArchiveInputStream.DEFAULT);	  ZipUtil.checkState(current.entry!=    null    &&    current.entry.getMethod()    ==    ZipArchiveInputStream.DEFAULT);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
570	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(this.current.entry,  false);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(this.current.entry,  false);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(this.current.entry,  false);	  ZipUtil.checkDeclaredFeatures(current.entry,    false);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
571	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(remainder,  buffer,  current.entry);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(remainder,  buffer,  current.entry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(remainder,  buffer,  current.entry);	  ZipUtil.checkRequestedFeatures(length,    buffer,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
572	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(this.read,  current.entry);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(this.read,  current.entry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(this.read,  current.entry);	  ZipUtil.checkRequestedFeatures(read,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
573	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  ZERO);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  ZERO);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(current.entry,  ZERO);	  ZipUtil.checkDeclaredFeatures(current.entry,    ze);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
574	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(current.entry,  off);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecated(current.entry,  off);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecated(current.entry,  off);	  ZipUtil.checkDeprecated(current.entry,    read);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
575	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  currToken);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  currToken);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(current.entry,  currToken);	  ZipUtil.checkRequestedFeatures(currToken,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
576	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(this.currToken,  current.entry);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(this.currToken,  current.entry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(this.currToken,  current.entry);	  ZipUtil.checkRequestedFeatures(currToken,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
577	[BUG]  [BUGGY]  int  currentSize  =  current.entry.size();  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  int  currentSize  =  current.entry.size();  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	int  currentSize  =  current.entry.size();	  int    currentSize    =    current.size();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
578	[BUG]  [BUGGY]  int  currentSize  =  current.current.size();  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  int  currentSize  =  current.current.size();  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	int  currentSize  =  current.current.size();	  int    currentSize    =    current.size();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
579	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry!=  null,  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry!=  null,  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry!=  null,  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED);	  ZipUtil.checkState(current.entry!=    null    &&    current.entry.getMethod()    ==    ZipArchiveOutputStream.DEFLATED);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
580	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry!=  null;  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry!=  null;  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry!=  null;  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED);	  ZipUtil.checkState(current.entry!=    null    &&    current.entry.getMethod()    ==    ZipArchiveOutputStream.DEFLATED);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
581	[BUG]  [BUGGY]  int  currentLen  =  current.entry.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  int  currentLen  =  current.entry.read(buffer,  offset,  length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	int  currentLen  =  current.entry.read(buffer,  offset,  length);	  int    currentLen    =    current.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
582	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  offset  +  length,  current.version);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  offset  +  length,  current.version);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current.entry,  offset  +  length,  current.version);	  ZipUtil.checkRequestedFeatures(current.entry,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
583	[BUG]  [BUGGY]  Integer  current  =  current.entry.getEntry(length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Integer  current  =  current.entry.getEntry(length);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Integer  current  =  current.entry.getEntry(length);	  Integer    current    =    current.getEntry(offset);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
584	[BUG]  [BUGGY]  Integer  current  =  currentEntry.getEntry(offset);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Integer  current  =  currentEntry.getEntry(offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Integer  current  =  currentEntry.getEntry(offset);	  Integer    current    =    current.getEntry(offset);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
585	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(current.entry,  offset  +  length,  current.version);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeprecated(current.entry,  offset  +  length,  current.version);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeprecated(current.entry,  offset  +  length,  current.version);	  ZipUtil.checkDeprecated(current.entry,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
586	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  this.entryEncoding);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(current.entry,  this.entryEncoding);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current.entry,  this.entryEncoding);	  ZipUtil.checkRequestedFeatures(this.entry,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
587	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(current,  this.entry);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkRequestedFeatures(current,  this.entry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkRequestedFeatures(current,  this.entry);	  ZipUtil.checkRequestedFeatures(this.entry,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
588	[BUG]  [BUGGY]  ZipUtil.checkPermission(current.entry,  this.entry);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkPermission(current.entry,  this.entry);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkPermission(current.entry,  this.entry);	  ZipUtil.checkRequestedFeatures(this.entry,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
589	[BUG]  [BUGGY]  ZipUtil.checkState(current.entry!=  null,  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFAULT));  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkState(current.entry!=  null,  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFAULT));  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkState(current.entry!=  null,  current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFAULT));	  ZipUtil.checkState(current.entry!=    null    &&    current.entry.getMethod()    ==    ZipArchiveOutputStream.DEFAULT));    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
590	[BUG]  [BUGGY]  current.entry  =  entryEncoding.decode(buffer,  offset  +  length,  current.offset);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  current.entry  =  entryEncoding.decode(buffer,  offset  +  length,  current.offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	current.entry  =  entryEncoding.decode(buffer,  offset  +  length,  current.offset);	  current.entry    =    entryEncoding.decode(buffer,    offset    +    length,    current.length);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
591	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(current.offset,  offset);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(current.offset,  offset);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(current.offset,  offset);	  ZipUtil.checkDeclaredFeatures(offset,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
592	[BUG]  [BUGGY]  Integer  current  =  entry.entry.getValue();  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  Integer  current  =  entry.entry.getValue();  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	Integer  current  =  entry.entry.getValue();	  Integer    current    =    current.entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
593	[BUG]  [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  this.entryEncoding);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }      [BUGGY]  ZipUtil.checkDeclaredFeatures(current.entry,  this.entryEncoding);  [BUGGY]      if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	373	373	1	replace	ZipUtil.checkDeclaredFeatures(current.entry,  this.entryEncoding);	  ZipUtil.checkDeclaredFeatures(this.entry,    current.entry);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
