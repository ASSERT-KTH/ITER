projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry!=null);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry==null);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(length,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptorFor(current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecated(current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedDescriptor(current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(current.entry,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(offset,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(current.entry,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(this.entry,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(length,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(read,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(current.entry,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(current.entry,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(this.entry,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(offset,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(this.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptorFor(current.entry,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptorFor(current.entry,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptorFor(current.entry,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptorFor(current.entry,true);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptorFor(current.entry,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(offset,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(read,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,offset+length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=current.getInputStream();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=currentEntry.getInputStream();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=current.entry.getInputStream();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373current.entry=entryEncoding.getValue();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373intcurrentSize=current.size();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=current.getInputStream();if(inf!=null){for(inti=0,length=inf.length;i<length;++i){inputStream.close();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=getInputStream();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(length,current.entry,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(length,buffer,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(array,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry!=null&&current.entry.getMethod()==ZipArchiveInputStream.DEFAULT);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry!=null&&current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry>=null);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry!=null&&current.entry.getMethod()==ZipArchiveOutputStream.DEFLATED);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(this.entry!=null);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,buffer,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedDescriptor(current.entry,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedDescriptor(current.entry,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedDescriptor(current.entry,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedDescriptor(current.entry,hasDataDescriptor);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedDescriptor(current.entry,false);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecated(current.entry,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecated(current.entry,offset+length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecated(current.entry,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecated(current.entry,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(this.entry==null);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry==null,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry!=null,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkAndFixDeprecated(current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=entryEncoding.deflateInflate(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373intcurrentLen=current.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373byte[]current=current.getDataDescriptor();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=entryEncoding.getInputStream();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=entryEncoding.deflate(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,buffer,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry!=null&&current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry!=null&&current.entry.getMethod()==ZipArchiveEntry.DEFLATED);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptorFor(current.entry,hasDataDescriptor);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptor(current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptorFor(current.entry,ze);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedDescriptor(current.entry,hasUTF8Flag);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkAndFixRequestedDescriptor(current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(current.entry,buffer);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(current.entry,hasDataDescriptor);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(current.entry,false);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(current.entry,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(current.entry,hasDataDescriptor);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(current.entry,false);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry!=null&&current.entry.getMethod()==ZipArchiveEntry.DATA_DESCRIPTOR);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,buffer);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,offset-offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(current.entry,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry[Delete]null);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry>>null);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(remainder,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(this.entry,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(currToken,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373current.entry=entryEncoding.decode(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373CurrentEntrycurrent=currentEntry.getValue();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373current.entry=entryEncoding.decodeBase64Entry(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Integercurrent=current.getEntry(offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373current.entry=entryEncoding.decode(buffer,offset+length,current.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Integercurrent=current.entry.getValue();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptorFor(current.entry,offset+length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecated(current.entry,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(current.entry,true);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(current.entry,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(current.entry,ze);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(current.entry,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(current.entry,ze);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(current.entry,true);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptorFor(current.entry,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptorFor(current.entry,buffer,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptorFor(current.entry,offset,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptorFor(current.entry,offset,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(current.entry,hasUTF8Flag);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(current.entry,hasUTF8Flag,hasDataDescriptor);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(current.entry,offset,hasDataDescriptor);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(current.entry,hasUTF8Flag&&hasDataDescriptor);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(current.entry,buffer,hasDataDescriptor);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(current.entry,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(read,current.entry,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(read,current.entry,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(current.entry,buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(current.entry,offset,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(current.entry,offset,length,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(current.entry,offset,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(read,current.entry,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(current.entry,read,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(length,current.entry,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(array,offset,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(array,current.entry,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(array,current.entry,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(array,buffer,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,array);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,offset-offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,buffer.length-offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(offset,current.entry.length-offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,offset-offset+length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,offset,length-offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,remaining);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,mainDesc);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(current.entry,this.fileName);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(current.entry,this.read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(this,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(false,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(this.entry,false);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(offset,current.entry,false);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(current.entry,false,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(current.entry,false,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(current.entry,false,true);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=current.currentEntry.getInputStream();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=currentEntry.getInputStream(offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=current.entry.getOutputStream();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=currentEntry.getInputStream(),offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(current.entry,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(current.entry,offset+length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry!=null||current.entry.getMethod()==ZipArchiveEntry.DEFLATED);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry==null||current.entry.getMethod()==ZipArchiveEntry.DEFLATED);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry==null&&current.entry.getMethod()==ZipArchiveEntry.DEFLATED);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(this.entry!=null&&current.entry.getMethod()==ZipArchiveEntry.DEFLATED);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(this.entry,true);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(offset,current.entry,true);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(length,true);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(offset,true);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(read,true);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,buffer,offset+length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,offset,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(offset,current.entry,buffer,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(offset,buffer,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373byte[]current=current.entry.getDataDescriptor();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373byte[]current=current.getEntryDataDescriptor();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373byte[]current=current.current.getDataDescriptor();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373byte[]current=current.getDataDescriptor(offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373CurrentEntrycurrent=current.entry.getValue();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373CurrentEntrycurrent=currentEntry.getKey();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373CurrentEntrycurrent=currentEntry.getNext();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373CurrentEntrycurrent=currentEntry.getValue(),offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373CurrentEntrycurrent=currentEntry.getValue(),offset+length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373CurrentEntrycurrent=currentEntry.getValue()+1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(current.entry,read,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(current.entry,read,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(read,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(current.entry,read,buffer);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(current.entry,offset,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(current.entry,read,current.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedDescriptor(current.entry,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedDescriptor(current.entry,offset+length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedDescriptor(current.entry,buffer,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedDescriptor(current.entry,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373intcurrentSize=current.size()-1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373intcurrentSize=current.size()-offset;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373intcurrentSize=current.size()+1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373intcurrentSize=current.length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373intcurrentSize=current.size()-2;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecated(current.entry,offset+length,current.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecated(current.entry,buffer.length+offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecated(current.entry,offset+length,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecated(current.entry,buffer.length+length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecated(current.entry,offset+offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecated(current.entry,offset+length,current.fileNameLen);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecated(current.entry,offset+length,current.offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Integercurrent=current.getEntry(offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Integercurrent=current.entry;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Integercurrent=current.getEntry(length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Integercurrent=entryEncoding.getEntry(offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Integercurrent=current.getEntry(offset+length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Integercurrent=entry.getEntry(offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptorFor(current.entry,false);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptorFor(current.entry,true,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptorFor(offset,current.entry,true);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptorFor(this.entry,true);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(current.entry,buffer,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(current.entry,ze,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(current.entry,ze,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(current.entry,fileName);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(offset,current.entry.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,buffer.length,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(buffer,current.entry.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(read,current.entry,buffer,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(offset,current.entry,buffer,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,read,buffer,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(offset,current.entry,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry!=offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkAndFixRequestedDescriptor(current.entry,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkAndFixRequestedDescriptor(current.entry,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkAndFixRequestedDescriptor(current.entry,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkAndFixRequestedDescriptor(current.entry,offset+length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkAndFixRequestedDescriptor(current.entry,hasDataDescriptor);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptorFor(current.entry,read,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptorFor(current.entry,read,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptorFor(current.entry,read,buffer);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptorFor(current.entry,read,current.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptorFor(read,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptorFor(current.entry,read,off);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=current.getInputStream(offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=current.getInputStream(),offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=current.getInputStream(),offset+length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=current.getInputStream(),offset;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecated(current.entry,read,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecated(current.entry,read,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecated(current.entry,offset,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecated(current.entry,read,buffer);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecated(current.entry,read,current.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecated(current.entry,offset+read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry!=null||current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry==null||current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry==null&&current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(this.entry!=null&&current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry>=null||current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptorFor(current.entry,fileNameLen);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptorFor(current.entry,buffer,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(current.entry,buffer);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(current.entry,buffer,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(current.entry,ze,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(this.entry,ze);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,currToken);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(currToken,buffer,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(currToken,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(currToken,current.entry,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedDescriptor(current.entry,hasUTF8);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedDescriptor(current.entry,dataDescriptor);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedDescriptor(current.entry,isUTF8Flag);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecated(current.entry,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecated(current.entry,off,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=current.entry.getInputStream(offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=current.entry.getInputStream(),offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=current.entry.getInputStream(),offset+length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=current.entry.getInputStream(),offset;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=current.entry.getFileInputStream();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptorFor(current.entry,buffer.length+length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptorFor(current.entry,buffer.length+offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptorFor(current.entry,offset+length,current.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptorFor(current.entry,offset+length,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptorFor(current.entry,offset+offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptorFor(current.entry,buffer,offset+length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptorFor(current.entry,offset+length,current.fileNameLen);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373intcurrentLen=current.read(buffer,offset,length,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373intcurrentLen=current.read(buffer,offset,length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373intcurrentLen=current.read(buffer,offset,length,CFH_LEN);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373intcurrentLen=current.read(buffer,offset,length,fileNameLen);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373intcurrentLen=current.read(buffer,offset,length+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373intcurrentLen=current.read(buffer,offset,length-offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry!=null||current.entry.getMethod()==ZipArchiveInputStream.DEFAULT);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry==null||current.entry.getMethod()==ZipArchiveInputStream.DEFAULT);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry==null&&current.entry.getMethod()==ZipArchiveInputStream.DEFAULT);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(this.entry!=null&&current.entry.getMethod()==ZipArchiveInputStream.DEFAULT);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry>=null||current.entry.getMethod()==ZipArchiveInputStream.DEFAULT);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecated(current.entry,buffer,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecated(current.entry,offset,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecated(current.entry,offset-offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedDescriptor(current.entry,true);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedDescriptor(current.entry,false,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedDescriptor(current.entry,false,true);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedDescriptor(current.entry,false,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedDescriptor(current.entry,false,hasDataDescriptor);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(current.entry,hasUTF8Flag);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(current.entry,hasUTF8Flag,hasDataDescriptor);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(current.entry,buffer,hasDataDescriptor);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(current.entry,hasUTF8);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(current.entry,fileName,hasDataDescriptor);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373current.entry=entryEncoding.decode(buffer,offset+length,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373current.entry=entryEncoding.decode(buffer,offset+length,current.length-offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373current.entry=zipEncoding.decode(buffer,offset+length,current.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373current.entry=current.decode(buffer,offset+length,current.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373current.entry=entryEncoding.decode(buffer,offset+1,current.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373current.entry=entryEncoding.decode(buffer,offset+length,current.length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373current.entry=zipEncoding.decode(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373current.entry=entryEncoding.decode(buffer,offset,length,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373current.entry=entryEncoding.decode(buffer,offset,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373current.entry=entryEncoding.decode(buffer,offset,length,current.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373current.entry=entryEncoding.decode(buffer,offset,length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373current.entry=entryEncoding.decode(buffer,offset,length,current.read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373current.entry=entryEncoding.decode(buffer,offset,length,current.size);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=current.entryEncoding.getInputStream();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=current.encoding.getInputStream();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=current.zipEncoding.getInputStream();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=current.getEntryEncoding();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=current.in.read();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(this.entry,true);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(false,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(offset,current.entry,true);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(null,current.entry,true);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(this.current.entry,true);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkAndFixDeprecated(current.entry,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkAndFixDeprecated(current.entry,offset+length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkAndFixDeprecated(current.entry,off);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry==null,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry==null,offset+length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry!=null,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry!=null,offset+length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry==null,offset+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373InputStreamin=current.getInputStream();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373InputStreamin=current.getInputStream();if(in!=null){for(inti=0,length=inf.length;i<length;++i){inputStream.close();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373InputStreaminf=current.getInputStream();if(inf!=null){for(inti=0,length=inf.length;i<length;++i){inputStream.close();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373InputStreamin=currentEntry.getInputStream();if(in!=null){for(inti=0,length=inf.length;i<length;++i){inputStream.close();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373InputStreamin=current.getInputStream();if(in==null){for(inti=0,length=inf.length;i<length;++i){inputStream.close();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373InputStreaminputStream=current.getInputStream();if(inputStream!=null){for(inti=0,length=inf.length;i<length;++i){inputStream.close();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptor(current.entry,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptor(current.entry,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptor(current.entry,hasDataDescriptor);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptor(current.entry,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptor(current.entry,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptor(current.entry,true);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(current.entry,offset+length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(length,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(this.entry,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(offset,current.entry,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(current.entry,offset,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(current.entry,buffer,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(current.entry,buffer.length,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(current.entry,length,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(offset,current.entry.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(declaredFeatures,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry!=null||current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry==null||current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry==null&&current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(this.entry!=null&&current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry>=null||current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry!=null||current.entry.getMethod()==ZipArchiveEntry.DATA_DESCRIPTOR);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry==null||current.entry.getMethod()==ZipArchiveEntry.DATA_DESCRIPTOR);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry==null&&current.entry.getMethod()==ZipArchiveEntry.DATA_DESCRIPTOR);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(this.entry!=null&&current.entry.getMethod()==ZipArchiveEntry.DATA_DESCRIPTOR);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,offset,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,offset,length,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(read,current.entry,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,read,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(read,current.entry,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(current.entry,offset,buffer);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(current.entry,buffer,off);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptorFor(current.entry,fileName,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptorFor(current.entry,buffer.length-offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptorFor(current.entry,buffer.length,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,offset,buffer);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,buffer,off);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(buffer,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,this.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(this.entry,buffer,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(current.entry,this.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(current.entry,this.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(this.entry,current.entry,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(this.entry,current.entry,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(this.entry,buffer,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry!=null||current.entry.getMethod()==ZipArchiveOutputStream.DEFLATED);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry==null||current.entry.getMethod()==ZipArchiveOutputStream.DEFLATED);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry==null&&current.entry.getMethod()==ZipArchiveOutputStream.DEFLATED);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(this.entry!=null&&current.entry.getMethod()==ZipArchiveOutputStream.DEFLATED);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry>=null||current.entry.getMethod()==ZipArchiveOutputStream.DEFLATED);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(current.entry,buffer,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(current.entry,buffer.length,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(buffer,current.entry.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(offset,current.entry.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(current.entry,length,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=getInputStream(offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=getInputStream(offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=getInputStream(),buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=getOutputStream();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=getInputStream(),offset+length;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry!=null&&current.entry.getMethod()==ZipArchiveEntry.DEFAULT);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(read,buffer,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(length,buffer,offset,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(length,current.entry,buffer);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptorFor(current.entry,buffer);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptorFor(current.entry,fileName);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptorFor(current.entry,ze,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=entryEncoding.deflateInflate(buffer,offset,length,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=current.entryEncoding.deflateInflate(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=zipEncoding.deflateInflate(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=entryEncoding.deflateInflate(buffer,offset,length,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=entryEncoding.deflateInflate(buffer,offset,length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=entryEncoding.deflateInflate(buffer,offset,length+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=entryEncoding.deflateInflate(buffer,offset,length,current.entry.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry!=null,offset-offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry!=null,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373current.entry=current.entry.getValue();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373current.entry=current.getValue();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373current.entry=zipEncoding.getValue();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373current.entry=current.entryEncoding.getValue();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373current.entry=current.entry;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Integercurrent=current.entry.getKey();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Integercurrent=current.entry.getValue()-offset;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Integercurrent=current.entry.getValue()+1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Integercurrent=current.entry.getValue()+offset;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Integercurrent=current.entry.getRawValue();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Integercurrent=current.entry.getImplicitValue();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedDescriptor(current.entry,read,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedDescriptor(current.entry,read,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedDescriptor(read,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedDescriptor(current.entry,read,buffer);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedDescriptor(current.entry,read,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedDescriptor(current.entry,read,current.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(this.entry,false);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(offset,current.entry,false);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(this.current.entry,false);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(current.entry,false,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(current,this.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(this.entry,current.entry,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeature(current.entry,this.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(read,current.entry,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(read,current.entry,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,offset+length,current.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,buffer.length+length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,offset+length,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,buffer.length+offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,offset+length,current.offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,offset+length,current.fileNameLen);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(offset,current.entry.length+length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecated(current.entry,buffer.length,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecated(current.entry,buffer.length-offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecated(buffer,current.entry.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecated(current.entry,off,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373current.entry=entryEncoding.decodeBase64Entry(buffer,offset,length,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373current.entry=zipEncoding.decodeBase64Entry(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373current.entry=entryEncoding.decodeBase64Entry(buffer,offset,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373current.entry=entryEncoding.decodeBase64Entry(buffer,offset,length,current.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373current.entry=entryEncoding.decodeBase64Entry(buffer,offset,length,CFH_LEN);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373current.entry=entryEncoding.decodeBase64Entry(buffer,offset,length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373current.entry=entryEncoding.decodeBase64Entry(buffer,offset,length,fileNameLen);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedDescriptor(current.entry,hasUTF8Flag,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedDescriptor(current.entry,hasUTF8Flag,lastStoredEntry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedDescriptor(current.entry,hasUTF8Flag,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedDescriptor(current.entry,hasUTF8Flag,0);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedDescriptor(current.entry,hasUTF8Flag,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,length,current.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(length,current.entry,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(length,buffer,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(buffer,offset,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=entryEncoding.deflate(buffer,offset,length,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=current.entryEncoding.deflate(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=zipEncoding.deflate(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=entryEncoding.deflate(buffer,offset,length,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=entryEncoding.deflate(buffer,offset,length,current.entry.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=entryEncoding.deflate(buffer,offset,length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=entryEncoding.deflate(buffer,offset,length,fileNameLen);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(offset,current.entry,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedDescriptor(length,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptorFor(current.entry,hasUTF8Flag);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptorFor(current.entry,fileName,hasDataDescriptor);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptorFor(current.entry,dataDescriptor);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(offset,true);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(length,true);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptorFor(current.getEntry(),true);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptorFor(current.descriptor,true);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptor(current.entry,false);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=current.current.getInputStream();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=current.getOutputStream();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptorFor(current.entry,offset+length,hasDataDescriptor);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptorFor(current.entry,offset+length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(current.entry,buffer.length-offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(current.entry,buffer.length,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(current.entry,buffer.length+offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=current.entry.getFullInputStream();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=current.entry.getInputStream()-offset;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry==null,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry==null,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=handleUnicodeExtraFields(current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=getInputStream(in);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=handleUnicodeExtraFields(current.entry,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=inputStream.getInputStream();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(buffer,length,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(line,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=entryEncoding.deflate(buffer,offset,length+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=entryEncoding.deflate(buffer,offset,length-offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(current.entry,offset-offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,preserved);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(lastStoredEntry,ze);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(current.entry,ze,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry==null&&current.entry.getMethod()!=ZipArchiveEntry.DEFLATED);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry>=null&&current.entry.getMethod()==ZipArchiveEntry.DEFLATED);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry>=null||current.entry.getMethod()==ZipArchiveEntry.DEFLATED);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedDescriptor(current.entry,buffer);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,offset+length,lastStoredEntry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,offset+length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(current.entry,isUTF8Flag?hasUTF8Flag:hasDataDescriptor);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(current.entry,dataDescriptor);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(current.entry,hasUTF8Flag&&hasDataDescriptor);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry!=null,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry!=null,read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(this.entry,buffer);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(current,this.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,length,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,length,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkAndFixDeprecatedFeatures(current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeature(current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(current.entry,this.fileNameLen);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkAndFixDeprecatedFeatures(current.entry,this.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(this.entry,buffer);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(buffer,current.entry,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=current.sentry.getInputStream();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Integercurrent=current.getEntry(buffer,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Integercurrent=current.entry.getEntry(offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Integercurrent=current.getEntry(offset-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry==null&&current.entry.getMethod()!=ZipArchiveEntry.DATA_DESCRIPTOR);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry>=null&&current.entry.getMethod()==ZipArchiveEntry.DATA_DESCRIPTOR);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkAndFixDeprecated(current.entry,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkAndFixDeprecated(current.entry,buffer);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry==null&&current.entry.getMethod()!=ZipArchiveOutputStream.DEFAULT));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry>=null&&current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecated(current.entry,buffer);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecated(current.entry,read,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373if(current.entry!=null){InputStreaminf=current.getInputStream();if(inf!=null){for(inti=0,length=inf.length;i<length;++i){inputStream.close();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373if(current.entry!=null){InputStreaminf=current.getInputStream();if(inf!=null){for(inti=0,length=inf.length;i<length;++i){inputStream.close();}}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373if(current.entry!=null){Inflaterinf=current.getInputStream();if(inf!=null){for(inti=0,length=inf.length;i<length;++i){inputStream.close();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373current.entry=entryEncoding.getEntry();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373current.entry=ze.getValue();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecated(current.entry,this.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(this.entry,buffer);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(current.entry,buffer.length-offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373byte[]current=current.array.getDataDescriptor();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373byte[]current=current.getValue();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecated(current.entry,hasDataDescriptor);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,length-offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,offset-buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(current.entry,currToken);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(currToken,buffer);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373current.entry=entryEncoding.decode(buffer,offset,length+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373current.entry=entryEncoding.decode(buffer,offset,length-offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecated(current.entry,offset+length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecated(current.entry,offset+length,lastStoredEntry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(current.entry,isUTF8Flag?hasUTF8Flag:hasDataDescriptor);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(current.entry,hasUTF8Flag?hasUTF8Flag:hasDataDescriptor);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(current.entry,dataDescriptor);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptor(current.entry,hasUTF8Flag);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkAndFixDescriptor(current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373current.entry=entryEncoding.decodeBase64Entry(buffer,offset,length+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373current.entry=entryEncoding.decodeBase64Entry(buffer,offset,length,lastStoredEntry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkAndFixDeprecatedFeatures(current.entry,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(this.fileName,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(current.entry,false,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptorFor(current.entry,ze,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkAndFixRequestedDescriptor(current.entry,hasUTF8Flag);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkAndFixRequestedDescriptor(current.entry,buffer);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry==read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=entryEncoding.deflateInflate(buffer,offset,length,current.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=entryEncoding.deflateInflate(buffer,offset,length-offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedDescriptor(current.entry,fileNameLen);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptorFor(current.entry,read,ze);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,buffer,offset-offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Integercurrent=current.entry.getEntryValue();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Integercurrent=current.entry.getImplicitReturn();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373intcurrentLen=current.read(buffer,offset,length-off);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecated(current.getEntry(),length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkNotState(current.entry!=null);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,offset,length+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(current.entry,buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry==null&&current.entry.getMethod()!=ZipArchiveOutputStream.DEFAULT);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry>=null&&current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(array,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(array,offset+length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(current.entry,offset,length+1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(current.entry,offset,length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373intcurrentSize=current.getSize();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(lastStoredEntry,false);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(offset,false);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(current.entry,buffer,offset+length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373CurrentEntrycurrent=entryEncoding.decode(buffer,offset+length,current.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(this.read,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(declared,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkNotState(current.entry==null);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptor(current.entry==null);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373CurrentEntrycurrent=current.getValue();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373CurrentEntrycurrent=current.entry.getKey();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373CurrentEntrycurrent=entry.getValue();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373CurrentEntrycurrent=currentEntry.getDataEntry();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=entryEncoding.encode(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=current.in.getInputStream();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(buffer,offset,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry==null&&current.entry.getMethod()!=ZipArchiveInputStream.DEFAULT);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry==offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(lastStoredEntry,true);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(this.closed,current.entry,true);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry==null&&current.entry.getMethod()!=ZipArchiveOutputStream.DEFLATED);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry>=null&&current.entry.getMethod()==ZipArchiveOutputStream.DEFLATED);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedDescriptor(current.entry,hasUTF8Flag,true);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,offset-length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=current.entry.getInputStream(),offset+1;
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(current.entry,ZERO);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedDescriptor(current.entry,offset-offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=getInputStream(offset+length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=getInputStream(in,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373current.entry=entryEncoding.encode(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373current.entry=current.zipEncoding.getValue();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373byte[]current=current.descriptor.getDataDescriptor();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry!=null,current.entry.getMethod()==ZipArchiveEntry.DEFLATED);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptorFor(current.entry,offset+length,current.offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkPermission(current.entry,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(this.current.entry,true);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry!=null,current.entry.getMethod()==ZipArchiveEntry.DATA_DESCRIPTOR);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkAndFixState(current.entry!=null);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,length,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZimbraZipUtil.checkDeprecatedFeatures(current.entry,false);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptorFor(current.entry,hasUTF8);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=entryEncoding.deflate(buffer,offset,length,zipEncoding);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(current.entry,hasDataDescriptor,hasUTF8Flag);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(current.entry,hasUTF8Flag?hasUTF8Flag:hasDataDescriptor);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(current.entry,hasUnicodeExtraFields);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(current.entry,buffer.length,current.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(current.entry,buffer.length,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedDescriptor(current.entry,hasUnicodeExtraFields);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedDescriptor(current.entry,hasDataDescriptor,hasUTF8Flag);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDescriptorFor(current.entry,null);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373current.entry=entryEncoding.decodeBase64Entry(buffer,offset,length,current.size);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373current.entry=entryEncoding.decodeBase64Entry(buffer,offset,length,current.fileNameLen);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373current.entry=entryEncoding.decodeBase64Entry(buffer,offset,length,current.read);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(current.entry,buffer.length,current.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(current.entry,offset-offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkAndFixRequestedDescriptor(current.entry,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,buffer.length,current.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecatedFeatures(current.entry,this.entryEncoding);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=this.entryEncoding.getInputStream();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=entryEncoding.encode(current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedDescriptor(current.entry,false));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedDescriptor(current.entry,null);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(current.entry,hasDataDescriptor,hasUTF8Flag);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(current.entry,hasUTF8);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(current.entry,hasUnicodeExtraFields);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkAndFixState(current.entry==null);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(this.entry!=current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(array,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(this.array,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(current.entry,array);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,persistent.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,marker);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,remainder);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373if(current.entry!=null){ZipUtil.checkAndFixDeprecated(current.entry);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkAndFixDeprecated(current.entry,buffer.length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373if(current.entry!=null){Inflaterinf=current.getInputStream();if(inf!=null){for(inti=0,length=inf.length;i<length;++i){inputStream.close();}}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373InputStreamin=current.entry.getInputStream();if(in!=null){for(inti=0,length=inf.length;i<length;++i){inputStream.close();}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,buffer,offset-length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373current.entry=entryEncoding.decode(buffer,offset,length,current.fileNameLen);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373current.entry=entryEncoding.decode(buffer,offset,length,current.inputStream);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373if(current.entry!=null){ZipUtil.checkDeprecatedFeatures(this.entry);}
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry!=null,current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry!=null;current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,buffer.length,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,offset,length-1);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Inflaterinf=entryEncoding.deflateInflate(buffer,offset,length,zipEncoding);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry!=null,current.entry.getMethod()==ZipArchiveInputStream.DEFAULT);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(this.current.entry,false);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(remainder,buffer,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(this.read,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(current.entry,ZERO);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecated(current.entry,off);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(current.entry,currToken);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(this.currToken,current.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373intcurrentSize=current.entry.size();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373intcurrentSize=current.current.size();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry!=null,current.entry.getMethod()==ZipArchiveOutputStream.DEFLATED);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry!=null;current.entry.getMethod()==ZipArchiveOutputStream.DEFLATED);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373intcurrentLen=current.entry.read(buffer,offset,length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,offset+length,current.version);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Integercurrent=current.entry.getEntry(length);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Integercurrent=currentEntry.getEntry(offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeprecated(current.entry,offset+length,current.version);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current.entry,this.entryEncoding);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkRequestedFeatures(current,this.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkPermission(current.entry,this.entry);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkState(current.entry!=null,current.entry.getMethod()==ZipArchiveOutputStream.DEFAULT));
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373current.entry=entryEncoding.decode(buffer,offset+length,current.offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(current.offset,offset);
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373Integercurrent=entry.entry.getValue();
projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java373ZipUtil.checkDeclaredFeatures(current.entry,this.entryEncoding);
