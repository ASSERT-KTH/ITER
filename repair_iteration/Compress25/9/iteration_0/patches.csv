bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(toRead  <  csize)  {  [CE]  illegal  start  of  type  [FE]    arrays  first  differed  [CONTEXT]  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  [BUGGY]  if(toRead  <  csize)  {  [BUGGY]    toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  csize)  {	if  ((csize  -  current.bytesRead)  <  toRead)  {  	non-compiled	[CE]  illegal  start  of  type	17	None	replace
2	[BUG]  [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)  <  0)  {  [CE]  illegal  start  of  type  [FE]      arrays  first  differed  [CONTEXT]  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)  <  0)  {  [BUGGY]    toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(csize  -  current.bytesRead)  <  0)  {	if  ((csize  -  current.bytesRead)  <  toRead)  {  	non-compiled	[CE]  illegal  start  of  type	17	None	replace
3	[BUG]  [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)  <  =  0)  {  [CE]  illegal  start  of  type  [FE]        arrays  first  differed  [CONTEXT]  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)  <  =  0)  {  [BUGGY]    toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(csize  -  current.bytesRead)  <  =  0)  {	if  ((csize  -  current.bytesRead)  <  toRead)  {  	non-compiled	[CE]  illegal  start  of  type	17	None	replace
4	[BUG]  [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)  <  toRead)  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed  [CONTEXT]  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)  <  toRead)  {  [BUGGY]    toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(csize  -  current.bytesRead)  <  toRead)  {	if  ((csize  -  current.bytesRead)  <  toRead)  {  	non-compiled	[CE]  illegal  start  of  type	17	None	replace
5	[BUG]  [BUGGY]  if(toRead  <  0)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed  [CONTEXT]  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  [BUGGY]  if(toRead  <  0)  {  [BUGGY]    toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0)  {	if  ((csize  -  current.bytesRead)  <  toRead)  {  	non-compiled	[CE]  illegal  start  of  type	17	None	replace
6	[BUG]  [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)  <  size)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed  [CONTEXT]  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)  <  size)  {  [BUGGY]    toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(csize  -  current.bytesRead)  <  size)  {	if  ((csize  -  current.bytesRead)  <  toRead)  {  	non-compiled	[CE]  illegal  start  of  type	17	None	replace
7	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(csize  -  current.bytesRead)  <  toRead)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed  [CONTEXT]  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  [BUGGY]  if(toRead  <  =  0  ||(csize  -  current.bytesRead)  <  toRead)  {  [BUGGY]    toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(csize  -  current.bytesRead)  <  toRead)  {	if  ((csize  -  current.bytesRead)  <  toRead)  {  	non-compiled	[CE]  illegal  start  of  type	17	None	replace
8	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]                  arrays  first  differed  [CONTEXT]  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  [BUGGY]    [BUGGY]    toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	  	if  ((csize  -  current.bytesRead)  <  toRead)  {  	non-compiled	[CE]  illegal  start  of  type	17	None	replace
9	[BUG]  [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)  >=  0)  {  [CE]  illegal  start  of  type  [FE]    arrays  first  differed  [CONTEXT]  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)  >=  0)  {  [BUGGY]    toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(csize  -  current.bytesRead)  >=  0)  {	if  ((csize  -  current.bytesRead)  <  toRead)  {  	non-compiled	[CE]  illegal  start  of  type	17	None	replace
10	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(csize  -  current.bytesRead)  <  0)  {  [CE]  illegal  start  of  type  [FE]      arrays  first  differed  [CONTEXT]  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  [BUGGY]  if(toRead  <  =  0  ||(csize  -  current.bytesRead)  <  0)  {  [BUGGY]    toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(csize  -  current.bytesRead)  <  0)  {	if  ((csize  -  current.bytesRead)  <  toRead)  {  	non-compiled	[CE]  illegal  start  of  type	17	None	replace
11	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(csize  -  current.bytesRead)  <  =  0)  {  [CE]  illegal  start  of  type  [FE]    arrays  first  differed  [CONTEXT]  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  [BUGGY]  if(toRead  <  =  0  ||(csize  -  current.bytesRead)  <  =  0)  {  [BUGGY]    toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(csize  -  current.bytesRead)  <  =  0)  {	if  ((csize  -  current.bytesRead)  <  toRead)  {  	non-compiled	[CE]  illegal  start  of  type	17	None	replace
12	[BUG]  [BUGGY]  if(toRead  <  =  0)  {  [CE]  illegal  start  of  type  [FE]      arrays  first  differed  [CONTEXT]  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  [BUGGY]  if(toRead  <  =  0)  {  [BUGGY]    toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0)  {	if  ((csize  -  current.bytesRead)  <  toRead)  {  	non-compiled	[CE]  illegal  start  of  type	17	None	replace
